// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.rta.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.rta.ControlTreeModifier') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.ControlTreeModifier'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ControlTreeModifier",["sap/ui/fl/changeHandler/JsControlTreeModifier"], function (JsControlTreeModifier) {

	"use strict";

	/**
	 * Implementation of the RTA-specific functionality for the control tree modifier
	 *
	 * @class
	 * @extends sap.ui.fl.changehandler.jsControlTreeModifier
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.ControlTreeModifier
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */

	/* Stack of reversals of previously executed operations, used to perform Undos
	 *   e.g. "destroy" is the reversal of "create control"
	 */
	var _aUndoStack;

	var RtaControlTreeModifier = {

		/**
		 * Start recording operations
		 */
		startRecordingUndo : function() {
			_aUndoStack = [];
		},

		/**
		 * Stop recording operations
		 * @return  {Array} stack of recorded undo operations
		 */
		stopRecordingUndo : function() {
			var aReturnUndoStack = _aUndoStack;
			_aUndoStack = undefined;
			return aReturnUndoStack;
		},

		/**
		 * Execute all recorded undo operations from stack
		 * @param  {Array} aUndoStack stack of recorded undo operations
		 */
		performUndo : function(aUndoStack) {
			while (aUndoStack.length) {
				var oOperation = aUndoStack.pop();
				this[oOperation.name].apply(this, oOperation.properties);
			}
		},

		/**
		 * Add an operation to the undo stack
		 * @param  {string} sFunctionName The name of the function
		 * @param  {any[]} aProperties   The properties related to the function
		 */
		_saveUndoOperation : function(sFunctionName, aProperties) {
			if (_aUndoStack) {
				_aUndoStack.push({
					name : sFunctionName,
					properties : aProperties
				});
			}
		},

		/**
		 * Execute the visibility change from parent and record the opposite visibility as undo operation
		 * @override
		 */
		setVisible : function (oControl, bVisible) {
			var bOldVisible = this.getVisible(oControl);

			var vReturnValue = JsControlTreeModifier.setVisible.apply(this, arguments);

			/* If the visibility changed, record the reversal as undo operation */
			if (bOldVisible !== this.getVisible(oControl)){
				this._saveUndoOperation("setVisible", [oControl, bOldVisible]);
			}

			return vReturnValue;
		},

		/**
		 * Execute the setStashed method and record the opposite value for the undo operation
		 * The control can be a StashedControl ("placeholder") or a "real" control
		 * After the setStashed operation, the placeholder can create a real control with same ID
		 * Therefore we must save the previous ID in order to perform setStashed on this new control when executing the undo
		 * Real controls have getVisible; placeholders have getStashed. For real controls, we only manipulate the visibility, since
		 * once they are created, the stashing is not relevant anymore
		 * @override
		 */
		setStashed: function (oControl, bStashed) {
			var bOldValue;
			var vControlId = oControl.getId();
			if (oControl.getVisible){
				bOldValue = !oControl.getVisible();
			} else {
				bOldValue = oControl.getStashed();
			}

			JsControlTreeModifier.setStashed.apply(this, arguments);

			var oSetControl = sap.ui.getCore().byId(vControlId);

			if (bOldValue !== bStashed) {
				this._saveUndoOperation("setStashed", [oSetControl, !bStashed]);
			}
		},

		/**
		 * Execute the bind property and record unbindProperty as undo operation if property was not previously bound + save property value
		 * If the property had a previous value, this value is restored with the undo
		 * @override
		 */
		bindProperty: function (oControl, sPropertyName, mBindingInfos) {
			var mOldBindingInfos = oControl.getBindingInfo(sPropertyName);
			var vOldValue;

			var oMetadata = oControl.getMetadata().getPropertyLikeSetting(sPropertyName);
			if (oMetadata) {
				var sPropertyGetter = oMetadata._sGetter;
				vOldValue = oControl[sPropertyGetter]();
			}

			JsControlTreeModifier.bindProperty.apply(this, arguments);

			if (mOldBindingInfos){
				this._saveUndoOperation("bindProperty", [oControl, sPropertyName, mOldBindingInfos]);
			} else {
				this._saveUndoOperation("unbindProperty", [oControl, sPropertyName]);
			}
			if (vOldValue) {
				this._saveUndoOperation("setProperty", [oControl, sPropertyName, vOldValue]);
			}
		},


		/**
		 * Unbind a property and record bindProperty as undo operation
		 * @param  {sap.ui.core.Control} oControl  The control containing the property
		 * @param  {string} sPropertyName  The property to be unbound
		 */
		unbindProperty: function (oControl, sPropertyName) {
			var mOldBindingInfos = oControl.getBindingInfo(sPropertyName);

			JsControlTreeModifier.unbindProperty.apply(this, arguments);

			if (mOldBindingInfos){
				this._saveUndoOperation("bindProperty", [oControl, sPropertyName, mOldBindingInfos]);
			}
		},

		/**
		 * Record the previous value of the property in the undo operation
		 * @override
		 */
		setProperty : function (oControl, sPropertyName, oPropertyValue) {
			var vOldValue;

			var oMetadata = oControl.getMetadata().getPropertyLikeSetting(sPropertyName);
			if (oMetadata) {
				var sPropertyGetter = oMetadata._sGetter;
				vOldValue = oControl[sPropertyGetter]();
			}

			var vReturnValue = JsControlTreeModifier.setProperty.apply(this, arguments);

			/* If the value changed, record the reversal as undo operation */
			if (vOldValue !== oPropertyValue){
				this._saveUndoOperation("setProperty", [oControl, sPropertyName, vOldValue]);
			}

			return vReturnValue;
		},

		/**
		 * Record the previous value of the property binding in the undo operation
		 * @override
		 */
		setPropertyBinding : function (oControl, sPropertyName, oPropertyBinding) {
			var oOldValue;
			var oMetadata = oControl.getMetadata().getPropertyLikeSetting(sPropertyName);

			if (oMetadata) {
				var sPropertyGetter = oMetadata._sGetter;
				oOldValue = oControl[sPropertyGetter]();
			}

			JsControlTreeModifier.setPropertyBinding.apply(this, arguments);

			/* If the value changed, record the reversal as undo operation */
			if (oOldValue !== oPropertyBinding) {
				this._saveUndoOperation("setPropertyBinding", [oControl, sPropertyName, oOldValue]);
			}
		},

		/**
		 * Record destroy as undo operation
		 * @override
		 */
		createControl: function (sClassName, oAppComponent, oView, oSelector) {
			var oExistingControl = this.bySelector(oSelector, oAppComponent);

			var vReturnValue = JsControlTreeModifier.createControl.apply(this, arguments);

			if (!oExistingControl) {
				var oCreatedControl = this.bySelector(oSelector, oAppComponent);
				this._saveUndoOperation("destroy", [oCreatedControl]);
			}

			return vReturnValue;
		},

		/**
		 * Controls are never destroyed by the user in RTA (only hidden)
		 * Therefore, there is no need to record an undo operation for destroy
		 * This function is to execute the undo operation of createControl
		 * @param  {sap.ui.core.Control} oControl The control which was created
		 */
		destroy : function(oControl) {
			if (oControl) {
				oControl.destroy();
			}
		},

		/**
		 * Adds an additional item to the aggregation or changes it in case it is not a multiple one
		 * Adds removeAggregation as the undo operation
		 * @override
		 */
		 insertAggregation: function (oParent, sName, oObject, iIndex) {
			var oOldAggregationValue = JsControlTreeModifier.getAggregation.call(this, oParent, sName);

			JsControlTreeModifier.insertAggregation.apply(this, arguments);

			if (oParent) {
				if (oParent.getMetadata) {
					var oMetadata = oParent.getMetadata();
					var oAggregations = oMetadata.getAllAggregations();
					if (oAggregations) {
						var oAggregation = oAggregations[sName];
						if (oAggregation) {
							if (oAggregation.multiple) {
								this._saveUndoOperation("removeAggregation", [oParent, sName, oObject]);
							} else {
								this._saveUndoOperation("insertAggregation", [oParent, sName, oOldAggregationValue]);
							}
						}
					}
				}
			}
		},

		/**
		 * Removes the object from the aggregation of the given control
		 * Adds insertAggregation as the undo operation
		 * The aggregationElements can be an array or a single object (e.g. ToolTip)
		 * @override
		 */
		removeAggregation: function (oParent, sName, oObject) {
			var iOldIndex;
			var oAggregationElements;
			if (oParent && oObject){
				oAggregationElements = JsControlTreeModifier.getAggregation.call(this, oParent, sName);
				if (oAggregationElements){
					oAggregationElements.some(function(oElement, iIndex) {
						if (oElement === oObject){
							iOldIndex = iIndex;
							return true;
						}
					});
				}
			}

			JsControlTreeModifier.removeAggregation.apply(this, arguments);

			if (iOldIndex || iOldIndex === 0) {
				this._saveUndoOperation("insertAggregation", [oParent, sName, oObject, iOldIndex]);
			}
		},

		/**
		 * Removes all objects from an aggregation of the given control
		 * Adds one insertAggregation per removed object as undo operations
		 * @override
		 */
		removeAllAggregation: function (oParent, sName) {
			var aOldAggregationElements = [];
			var vAggregationElements;
			if (oParent) {
				vAggregationElements = JsControlTreeModifier.getAggregation.call(this, oParent, sName);
			}

			if (vAggregationElements && vAggregationElements instanceof Array) {
				aOldAggregationElements = vAggregationElements.slice();
			} else  if (vAggregationElements && vAggregationElements instanceof Object) {
				aOldAggregationElements[0] = vAggregationElements;
			}

			JsControlTreeModifier.removeAllAggregation(oParent, sName);

			if (aOldAggregationElements){
				aOldAggregationElements.forEach(function(oElement) {
					this._saveUndoOperation("insertAggregation", [oParent, sName, oElement]);
				}, this);
			}
		}
	};

	return jQuery.sap.extend(
		true /* deep extend */,
		{} /* target object, to avoid changing of original modifier */,
		JsControlTreeModifier,
		RtaControlTreeModifier
	);
},
/* bExport= */true);

}; // end of sap/ui/rta/ControlTreeModifier.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.Utils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/*global Promise*/
// Provides object sap.ui.rta.Utils.
jQuery.sap.declare('sap.ui.rta.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/Utils",[
	'jquery.sap.global',
	'sap/ui/fl/Utils',
	'sap/ui/dt/OverlayUtil',
	'sap/ui/comp/odata/FieldSelectorModelConverter',
	'sap/ui/fl/registry/Settings'],
	function(jQuery, FlexUtils, OverlayUtil, FieldSelectorModelConverter, Settings) {
		"use strict";

		/**
		 * Class for Utils.
		 *
		 * @class Utility functionality to work with controls, e.g. iterate through aggregations, find parents, etc.
		 *
		 * @author SAP SE
		 * @version 1.46.2
		 *
		 * @private
		 * @static
		 * @since 1.30
		 * @alias sap.ui.rta.Utils
		 * @experimental Since 1.30. This class is experimental and provides only limited functionality.
		 * API of this class might be changed in the future.
		 */

		var Utils = {};

		Utils.RESOLVED_PROMISE = Promise.resolve(true);

		Utils._sFocusableOverlayClass = ".sapUiDtOverlaySelectable";

		/**
		 * Utility function to check if extensibility is enabled in the current system
		 *
		 * @param {sap.ui.core.Control} oControl - Control to be checked
		 * @returns {Promise} resolves a boolean
		 */
		Utils.isExtensibilityEnabledInSystem = function(oControl) {
			var sComponentName = FlexUtils.getComponentClassName(oControl);
			if (!sComponentName || sComponentName == "") {
				return Promise.resolve(false);
			}
			return Settings.getInstance(sComponentName).then(function(oSettings) {
				if (oSettings.isModelS) {
					return oSettings.isModelS();
				}
				return false;
			});
		};

		/**
		 * Utility function for retrieving designtime metadata from the parent for a specified overlay object
		 *
		 * @param {sap.ui.dt.Overlay} oOverlay - Overlay object
		 * @returns {Object|undefined} Metadata object or false if there is no aggregation
		 */
		Utils.getPublicParentDesigntimeMetadata = function(oOverlay) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			if (oPublicParentAggregationOverlay) {
				return oPublicParentAggregationOverlay.getDesignTimeMetadata();
			}
		};

		/**
		 * Utility function to check if the public parent element has a stable id
		 *
		 * @param  {sap.ui.dt.Overlay} oOverlay - Overlay object
		 * @return {boolean} true if parent has stable Id, otherwise false
		 */
		Utils.hasParentStableId = function(oOverlay) {
			var oBlockOverlay = oOverlay.getPublicParentElementOverlay();
			var oBlock = oBlockOverlay ? oBlockOverlay.getElementInstance() : null;

			return oBlock && FlexUtils.checkControlId(oBlock);
		};

		/**
		 * Utility function to check if the OData service is updated in the meantime
		 *
		 * @param {sap.ui.core.Control} oControl - Control to be checked
		 * @returns {Promise} resolves if service is up to date, rejects otherwise
		 */
		Utils.isServiceUpToDate = function(oControl) {
			return this.isExtensibilityEnabledInSystem(oControl).then(function(bEnabled) {
				if (bEnabled) {
					jQuery.sap.require("sap.ui.fl.fieldExt.Access");
					var oModel = oControl.getModel();
					if (oModel) {
						var bServiceOutdated = sap.ui.fl.fieldExt.Access.isServiceOutdated(oModel.sServiceUrl);
						if (bServiceOutdated) {
							sap.ui.fl.fieldExt.Access.setServiceValid(oModel.sServiceUrl);
							//needs FLP to trigger UI restart popup
							sap.ui.getCore().getEventBus().publish("sap.ui.core.UnrecoverableClientStateCorruption","RequestReload",{});
							return Promise.reject();
						}
					}
				}
			});
		};

		/**
		 * Utility function to check via backend calls if the custom field button shall be enabled or not
		 *
		 * @param {sap.ui.core.Control} oControl - Control to be checked
		 * @returns {Boolean} true if CustomFieldCreation functionality is to be enabled, false if not
		 */
		Utils.isCustomFieldAvailable = function(oControl) {
			return this.isExtensibilityEnabledInSystem(oControl).then(function(bShowCreateExtFieldButton) {
				if (!bShowCreateExtFieldButton) {
					return false;
				} else if (!oControl.getModel()) {
					return false;
				} else {
					var sServiceUrl = oControl.getModel().sServiceUrl;
					var sEntityType = this.getBoundEntityType(oControl);
					try {
						jQuery.sap.require("sap.ui.fl.fieldExt.Access");
						var oJQueryDeferred = sap.ui.fl.fieldExt.Access.getBusinessContexts(sServiceUrl,
								sEntityType);
						return Promise.resolve(oJQueryDeferred).then(function(oResult) {
							if (oResult) {
								if (oResult.BusinessContexts) {
									if (oResult.BusinessContexts.length > 0) {
										oResult.EntityType = sEntityType;
										return oResult;
									}
								}
							} else {
								return false;
							}
						}).catch(function(oError){
							if (oError) {
								if (jQuery.isArray(oError.errorMessages)) {
									for (var i = 0; i < oError.errorMessages.length; i++) {
										jQuery.sap.log.error(oError.errorMessages[i].text);
									}
								}
							}
							return false;
						});
					} catch (oError) {
						jQuery.sap.log
								.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts", oError);
						return false;
					}
				}
			}.bind(this));
		};

		/**
		 * Opens a confirmation dialog indicating mandatory fields if necessary.
		 *
		 * @param {Object} oElement - The analyzed control
		 * @param {String} sText - Custom text for the dialog
		 * @return {Promise} The Promise which resolves when popup is closed (via Remove OR Cancel actions)
		 */
		Utils.openRemoveConfirmationDialog = function(oElement, sText) {
			var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
			var sTitle;
			return new Promise(
				function(resolve, reject) {

					sTitle = oTextResources.getText("CTX_REMOVE_TITLE");

					// create some dummy JSON data and create a Model from it
					var data = {
						messageText : sText,
						titleText : sTitle,
						icon : "sap-icon://question-mark",
						removeText : oTextResources.getText("BTN_FREP_REMOVE"),
						cancelText : oTextResources.getText("BTN_FREP_CANCEL")
					};
					var oModel = new sap.ui.model.json.JSONModel();
					oModel.setData(data);

					var oFragmentDialog;
					var fnCleanUp = function() {
						if (oFragmentDialog) {
							oFragmentDialog.close();
							oFragmentDialog.destroy();
							oFragmentDialog = null;
						}
					};

					// create a controller for the action in the Dialog
					var oFragmentController = {
						removeField : function() {
							fnCleanUp();
							resolve(true);
						},
						closeDialog : function() {
							fnCleanUp();
							resolve(false);
						}
					};

					// instantiate the Fragment if not done yet
					if (!oFragmentDialog) {
						oFragmentDialog = sap.ui.xmlfragment("sap.ui.rta.view.RemoveElementDialog", oFragmentController);
						oFragmentDialog.setModel(oModel);
					}
					oFragmentDialog.open();
				}
			);
		};

		/**
		 * Checks if overlay is selectable in RTA (selectable also means focusable for RTA)
		 *
		 * @param {sap.ui.dt.ElementOverlay} oOverlay - Overlay object
		 * @returns {boolean} if it's selectable
		 * @private
		 */
		Utils.isOverlaySelectable = function(oOverlay) {
			// check the real DOM visibility should be preformed while oOverlay.isVisible() can be true, but if element
			// has no geometry, overlay will not be visible in UI
			return oOverlay.isSelectable() && oOverlay.$().is(":visible");
		};

		/**
		 * Utility function for retrieving property values for a specified Element
		 *
		 * @param {sap.ui.core.Element} oElement - Any element
		 * @param {String} sPropertyName - Name of the property
		 * @returns {*} value of the property, could be any value
		 */
		Utils.getPropertyValue = function(oElement, sPropertyName) {
			var oMetadata = oElement.getMetadata().getPropertyLikeSetting(sPropertyName);
			var sPropertyGetter = oMetadata._sGetter;
			return oElement[sPropertyGetter]();
		};

		/**
		 * Returns overlay instance for an overlay's dom element
		 *
		 * @param {document.documentElement} oDomRef - DOM Element
		 * @returns {sap.ui.dt.ElementOverlay} Overlay object
		 * @private
		 */
		Utils.getOverlayInstanceForDom = function(oDomRef) {
			var sId = jQuery(oDomRef).attr("id");
			if (sId) {
				return sap.ui.getCore().byId(sId);
			}
		};

		/**
		 * Returns the focused overlay
		 *
		 * @returns {sap.ui.dt.ElementOverlay} Overlay object
		 * @private
		 */
		Utils.getFocusedOverlay = function() {
			if (document.activeElement) {
				var oElement = sap.ui.getCore().byId(document.activeElement.id);
				if (oElement instanceof sap.ui.dt.ElementOverlay) {
					return oElement;
				}
			}
		};

		/**
		 * Returns the first focusable child overlay
		 *
		 * @param {sap.ui.dt.ElementOverlay} oOverlay - Target overlay object
		 * @returns {sap.ui.dt.ElementOverlay} Found overlay object
		 * @private
		 */
		Utils.getFirstFocusableChildOverlay = function(oOverlay) {
			var oFirstFocusableChildOverlay = OverlayUtil.getFirstChildOverlay(oOverlay);

			while (oFirstFocusableChildOverlay && !this.isOverlaySelectable(oFirstFocusableChildOverlay)) {
				oFirstFocusableChildOverlay = OverlayUtil.getNextSiblingOverlay(oFirstFocusableChildOverlay);
			}
			return oFirstFocusableChildOverlay;
		};

		/**
		 * Returns the next focusable sibling overlay
		 *
		 * @param {sap.ui.dt.ElementOverlay} oOverlay - Target overlay object
		 * @returns {sap.ui.dt.ElementOverlay} Found overlay object
		 * @private
		 */
		Utils.getNextFocusableSiblingOverlay = function(oOverlay) {
			var oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oOverlay);

			while (oNextFocusableSiblingOverlay && !this.isOverlaySelectable(oNextFocusableSiblingOverlay)) {
				oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oNextFocusableSiblingOverlay);
			}
			return oNextFocusableSiblingOverlay;
		};

		/**
		 * Returns the previous focusable sibling overlay
		 *
		 * @param {sap.ui.dt.ElementOverlay} oOverlay - Target overlay object
		 * @returns {sap.ui.dt.ElementOverlay} Found overlay object
		 * @private
		 */
		Utils.getPreviousFocusableSiblingOverlay = function(oOverlay) {
			var oPreviousFocusableSiblingOverlay = OverlayUtil.getPreviousSiblingOverlay(oOverlay);

			while (oPreviousFocusableSiblingOverlay && !this.isOverlaySelectable(oPreviousFocusableSiblingOverlay)) {
				oPreviousFocusableSiblingOverlay = OverlayUtil
						.getPreviousSiblingOverlay(oPreviousFocusableSiblingOverlay);
			}
			return oPreviousFocusableSiblingOverlay;
		};

		/**
		 * Utility function for retrieving Element position in the specified Parent
		 *
		 * @param {sap.ui.core.Element} oParentElement - Parent Element
		 * @param {sap.ui.core.Element} oChildElement - Element which position is being looked for
		 * @param {String} sAggregationName - Aggregation name
		 * @param {Function} [fnGetIndex] - Custom handler for retreiving index
		 * @returns {Number} index of the element
		 */
		Utils.getIndex = function(oParentElement, oChildElement, sAggregationName, fnGetIndex) {
			var iIndex;
			if (fnGetIndex && typeof fnGetIndex === "function") {
				// fnGetIndex usually comes from designtime metadata, so aggregation name is clear and available in it
				iIndex = fnGetIndex.call(null, oParentElement, oChildElement);
			} else {
				var oMetadata = oParentElement.getMetadata();
				var oAggregation = oMetadata.getAggregation(sAggregationName);
				var sGetter = oAggregation._sGetter;
				var aContainers = oParentElement[sGetter]();

				if (oChildElement) {
					iIndex = aContainers.indexOf(oChildElement) + 1;
				} else {
					iIndex = aContainers.length;
				}
			}
			return iIndex;
		};

		/**
		 * Creates a unique id for a new control based on its parent control, entityType and binding path.
		 *
		 * @param {*} oParentControl - Parent control.
		 * @param {String} sEntityType - EntityType which is bound to the parent control
		 * @param {String} sBindingPath - Binding path of the control for which a new Id should be created
		 * @returns {String} New string Id
		 * @private
		 */
		Utils.createFieldLabelId = function(oParentControl, sEntityType, sBindingPath) {
			return (oParentControl.getId() + "_" + sEntityType + "_" + sBindingPath).replace("/", "_");
		};

		/**
		 * Secure extract a label from an element
		 *
		 * @param {sap.ui.core.Element} oElement - Any Object
		 * @param {Function} [fnFunction] - Custom function for retrieving label
		 * @return {String|undefined} Label string or undefined
		 */
		Utils.getLabelForElement = function(oElement, fnFunction) {
			// if there is a function, only the function is executed
			if (fnFunction) {
				return fnFunction(oElement);
			} else {
				// first try getText(), then getlabelText(), if not available try getLabel().getText(), then getTitle(), then getId()
				var sFieldLabel = oElement.getText && oElement.getText();
				if (!sFieldLabel) {
					sFieldLabel = oElement.getLabelText && oElement.getLabelText();
				}
				if (!sFieldLabel) {
					sFieldLabel = oElement.getLabel && oElement.getLabel();
					if (sFieldLabel && sFieldLabel.getText){
						sFieldLabel = sFieldLabel.getText();
					}
				}
				if (!sFieldLabel) {
					sFieldLabel = oElement.getTitle && oElement.getTitle();
				}
				if (!sFieldLabel) {
					sFieldLabel = oElement.getId && oElement.getId();
				}
				return (typeof sFieldLabel) === "string" ? sFieldLabel : undefined;
			}
		};

		/**
		 * Secure extract path for a binding info.
		 *
		 * @param {Object} oInfo - Any Object
		 * @param {Object} mBindingInfo - Object with binding information
		 * @return {String|undefined} The path string or undefined
		 */
		Utils.getPathFromBindingInfo = function(oInfo, mBindingInfo) {
			var sPath = mBindingInfo[oInfo] ? mBindingInfo[oInfo] : undefined;
			if (sPath) {
				if ((sPath.parts instanceof Array) && sPath.parts.length > 0) {
					sPath = sPath.parts[0] ? sPath.parts[0] : undefined;
				}
				sPath = ((typeof sPath.path) === "string") ? sPath.path : sPath;
			}
			if ((typeof sPath) === "string") {
				sPath = sPath;
			} else {
				sPath = undefined;
			}
			return sPath;
		};

		/**
		 * Get the entity type based on the binding of a control
		 *
		 * @param {sap.ui.core.Element} oElement - Any Object
		 * @param {sap.ui.model.odata.ODataModel} oModel - Data model
		 * @return {String} Entity type without namespace
		 */
		Utils.getBoundEntityType = function(oElement, oModel) {
			var _oModel = oModel ? oModel : oElement.getModel();
			var oBindingContext = oElement.getBindingContext();
			if (oBindingContext) {
				var oEntityTypeMetadata = _oModel.oMetadata._getEntityTypeByPath(oBindingContext.getPath());
				return oEntityTypeMetadata.name;
			}
			return "";
		};

		/**
		 * Allow window.open to be stubbed in tests
		 *
		 * @param {String} sUrl - url string
		 */
		Utils.openNewWindow = function(sUrl) {
			window.open(sUrl, "_blank");
		};

		/**
		 * Function to find the binding paths of a given UI5 Element
		 *
		 * @param {sap.ui.core.Element} oElement - Element for which the binding info should be found
		 * @returns {Object} valueProperty: the name of the property which is bound
		 * @private
		 */
		Utils.getElementBindingPaths = function(oElement) {
			var aPaths = {};
			if (oElement.mBindingInfos) {
				for ( var oInfo in oElement.mBindingInfos) {
					var sPath = oElement.mBindingInfos[oInfo].parts[0].path
							? oElement.mBindingInfos[oInfo].parts[0].path
							: "";
					sPath = sPath.split("/")[sPath.split("/").length - 1];
					aPaths[sPath] = {
							valueProperty : oInfo
					};
				}
			}
			return aPaths;
		};

		/**
		 * Function to get the Fiori2 Renderer
		 *
		 * @returns {sap.ushell.renderers.fiori2.Renderer|undefined} renderer or null if there is no one
		 */
		Utils.getFiori2Renderer = function() {
			var oContainer = Utils.getUshellContainer() || {};
			return typeof oContainer.getRenderer === "function" ? oContainer.getRenderer("fiori2") : undefined;
		};

		/**
		 * Function to get the Fiori Container
		 *
		 * @returns {Object|undefined} ushell container or null if there is no one
		 */
		Utils.getUshellContainer = function() {
			return sap.ushell && sap.ushell.Container;
		};

		return Utils;
	}, /* bExport= */true);

}; // end of sap/ui/rta/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BaseCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BaseCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BaseCommand",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BaseCommand = ManagedObject.extend("sap.ui.rta.command.BaseCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				name : {
					type : "string"
				}
			},
			associations : {
				element : {
					type : "sap.ui.core.Element"
				}
			},
			events : {}
		}
	});


	/**
	 * @override returns element instance instead of id
	 */
	BaseCommand.prototype.getElement = function() {
		var sId = this.getAssociation("element");
		return sap.ui.getCore().byId(sId);
	};

	/**
	 * @public Template Method will be called by the command factory when all data is provided to the change
	 */
	BaseCommand.prototype.prepare = function() {
	};

	/**
	 * @public Template Method to implement execute logic, with ensure precondition Element is available
	 */
	BaseCommand.prototype.execute = function() {
	};

	/**
	 * @public Template Method to implement undo logic
	 */
	BaseCommand.prototype.undo = function() {
	};

	/**
	 * @public Template Method to implement undo logic
	 */
	BaseCommand.prototype.isEnabled = function() {
		return true;
	};

	return BaseCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BaseCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CommandFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CommandFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/CommandFactory",['sap/ui/base/ManagedObject', 'sap/ui/dt/ElementUtil', 'sap/ui/fl/registry/ChangeRegistry'],
	function(ManagedObject, ElementUtil, ChangeRegistry) {
	"use strict";

	var fnGetChangeHandler = function(sControlType, sChangeType){
		var oResult = ChangeRegistry.getInstance().getRegistryItems({
			controlType : sControlType,
			changeTypeName : sChangeType
		});

		if (oResult && oResult[sControlType] && oResult[sControlType][sChangeType]) {
			var oRegItem = oResult[sControlType][sChangeType];
			return oRegItem.getChangeTypeMetadata().getChangeHandler();
		} else {
			jQuery.sap.log.warning("No '" + sChangeType + "' change handler for " + sControlType + " registered");
		}
	};

	var fnConfigureActionCommand = function(oElement, oCommand, vAction){
		var sChangeType;
		if (typeof (vAction) === "string"){
			sChangeType = vAction;
		} else {
			sChangeType = vAction && vAction.changeType;
		}

		if (!sChangeType){
			return false;
		}
		var sControlType = oElement.getMetadata().getName();

		var ChangeHandler = fnGetChangeHandler(sControlType, sChangeType);
		if (!ChangeHandler){
			return false;
		}

		oCommand.setChangeHandler(ChangeHandler);
		oCommand.setChangeType(sChangeType);
		return true;
	};

	var fnConfigureCreateContainerCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oNewAddedElement = mSettings.element || sap.ui.getCore().byId(mSettings.element.id);
		var oAction = oDesignTimeMetadata.getAggregationAction("createContainer", oNewAddedElement)[0];
		return oAction;
	};

	var fnConfigureMoveCommand = function(oElement, mSettings, oElementDesignTimeMetadata){
		var sSourceAggregation = mSettings.source.publicAggregation;
		var oAggregationDesignTimeMetadata = oElementDesignTimeMetadata.createAggregationDesignTimeMetadata(sSourceAggregation);
		var oMovedElement = mSettings.movedElements[0].element || sap.ui.getCore().byId(mSettings.movedElements[0].id);
		var oAction = oAggregationDesignTimeMetadata.getMoveAction(oMovedElement);
		oAggregationDesignTimeMetadata.destroy();

		return oAction;
	};

	var fnConfigureRenameCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oRenamedElement = mSettings.renamedElement;
		var oAction = oDesignTimeMetadata.getAction("rename", oRenamedElement);
		return oAction;
	};

	var fnConfigureRemoveCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oRemovedElement = mSettings.removedElement;
		if (!oRemovedElement) {
			oRemovedElement = oElement;
		} else if (!(oRemovedElement instanceof ManagedObject)) {
			throw new Error("No valid 'removedElement' found");
		}
		var oAction = oDesignTimeMetadata.getAction("remove", oRemovedElement);
		return oAction;
	};

	var fnConfigureCombineCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oCombineElement = mSettings.source;
		var oAction = oDesignTimeMetadata.getAction("combine", oCombineElement);
		return oAction;
	};

	var fnConfigureSplitCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oSplitElement = mSettings.source;
		var oAction = oDesignTimeMetadata.getAction("split", oSplitElement);
		return oAction;
	};

	var fnConfigureAddODataPropertyCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oNewAddedElement = mSettings.element;
		var oAction = oDesignTimeMetadata.getAggregationAction("addODataProperty", oNewAddedElement)[0];
		return oAction;
	};

	var fnConfigureRevealCommand = function(oElement, mSettings, oDesignTimeMetadata){
		var oRevealParent = mSettings.hiddenParent;
		var oAction = oDesignTimeMetadata.getAction("reveal", oRevealParent);
		return oAction;
	};

	var mCommands = { 	// Command names camel case with first char lower case
		"composite" : {
			clazz : 'sap.ui.rta.command.CompositeCommand'
		},
		"property" : {
			clazz : 'sap.ui.rta.command.Property'
		},
		"bindProperty" : {
			clazz : 'sap.ui.rta.command.BindProperty'
		},

		/* NEW COMMANDS, ALIGNED WITH A SCALABILITY CONCEPT */
		"createContainer" : {
			clazz : 'sap.ui.rta.command.CreateContainer',
			configure : fnConfigureCreateContainerCommand
		},
		"move" : {
			clazz : 'sap.ui.rta.command.Move',
			configure : fnConfigureMoveCommand
		},
		"remove" : {
			clazz : 'sap.ui.rta.command.Remove',
			configure : fnConfigureRemoveCommand
		},
		"rename" : {
			clazz : 'sap.ui.rta.command.Rename',
			configure : fnConfigureRenameCommand
		},
		"addODataProperty" : {
			clazz : 'sap.ui.rta.command.AddODataProperty',
			configure : fnConfigureAddODataPropertyCommand
		},
		"reveal" : {
			clazz : 'sap.ui.rta.command.Reveal',
			configure : fnConfigureRevealCommand
		},
		"combine" : {
			clazz : 'sap.ui.rta.command.Combine',
			configure : fnConfigureCombineCommand
		},
		"split" : {
			clazz : 'sap.ui.rta.command.Split',
			configure : fnConfigureSplitCommand
		},
		"settings" : {
			clazz : 'sap.ui.rta.command.Settings'
		}
	};


	/**
	 * Factory for commands. Shall handle the control specific command configuration.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CommandFactory
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CommandFactory = ManagedObject.extend("sap.ui.rta.command.CommandFactory", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			associations : {},
			events : {}
		}
	});

	CommandFactory.getCommandFor = function(vElement, sCommand, mSettings, oDesignTimeMetadata) {

		sCommand = sCommand[0].toLowerCase() + sCommand.slice(1); // first char of command name is lower case
		var mCommand = mCommands[sCommand];

		if (!mCommand){
			throw new Error("Command '" + sCommand + "' doesn't exist, check typing");
		}

		var sClassName;
		if (mCommand.findClass) {
			sClassName = mCommand.findClass(vElement, sCommand);
		} else {
			sClassName = mCommand.clazz;
		}

		jQuery.sap.require(sClassName);
		var Command = jQuery.sap.getObject(sClassName);

		var bIsUiElement = vElement instanceof sap.ui.base.ManagedObject;
		mSettings = jQuery.extend(mSettings, {
			element : bIsUiElement ? vElement : undefined,
			selector : bIsUiElement ? undefined : vElement,
			name : sCommand
		});

		var oAction;
		if (mCommand.configure) {
			oAction = mCommand.configure(vElement, mSettings, oDesignTimeMetadata);
		}

		if (oAction && oAction.changeOnRelevantContainer) {
			mSettings = jQuery.extend(mSettings, {
				element : oDesignTimeMetadata.getRelevantContainer(vElement)
			});
			vElement = mSettings.element;
		}

		if (oAction && oAction.getState) {
			mSettings = jQuery.extend(mSettings, {
				fnGetState : oAction.getState
			});
		}

		if (oAction && oAction.restoreState) {
			mSettings = jQuery.extend(mSettings, {
				fnRestoreState : oAction.restoreState
			});
		}

		var oCommand = new Command(mSettings);

		var bSuccessfullConfigured = true; //configuration is optional
		if (mCommand.configure) {
			bSuccessfullConfigured = fnConfigureActionCommand(vElement, oCommand, oAction);
		}

		if (bSuccessfullConfigured){
			oCommand.prepare();
			return oCommand;
		} else {
			oCommand.destroy();
		}
	};

	return CommandFactory;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CommandFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CompositeCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CompositeCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/CompositeCommand",['sap/ui/rta/command/BaseCommand'], function(BaseCommand) {
	"use strict";

	/**
	 * Composite command that can work on multiple simp
	 * 
	 * @class
	 * @extends sap.ui.rta.command.BaseCommand
	 * 
	 * @author SAP SE
	 * @version 1.46.2
	 * 
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CompositeCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CompositeCommand = BaseCommand.extend("sap.ui.rta.command.CompositeCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {}
		}
	});

	CompositeCommand.prototype.execute = function() {
		this._forEachCommand(function(oCommand){
			oCommand.execute();
		});
	};
	
	CompositeCommand.prototype.undo = function() {
		this._forEachCommandInReverseOrder(function(oCommand){
			oCommand.undo();
		});
	};
	
	CompositeCommand.prototype._forEachCommand = function(fnDo) {
		var aCommands = this.getCommands();
		aCommands.forEach(fnDo, this);
	};
	
	CompositeCommand.prototype._forEachCommandInReverseOrder = function(fnDo) {
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i >= 0; i--) {
			fnDo.call(this, aCommands[i]);
			
		}
	};
	return CompositeCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CompositeCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.FlexCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.FlexCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/FlexCommand",['sap/ui/rta/command/BaseCommand', "sap/ui/fl/FlexControllerFactory",
		"sap/ui/rta/ControlTreeModifier", "sap/ui/fl/Utils"], function(BaseCommand, FlexControllerFactory,
		RtaControlTreeModifier, Utils) {
	"use strict";

	/**
	 * Basic implementation for the flexibility commands, that use a flex change handler.
	 *
	 * @class
	 * @extends sap.ui.rta.command.BaseCommand
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.FlexCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var FlexCommand = BaseCommand.extend("sap.ui.rta.command.FlexCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeHandler : {
					type : "any"
				},
				changeType : {
					type : "string"
				},
				/**
				 * getState and restoreState are used for retrieving custom undo/redo implementations from design time metadata
				 */
				fnGetState : {
					type : "any"
				},
				state : {
					type : "any"
				},
				fnRestoreState : {
					type : "any"
				},
				/**
				 * selector object containing id, appComponent and controlType to create a command for an element, which is not instantiated
				 */
				selector : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	/**
	 * Retrives id of element or selector
	 * @public
	 */
	FlexCommand.prototype.getElementId = function() {
		var oElement = this.getElement();
		return oElement ? oElement.getId() : this.getSelector().id;
	};

	/**
	 * Retrives app component of element or selector
	 * @private
	 */
	FlexCommand.prototype.getAppComponent = function() {
		var oElement = this.getElement();
		return oElement ? Utils.getAppComponentForControl(oElement) : this.getSelector().appComponent;
	};

	/**
	 * Prepares and stores change to be applied later
	 * (in some cases element of a command is unstable, so change needs to be created and stored upfront)
	 * @override
	 */
	FlexCommand.prototype.prepare = function() {
		this._oPreparedChange = this._createChange();
	};

	/**
	 * Returns a prepared change
	 * @public
	 */
	FlexCommand.prototype.getPreparedChange = function() {
		if (!this._oPreparedChange) {
			this.prepare();
		}
		return this._oPreparedChange;
	};

	/**
	 * @override
	 */
	FlexCommand.prototype.execute = function() {
		var vChange = this.getPreparedChange();
		this._applyChange(vChange);
	};

	/**
	 * This method converts command constructor parameters into change specific data
	 * Default implementation of this method below is for commands, which do not have specific constructor parameters
	 * @return {object} SpecificChangeInfo for ChangeHandler
	 * @protected
	 */
	FlexCommand.prototype._getChangeSpecificData = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this.getElementId()
			}
		};
	};

	/**
	 * @private
	 */
	FlexCommand.prototype._createChange = function() {
		return this._createChangeFromData(this._getChangeSpecificData());
	};

	/**
	 * Create a Flex change from a given Change Specific Data
	 * (This method can be reused to retrieve an Undo Change)
	 * @private
	 */
	FlexCommand.prototype._createChangeFromData = function(mChangeSpecificData) {
		var oFlexController = FlexControllerFactory.createForControl(this.getAppComponent());
		return oFlexController.createChange(mChangeSpecificData, this.getElement() || this.getSelector());
	};

	/**
	 * @override
	 */
	FlexCommand.prototype.undo = function() {
		//If the command has a "restoreState" implementation, use that to perform the undo
		if (this.getFnRestoreState()){
			this.getFnRestoreState()((this.getElement() || this.getSelector()), this.getState());
		} else if (this._aRecordedUndo) {
			RtaControlTreeModifier.performUndo(this._aRecordedUndo);
		} else {
			jQuery.sap.log.warning("Undo is not available for " + this.getElement() || this.getSelector());
		}

	};

	/**
	 * @private
	 */
	FlexCommand.prototype._applyChange = function(vChange) {
		//TODO: remove the following compatibility code when concept is implemented
		var oChange = vChange.change || vChange;

		var oAppComponent = this.getAppComponent();
		var oSelectorElement = RtaControlTreeModifier.bySelector(oChange.getSelector(), oAppComponent);

		//If the command has a "getState" implementation, use that instead of recording the undo
		if (this.getFnGetState()){
			this.setState.call(this, (this.getFnGetState()(this.getElement() || this.getSelector())));
		} else {
			RtaControlTreeModifier.startRecordingUndo();
		}

		this.getChangeHandler().applyChange(oChange, oSelectorElement, {
			modifier: RtaControlTreeModifier,
			appComponent : oAppComponent
		});

		if (!this.getFnGetState()){
			this._aRecordedUndo = RtaControlTreeModifier.stopRecordingUndo();
		}
	};

	return FlexCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/FlexCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Move') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Move'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Move",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand'], function(jQuery, FlexCommand) {
	"use strict";

	/**
	 * Move Element from one place to another
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Move
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Move = FlexCommand.extend("sap.ui.rta.command.Move", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				movedElements : {
					type : "any[]"
				},
				target : {
					type : "any"
				},
				source : {
					type : "any"
				}
			},
			associations : {},
			events : {}
		}
	});

	/**
	 * @param  {boolean} bIsUndo If is true, then it switches source and target
	 * @override
	 */
	Move.prototype._getChangeSpecificData = function(bIsUndo) {
		var mSource = bIsUndo ? this.getTarget() : this.getSource();
		var mTarget = bIsUndo ? this.getSource() : this.getTarget();
		var oSourceParent = mSource.parent || sap.ui.getCore().byId(mSource.id);

		// replace elements by their id, unify format and help with serialization
		if (mSource.parent) {
			mSource.id = mSource.parent.getId();
			delete mSource.parent;
		}
		if (mTarget.parent) {
			mTarget.id = mTarget.parent.getId();
			delete mTarget.parent;
		}
		var mSpecificInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : oSourceParent.getId()
			},
			source : mSource,
			target : mTarget,
			movedElements : []
		};

		this.getMovedElements().forEach(function(mMovedElement) {
			mSpecificInfo.movedElements.push({
				id : mMovedElement.id || mMovedElement.element.getId(),
				sourceIndex : bIsUndo ? mMovedElement.targetIndex : mMovedElement.sourceIndex,
				targetIndex : bIsUndo ? mMovedElement.sourceIndex : mMovedElement.targetIndex
			});
		});
		return mSpecificInfo;
	};

	Move.prototype.prepare = function() {
		FlexCommand.prototype.prepare.apply(this, arguments);

		this._oPreparedUndoChange = this._createChangeFromData(this._getChangeSpecificData(true));
	};

	Move.prototype.undo = function() {
		this._applyChange(this._oPreparedUndoChange);
	};

	return Move;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Move.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Property') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Property'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Property",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyChangeHandler, Utils) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Property = FlexCommand.extend("sap.ui.rta.command.Property", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newValue : {
					type : "any"
				},
				semanticMeaning : {
					type : "string"
				},
				changeType : {
					type : "string",
					defaultValue : "propertyChange"
				}
			},
			associations : {},
			events : {}
		}
	});

	Property.prototype.init = function() {
		this.setChangeHandler(PropertyChangeHandler);
	};

	Property.prototype._getChangeSpecificData = function() {
		var oElement = this.getElement();
		// general format
		return {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				newValue : this.getNewValue(),
				semantic : this.getSemanticMeaning()
			}
		};
	};

	return Property;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Property.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Remove') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Remove'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Remove",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Remove a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.42
	 * @alias sap.ui.rta.command.Remove
	 * @experimental Since 1.42. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Remove = FlexCommand.extend("sap.ui.rta.command.Remove", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				removedElement : {
					type : "any"
				}
			},
			associations : {},
			events : {}
		}
	});

	Remove.prototype._getChangeSpecificData = function() {
		var oElement = this.getRemovedElement() || this.getElement();

		var mSpecificInfo = {
			changeType : this.getChangeType(),
			removedElement : {
				id : oElement.getId()
			}
		};
		return mSpecificInfo;
	};

	return Remove;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Remove.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Rename') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Rename",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand'], function(jQuery, FlexCommand) {
	"use strict";

	/**
	 * Rename Element from one place to another
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Rename
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = FlexCommand.extend("sap.ui.rta.command.Rename", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				renamedElement : {
					type : "object"
				},
				newValue : {
					type : "string",
					defaultValue : "new text"
				}
			},
			associations : {},
			events : {}
		}
	});

	Rename.prototype._getChangeSpecificData = function() {

		var mSpecificInfo = {
				changeType : this.getChangeType(),
				selector : {
					id : this.getElement().getId()
				},
				renamedElement : {
					id : this.getRenamedElement().getId()
				},
				value : this.getNewValue()
		};

		return mSpecificInfo;
	};

	return Rename;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Reveal') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Reveal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Reveal",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Reveal controls by setting visible to true or unstash them
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.Reveal
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Reveal = FlexCommand.extend("sap.ui.rta.command.Reveal", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				revealedElementId : {
					type : "string"
				},
				hiddenParent : "object"
			}
		}
	});

	Reveal.prototype._getChangeSpecificData = function() {
		var mSpecificChangeInfo = {
			changeType : this.getChangeType()
		};
		if (this.getRevealedElementId()) {
			mSpecificChangeInfo.revealedElementId = this.getRevealedElementId();
		}
		return mSpecificChangeInfo;
	};

	return Reveal;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Reveal.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Settings') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Settings'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Settings",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Settings = FlexCommand.extend("sap.ui.rta.command.Settings", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				content : {
					type : "any"
				}
			},
			associations : {},
			events : {}
		}
	});


	Settings.prototype._getChangeSpecificData = function(bForward) {

		var mSpecificInfo = {
				changeType : this.getChangeType(),
				content : this.getContent()
		};

		return mSpecificInfo;
	};


	/**
	 * @override
	 */
	Settings.prototype.execute = function() {
		if (this.getElement()) {
			FlexCommand.prototype.execute.apply(this, arguments);
		}
	};

	/**
	 * @override
	 */
	Settings.prototype.undo = function() {
		if (this.getElement()) {
			FlexCommand.prototype.undo.apply(this, arguments);
		}
	};

	return Settings;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Settings.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Split') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Split'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Split",[
	'sap/ui/rta/command/FlexCommand'
], function(FlexCommand) {
	"use strict";

	/**
	 * Split a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.46
	 * @alias sap.ui.rta.command.Split
	 * @experimental Since 1.46. This class is experimental and provides only limited functionality. Also the API might be
	 *							 changed in future.
	 */
	var Split = FlexCommand.extend("sap.ui.rta.command.Split", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				newElementIds : {
					type : "string[]"
				},
				source : {
					type : "any"
				},
				parentElement : {
					type : "any"
				}
			},
			associations : {},
			events : {}
		}
	});

	/**
	 * @override
	 */
	Split.prototype._getChangeSpecificData = function() {
		var mSpecificInfo = {
				newElementIds : this.getNewElementIds(),
				sourceControlId : this.getSource().getId(),
				changeType : this.getChangeType(),
				parentId : this.getParentElement().getId()
		};
		return mSpecificInfo;
	};

	return Split;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Split.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Stack') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Stack'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Stack",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command stack pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Stack
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Stack = ManagedObject.extend("sap.ui.rta.command.Stack", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {
				modified : {}
			}
		}
	});

	Stack.prototype._toBeExecuted = -1;

	Stack.prototype._getCommandToBeExecuted = function() {
		return this.getCommands()[this._toBeExecuted];
	};

	/**
	 * Allows to push a command on the stack that has already been executed and shouldn't be executed next
	 */
	Stack.prototype.pushExecutedCommand = function(oCommand) {
		this.push(oCommand, true);
	};

	Stack.prototype.push = function(oCommand, bExecuted) {
		// undone commands have to be removed as a new command is added
		if (this._bUndoneCommands) {
			this._bUndoneCommands = false; // distinguish undone commands from not yet executed commands
			while (this._toBeExecuted > -1) {
				this.pop();
			}
		}
		this.insertCommand(oCommand, 0);
		if (!bExecuted) {
			this._toBeExecuted++;
		}
		this.fireModified();
	};

	Stack.prototype.top = function() {
		return this.getCommands()[0];
	};

	Stack.prototype.pop = function() {
		if (this._toBeExecuted > -1) {
			this._toBeExecuted--;
		}
		return this.removeCommand(0);
	};

	Stack.prototype.removeCommand = function(vObject, bSuppressInvalidate) {
		var oRemovedCommand = this.removeAggregation("commands", vObject, bSuppressInvalidate);
		this.fireModified();
		return oRemovedCommand;
	};

	Stack.prototype.removeAllCommands = function(bSuppressInvalidate) {
		var aCommands = this.removeAllAggregation("commands", bSuppressInvalidate);
		this._toBeExecuted = -1;
		this.fireModified();
		return aCommands;
	};

	Stack.prototype.isEmpty = function() {
		return this.getCommands().length === 0;
	};

	Stack.prototype.execute = function() {
		var oCommand = this._getCommandToBeExecuted();
		if (oCommand) {
			try {
				oCommand.execute();
			} catch (oError) {
				this.pop(); // remove failing command
				throw (oError);
			}
			this._toBeExecuted--;
			this.fireModified();
		}
	};

	Stack.prototype._unExecute = function() {
		if (this.canUndo()) {
			this._bUndoneCommands = true;
			this._toBeExecuted++;
			var oCommand = this._getCommandToBeExecuted();
			if (oCommand) {
				oCommand.undo();

				this.fireModified();
			}
		}
	};

	Stack.prototype.canUndo = function() {
		return (this._toBeExecuted + 1) < this.getCommands().length;
	};

	Stack.prototype.undo = function() {
		this._unExecute();
	};

	Stack.prototype.canRedo = function() {
		return !!this._getCommandToBeExecuted();
	};

	Stack.prototype.redo = function() {
		this.execute();
	};

	Stack.prototype.pushAndExecute = function(oCommand) {
		this.push(oCommand);
		this.execute();
	};

	/**
	 * Decomposite all executed commands from the stack
	 */
	Stack.prototype.getAllExecutedCommands = function() {
		var aAllExecutedCommands = [];
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i > this._toBeExecuted; i--) {
			var aSubCommands = this._getSubCommands(aCommands[i]);
			aAllExecutedCommands = aAllExecutedCommands.concat(aSubCommands);
		}
		return aAllExecutedCommands;
	};

	/**
	 * Decomposite command to subcommands (composite commands will be splitted into array of regular commands)
	 */
	Stack.prototype._getSubCommands = function(oCommand) {
		var aCommands = [];
		if (oCommand.getCommands) {
			oCommand.getCommands().forEach(function(oSubCommand) {
				var aSubCommands = this._getSubCommands(oSubCommand);
				aCommands = aCommands.concat(aSubCommands);
			}, this);
		} else {
			aCommands.push(oCommand);
		}

		return aCommands;
	};

	return Stack;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Stack.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.rta.
 */
jQuery.sap.declare('sap.ui.rta.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library'],
	function(jQuery, Core, coreLibrary) {
	"use strict";

	/**
	 * SAPUI5 library with RTA controls.
	 *
	 * @namespace
	 * @name sap.ui.rta
	 * @public
	 */


	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.rta",
		version: "1.46.2",
		dependencies : ["sap.ui.core","sap.m", "sap.ui.fl", "sap.ui.dt"],
		types: [
		],
		interfaces: [],
		controls: [],
		elements: [
		]
	});

	return sap.ui.rta;

}, /* bExport= */ true);
}; // end of sap/ui/rta/library.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Plugin') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.dt.Plugin.
jQuery.sap.declare('sap.ui.rta.plugin.Plugin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Plugin",[
	'sap/ui/dt/Plugin', 'sap/ui/fl/Utils', 'sap/ui/fl/registry/ChangeRegistry'
],
function(Plugin, FlexUtils, ChangeRegistry) {
	"use strict";

	/**
	 * Constructor for a new Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The Plugin allows to handle the overlays and aggregation overlays from the DesignTime
	 * The Plugin should be overriden by the real plugin implementations, which define some actions through events attached to an overlays
	 * @extends sap.ui.dt.Plugin
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.46
	 * @alias sap.ui.rta.plugin.Plugin
	 * @experimental Since 1.46. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */

	var BasePlugin = Plugin.extend("sap.ui.rta.plugin.Plugin", /** @lends sap.ui.dt.Plugin.prototype */ {
		metadata : {
			"abstract" : true,
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				userDependentMode: {
					type: "boolean",
					defaultValue: false
				},

				commandFactory : {
					type : "object",
					multiple : false
				}
			},
			events : {
				elementModified : {
					command : {
						type : "sap.ui.rta.command.BaseCommand"
					}
				}
			}
		}
	});

	BasePlugin.prototype._isEditable = function() {};

	BasePlugin.prototype._isEditableByPlugin = function(oOverlay) {
		var sPluginName = this.getMetadata().getName();
		var aPluginList = oOverlay.getEditableByPlugins();
		return aPluginList.indexOf(sPluginName) > -1;
	};

	BasePlugin.prototype.registerElementOverlay = function(oOverlay) {
		if (this._isEditable(oOverlay)) {
			this.addToPluginsList(oOverlay);
		}
	};

	BasePlugin.prototype.deregisterElementOverlay = function(oOverlay) {
		this.removeFromPluginsList(oOverlay);
	};

	BasePlugin.prototype.hasStableId = function(oOverlay) {
		var bStable = false;
		var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		var oElement = oOverlay.getElementInstance();
		var oParentDesignTimeMetadata = oOverlay.getPublicParentAggregationOverlay() ? oOverlay.getPublicParentAggregationOverlay().getDesignTimeMetadata() : null;

		if (!oParentDesignTimeMetadata && oOverlay.isInHiddenTree()) {
			return false;
		}

		var fnGetStableElements;
		if (oOverlay.isInHiddenTree()) {
			fnGetStableElements = oParentDesignTimeMetadata.getData().getStableElements;
		} else {
			fnGetStableElements = oDesignTimeMetadata.getData().getStableElements;
		}
		if (fnGetStableElements) {
			var aStableElements = fnGetStableElements(oElement);
			var bUnstable = aStableElements ? aStableElements.some(function(vStableElement) {
				var oControl = vStableElement.id || vStableElement;
				if (!FlexUtils.checkControlId(oControl, vStableElement.appComponent)) {
					return true;
				}
			}) : true;
			bStable = !bUnstable;
		} else {
			bStable = FlexUtils.checkControlId(oElement);
		}
		return bStable;
	};

	/**
	 * Recursively checks the Aggregations on the Relevant Container Overlay of an Overlay for a specific Action
	 * @name sap.ui.rta.plugin.Plugin.prototype.checkAggregations
	 * @return {boolean} whether the Aggregation has a valid Action
	 * @protected
	 */
	BasePlugin.prototype.checkAggregations = function(oOverlay, oRelevantContainerOverlay, sAction) {
		var bIsEditable = false;

		var fnCheckWhenOverlayIsRelevantContainerOverlay = function(oTargetOverlay, oPreviousOverlay) {
			if (oTargetOverlay === oRelevantContainerOverlay) {
				var oAction, sChangeType;
				if (oPreviousOverlay.isInHiddenTree()) {
					oAction = oPreviousOverlay.getDesignTimeMetadata().getAction(sAction, oOverlay.getElementInstance());
				} else {
					oAction = oPreviousOverlay.getDesignTimeMetadata().getAction(sAction, oTargetOverlay.getElementInstance());
				}

				sChangeType = oAction ? oAction.changeType : null;

				var oElement = oRelevantContainerOverlay.getElementInstance();

				if (sChangeType && this.hasChangeHandler(sChangeType, oElement)) {
					bIsEditable = true;
				}
			} else {
				return fnCheckWhenOverlayIsRelevantContainerOverlay.bind(this, oTargetOverlay.getParent(), oTargetOverlay)();
			}
		};

		fnCheckWhenOverlayIsRelevantContainerOverlay.bind(this, oOverlay)();

		return bIsEditable;
	};

	/**
	 * Checks the Aggregations on the Overlay for a specific Action
	 * @name sap.ui.rta.plugin.Plugin.prototype.checkAggregationsOnSelf
	 * @return {boolean} whether the Aggregation has a valid Action
	 * @protected
	 */
	BasePlugin.prototype.checkAggregationsOnSelf = function (oOverlay, sAction) {
		var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		var oElement = oOverlay.getElementInstance();
		var bIsEditable = false;

		var oAction = oDesignTimeMetadata.getAggregationAction(sAction, oOverlay.getElementInstance())[0];
		var sChangeType = oAction ? oAction.changeType : null;

		if (sChangeType && this.hasChangeHandler(sChangeType, oElement)) {
			bIsEditable = true;
		}

		return bIsEditable;
	};

	BasePlugin.prototype.removeFromPluginsList = function(oOverlay) {
		oOverlay.removeEditableByPlugin(this.getMetadata().getName());
		if (!oOverlay.getEditableByPlugins().length) {
			oOverlay.setEditable(false);
		}
	};

	BasePlugin.prototype.addToPluginsList = function(oOverlay) {
		oOverlay.addEditableByPlugin(this.getMetadata().getName());
		oOverlay.setEditable(true);
	};

	BasePlugin.prototype.hasChangeHandler = function(sChangeType, oElement) {
		var bHasChangeHandler = false;
		var sControlType = oElement.getMetadata().getName();
		var oResult = ChangeRegistry.getInstance().getRegistryItems({
			controlType : sControlType,
			changeTypeName : sChangeType
		});
		if (oResult && oResult[sControlType] && oResult[sControlType][sChangeType]) {
			var oRegItem = oResult[sControlType][sChangeType];
			bHasChangeHandler = !!oRegItem.getChangeTypeMetadata().getChangeHandler();
		}

		return bHasChangeHandler;
	};

	return BasePlugin;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/Plugin.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.RTAElementMover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.RTAElementMover.
jQuery.sap.declare('sap.ui.rta.plugin.RTAElementMover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.plugin.ElementMover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/RTAElementMover",[
  'sap/ui/dt/plugin/ElementMover',
	'sap/ui/dt/OverlayUtil',
	'sap/ui/dt/ElementUtil',
	'sap/ui/fl/Utils',
	'sap/ui/rta/Utils',
	'sap/ui/rta/command/CommandFactory',
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/dt/OverlayRegistry'
],
function(ElementMover, OverlayUtil, ElementUtil, FlexUtils, Utils, CommandFactory, Plugin, OverlayRegistry) {
	"use strict";

	/**
	 * Constructor for a new RTAElementMover.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The RTAElementMover is responsible for the RTA specific adaptation of element movements.
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.RTAElementMover
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RTAElementMover = ElementMover.extend("sap.ui.rta.plugin.RTAElementMover", /** @lends sap.ui.rta.plugin.RTAElementMover.prototype */ {
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				commandFactory : {
					type : "any",
					defaultValue : CommandFactory
				},
				movableTypes : {
					type : "string[]",
					defaultValue : ["sap.ui.core.Element"]
				}
			},
			associations : {
			},
			events : {
			}
		}
	});

	/**
	 * Returns the relevant container for the move based on the passed overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay The overlay for which to retrieve the relevant container
	 * @param  {boolean} bIsParentOverlay If the passed overlay is a parent or not
	 * @return {sap.ui.core.Element} The relevant container for the overlay
	 */
	function fnGetRelevantContainer(oOverlay, bIsParentOverlay) {
		var oRelevantContainer;
		if (oOverlay.isInHiddenTree() && oOverlay.getPublicParentElementOverlay()) {
			oRelevantContainer = oOverlay.getPublicParentElementOverlay().getElementInstance();
		} else if (!oOverlay.isInHiddenTree()) {
			var oElement = oOverlay.getElementInstance();
			var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
			if (bIsParentOverlay && !oDesignTimeMetadata.getData().getRelevantContainer) {
				oRelevantContainer = oElement;
			} else {
				oRelevantContainer = oDesignTimeMetadata.getRelevantContainer(oElement);
			}
		}
		return oRelevantContainer;
	}

	/**
	 * Check if the element is editable for the move
	 * @param  {sap.ui.dt.Overlay}  oOverlay The overlay being moved or the aggregation overlay
	 * @param  {[type]}  oMovedElement The element being moved if the aggregation overlay is present
	 * @return {Boolean} true if editable
	 */
	function fnIsValidForMove(oOverlay) {
		var bValid = false;
		var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();

		if (!oDesignTimeMetadata) {
			return false;
		}

		var oRelevantContainer = fnGetRelevantContainer(oOverlay);
		var oParentDesignTimeMetadata;

		var oRelevantContainerOverlay = sap.ui.dt.OverlayRegistry.getOverlay(oRelevantContainer);
		if (oRelevantContainerOverlay) {
			oParentDesignTimeMetadata = oRelevantContainerOverlay.getDesignTimeMetadata();
		}
		if (!oParentDesignTimeMetadata) {
			return false;
		}

		if (!bValid) {
			bValid = Plugin.prototype.checkAggregations(oOverlay, oRelevantContainerOverlay, "move");
		}

		if (bValid) {
			if (!oOverlay.isInHiddenTree()) {
				bValid = Plugin.prototype.hasStableId(oOverlay) && Plugin.prototype.hasStableId(oRelevantContainerOverlay) && Plugin.prototype.hasStableId(oOverlay.getParentElementOverlay());
			} else {
				bValid = Plugin.prototype.hasStableId(oOverlay) && Plugin.prototype.hasStableId(oRelevantContainerOverlay);
			}
		}

		return bValid;
	}

	function fnHasMoveAction(oAggregationOverlay, oElement) {
		var oPublicAggregationDTMetadata = oAggregationOverlay.getDesignTimeMetadata();
		return !!oPublicAggregationDTMetadata.getMoveAction(oElement);
	}

	function fnHasParentAggregationMoveAction(oOverlay, oElement) {
		var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
		if (oPublicParentAggregationOverlay){
			return fnHasMoveAction(oPublicParentAggregationOverlay, oElement);
		}
		return false;
	}

	/**
	 * Predicate to compute movability of a type
	 * @param {any} oElement given element
	 * @public
	 * @return {boolean} true if type is movable, false otherwise
	 */
	ElementMover.prototype.isMovableType = function(oElement) {
		//real check is part of checkMovable which has the overlay
		return true;
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if embedded, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkMovable = function(oOverlay) {
		return fnIsValidForMove(oOverlay);
	};

	/**
	 * Checks drop ability for aggregation overlays
	 * @param  {sap.ui.dt.Overlay} oAggregationOverlay aggregation overlay object
	 * @return {boolean} true if aggregation overlay is droppable, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkTargetZone = function(oAggregationOverlay) {
		var bTargetZone = ElementMover.prototype.checkTargetZone.call(this, oAggregationOverlay);
		var bValid, bMovable = false;
		var oMovedOverlay, oTargetOverlay;
		var oMovedElement, oTargetElement, oMovedElementContainer, oTargetZoneRelevantContainer;

		if (bTargetZone) {
			// check for same container
			oMovedOverlay = this.getMovedOverlay();
			oTargetOverlay = oAggregationOverlay.getParent();
			oMovedElementContainer = fnGetRelevantContainer(oMovedOverlay, false);
			oTargetZoneRelevantContainer = fnGetRelevantContainer(oTargetOverlay, true);

			if (!oMovedElementContainer || !oTargetZoneRelevantContainer) {
				return false;
			} else {
				oMovedElement = oMovedOverlay.getElementInstance();
				oTargetElement = oTargetOverlay.getElementInstance();

				bValid = fnIsValidForMove(oMovedOverlay);

				if (oTargetElement === oTargetZoneRelevantContainer) {
					bMovable = fnHasMoveAction(oAggregationOverlay, oMovedElement);
				} else {
					bMovable = fnHasParentAggregationMoveAction(oTargetOverlay, oMovedElement);
				}
				bTargetZone = (oMovedElementContainer === oTargetZoneRelevantContainer) && bValid && bMovable;
			}
		}

		return bTargetZone;
	};

	/**
	 * Builds the Move command
	 * @return {any} Move command object
	 */
	RTAElementMover.prototype.buildMoveCommand = function() {

		var oMovedOverlay = this.getMovedOverlay();
		var oMovedElement = oMovedOverlay.getElementInstance();
		var oSource = this._getSource();
		var oPublicSourceParent = oSource.publicParent;
		var oSourceParentOverlay = OverlayRegistry.getOverlay(oPublicSourceParent);
		var oTarget = OverlayUtil.getParentInformation(oMovedOverlay);
		var iSourceIndex = oSource.index;
		var iTargetIndex = oTarget.index;

		var bSourceAndTargetAreSame = this._compareSourceAndTarget(oSource, oTarget);

		if (bSourceAndTargetAreSame) {
			return undefined;
		}
		delete oSource.index;
		delete oTarget.index;

		var oMove = this.getCommandFactory().getCommandFor(oPublicSourceParent, "Move", {
			movedElements : [{
				element : oMovedElement,
				sourceIndex : iSourceIndex,
				targetIndex : iTargetIndex
			}],
			source : oSource,
			target : oTarget
		}, oSourceParentOverlay.getDesignTimeMetadata());

		return oMove;

	};

	return RTAElementMover;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/RTAElementMover.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Remove') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Remove.
jQuery.sap.declare('sap.ui.rta.plugin.Remove'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/plugin/Remove",[
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/rta/Utils',
	'sap/ui/rta/command/CompositeCommand'

], function(Plugin, Utils, CompositeCommand) {
	"use strict";

	/**
	 * Constructor for a new Remove Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Remove allows trigger remove operations on the overlay
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Remove
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Remove = Plugin.extend("sap.ui.rta.plugin.Remove", /** @lends sap.ui.rta.plugin.Remove.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * Register browser event for an overlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Remove.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);

		Plugin.prototype.registerElementOverlay.apply(this, arguments);
	};

	/**
	 * @private
	 */
	Remove.prototype._isEditable = function(oOverlay) {
		var bEditable = false;
		var oElement = oOverlay.getElementInstance();

		var oParentDesignTimeMetadata = Utils.getPublicParentDesigntimeMetadata(oOverlay);
		if (!oParentDesignTimeMetadata) {
			return false;
		}

		var oRemoveAction = this._getRemoveAction(oOverlay);
		if (oRemoveAction && oRemoveAction.changeType) {
			if (oOverlay.isInHiddenTree()) {
				bEditable = this.hasChangeHandler(oRemoveAction.changeType, oOverlay.getPublicParentElementOverlay().getElementInstance());
			} else {
				bEditable = this.hasChangeHandler(oRemoveAction.changeType, oElement);
			}
		}

		if (bEditable) {
			return this.hasStableId(oOverlay);
		}

		return bEditable;
	};

	/**
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @returns {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Remove.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @param	{sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Remove.prototype._getRemoveAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("remove", oOverlay.getElementInstance());
	};

	/**
	 * Checks if remove is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if available
	 * @public
	 */
	Remove.prototype.isRemoveAvailable = function(oOverlay) {
		return this._isEditableByPlugin(oOverlay);
	};

	/**
	 * Checks if remove is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if enabled
	 * @public
	 */
	Remove.prototype.isRemoveEnabled = function(oOverlay) {
		var oAction = this._getRemoveAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {String}          confirmation text
	 * @private
	 */
	Remove.prototype._getConfirmationText = function(oOverlay) {
		var oAction = this._getRemoveAction(oOverlay);
		if (oAction && oAction.getConfirmationText) {
			return oAction.getConfirmationText(oOverlay.getElementInstance());
		}
	};

	/**
	 * Detaches the browser events
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Remove.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);

		Plugin.prototype.deregisterElementOverlay.apply(this, arguments);
	};

	/**
	 * Handle keydown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Remove.prototype._onKeyDown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.DELETE) {
			oEvent.stopPropagation();
			this.removeElement();
		}
	};

	/**
	 * The selected (not the focused) element should be hidden!
	 * @param {array} aOverlays overlay array
	 * @private
	 */
	Remove.prototype.removeElement = function(aOverlays) {
		var aSelection;
		if (aOverlays){
			aSelection = aOverlays;
		} else {
			var oDesignTime = this.getDesignTime();
			aSelection = oDesignTime.getSelection();
		}

		if (aSelection.length > 0) {
			this._handleRemove( aSelection );
		}
	};

	Remove.prototype._getRemoveCommand = function(oElement, oRemovedElement, oDesignTimeMetadata) {
		return this.getCommandFactory().getCommandFor(oElement, "Remove", {
			removedElement : oRemovedElement
		}, oDesignTimeMetadata);
	};

	Remove.prototype._fireElementModified = function(oCompositeCommand) {
		if (oCompositeCommand.getCommands().length) {
			this.fireElementModified({
				"command" : oCompositeCommand
			});
		}
	};

	Remove.prototype._handleRemove = function(aSelectedOverlays) {
		var aPromises = [];
		var oCompositeCommand = new CompositeCommand();

		aSelectedOverlays.forEach(function(oOverlay) {
			var oCommand;

			var oRemovedElement = oOverlay.getElementInstance();

			var oElement;
			var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oOverlay);
			if (oOverlay.isInHiddenTree()) {
				oElement = oOverlay.getPublicParentElementOverlay().getElementInstance();
			} else {
				oElement = oRemovedElement;
			}

			if (this.isRemoveEnabled(oOverlay)) {
				var sConfirmationText = this._getConfirmationText(oOverlay);
				if (sConfirmationText) {
					aPromises.push(
						Utils.openRemoveConfirmationDialog(oRemovedElement, sConfirmationText)
						.then(function(bConfirmed) {
							if (bConfirmed) {
								oCommand = this._getRemoveCommand(oElement, oRemovedElement, oDesignTimeMetadata);
								oCompositeCommand.addCommand(oCommand);
							}
						}.bind(this))
					);
				} else {
					oCommand = this._getRemoveCommand(oElement, oRemovedElement, oDesignTimeMetadata);
					oCompositeCommand.addCommand(oCommand);
				}
			}
		}, this);

		// since Promise.all is always asynchronous, we want to call it only if at least one promise exists
		if (aPromises.length) {
			Promise.all(aPromises).then(function() {
				this._fireElementModified(oCompositeCommand);
			}.bind(this));
		} else {
			this._fireElementModified(oCompositeCommand);
		}
	};

	return Remove;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Remove.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Rename') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Rename.
jQuery.sap.declare('sap.ui.rta.plugin.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DOMUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Rename",['jquery.sap.global', 'sap/ui/rta/plugin/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/dt/OverlayUtil',
		'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/dt/DOMUtil'],
		function(jQuery, Plugin, ElementUtil, OverlayUtil, OverlayRegistry, Utils, DOMUtil) {
	"use strict";

	/**
	 * Constructor for a new Rename.
	 *
	 * @param {string}
	 *          [sId] id for the new object, generated automatically if no id is given
	 * @param {object}
	 *          [mSettings] initial settings for the new object
	 *
	 * @class The Rename allows to create a set of Overlays above the root elements and their public children and manage
	 *        their events.
	 * @extends sap.ui.rta.plugin.Plugin
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.Rename
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = Plugin.extend("sap.ui.rta.plugin.Rename", /** @lends sap.ui.rta.plugin.Rename.prototype */
	{
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				oldValue : "string"
			},
			associations : {},
			events : {
				/** Fired when renaming is possible */
				"editable" : {},

				/** Fired when renaming is switched off */
				"nonEditable" : {}
			}
		}
	});

	/**
	 * @override
	 */
	Rename.prototype.exit = function() {
		Plugin.prototype.exit.apply(this, arguments);

		if (this._$oEditableControlDomRef) {
			this._stopEdit();
		}

		clearTimeout(this._iStopTimeout);
	};

	/**
	 * @override
	 */
	Rename.prototype.setDesignTime = function(oDesignTime) {
		this._aSelection = [];
		var oOldDesignTime = this.getDesignTime();

		if (oOldDesignTime) {
			oOldDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
		}
		Plugin.prototype.setDesignTime.apply(this, arguments);

		if (oDesignTime) {
			oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
			this._aSelection = oDesignTime.getSelection();
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			if (oPublicParentAggregationOverlay) {
				oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
			}
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @private
	 */
	Rename.prototype._getRenameAction = function(oOverlay) {
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oOverlay);
		if (oDesignTimeMetadata && oDesignTimeMetadata.getAction) {
			return oDesignTimeMetadata.getAction("rename", oOverlay.getElementInstance());
		}
	};

	/**
	 * Checks if rename is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Rename.prototype.isRenameAvailable = function(oOverlay) {
		return this._isEditableByPlugin(oOverlay);
	};

	/**
	 * Checks if rename is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Rename.prototype.isRenameEnabled = function(oOverlay) {
		var oAction = this._getRenameAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};

	/**
	 * @override
	 */
	Rename.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachEvent("editableChange", this._manageClickEvent, this);


		Plugin.prototype.registerElementOverlay.apply(this, arguments);
	};

	/**
	 * @private
	 */
	Rename.prototype._isEditable = function(oOverlay) {
		var bEditable = false;
		var oElement = oOverlay.getElementInstance();

		if (!Utils.getPublicParentDesigntimeMetadata(oOverlay)) {
			return false;
		}

		var oRenameAction = this._getRenameAction(oOverlay);
		if (oRenameAction && oRenameAction.changeType) {
			if (oOverlay.isInHiddenTree()) {
				bEditable = this.hasChangeHandler(oRenameAction.changeType, oOverlay.getPublicParentElementOverlay().getElementInstance());
			} else {
				bEditable = this.hasChangeHandler(oRenameAction.changeType, oElement);
			}
		}

		if (bEditable) {
			return this.hasStableId(oOverlay);
		}

		return bEditable;
	};

	/**
	 * @override
	 */
	Rename.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachEvent("editableChange", this._manageClickEvent, this);
		oOverlay.detachBrowserEvent("click", this._onClick, this);

		this.removeFromPluginsList(oOverlay);
	};

	/**
	 * @private
	 */
	Rename.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (this.isRenameEnabled(oOverlay)) {
			this.startEdit(oOverlay);
			oEvent.preventDefault();
		}
	};

	/**
	 * @override
	 */
	Rename.prototype._onDesignTimeSelectionChange = function(oEvent) {
        var aSelection = oEvent.getParameter("selection");

        // detach events from previous selection
        this._aSelection.forEach(this._manageClickEvent, this);
        // attach events to the new selection
        aSelection.forEach(this._manageClickEvent, this);

        this._aSelection = aSelection;
	};


	/**
	 * @override
	 */
	Rename.prototype._manageClickEvent = function(vEventOrElement) {
		var oOverlay = vEventOrElement.getSource ? vEventOrElement.getSource() : vEventOrElement;
		if (oOverlay.isSelected() && this.isRenameAvailable(oOverlay)) {
			oOverlay.attachBrowserEvent("click", this._onClick, this);
		} else {
			oOverlay.detachBrowserEvent("click", this._onClick, this);
		}
	};

	/**
	 * [startEdit description]
	 *
	 * @param {[type]}
	 *          oOverlay [description]
	 * @return {[type]} [description]
	 * @public
	 */
	Rename.prototype.startEdit = function(oOverlay) {

		this._oEditedOverlay = oOverlay;

		var oElement = oOverlay.getElementInstance();
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(this._oEditedOverlay);
		var vDomRef = oDesignTimeMetadata.getAction("rename", oElement).domRef;

		var oEditableControlDomRef = oDesignTimeMetadata.getAssociatedDomRef(oElement, vDomRef);

		this._$oEditableControlDomRef = jQuery(oEditableControlDomRef);

		var oEditableControlOverlay = sap.ui.dt.OverlayRegistry.getOverlay(oEditableControlDomRef.id) || oOverlay;

		var oWrapper = jQuery("<div class='sapUiRtaEditableField'></div>").appendTo(oEditableControlOverlay.$());
		this._$editableField = jQuery("<div contentEditable='true'></div>").appendTo(oWrapper);

		// if label is empty, set a preliminary dummy text at the control to get an overlay
		if (this._$oEditableControlDomRef.text() === "") {
			this._$oEditableControlDomRef.text("_?_");
			this._$editableField.text("");
		} else {
			this._$editableField.text(this._$oEditableControlDomRef.text());
		}

		DOMUtil.copyComputedStyles(this._$oEditableControlDomRef, this._$editableField);
		this._$editableField.children().remove();
		this._$editableField.offset({ left: this._$oEditableControlDomRef.offset().left - 1 });
		this._$editableField.offset({ top: this._$oEditableControlDomRef.offset().top - 1 });

		// TODO : for all browsers
		this._$editableField.css({
			"-moz-user-modify" : "read-write",
			"-webkit-user-modify" : "read-write",
			"-ms-user-modify" : "read-write",
			"user-modify" : "read-write",
			"text-overflow" : "clip"
		});

		this._$oEditableControlDomRef.css("visibility", "hidden");

		this._$editableField.one("focus", this._onEditableFieldFocus.bind(this));

		this._$editableField.on("blur", this._onEditableFieldBlur.bind(this));
		this._$editableField.on("keydown", this._onEditableFieldKeydown.bind(this));
		this._$editableField.on("dragstart", this._stopPropagation.bind(this));
		this._$editableField.on("drag", this._stopPropagation.bind(this));
		this._$editableField.on("dragend", this._stopPropagation.bind(this));

		this._$editableField.on("click", this._stopPropagation.bind(this));
		this._$editableField.on("mousedown", this._stopPropagation.bind(this));

		this._$editableField.focus();

		// keep Overlay selected while renaming
		oOverlay.setSelected(true);

		this.setOldValue(this._getCurrentEditableFieldText());
	};

	/**
	 * @private
	 */
	Rename.prototype._stopPropagation = function(oEvent) {
		oEvent.stopPropagation();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldFocus = function(oEvent) {
		this._oEditedOverlay.setSelected(false);
		var el = oEvent.target;
		var range = document.createRange();
		range.selectNodeContents(el);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	};

	/**
	 * @private
	 */
	Rename.prototype._stopEdit = function(bRestoreFocus) {
		// exchange the dummy text at the label with the genuine empty text (see start_edit function)
		if (this._$oEditableControlDomRef.text() === "_?_") {
			this._$oEditableControlDomRef.text("");
		}

		this._oEditedOverlay.$().find(".sapUiRtaEditableField").remove();
		this._$oEditableControlDomRef.css("visibility", "visible");

		if (bRestoreFocus) {
			var oOverlay = this._oEditedOverlay;

			// timeout is needed because of invalidation (test on bounded fields)
			// TODO: get rid of timeout! prevent UI5 from taking focus out of overlays
			this._iStopTimeout = setTimeout(function() {
				oOverlay.setSelected(true);
				oOverlay.focus();
			}, 500);
		}

		this._oEditedOverlay.setSelected(false);

		delete this._$editableField;
		delete this._$oEditableControlDomRef;
		delete this._oEditedOverlay;
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldBlur = function(oEvent) {
		this._emitLabelChangeEvent();
		this._stopEdit();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldKeydown = function(oEvent) {
		switch (oEvent.keyCode) {
			case jQuery.sap.KeyCodes.ENTER:
				this._emitLabelChangeEvent();
				this._stopEdit(true);
				oEvent.preventDefault();
				break;
			case jQuery.sap.KeyCodes.ESCAPE:
				this._stopEdit(true);
				oEvent.preventDefault();
				break;
			case jQuery.sap.KeyCodes.DELETE:
				//Incident ID: #1680315103
				oEvent.stopPropagation();
				break;
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._emitLabelChangeEvent = function() {
		var sText = this._getCurrentEditableFieldText();
		if (this.getOldValue() !== sText) { //check for real change before creating a command
			this._$oEditableControlDomRef.text(sText);
			try {
				var oRenameCommand;
				var oElement;
				var oRenamedElement = this._oEditedOverlay.getElementInstance();
				var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(this._oEditedOverlay);

				if (this._oEditedOverlay.isInHiddenTree()) {
					oElement = this._oEditedOverlay.getPublicParentElementOverlay().getElementInstance();
				} else {
					oElement = oRenamedElement;
				}

				oRenameCommand = this.getCommandFactory().getCommandFor(oElement, "rename", {
					renamedElement : oRenamedElement,
					newValue : sText
				}, oDesignTimeMetadata);
				this.fireElementModified({
					"command" : oRenameCommand
				});
			} catch (oError) {
				jQuery.sap.log.error("Error during rename : ", oError);
			}
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._getCurrentEditableFieldText = function() {
		return this._$editableField.text();
	};

	return Rename;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Selection') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Selection.
jQuery.sap.declare('sap.ui.rta.plugin.Selection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Selection",[
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/rta/Utils',
	'sap/ui/fl/Utils'
],
function(Plugin, Utils, FlexUtils) {
	"use strict";

	/**
	 * Constructor for a new Selection plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Selection plugin allows you to select or focus overlays with mouse or keyboard and navigate to others.
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Selection
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Selection = Plugin.extend("sap.ui.rta.plugin.Selection", /** @lends sap.ui.dt.Plugin.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 *
	 */
	Selection.prototype._checkVendorLayer = function(oOverlay) {
		if (oOverlay.getDesignTimeMetadata()) {
			if (this.hasStableId(oOverlay) && FlexUtils.isVendorLayer()) {
				oOverlay.setEditable(true);
				oOverlay.setSelectable(true);
				return true;
			}
		}
		return false;
	};

	/**
	 * Register an overlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.registerElementOverlay = function(oOverlay) {
		if (!this._checkVendorLayer(oOverlay)) {
			oOverlay.attachEditableChange(this._onEditableChange, this);
			this._adaptSelectable(oOverlay);
		}

		oOverlay.attachBrowserEvent("click", this._onClick, this);
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.attachBrowserEvent("mousedown", this._onMouseDown, this);
	};

	Selection.prototype._onEditableChange = function(oEvent) {
		var oOverlay = oEvent.getSource();
		this._adaptSelectable(oOverlay);
	};

	Selection.prototype._adaptSelectable = function(oOverlay) {
		var bSelectable = oOverlay.getEditable();
		if (oOverlay.getSelectable() !== bSelectable) {
			oOverlay.setSelectable(bSelectable);
		}
	};

	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.deregisterElementOverlay = function(oEvent) {
		var oOverlay = oEvent.getSource();
		oOverlay.detachBrowserEvent("click", this._onClick, this);
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.detachBrowserEvent("mousedown", this._onMouseDown, this);

		oOverlay.detachEditableChange(this._onEditableChange, this);
	};

	/**
	 * Handle keydown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onKeyDown = function(oEvent) {
		var oOverlay = Utils.getFocusedOverlay();
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			if ((oOverlay) && (!oOverlay.isSelected())) {
				oOverlay.setSelected(true);
				oEvent.stopPropagation();
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oParentOverlay = oOverlay.getParentElementOverlay();
				if (oParentOverlay && oParentOverlay.getSelectable()) {
					oParentOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oFirstChildOverlay = Utils.getFirstFocusableChildOverlay(oOverlay);
				if (oFirstChildOverlay) {
					oFirstChildOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oPrevSiblingOverlay = Utils.getPreviousFocusableSiblingOverlay(oOverlay);
				if (oPrevSiblingOverlay) {
					oPrevSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oNextSiblingOverlay = Utils.getNextFocusableSiblingOverlay(oOverlay);
				if (oNextSiblingOverlay) {
					oNextSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		}
	};

	/**
	 * Handle MouseDown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onMouseDown = function(oEvent) {
		if (sap.ui.Device.browser.name == "ie"){
			var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
			if (oOverlay.getSelectable()){
				oOverlay.focus();
				oEvent.stopPropagation();
			} else {
				oOverlay.getDomRef().blur();
			}
			oEvent.preventDefault();
		}
	};

	/**
	 * Handle click event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay.getSelectable()) {
			oOverlay.setSelected(!oOverlay.getSelected());
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	return Selection;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Selection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Settings') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Settings.
jQuery.sap.declare('sap.ui.rta.plugin.Settings'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/plugin/Settings",[
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/rta/Utils'
], function(Plugin, Utils) {
	"use strict";

	/**
	 * Constructor for a new Settings Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Settings allows trigger change of settings operations on the overlay
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.Settings
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Settings = Plugin.extend("sap.ui.rta.plugin.Settings", /** @lends sap.ui.rta.plugin.Settings.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {
				commandStack : {
					type : "any"
				}
			},
			associations: {},
			events: {}
		}
	});

	/**
	 * @private
	 */
	Settings.prototype._isEditable = function(oOverlay) {
		if (!Utils.getPublicParentDesigntimeMetadata(oOverlay)) {
			return false;
		}

		var oSettingsAction = this._getSettingsAction(oOverlay);
		if (oSettingsAction && oSettingsAction.handler) {
			return this.hasStableId(oOverlay);
		}

		return false;
	};

	Settings.prototype._getUnsavedChanges = function(sId, aChangeTypes) {
		var sElementId;

		var aUnsavedChanges = this.getCommandStack().getAllExecutedCommands().filter(function(oCommand) {
			sElementId = oCommand.getElementId();
			if (sElementId === sId && aChangeTypes.indexOf(oCommand.getChangeType()) >= 0) {
				return true;
			}
		}).map(function(oCommand) {
			return oCommand.getPreparedChange();
		});

		return aUnsavedChanges;
	};

	/**
	 * @private
	 */
	Settings.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @private
	 */
	Settings.prototype._getSettingsAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("settings", oOverlay.getElementInstance());
	};

	/**
	 * Checks if settings is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Settings.prototype.isSettingsAvailable = function(oOverlay) {
		return this._isEditableByPlugin(oOverlay);
	};

	/**
	 * Checks if settings is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Settings.prototype.isSettingsEnabled = function(oOverlay) {
		var oAction = this._getSettingsAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};


	Settings.prototype.handleSettings = function(aSelectedOverlays) {
		var oSettingsCommand;
		var oElement = aSelectedOverlays[0].getElementInstance();

		return aSelectedOverlays[0].getDesignTimeMetadata().getAction("settings").handler(oElement, this._getUnsavedChanges.bind(this)).then(function(aChanges) {
			aChanges.forEach(function(mChange) {
				oSettingsCommand = this.getCommandFactory().getCommandFor(mChange.selectorControl, "settings", mChange.changeSpecificData);
				this.fireElementModified({
					"command" : oSettingsCommand
				});
			}, this);
		}.bind(this))['catch'](function(oError) {
			if (oError) {
				throw oError;
			}
		});
	};

	return Settings;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Settings.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Split') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Split.
jQuery.sap.declare('sap.ui.rta.plugin.Split'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Selection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Split",[
	'sap/ui/rta/plugin/Plugin', 'sap/ui/dt/Selection', 'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/fl/Utils'
], function(Plugin, Selection, OverlayRegistry, Utils, FlexUtils) {
	"use strict";

	/**
	 * Constructor for a new Split Plugin.
	 *
	 * @class
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.46
	 * @alias sap.ui.rta.plugin.Split
	 * @experimental Since 1.46. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Split = Plugin.extend("sap.ui.rta.plugin.Split", /** @lends sap.ui.rta.plugin.Split.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * @private
	 */
	Split.prototype._isEditable = function(oOverlay) {
		var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		var oElement = oOverlay.getElementInstance();
		if (!Utils.getPublicParentDesigntimeMetadata(oOverlay)) {
			return false;
		}
		var oSplitAction = this._getSplitAction(oOverlay);
		if (oSplitAction && oSplitAction.changeType) {
			return this.hasStableId(oOverlay) && this.hasChangeHandler(oSplitAction.changeType, oDesignTimeMetadata.getRelevantContainer(oElement));
		} else {
			return false;
		}
	};

	/**
	 * @param	{sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Split.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @param	{sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Split.prototype._getSplitAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("split", oOverlay.getElementInstance());
	};

	/**
	 * Checks if Split is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if available
	 * @public
	 */
	Split.prototype.isSplitAvailable = function(oOverlay) {
		if (!this._isEditableByPlugin(oOverlay)) {
			return false;
		}

		var aSelectedOverlays = this.getDesignTime().getSelection();
		if (aSelectedOverlays.length !== 1) {
			return false;
		}

		var vSplitAction = this._getSplitAction(oOverlay);
		var oElement = aSelectedOverlays[0].getElementInstance();
		if (vSplitAction && vSplitAction.getControlsCount(oElement) <= 1) {
			return false;
		}

		return true;
	};

	/**
	 * Checks if Split is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if enabled
	 * @public
	 */
	Split.prototype.isSplitEnabled = function(oOverlay) {

		// check that each selected element has an enabled action
		var oAction = this._getSplitAction(oOverlay);
		if (!oAction || !this.isSplitAvailable(oOverlay)) {
			return false;
		}

		// actions are by default enabled
		var bActionIsEnabled = true;
		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				 bActionIsEnabled = oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				bActionIsEnabled = oAction.isEnabled;
			}
		}
		return bActionIsEnabled;
	};

	/**
	 * @param  {any} oSplitElement selected element
	 */
	Split.prototype.handleSplit = function(oSplitElement) {
		var oParent = oSplitElement.getParent();
		var oElementOverlay = OverlayRegistry.getOverlay(oSplitElement);
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oElementOverlay);
		var oElement;

		if (oElementOverlay.isInHiddenTree()) {
			oElement = oElementOverlay.getPublicParentElementOverlay().getElementInstance();
		} else {
			oElement = oSplitElement;
		}

		var iFieldsLength = this._getSplitAction(oElementOverlay).getControlsCount(oElement);
		var oView = FlexUtils.getViewForControl(oElement);
		var aNewElementIds = [];
		// Split needs iFieldsLength controls, only one is available so far
		for (var i = 0; i < iFieldsLength - 1; i++){
			aNewElementIds.push(oView.createId(jQuery.sap.uid()));
		}

		var oSplitCommand = this.getCommandFactory().getCommandFor(oElement, "split", {
			newElementIds : aNewElementIds,
			source : oSplitElement,
			parentElement : oParent
		}, oDesignTimeMetadata);
		this.fireElementModified({
			"command" : oSplitCommand
		});

	};

	return Split;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Split.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AddElementsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AddElementsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScrollContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AddElementsDialog",['jquery.sap.global',
			   'sap/ui/rta/library',
			   'sap/ui/rta/Utils',
			   'sap/ui/dt/OverlayRegistry',
			   'sap/ui/base/ManagedObject',
			   'sap/ui/commons/Label',
			   'sap/ui/commons/LabelDesign',
			   'sap/m/Dialog',
			   'sap/ui/model/json/JSONModel',
			   'sap/m/SearchField',
			   'sap/m/Button',
			   'sap/m/Toolbar',
			   'sap/m/ToolbarSpacer',
			   'sap/ui/model/Filter',
			   'sap/ui/model/FilterOperator',
			   'sap/ui/rta/command/CommandFactory',
			   'sap/ui/rta/command/CompositeCommand',
			   'sap/m/List',
			   'sap/m/CustomListItem',
			   'sap/m/ListType',
			   'sap/m/ScrollContainer',
			   'sap/ui/model/Sorter',
			   'sap/ui/dt/ElementUtil',
			   'sap/m/VBox'
			   ],
			   function (jQuery,library,Utils,OverlayRegistry,ManagedObject,Label,LabelDesign,Dialog,JSONModel,SearchField,Button,Toolbar,ToolbarSpacer,Filter,FilterOperator,CommandFactory,CompositeCommand,List,ListItem,ListType,ScrollContainer,Sorter,ElementUtil, VBox) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.plugin.additionalElements.AddElementsDialog control.
	 *
	 * @class Context - Dialog for available Fields in Runtime Authoring
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.additionalElements.AddElementsDialog
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *			   changed in future.
	 */
	var AddElementsDialog = ManagedObject.extend("sap.ui.rta.plugin.additionalElements.AddElementsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				"customFieldEnabled" : {
					type: "boolean",
					defaultValue: false
				},
				"title" : {
					type: "string"
				}
			},
			events : {
				"opened" : {},
				"openCustomField" : {}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype.init = function() {
		// Get messagebundle.properties for sap.ui.rta
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._bAscendingSortOrder = false;
		// sap.m.Dialog shouldn't have no parent or a rendered parent
		// otherwise invalidate/filter/... is not working correctly
		this._oDialog = new Dialog().addStyleClass("sapUIRtaFieldRepositoryDialog");
		this._oDialog.setModel(new JSONModel({
			elements: []
		}));

		var aContent = this._createContent();
		var aButtons = this._createButtons();
		aContent.forEach(function(oContent) {
			this._oDialog.addContent(oContent);
		}, this);
		aButtons.forEach(function(oButton) {
			this._oDialog.addButton(oButton);
		}, this);
		this._oDialog.setInitialFocus(this._oInput);
	};

	/**
	 * Create the Content of the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createContent = function() {
		// SearchField
		this._oInput =  new SearchField({
			width : "100%",
			liveChange : [this._updateModelFilter, this]
		}).addStyleClass("resourceListIF");

		// Button for sorting the List
		var oResortButton = new Button({
			text : "",
			icon : "sap-icon://sort",
			press : [this._resortList, this]
		});

		// Button for creating Custom Fields
		this._oCustomFieldButton = new Button({
			text : "",
			icon : "sap-icon://add",
			tooltip : this._oTextResources.getText("BTN_FREP_CCF"),
			enabled : this.getCustomFieldEnabled(),
			press : [this._redirectToCustomFieldCreation, this]
		});

		// Toolbar
		this._oToolbarSpacer1 = new ToolbarSpacer();
		this.oInputFields = new Toolbar({
			content: [this._oInput, oResortButton, this._oToolbarSpacer1, this._oCustomFieldButton]
		});

		// Fields of the List
		var oFieldName = new Label({
			design: LabelDesign.Bold,
			tooltip: "{tooltip}",
			text: {
				parts: [{path: "label"}, {path: "referencedComplexPropertyName"}, {path: "duplicateComplexName"}],
				formatter: function(sLabel, sReferencedComplexPropertyName, bDuplicateComplexName) {
					if (bDuplicateComplexName && sReferencedComplexPropertyName) {
						sLabel += " (" + sReferencedComplexPropertyName + ")";
					}
					return sLabel;
				}
			}
		});

		var oFieldName2 = new Label({
			text: {
				parts: [{path: "originalLabel"}],
				formatter: function(sOriginalLabel) {
					if (sOriginalLabel) {
						return this._oTextResources.getText("LBL_FREP", sOriginalLabel);
					}
					return "";
				}.bind(this)
			},
			visible: {
				parts: [{path: "originalLabel"}],
				formatter: function(sOriginalLabel) {
					if (sOriginalLabel) {
						return true;
					}
					return false;
				}
			}
		});

		var oVBox = new VBox();
		oVBox.addItem(oFieldName);
		oVBox.addItem(oFieldName2);

		// List
		var oSorter = new Sorter("label", this._bAscendingSortOrder);
		this._oList = new List(
				{
					mode : "MultiSelect",
					includeItemInSelection : true,
					growing : false,
					growingScrollToLoad : false
				}).setNoDataText(this._oTextResources.getText("MSG_NO_FIELDS"));

		var oListItem = new ListItem({
			type: ListType.Active,
			selected : "{selected}",
			content : [oVBox]
		});

		this._oList.bindItems({path:"/elements", template: oListItem, sorter : oSorter});

		// Scrollcontainer containing the List
		// Needed for scrolling the List
		var oScrollContainer = new ScrollContainer({
			content: this._oList,
			vertical: true,
			horizontal: false
		}).addStyleClass("sapUIRtaCCDialogScrollContainer");

		return [this.oInputFields,
				oScrollContainer];
	};

	/**
	 * Create the Buttons of the Dialog (OK/Cancel)
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createButtons = function() {
		var oOKButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_OK"),
			press : [this._submitDialog, this]
		});
		var oCancelButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_CANCEL"),
			press : [this._cancelDialog, this]
		});
		return [oOKButton, oCancelButton];
	};

	/**
	 * Close the dialog.
	 */
	AddElementsDialog.prototype._submitDialog = function() {
		this._oDialog.close();
		this._fnResolve();
	};

	/**
	 * Close dialog and revert all change operations
	 */
	AddElementsDialog.prototype._cancelDialog = function() {
		// clear all variables
		this._oList.removeSelections();
		this._oDialog.close();
		this._fnReject();
	};

	AddElementsDialog.prototype.setElements = function(aElements) {
		this._oDialog.getModel().setProperty("/elements", aElements);
	};

	AddElementsDialog.prototype.getElements = function() {
		return this._oDialog.getModel().getProperty("/elements");
	};

	AddElementsDialog.prototype.getSelectedElements = function() {
		return this._oDialog.getModel().getObject("/elements").filter(function(oElement){
			return oElement.selected;
		});
	};

	/**
	 * Open the Field Repository Dialog
	 *
	 * @param {sap.ui.core.Control}
	 *		  oControl Currently selected control
	 */
	AddElementsDialog.prototype.open = function(oControl) {
		return new Promise(function (resolve, reject) {
			this._fnResolve = resolve;
			this._fnReject = reject;
			this._oDialog.oPopup.attachOpened(function (){
				this.fireOpened();
			}.bind(this));
			// Makes sure the modal div element does not change the size of our application (which would result in
			// recalculation of our overlays)
			this._oDialog.open();
		}.bind(this));
	};

	/**
	 * Resort the list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._resortList = function(oEvent) {
		this._bAscendingSortOrder = !this._bAscendingSortOrder;
		var oBinding = this._oList.getBinding("items");
		var aSorter = [];
		aSorter.push(new Sorter("label", this._bAscendingSortOrder));
		oBinding.sort(aSorter);
	};

	/**
	 * Updates the model on filter events
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._updateModelFilter = function(oEvent) {
		var sValue = oEvent.getParameter("newValue");
		var oBinding = this._oList.getBinding("items");
		if ((typeof sValue) === "string") {
			var oFilterLabel = new Filter("label", FilterOperator.Contains, sValue);
			var oOriginalLabelFilter = new Filter("originalLabel", FilterOperator.Contains, sValue);
			var oReferencedComplexPropertyNameFilter = new Filter("referencedComplexPropertyName", FilterOperator.Contains, sValue);
			var oDuplicateComplexNameFilter = new Filter("duplicateComplexName", FilterOperator.EQ, true);
			var oComplexNameFilter = new Filter({ filters: [oReferencedComplexPropertyNameFilter, oDuplicateComplexNameFilter], and: true });
			var oFilterLabelOrInfo = new Filter({ filters: [oFilterLabel, oOriginalLabelFilter, oComplexNameFilter], and: false });
			oBinding.filter([oFilterLabelOrInfo]);
		} else {
			oBinding.filter([]);
		}
	};

	/**
	 * Fire an event to redirect to custom field creation
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._redirectToCustomFieldCreation = function(oEvent) {
		this.fireOpenCustomField();
		this._oDialog.close();
	};

	AddElementsDialog.prototype.setTitle = function(sTitle) {
		ManagedObject.prototype.setProperty.call(this, "title", sTitle, true);
		this._oDialog.setTitle(sTitle);
	};

	/**
	 * Enables the Custom Field Creation button
	 *
	 * @param {boolean}
	 *		  bCustomFieldEnabled true shows the button, false not
	 */
	AddElementsDialog.prototype.setCustomFieldEnabled = function(bCustomFieldEnabled) {
		ManagedObject.prototype.setProperty.call(this, "customFieldEnabled", bCustomFieldEnabled, true);
		this._oCustomFieldButton.setEnabled(bCustomFieldEnabled);
	};

	return AddElementsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/additionalElements/AddElementsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

 jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer",['sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/smartfield/AnnotationHelper', 'sap/ui/core/StashedControlSupport', 'sap/ui/dt/ElementUtil', 'sap/ui/rta/Utils'],
	function(MetadataAnalyser, AnnotationHelper, StashedControlSupport, ElementUtil, RtaUtils){
	"use strict";

	var oAnnotationHelper = new AnnotationHelper();

	/**
	 * Is field using a complex type
	 *
	 * @param {Object}
	 *          oProperty property from entityType
	 * @returns {Boolean} Returns true if property is using a complex type
	 */
	function _isComplexType (oProperty) {
		if (oProperty && oProperty.type) {
			if (oProperty.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	}

	function _expandComplexProperties(aODataProperties, oMetadataAnalyzer){
		return aODataProperties.reduce(function(aExpandedProperties, oProperty){
			var vProps = oProperty;
			if (_isComplexType(oProperty)) {
				vProps = oMetadataAnalyzer.getFieldsByComplexTypeName(oProperty.type).map(function(oComplexProperty){
					oComplexProperty.bindingPath = oProperty.name + "/" + oComplexProperty.name;
					oComplexProperty.entityName = oProperty.entityName;
					oComplexProperty.referencedComplexPropertyName = oProperty.fieldLabel ? oProperty.fieldLabel : oProperty.name;
					return oComplexProperty;
				});
			} else {
				//harmonize structure
				vProps.bindingPath = oProperty.name;
			}
			return aExpandedProperties.concat(vProps);
		}, []);
	}

	function _filterInvisibleProperties(aODataProperties, oElement) {
		return aODataProperties.filter(function(oProperty){
			//sap:visible=false and or "com.sap.vocabularies.Common.v1.FieldControl" with EnumMember "com.sap.vocabularies.Common.v1.FieldControlType/Hidden"
			//handled by MetadataAnalyser
			return oProperty.visible;
		}).filter(function(oProperty){
			//@runtime hidden by field control value = 0
			var sFieldControlPath = oAnnotationHelper.getFieldControlPath(oProperty);
			if (sFieldControlPath){
				var iFieldControlValue = oElement.getBindingContext().getProperty(sFieldControlPath);
				return iFieldControlValue !== 0;
			}
			return true;
		});
	}

	function _getODataPropertiesOfModel (oElement) {
		var oModel = oElement.getModel();
		var aResult = [];
		if (oModel) {
			var sModelName = oModel.getMetadata().getName();
			if (sModelName === "sap.ui.model.odata.ODataModel" || sModelName === "sap.ui.model.odata.v2.ODataModel") {
				aResult = oModel.getMetaModel().loaded().then(function(){
					var oMetadataAnalyzer = new MetadataAnalyser(oModel);
					var sEntityType = RtaUtils.getBoundEntityType(oElement, oModel);
					var aODataProperties = oMetadataAnalyzer.getFieldsByEntityTypeName(sEntityType) || [];
					aODataProperties = _expandComplexProperties(aODataProperties, oMetadataAnalyzer);
					aODataProperties = _filterInvisibleProperties(aODataProperties, oElement);
					return aODataProperties;
				});
			}
		}
		return aResult;
	}

	function _oDataPropertyToAdditionalElementInfo (oODataProperty){
		return {
			selected : false,
			label : oODataProperty.renamedLabel ? oODataProperty.renamedLabel : oODataProperty.fieldLabel,
			referencedComplexPropertyName: oODataProperty.referencedComplexPropertyName ? oODataProperty.referencedComplexPropertyName : "",
			duplicateComplexName: oODataProperty.duplicateComplexName ? oODataProperty.duplicateComplexName : false,
			tooltip :  oODataProperty.quickInfo || oODataProperty.fieldLabel,
			//command relevant data
			type : "odata",
			entityType : oODataProperty.entityName,
			name : oODataProperty.name,
			bindingPath : oODataProperty.bindingPath,
			originalLabel: oODataProperty.renamedLabel && oODataProperty.renamedLabel !== oODataProperty.fieldLabel ? oODataProperty.fieldLabel : ""
		};
	}

	function _elementToAdditionalElementInfo (mData){
		var oElement = mData.element;
		var mAction = mData.action;
		return {
			selected : false,
			label : RtaUtils.getLabelForElement(oElement, mAction.getLabel),
			tooltip : RtaUtils.getLabelForElement(oElement, mAction.getLabel),
			referencedComplexPropertyName: oElement.referencedComplexPropertyName ? oElement.referencedComplexPropertyName : "",
			duplicateComplexName: oElement.duplicateComplexName ? oElement.duplicateComplexName : false,
			bindingPaths: oElement.bindingPaths,
			originalLabel: oElement.renamedLabel && oElement.renamedLabel !== oElement.labelFromOData ? oElement.labelFromOData : "",
			//command relevant data
			type : "invisible",
			element : oElement
		};
	}

	function _getBindingPaths (oElement) {
		var aBindingPaths = [];
		_getBoundChildrenFromChild(oElement).forEach(function(oField) {
			if (oField.mBindingInfos) {
				for ( var oInfo in oField.mBindingInfos) {
					var sPath = RtaUtils.getPathFromBindingInfo(oInfo, oField.mBindingInfos);
					if (sPath) {
						aBindingPaths.push(sPath);
					}
				}
			}
		});
		return aBindingPaths;
	}

	function _getBoundChildrenFromChild (oChildElement) {
		var aBoundChildren = [];
		if (jQuery.isEmptyObject(oChildElement.mBindingInfos)){
			//look deeper
			for (var sChildAggregationName in oChildElement.getMetadata().getAllAggregations()) {
				aBoundChildren = aBoundChildren.concat(_getBoundChildren(sChildAggregationName, oChildElement));
			}
		} else {
			aBoundChildren.push(oChildElement);
		}
		return aBoundChildren;
	}

	function _getBoundChildren (sAggregationName, oElement) {
		var aBoundChildren = [];
		ElementUtil.getAggregation(oElement, sAggregationName).forEach(function(oChildElement){
			if (jQuery.isEmptyObject(oChildElement.mBindingInfos)){
				//look deeper
				if (oChildElement.getMetadata) {
					for (var sChildAggregationName in oChildElement.getMetadata().getAllAggregations()) {
						aBoundChildren = aBoundChildren.concat(_getBoundChildren(sChildAggregationName, oChildElement));
					}
				}
			} else {
				aBoundChildren.push(oChildElement);
			}
		});
		return aBoundChildren;
	}

	function _getRelevantElements(oElement, oRelevantContainer){
		if (oRelevantContainer){
			return ElementUtil.findAllSiblingsInContainer(oElement, oRelevantContainer);
		} else {
			return [oElement];
		}
	}

	function _checkForComplexDuplicates(aODataProperties) {
		aODataProperties.forEach(function(oODataProperty, index, aODataProperties) {
			if (oODataProperty["duplicateComplexName"] !== true) {
				for (var j = index + 1; j < aODataProperties.length - 1; j++) {
					if (oODataProperty.fieldLabel === aODataProperties[j].fieldLabel) {
						oODataProperty["duplicateComplexName"] = true;
						aODataProperties[j]["duplicateComplexName"] = true;
					}
				}
			}
		});
		return aODataProperties;
	}

	var oAnalyzer = {
		//depending on the available actions for the aggregation call one or both of these methods

		enhanceInvisibleElements : function(oParent, mRevealData){
			return Promise.resolve().then(function () {
				return _getODataPropertiesOfModel(oParent);
			}).then(function(aODataProperties) {
				aODataProperties = _checkForComplexDuplicates(aODataProperties);

				var aInvisibleElements = mRevealData.elements || [];

				return aInvisibleElements.map(function(oInvisibleElement) {
					var sType = oInvisibleElement.getMetadata().getName();
					//TODO fix with stashed type support

					var mTypeData = mRevealData.types[sType];
					var mAction = mTypeData.action;


					oInvisibleElement.bindingPaths = _getBindingPaths(oInvisibleElement);
					oInvisibleElement.fieldLabel = RtaUtils.getLabelForElement(oInvisibleElement, mAction.getLabel);

					//check for duplicate labels to later add the referenced complexTypeName if available
					aODataProperties.some(function(oUnboundProperty) {
						if (oUnboundProperty.fieldLabel === oInvisibleElement.fieldLabel) {
							oInvisibleElement.duplicateComplexName = true;
							return true;
						}
					});

					//add information from the oDataProperty to the InvisibleProperty
					aODataProperties.some(function(oUnboundProperty) {
						if (oInvisibleElement.bindingPaths && oInvisibleElement.bindingPaths.indexOf(oUnboundProperty.bindingPath) > -1) {
							oInvisibleElement.labelFromOData = oUnboundProperty.fieldLabel;
							if (oInvisibleElement.fieldLabel !== oInvisibleElement.labelFromOData) {
								oInvisibleElement.renamedLabel = true;
							}
							if (oUnboundProperty.referencedComplexPropertyName) {
								oInvisibleElement.referencedComplexPropertyName = oUnboundProperty.referencedComplexPropertyName;
							}
							return true;
						}
					});

					return {
						element : oInvisibleElement,
						action : mAction
					};
				});
			}).then(function(aAllElementData) {
				return aAllElementData.map(_elementToAdditionalElementInfo);
			});
		},

		getUnboundODataProperties : function(oElement, mAction){
			//TODO split in smaller functions
			return Promise.resolve().then(function () {
				return _getODataPropertiesOfModel(oElement);
			}).then(function(aODataProperties) {
				var aRelevantElements = _getRelevantElements(oElement, mAction.relevantContainer);

				var aAllChildren = aRelevantElements.reduce(function (aPreviousChildren, oCurrentElement) {
					return aPreviousChildren.concat(_getBoundChildren.bind(null, mAction.action.aggregation)(oCurrentElement));
				}, []);

				var mRenamedLabels = {};
				var mVisiblyBoundProperties = aAllChildren.reduce(function(mProperties, oChildElement){
					if (oChildElement.mBindingInfos) {
						for ( var oInfo in oChildElement.mBindingInfos) {
							var sPath = RtaUtils.getPathFromBindingInfo(oInfo, oChildElement.mBindingInfos);
							if (sPath) {
								mProperties[sPath] = true;
								mRenamedLabels[sPath] = RtaUtils.getLabelForElement(oChildElement, mAction.getLabel);
							}
						}
					}
					return mProperties;
				}, {});

				var fnFilter = mAction.filter ? mAction.filter : function() {return true;};
				aODataProperties = aODataProperties.reduce(function(aODataProperties, oDataProperty) {
					oDataProperty["renamedLabel"] = mRenamedLabels[oDataProperty.bindingPath];
					if (!mVisiblyBoundProperties[oDataProperty.bindingPath] && fnFilter(oElement, oDataProperty)) {
						return aODataProperties.concat(oDataProperty);
					} else {
						return aODataProperties;
					}
				}, []);

				aODataProperties = _checkForComplexDuplicates(aODataProperties);

				return aODataProperties;
			}).then(function(aUnboundODataProperties) {
				return aUnboundODataProperties.map(_oDataPropertyToAdditionalElementInfo);
			});
		}
	};
	return oAnalyzer;
});

}; // end of sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementDesignTimeMetadata'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin",["jquery.sap.global", "sap/ui/rta/plugin/Plugin", 'sap/ui/dt/ElementUtil', 'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/core/StashedControlSupport', 'sap/ui/dt/ElementDesignTimeMetadata'],function(jQuery, Plugin, ElementUtil, OverlayRegistry, Utils, StashedControlSupport, ElementDesignTimeMetadata){
	"use strict";

	function _getParents(bSibling, oOverlay) {
		var oParentOverlay, oPublicParentOverlay;
		if (bSibling) {
			oParentOverlay = oOverlay.getParentElementOverlay();
			oPublicParentOverlay = oOverlay.getPublicParentElementOverlay();
		} else {
			oParentOverlay = oOverlay;
			if (oOverlay.isInHiddenTree()){
				oPublicParentOverlay = oOverlay.getPublicParentElementOverlay();
			} else {
				oPublicParentOverlay = oOverlay;
			}
		}
		return {
			publicParentOverlay : oPublicParentOverlay,
			parentOverlay : oParentOverlay,
			publicParent : oPublicParentOverlay.getElementInstance(),
			parent : oParentOverlay.getElementInstance()
		};
	}

	function _defaultGetAggregationName(oParent, oChild) {
		return oChild.sParentAggregationName;
	}

	function _getInvisibleElements (oElement, sAggregationName){
		var aInvisibleElements = ElementUtil.getAggregation(oElement, sAggregationName).filter(function(oElement){
			return oElement.getVisible && !oElement.getVisible();
		});
		var aStashedControls = StashedControlSupport.getStashedControls(oElement.getId());
		return aInvisibleElements.concat(aStashedControls);
	}

	function _getRevealActions (bSibling, oOverlay) {
		var mParents = _getParents(bSibling, oOverlay);

		var mReveal = {};
		if (oOverlay.isInHiddenTree()){
			mReveal = _getTypesForInHiddenTree(mReveal, mParents);
		} else {
			mReveal = _getTypesForNotInHiddenTree(mReveal, mParents, bSibling, oOverlay);
		}

		return mReveal;
	}

	function _getTypesForInHiddenTree(mReveal, mParents) {
		var oDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
		var mRevealAction = oDesignTimeMetadata && oDesignTimeMetadata.getAggregationAction("reveal", mParents.parent)[0];
		if (mRevealAction && mRevealAction.changeType && sap.ui.rta.plugin.Plugin.prototype.hasChangeHandler(mRevealAction.changeType, mParents.publicParent)) {
			if (!mRevealAction.getAggregationName){
				mRevealAction.getAggregationName = _defaultGetAggregationName;
			}
			var fnGetInvisibleElements = mRevealAction.getInvisibleElements || _getInvisibleElements;
			var aInvisibleElements = fnGetInvisibleElements(mParents.publicParent, mRevealAction.aggregation);

			mReveal[mRevealAction.aggregation] = {
				reveal : {
					elements : aInvisibleElements,
					types : aInvisibleElements.reduce(function(mInvisibleTypes, oElement){
						mInvisibleTypes[oElement.getMetadata().getName()] = {
							designTimeMetadata : oDesignTimeMetadata,
							action : mRevealAction
						};
						return mInvisibleTypes;
					}, {})
				}
			};
		}
		return mReveal;
	}

	function _getTypesForNotInHiddenTree(mReveal, mParents, bSibling, oOverlay) {
		var aParents = [mParents.parentOverlay];
		var oRelevantContainer = _getRelevantContainer(mParents.parent, mParents.parentOverlay.getDesignTimeMetadata());
		if (oRelevantContainer !== mParents.parent){
			aParents = ElementUtil.findAllSiblingsInContainer(mParents.parent, oRelevantContainer).map(function(oParent){
				return OverlayRegistry.getOverlay(oParent);
			});
		}
		var aAggregationNames;
		if (bSibling){
			aAggregationNames = [oOverlay.getElementInstance().sParentAggregationName];
		}
		aAggregationNames = mParents.parentOverlay.getAggregationOverlays().filter(function(oAggregationOverlay){
			return !oAggregationOverlay.getDesignTimeMetadata().isIgnored();
		}).map(function(oAggregationOverlay){
			return oAggregationOverlay.getAggregationName();
		});
		mReveal = aAggregationNames.reduce(_getRevealActionFromAggregations.bind(null, aParents), {});
		return mReveal;
	}

	function _getRevealActionFromAggregations(aParents, _mReveal, sAggregationName){
		var aInvisibleElements = aParents.reduce(function(aInvisibleChilden, oParentOverlay){
			return aInvisibleChilden.concat(_getInvisibleElements(oParentOverlay.getElementInstance(), sAggregationName));
		}, []);

		var mTypes = aInvisibleElements.reduce(function(mTypes, oElement){
			var sType = oElement.getMetadata().getName();
			if (!mTypes[sType]){
				//TODO Fix if we have the stashed type info
				if (sType === "sap.ui.core._StashedControl"){
					mTypes[sType] = _fakeStashedControlInfos();
				} else {
					var oOverlay = OverlayRegistry.getOverlay(oElement);
					if (oOverlay) {
						var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
						var mRevealAction = oDesignTimeMetadata && oDesignTimeMetadata.getAction("reveal", oElement);
						if (mRevealAction && mRevealAction.changeType && sap.ui.rta.plugin.Plugin.prototype.hasChangeHandler(mRevealAction.changeType, oElement)) {
							if (!mRevealAction.getAggregationName){
								mRevealAction.getAggregationName = _defaultGetAggregationName;
							}
							mTypes[sType] = {
								designTimeMetadata : oDesignTimeMetadata,
								action : mRevealAction
							};
						}
					}
				}
			}
			return mTypes;
		}, {});
		if (aInvisibleElements.length > 0 && Object.keys(mTypes).length > 0){
			_mReveal[sAggregationName] = {
				reveal : {
					elements : aInvisibleElements,
					types : mTypes
				}
			};
		}
		return _mReveal;
	}

	function _getAddODataPropertyActions (bSibling, oOverlay) {
		var mParents = _getParents(bSibling, oOverlay);

		var oDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
		var aActions = oDesignTimeMetadata.getAggregationAction("addODataProperty", mParents.parent);

		var mAddODataProperty = aActions.reduce(function(_mAddODataProperty, mAction){
			if (mAction.changeType && sap.ui.rta.plugin.Plugin.prototype.hasChangeHandler(mAction.changeType, mParents.parent)) {
				_mAddODataProperty[mAction.aggregation] = {
					addODataProperty : {
						designTimeMetadata : oDesignTimeMetadata,
						action : mAction
					}
				};
			}
			return _mAddODataProperty;
		}, {});

		return mAddODataProperty;
	}

	function _getActions (bSibling, oOverlay) {
		var mRevealActions = _getRevealActions(bSibling, oOverlay);
		var mAddODataPropertyActions = _getAddODataPropertyActions(bSibling, oOverlay);

		//join and condense both action data
		var mOverall = jQuery.extend(true, mRevealActions, mAddODataPropertyActions);
		var aAggregationNames = Object.keys(mOverall);
		if (aAggregationNames.length === 0){
			return {};
		} else if (aAggregationNames.length > 1){
			jQuery.sap.log.error("reveal or addODataProperty action defined for more than 1 aggregation, that is not yet possible");
		}
		var sAggregationName = aAggregationNames[0];
		mOverall[sAggregationName].aggregation = sAggregationName;
		return mOverall[sAggregationName];
	}

	var SINGULAR = true, PLURAL = false;
	function _getText (sRtaTextKey, mActions, oParentElement, bSingular) {
		var aNames = [];
		var mControlType;
		var sControlType;
		if (mActions.addODataProperty){
			var sAggregationName = mActions.aggregation;
			var oDesignTimeMetadata = mActions.addODataProperty.designTimeMetadata;
			mControlType = oDesignTimeMetadata.getAggregationDescription(sAggregationName, oParentElement);
			if (mControlType) {
				sControlType = bSingular ? mControlType.singular : mControlType.plural;
				aNames.push(sControlType);
			}
		}
		if (mActions.reveal){
			Object.keys(mActions.reveal.types).forEach(function(sType){
				var mType = mActions.reveal.types[sType];
				mControlType = mType.designTimeMetadata.getName(oParentElement);
				if (mControlType) {
					sControlType = bSingular ? mControlType.singular : mControlType.plural;
					aNames.push(sControlType);
				}
			});
		}
		var aNonDuplicateNames = aNames.reduce(function(_aNames, sName){
			if (_aNames.indexOf(sName) === -1) {
				_aNames.push(sName);
			}
			return _aNames;
		}, []);


		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

		if (aNonDuplicateNames.length === 1) {
			sControlType = aNonDuplicateNames[0];
		} else {
			sControlType = oTextResources.getText("MULTIPLE_CONTROL_NAME");
		}
		return oTextResources.getText(sRtaTextKey, sControlType);
	}

	function _getRelevantContainer(oParentElement, oDesignTimeMetadata) {
		if (oDesignTimeMetadata.getData().getRelevantContainer) {
			return oDesignTimeMetadata.getData().getRelevantContainer(oParentElement);
		} else {
			return oParentElement;
		}
	}

	function _fakeStashedControlInfos() {
		return {
			designTimeMetadata : new ElementDesignTimeMetadata(
				{
					data : {
						name : {
							singular : function(){
								return sap.uxap.i18nModel.getResourceBundle().getText("SECTION_CONTROL_NAME");
							},
							plural : function(){
								return sap.uxap.i18nModel.getResourceBundle().getText("SECTION_CONTROL_NAME_PLURAL");
							}
						},
						actions : {
							reveal : {
								changeType : "unstashControl",
								getAggregationName : _defaultGetAggregationName
							}
						}
					}
				}
			),
			action : {
				changeType : "unstashControl",
				getAggregationName : _defaultGetAggregationName
			}
		};
	}

	/**
	 * Constructor for a new Additional Elements Plugin.
	 *
	 * The AdditionalElementsPlugin should handle the orchestration
	 * of the AdditionalElementsAnalyzer, the dialog and the command creation
	 *
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The plugin allows to add additional elements that exist either hidden in the UI or in the OData service
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var AdditionalElementsPlugin = Plugin.extend("sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin", {
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {
				analyzer: "object", //sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer
				dialog: "object", //sap.ui.rta.plugin.additionalElements.AddElementsDialog
				commandFactory: "object"
			},
			associations: {},
			events: {}
		},

		getContextMenuTitle: function(bOverlayIsSibling, oOverlay){
			var mParents = _getParents(bOverlayIsSibling, oOverlay);
			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			return _getText("CTX_ADD_ELEMENTS", mActions, mParents.parent, SINGULAR);
		},

		isAvailable: function(bOverlayIsSibling, oOverlay){
			return this._isEditable(oOverlay, bOverlayIsSibling);
		},

		isEnabled: function(bOverlayIsSibling, oOverlay){
			if (bOverlayIsSibling) {
				if (!Utils.hasParentStableId(oOverlay)) {
					return false;
				}
			}
			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			if (mActions.reveal && mActions.reveal.elements.length === 0 && !mActions.addODataProperty){
				return false;
			}
			return true;
		},

		showAvailableElements: function(bOverlayIsSibling, aOverlay) {
			var oOverlay = aOverlay[0];
			var mParents = _getParents(bOverlayIsSibling, oOverlay);
			var oSiblingElement = bOverlayIsSibling && oOverlay.getElementInstance();
			var aPromises = [];

			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			if (mActions.reveal) {
				aPromises.push(this.getAnalyzer().enhanceInvisibleElements(mParents.publicParent, mActions.reveal));
			}
			if (mActions.addODataProperty){
				mActions.addODataProperty.relevantContainer = _getRelevantContainer(mParents.publicParent, mActions.addODataProperty.designTimeMetadata);
				aPromises.push(this.getAnalyzer().getUnboundODataProperties(mParents.publicParent, mActions.addODataProperty));
			}
			if (mActions.aggregation) {
				this._setDialogTitle(mActions, mParents.parent);
			}

			return Promise.resolve().then(function(){
				if (mActions.addODataProperty){
					return Utils.isServiceUpToDate(mParents.parent);
				}
			}).then(function() {
				if (mActions.addODataProperty){
					return Utils.isCustomFieldAvailable(mParents.parent);
				}
			}).then(function(oCurrentFieldExtInfo) {
				if (oCurrentFieldExtInfo) {
					this._oCurrentFieldExtInfo = oCurrentFieldExtInfo;
					this.getDialog().setCustomFieldEnabled(true);
					this.getDialog().detachEvent('openCustomField', this._onOpenCustomField, this);
					this.getDialog().attachEvent('openCustomField', null, this._onOpenCustomField, this);
				}
			}.bind(this)).then(
				_getAllElements.bind(null, aPromises)
			).then(function(aAllElements){
				this.getDialog().setElements(aAllElements);

				return this.getDialog().open().then(function() {
					this._createCommands(bOverlayIsSibling, oOverlay, mParents, oSiblingElement, mActions.designTimeMetadata, mActions);
				}.bind(this)).catch(function(oError){
					//no error means canceled dialog
					if (oError instanceof Error){
						throw oError;
					}
				});
			}.bind(this)).catch(function(oError){
				if (oError instanceof Error){
					throw oError;
				} else {
					jQuery.sap.log.info("Service not up to date, skipping add dialog", "sap.ui.rta");
				}
			});
		},

		_setDialogTitle : function(mActions, oParentElement){
			var sDialogTitle = _getText("HEADER_ADDITIONAL_ELEMENTS", mActions, oParentElement, PLURAL);
			this.getDialog().setTitle(sDialogTitle);
		},
		/**
		 * Function called when custom field button was pressed
		 *
		 * @param {sap.ui.base.Event}
		 *		  oEvent event object
		 */
		_onOpenCustomField : function (oEvent) {
			// open field ext ui
			var oCrossAppNav = sap.ushell && sap.ushell.Container
			&& sap.ushell.Container.getService("CrossApplicationNavigation");
			var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
				target : {
					semanticObject : "CustomField",
					action : "develop"
				},
				params : {
					businessContexts : this._oCurrentFieldExtInfo.BusinessContexts,
					serviceName : this._oCurrentFieldExtInfo.ServiceName,
					serviceVersion : this._oCurrentFieldExtInfo.ServiceVersion,
					entityType : this._oCurrentFieldExtInfo.EntityType
				}
			}));
			Utils.openNewWindow(sHrefForFieldExtensionUi);
		},

		_createCommands : function(bSibling, oOverlay, mParents, oSiblingElement, oDesignTimeMetadata, mActions) {

			var aSelectedElements = this.getDialog().getSelectedElements();

			if (aSelectedElements.length > 0) {
				//at least on element selected
				var oCompositeCommand = this.getCommandFactory().getCommandFor(mParents.parent, "composite");
				aSelectedElements.forEach(function(oSelectedElement){
					var oCmd;
					switch (oSelectedElement.type) {
						case "invisible":
							oCmd = this._createRevealCommandForInvisible(oSelectedElement, mActions, mParents, oSiblingElement);
							oCompositeCommand.addCommand(oCmd);

							oCmd = this._createMoveCommandForInvisible(oSelectedElement, mActions, mParents, oSiblingElement);
							if (oCmd) {
								oCompositeCommand.addCommand(oCmd);
							} else {
								jQuery.sap.log.warning("No move action configured for " + mParents.publicParent.getMetadata().getName() + ", aggregation: " + mActions.aggregation , "sap.ui.rta");
							}
							break;
						case "odata":
							oCmd = this._createCommandsForOData(oSelectedElement, mActions, mParents, oSiblingElement);
							oCompositeCommand.addCommand(oCmd);
							break;
						default:
							// FIXME: specify default behavior
					}
				}, this);
				this.fireElementModified({
					"command" : oCompositeCommand
				});
			}
		},

		_createCommandsForOData: function(oSelectedElement, mActions, mParents, oSiblingElement) {
			var oPublicParentDesignTimeMetadata = mActions.addODataProperty.designTimeMetadata;
			var oPublicAggregationDesignTimeMetadata = oPublicParentDesignTimeMetadata.createAggregationDesignTimeMetadata(mActions.aggregation);
			var iAddTargetIndex = Utils.getIndex(mParents.parent, oSiblingElement, mActions.aggregation, oPublicAggregationDesignTimeMetadata.getData().getIndex);
			return this.getCommandFactory().getCommandFor(mParents.publicParent, "addODataProperty", {
				newControlId: Utils.createFieldLabelId(mParents.publicParent, oSelectedElement.entityType, oSelectedElement.bindingPath),
				index : iAddTargetIndex,
				label : oSelectedElement.label,
				bindingString : oSelectedElement.bindingPath
			}, oPublicParentDesignTimeMetadata);
		},

		_createRevealCommandForInvisible: function(oSelectedElement, mActions, mParents, oSiblingElement) {
			var oRevealedElement = oSelectedElement.element;
			var sType = oRevealedElement.getMetadata().getName();
			var mType = mActions.reveal.types[sType];
			var oDesignTimeMetadata = mType.designTimeMetadata;
			if (mParents.publicParent !=  mParents.parent){
				var oAggregationDesignTimeMetadata = oDesignTimeMetadata.createAggregationDesignTimeMetadata(mActions.aggregation);
				return this.getCommandFactory().getCommandFor(mParents.publicParent, "reveal", {
					revealedElementId : oRevealedElement.getId(),
					hiddenParent : mParents.parent
				}, oAggregationDesignTimeMetadata);
			} else {
				return this.getCommandFactory().getCommandFor(oRevealedElement, "reveal", { }, oDesignTimeMetadata);
			}
		},

		_createMoveCommandForInvisible: function(oSelectedElement, mActions, mParents, oSiblingElement) {
			var oRevealedElement = oSelectedElement.element;
			var sType = oRevealedElement.getMetadata().getName();
			var mType = mActions.reveal.types[sType];
			var sParentAggregationName = mType.action.getAggregationName(mParents.parent, oRevealedElement);
			var oSourceParent = _getSourceParent(oRevealedElement, mParents);
			var oTargetParent = mParents.parent;
			var iRevealTargetIndex = Utils.getIndex(mParents.parent, oSiblingElement, sParentAggregationName);
			var iRevealedSourceIndex = Utils.getIndex(oSourceParent, oRevealedElement, sParentAggregationName) - 1;

			iRevealTargetIndex = _adjustTargetIndex(oSourceParent, oTargetParent, iRevealedSourceIndex, iRevealTargetIndex);

			var oCmd;
			if (iRevealTargetIndex !== iRevealedSourceIndex || mParents.parent !== oRevealedElement.getParent()){
				var SourceParentDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
				oCmd = this.getCommandFactory().getCommandFor(mParents.publicParent, "move", {
					movedElements : [{
						element : oRevealedElement,
						sourceIndex : iRevealedSourceIndex,
						targetIndex : iRevealTargetIndex
					}],
					source : {
						publicParent : mParents.publicParent,
						publicAggregation: mActions.aggregation,
						parent : oSourceParent,
						aggregation : sParentAggregationName
					},
					target : {
						publicParent : mParents.publicParent,
						publicAggregation: mActions.aggregation,
						parent : oTargetParent,
						aggregation : sParentAggregationName
					}
				}, SourceParentDesignTimeMetadata);
			}
			return oCmd;
		},

		/**
		 * This function gets called twice, on startup and when we create a context menu.
		 * On Startup bOverlayIsSibling is not defined as we don't know if it is a sibling or not. In this case we check both cases.
		 * @param {sap.ui.dt.Overlay} oOverlay - overlay to be checked
		 * @param {boolean} bOverlayIsSibling - (optional) describs whether given overlay is to be checked as a sibling or as a child on editable. Expected values: [true, false, undefined]
		 * @private
		 */
		_isEditable: function(oOverlay, bOverlayIsSibling) {
			if (bOverlayIsSibling === undefined || bOverlayIsSibling === null) {
				return _isEditableCheck.call(this, oOverlay, true) || _isEditableCheck.call(this, oOverlay, false);
			} else {
				return _isEditableCheck.call(this, oOverlay, bOverlayIsSibling);
			}
		}
	});

	function _isEditableCheck (oOverlay, bOverlayIsSibling) {
		var bEditable = false;

		var oPublicParentDesigntimeMetadata = Utils.getPublicParentDesigntimeMetadata(oOverlay);
		if (!oPublicParentDesigntimeMetadata) {
			return false;
		}

		var mActions = _getActions(bOverlayIsSibling, oOverlay);

		if (mActions.addODataProperty) {
			var oAddODataPropertyAction = mActions.addODataProperty.action;
			bEditable = oAddODataPropertyAction && oAddODataPropertyAction.aggregation === oOverlay.getPublicParentAggregationOverlay().getAggregationName();
		}

		if (!bEditable && mActions.reveal) {
			bEditable = true;
		}

		if (!bEditable && !bOverlayIsSibling) {
			bEditable = _hasRevealActionsOnChildren(oOverlay);
		}

		if (!bEditable && bOverlayIsSibling) {
			bEditable = this.checkAggregations(oOverlay, oOverlay.getPublicParentAggregationOverlay(), "addODataProperty");
		}

		if (!bEditable && !bOverlayIsSibling) {
			bEditable = this.checkAggregationsOnSelf(oOverlay, "addODataProperty");
		}

		if (bEditable) {
			return this.hasStableId(oOverlay);
		} else {
			return false;
		}
	}

	function _getAllElements (aPromises) {
		return Promise.all(aPromises).then(function(aAnalyzerValues) {
			var aAllElements = aAnalyzerValues[0] || [];
			if (aAllElements && aAnalyzerValues[1]) {
				aAllElements = aAllElements.concat(aAnalyzerValues[1]);
			}
			return aAllElements;
		});
	}

	function _getSourceParent(oRevealedElement, mParents){
		var oParent = oRevealedElement.getParent();
		if (!oParent && oRevealedElement.sParentId){
			//stashed control has no parent, but remembers its parent id
			oParent = sap.ui.getCore().byId(oRevealedElement.sParentId);
		} else if (!oParent) {
			// fallback to target parent
			oParent = mParents.parent;
		}
		return oParent;
	}

	//in case an element is moved inside the same container above its current position, its own position has to be removed
	function _adjustTargetIndex (oSourceContainer, oTargetContainer, iSourceIndex, iTargetIndex) {
		if (oSourceContainer === oTargetContainer && iSourceIndex < iTargetIndex && iSourceIndex > -1) {
			return iTargetIndex - 1;
		}
		return iTargetIndex;
	}

	// _getRevealActions for isEditable check
	function _hasRevealActionsOnChildren (oOverlay){
		var mRevealActions = _getRevealActions(false, oOverlay);
		return !!mRevealActions && Object.keys(mRevealActions).length > 0;
	}

	return AdditionalElementsPlugin;
});

}; // end of sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.SettingsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.ui.SettingsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/SettingsDialog",['jquery.sap.global',
			'sap/ui/rta/library',
			'sap/ui/core/Control',
			'sap/m/Dialog',
			'sap/ui/layout/VerticalLayout',
			'sap/m/Label',
			'sap/m/Input',
			'sap/m/Select',
			'sap/ui/core/Item',
			'sap/m/Button',
			'sap/m/CheckBox',
			'sap/ui/rta/command/CommandFactory',
			'sap/ui/rta/command/CompositeCommand',
			'sap/ui/dt/ElementUtil'
	],
	function (jQuery,
			library,
			Control,
			Dialog,
			VerticalLayout,
			Label,
			Input,
			Select,
			Item,
			Button,
			CheckBox,
			CommandFactory,
			CompositeCommand,
			ElementUtil
	) {
	"use strict";

		/**
		 * Constructor for a new sap.ui.rta.SettingsDialog control.
		 * @extends sap.ui.core.Control
		 * @author SAP SE
		 * @version 1.46.2
		 * @constructor
		 * @private
		 * @since 1.34
		 * @alias SettingsDialog
		 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might
		 *               be changed in future.
		 */
	var SettingsDialog = Control.extend("sap.ui.rta.ui.SettingsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				"commandStack" : {
					type : "sap.ui.core.Control"
				}
			},
			associations : {
				"element" : {
					type : "sap.ui.core.Element"
				}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype.init = function() {
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._oDialog = this._createDialog();
	};

	/**
	 * Create the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype._createDialog = function() {
		return new Dialog({
			title : this._oTextResources.getText("HEADER_SETTINGS"),
			contentHeight : "500px",
			draggable: true,
			buttons : [
				new Button({
					text : this._oTextResources.getText("BTN_FREP_OK"),
					press : [this._applyChangesAndClose, this]
				}),
				new Button({
					text : this._oTextResources.getText("BTN_FREP_CANCEL"),
					press : [this._cancelDialog, this]
				})
			]
		}).addStyleClass("sapUiPopupWithPadding").addStyleClass("sapUiSizeCompact");
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChangesAndClose = function() {
		this._applyChanges();
		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._iterateExecutedCommands = function(fnCallback) {
		Object.keys(this._mCommands).forEach(function(sPropertyName) {
			fnCallback(this._mCommands[sPropertyName]);
		}, this);
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChanges = function() {
		var oCompositeCommand = new CompositeCommand();
		this._iterateExecutedCommands(function(oCommand) {
			oCompositeCommand.addCommand(oCommand);
		});
		if (oCompositeCommand.getCommands().length) {
			this.getCommandStack().pushExecutedCommand(oCompositeCommand);
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._cancelDialog = function() {
		this._iterateExecutedCommands(function(oCommand) {
			oCommand.undo();
		});

		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._executePropertyChangeCommand = function(oElement, sPropertyName, vNewValue, vOldValue) {
		if (!this._mCommands[sPropertyName]) {
			var oPropertyChangeCommand = CommandFactory.getCommandFor(oElement, "property", {
				propertyName : sPropertyName,
				newValue : vNewValue,
				oldValue : vOldValue
			});
			this._mCommands[sPropertyName] = oPropertyChangeCommand;
			oPropertyChangeCommand.execute();
		} else {
			this._mCommands[sPropertyName].undo();
			delete this._mCommands[sPropertyName];
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createBooleanEditor = function(oElement, sPropertyName, bPropertyValue) {
		var oCheckBox = new CheckBox({
			text : sPropertyName,
			selected : bPropertyValue
		});

		oCheckBox.attachSelect(function(oEvent) {
			var bNewValue = oEvent.getParameter("selected");
			var bOldValue = !bNewValue;
			this._executePropertyChangeCommand(oElement, sPropertyName, bNewValue, bOldValue);
		}, this);

		return oCheckBox;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createStringEditor = function(oElement, sPropertyName, sPropertyValue) {
		var oInput = new Input({value : sPropertyValue});

		oInput.attachChange(function(oEvent) {
			var sNewValue = oEvent.getParameter("value");
			// TODO : get old value via elementUtil
			var sOldValue = sPropertyValue;
			this._executePropertyChangeCommand(oElement, sPropertyName, sNewValue, sOldValue);
		}, this);

		return oInput;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createEnumEditor = function(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue) {
		var oSelect = new Select();
		Object.keys(oPropertyTypeDescription).forEach(function(sKey) {
			oSelect.addItem(new Item({
				text : sKey,
				key : oPropertyTypeDescription[sKey]
			}));
		});

		oSelect.setSelectedKey(vPropertyValue);

		oSelect.attachChange(function(oEvent) {
			var oItem = oEvent.getParameter("selectedItem");
			if (oItem) {
				var vNewValue = oItem.getKey();
				var vOldValue = vPropertyValue;
				this._executePropertyChangeCommand(oElement, sPropertyName, vNewValue, vOldValue);
			}
		}, this);

		return oSelect;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._updateDialogContent = function(oElement) {
		this._oDialog.removeAllContent();
		var oVerticalLayout = new VerticalLayout();
		var mProperties = oElement.getMetadata().getAllProperties();
		Object.keys(mProperties).forEach(function(sPropertyName) {
			var oPropertyChangeControl;
			var oPropertyMetadata = mProperties[sPropertyName];
			// TODO : elementUtil for properties getters
			var vPropertyValue = oElement[oPropertyMetadata._sGetter]();

			if (oPropertyMetadata.type === "boolean") {
				oPropertyChangeControl = this._createBooleanEditor(oElement, sPropertyName, vPropertyValue);
				oVerticalLayout.addContent(oPropertyChangeControl);
			} else 	if (oPropertyMetadata.type === "string" || oPropertyMetadata.type === "sap.ui.core.CSSSize") {
				oPropertyChangeControl = new VerticalLayout();
				var oInput = this._createStringEditor(oElement, sPropertyName, vPropertyValue);

				oPropertyChangeControl.addContent(new Label({
					text : sPropertyName,
					labelFor : oInput.getId()
				}));
				oPropertyChangeControl.addContent(oInput);
				oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
			} else {
				var oPropertyTypeDescription = jQuery.sap.getObject(oPropertyMetadata.type);
				if (oPropertyTypeDescription) {
					oPropertyChangeControl = new VerticalLayout();
					var oDropdown = this._createEnumEditor(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue);

					oPropertyChangeControl.addContent(new Label({
						text : sPropertyName,
						labelFor : oDropdown.getId()
					}));
					oPropertyChangeControl.addContent(oDropdown);
					oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
				}
			}

			if (oPropertyChangeControl) {
				oVerticalLayout.addContent(oPropertyChangeControl);
			}
		}, this);
		this._oDialog.addContent(oVerticalLayout);
	};

	/**
	 * Open the Settings Dialog
	 *
	 * @param {sap.ui.core.Element}
	 *          oElement Currently selected control
	 */
	SettingsDialog.prototype.open = function(oElement) {
		this._mCommands = {};

		this._updateDialogContent(oElement);

		// Makes sure the modal div element does not change the size of our application (which would result in recalculation of our overlays)
		this._oDialog.open();
	};

	return SettingsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/SettingsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.rta.ToolsMenu.
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenu'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenu",[
	'sap/ui/rta/library',
	'sap/ui/core/Control',
	'sap/m/Toolbar',
	'sap/m/ToolbarLayoutData',
	'sap/m/ToolbarSpacer',
	'sap/m/Label',
	'sap/ui/core/Popup',
	'sap/ui/fl/registry/Settings',
	'sap/ui/fl/Utils',
	'sap/ui/rta/Utils'
	],
	function(
		library,
		Control,
		Toolbar,
		ToolbarLayoutData,
		ToolbarSpacer,
		Label,
		Popup,
		FlexSettings,
		FlUtils,
		Utils) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.ToolsMenu control.
	 *
	 * @class
	 * Contains all the necessary Toolbars for the Runtime Authoring
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.ToolsMenu
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ToolsMenu = Control.extend("sap.ui.rta.ui.ToolsMenu", {
		metadata : {

			library : "sap.ui.rta",
			// ---- control specific ----
			aggregations : {
				"toolbars" : {
					type : "sap.m.Toolbar",
					multiple : true,
					singularName : "toolbar"
				}
			},
			events : {
				/**
				 * Events are fired when the Toolbar - Buttons are pressed
				 */
				"undo" : {},
				"redo" : {},
				"close" : {},
				"toolbarClose" : {},
				"restore": {},
				"transport" : {}
			}
		}

	});

	/**
	 * Initialization of the ToolsMenu Control
	 * @private
	 */
	ToolsMenu.prototype.init = function() {
		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
	};

	/**
	 * Create Toolbar
	 * @private
	 */
	ToolsMenu.prototype.createToolbar = function(bTriggeredFromDialog) {
		var sText = null;
		// calculate z-index dependent on opened popups
		var iZIndex = Popup.getNextZIndex();

		if (!this._oToolBar) {
			//create Toolbar
			var oRenderer = Utils.getFiori2Renderer();
			if (oRenderer && !bTriggeredFromDialog) {
				this._oToolBar = oRenderer.addSubHeader("sap.m.Bar", {}, false, true);
				this._oToolBar.addStyleClass("sapUiRTAFioriToolBar");
			} else {
				this._oToolBar = new Toolbar({
					active : true
				});

				// Insert a DIV-Element for Top Toolbar in the DOM
				jQuery("body").prepend('<div id="RTA-Toolbar" style="z-index: ' + iZIndex + '"></div>');
				var oTop = jQuery("#RTA-Toolbar").addClass("sapUiRTAToolsMenuWrapper");
				oTop = oTop[0];
				this.placeAt(oTop);
				this.addToolbar(this._oToolBar);
			}
			this._oToolBar.addStyleClass("sapUiRTAToolBar");

			var oAdaptModeLabel = null;
			var oButtonExit = null;
			var oSpacerTop = null;

			// Label 'Adaptation Mode'
			oAdaptModeLabel = new Label({
				text : this._oRb.getText("TOOLBAR_TITLE"),
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oAdaptModeLabel.bAllowTextSelection = false;

			// Button 'Undo'
			sText = this._oRb.getText("BTN_UNDO");
			this._oButtonUndo = new sap.m.Button({
				type:"Transparent",
				icon: "sap-icon://undo",
				enabled : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonUndo.data("Action", "UNDO",true);
			this._oButtonUndo.attachEvent('press', this._onUndo, this);

			// Button 'Redo'
			sText = this._oRb.getText("BTN_REDO");
			this._oButtonRedo = new sap.m.Button({
				type:"Transparent",
				icon: "sap-icon://redo",
				iconFirst: false,
				enabled : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonRedo.data("Action", "REDO",true);
			this._oButtonRedo.attachEvent('press', this._onRedo, this);

			// Button 'Restore'
			sText = this._oRb.getText("BTN_RESTORE");
			this._oButtonRestore = new sap.m.Button({
				type:"Transparent",
				text : sText,
				visible: true,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonRestore.data("Action", "RESTORE",true);
			this._oButtonRestore.attachEvent('press', this._onRestore, this);

			// Button 'Exit'
			sText = this._oRb.getText("BTN_EXIT");
			oButtonExit = new sap.m.Button({
				type:"Transparent",
				text : sText,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oButtonExit.data("Action", "EXIT",true);
			oButtonExit.attachEvent('press', this.close, this);

			// Button 'Publish'
			sText = this._oRb.getText("BTN_PUBLISH");
			this._oButtonPublish = new sap.m.Button({
				type:"Transparent",
				text : sText,
				visible : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonPublish.data("Action", "TRANSPORT", true);
			this._oButtonPublish.attachEvent('press', this._onTransport, this);

			// Space between Toolbar Elements
			oSpacerTop = new ToolbarSpacer();

			return FlexSettings.getInstance(FlUtils.getComponentClassName(this._oRootControl))
				.then(function(oSettings) {
					var bShowPublish = !oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured();
					this._oButtonPublish.setVisible(bShowPublish);
				}.bind(this))
				.catch(function(oError) {
					this._oButtonPublish.setVisible(false);
				}.bind(this))
				.then(function() {
					// set Content of Toolbar
					if (Utils.getFiori2Renderer()) {
						this._oToolBar.addContentLeft(oAdaptModeLabel);
						this._oToolBar.addContentRight(this._oButtonUndo);
						this._oToolBar.addContentRight(this._oButtonRedo);
						this._oToolBar.addContentRight(this._oButtonRestore);
						this._oToolBar.addContentRight(this._oButtonPublish);
						this._oToolBar.addContentRight(oButtonExit);
					} else {
						this._oToolBar.addContent(oAdaptModeLabel);
						this._oToolBar.addContent(oSpacerTop);
						this._oToolBar.addContent(this._oButtonUndo);
						this._oToolBar.addContent(this._oButtonRedo);
						this._oToolBar.addContent(this._oButtonRestore);
						this._oToolBar.addContent(this._oButtonPublish);
						this._oToolBar.addContent(oButtonExit);
					}
					sap.ui.getCore().applyChanges();
					this._oToolBar.addStyleClass("sapUiRTAToolBarContentVisible");
				}.bind(this));
		} else {
			this._oToolBar.addStyleClass("sapUiRTAToolBarContentVisible");
		}
	};

	/**
	 * Override the EXIT-Function
	 * @private
	 */
	ToolsMenu.prototype.exit = function() {
		// Remove the DOM-Element for the Toolbar
		jQuery("#RTA-Toolbar").remove();
	};

	/**
	 * Trigger transport
	 * @private
	 */
	ToolsMenu.prototype._onTransport = function() {
		this.fireTransport();
	};

	/**
	 * Makes the Toolbar(s) visible
	 * @public
	 */
	ToolsMenu.prototype.show = function() {
		var oRenderer = Utils.getFiori2Renderer();
		if (oRenderer) {
			oRenderer.showSubHeader(this._oToolBar.getId(), false, ["home", "app"]);
			oRenderer.setHeaderVisibility(false, false, ["home", "app"]);
			sap.ui.getCore().applyChanges();
		}
		this._oToolBar.addStyleClass("sapUiRTAToolBarVisible");
		this._oToolBar.removeStyleClass("sapUiRTAToolBarInvisible");
	};

	/**
	 * Makes the TOP Toolbar invisible
	 * @public
	 */
	ToolsMenu.prototype.hide = function() {
		return new Promise(function(resolve) {
			var oToolBarDOM = document.getElementsByClassName("sapUiRTAToolBar")[0];
			var fnAnimationEnd = function() {
				var oRenderer = Utils.getFiori2Renderer();
				if (oRenderer) {
					oRenderer.setHeaderVisibility(true, false, ["home", "app"]);
					oRenderer.hideSubHeader(this._oToolBar.getId(), false, ["home", "app"]);
					sap.ui.getCore().applyChanges();
					this._oToolBar.addStyleClass("sapUiRTAToolBarDisplayNone");
				}
				resolve();
				this.fireClose();
			}.bind(this);

			// all types of CSS3 animationend events for different browsers
			if (oToolBarDOM) {
				oToolBarDOM.addEventListener("webkitAnimationEnd", fnAnimationEnd);
				oToolBarDOM.addEventListener("animationend", fnAnimationEnd);
				oToolBarDOM.addEventListener("oanimationend", fnAnimationEnd);
	
				this._oToolBar.removeStyleClass("sapUiRTAToolBarContentVisible");
				this._oToolBar.removeStyleClass("sapUiRTAToolBarVisible");
				this._oToolBar.addStyleClass("sapUiRTAToolBarInvisible");
			} else {
				fnAnimationEnd();
			}
		}.bind(this));
	};

	/**
	 * Trigger undo
	 * @private
	 */
	ToolsMenu.prototype._onUndo = function() {

		this.fireUndo();
	};

	/**
	 * Trigger redo
	 * @private
	 */
	ToolsMenu.prototype._onRedo = function() {

		this.fireRedo();
	};

	/**
	 * Discard all the LREP changes and restore the default app state
	 * @private
	 */
	ToolsMenu.prototype._onRestore = function() {

		this.fireRestore();
	};

	/**
	 * Closing the ToolsMenu
	 * @public
	 */
	ToolsMenu.prototype.close = function() {

		this.fireToolbarClose();

	};

	/**
	 * Set the Application Title
	 * @param {string} sTitle Application Title
	 * @public
	 */
	// Method for setting the Application Title
	ToolsMenu.prototype.setTitle = function(sTitle) {
		var oLabel = this._oToolBar.getContent()[0];
		oLabel.setText(sTitle);
	};

	/**
	 * Set the root control
	 * @param {sap.ui.core.Control} oControl - SAPUI5 control
	 * @public
	 */
	ToolsMenu.prototype.setRootControl = function(oControl) {
		this._oRootControl = oControl;
	};

	/**
	 * Adapt the enablement of the und/redo buttons in the ToolsMenu
	 */
	ToolsMenu.prototype.adaptUndoRedoEnablement = function(bCanUndo,bCanRedo) {
		this._oButtonUndo.setEnabled(bCanUndo);
		this._oButtonRedo.setEnabled(bCanRedo);
	};

	/**
	 * Adapt the enablement of the Transport/Publish button in the ToolsMenu
	 * @param {Boolean}
	 * 			bChangesExists set to true if changes exists
	 */
	ToolsMenu.prototype.adaptTransportEnablement = function(bChangesExists) {
		this._oButtonPublish.setEnabled(bChangesExists);
	};

	/**
	 * Adapt the enablement of the Reset button in the ToolsMenu
	 * @param {Boolean}
	 * 			bChangesExists set to true if changes exists
	 */
	ToolsMenu.prototype.adaptRestoreEnablement = function(bChangesExists) {
		this._oButtonRestore.setEnabled(bChangesExists);
	};

	return ToolsMenu;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/ToolsMenu.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides default renderer for control sap.ui.rta.ToolsMenu
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenuRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenuRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * @author SAP SE
	 * @class ToolsMenu renderer.
	 * @static
	 */
	var ToolsMenuRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ToolsMenuRenderer.render = function(oRm, oControl) {

		if (oControl.getToolbars().length !== 0){
			oControl.getToolbars().forEach(function(oCtrl){
				oRm.renderControl(oCtrl);
			});
		}
	};
	return ToolsMenuRenderer;

}, /* bExport= */ true);
}; // end of sap/ui/rta/ui/ToolsMenuRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepLocalStorage",[], function() {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep localStorage
	 * 
	 * @class
	 * Utility functionality for SAP RTA Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepLocalStorage
	 */

	var RTA_LREP_KEY = "sap.ui.rta.change";
	var FakeLrepLocalStorage = {};

	/**
	 * Creates the RTA Lrep change key
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {String} the prefixed id
	 */
	FakeLrepLocalStorage.createChangeKey = function(sId) {

		if (sId) {
			return RTA_LREP_KEY + "." + sId;
		}
	};

	/**
	 * The iterator for the local RTA Lrep changes (localStorage)
	 * @public
	 * @param {function} fnPredicate - the function to apply for each RTA cahnge
	 */
	FakeLrepLocalStorage.forEachLrepChangeInLocalStorage = function(fnPredicate) {

		for (var sKey in window.localStorage) {

			if (sKey.indexOf(RTA_LREP_KEY) > -1) {
				fnPredicate(sKey);
			}
		}
	};

	/**
	 * Get a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {Object} the specific change
	 */
	FakeLrepLocalStorage.getChange = function(sId) {

		if (sId) {

			var sChange = window.localStorage.getItem(this.createChangeKey(sId));
			return JSON.parse(sChange);
		}
	};

	/**
	 * Get all RTA Lrep changes (localStorage)
	 * @returns {Object[]} all local RTA changes
	 */
	FakeLrepLocalStorage.getChanges = function() {

		var aChanges = [],
			oChange;

		this.forEachLrepChangeInLocalStorage(function(sKey) {

			oChange = JSON.parse(window.localStorage[sKey]);
			aChanges.push(oChange);
		});

		return aChanges;
	};

	/**
	 * Get the number of RTA Lrep changes (localStorage)
	 * @returns {Number} the amout of local RTA Lrep changes
	 */
	FakeLrepLocalStorage.getNumChanges = function() {

		var iChanges = 0;

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			iChanges++;
		});

		return iChanges;
	};
	
	FakeLrepLocalStorage._aModifyCallbacks = [];
	
	/**
	 * Use this in tests to ensure the modify operation happend
	 * @param {Function} fnCallback callback, which is called, when the local storage is 
	 */
	FakeLrepLocalStorage.attachModifyCallback = function(fnCallback) {
		this._aModifyCallbacks.push(fnCallback);
	};
	
	/**
	 * Stop listening on modify operations
	 * @param {Function} fnCallback callback to be removed
	 */
	FakeLrepLocalStorage.detachModifyCallback = function(fnCallback) {
		var i = this._aModifyCallbacks.indexOf(fnCallback);
		if (i !== -1){
			this._aModifyCallbacks.splice(i,1);
		}
	};
	
	FakeLrepLocalStorage._callModifyCallbacks = function() {
		this._aModifyCallbacks.forEach(function(fnCallback){
			fnCallback();
		});
	};
	/**
	 * Delete a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 */
	FakeLrepLocalStorage.deleteChange = function(sId) {

		if (sId) {
			window.localStorage.removeItem(this.createChangeKey(sId));
		}
		
		this._callModifyCallbacks();
	};

	/**
	 * Delete all RTA Lrep changes (localStorage)
	 * @public
	 */
	FakeLrepLocalStorage.deleteChanges = function() {

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			window.localStorage.removeItem(sKey);
		});
		this._callModifyCallbacks();
	};

	/**
	 * Save a RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @param  {Object} oChange - the change object
	 */
	FakeLrepLocalStorage.saveChange = function(sId, oChange) {

		if (sId && oChange) {

			var sChangeKey = this.createChangeKey(sId),
				sChange = JSON.stringify(oChange);

			window.localStorage.setItem(sChangeKey, sChange);
		}
		this._callModifyCallbacks();
	};

	return FakeLrepLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.AddODataProperty') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.AddODataProperty'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/AddODataProperty",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand', "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/BaseTreeModifier"], function(jQuery, FlexCommand, FlexUtils, BaseTreeModifier) {
	"use strict";

	/**
	 * Add new OData property to a control
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.AddODataProperty
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var AddODataProperty = FlexCommand.extend("sap.ui.rta.command.AddODataProperty", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				index : {
					type : "int"
				},
				newControlId : {
					type : "string"
				},
				label : {
					type : "string"
				},
				bindingString : {
					type : "string"
				}
			}
		}
	});

	AddODataProperty.prototype._getChangeSpecificData = function() {
		// general format
		return {
			changeType : this.getChangeType(),
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			label : this.getLabel(),
			bindingPath : this.getBindingString()
		};
	};

	return AddODataProperty;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/AddODataProperty.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BindProperty') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BindProperty'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyBindingChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BindProperty",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyBindingChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyBindingChangeHandler, Utils) {
	"use strict";

	/**
	 * The BindProperty command take an element and the name of a property
	 * (propertyName) together with a complex binding string (newBinding).
	 * When executed, the binding is set on the property. The binding string
	 * has to comply with the same rules that apply to bindings passed to properties
	 * in the constructor of SAPUI5 ManagedObjects.
	 *
	 * Setting the oldValue or oldBinding is optional if you are running in the
	 * designMode (see unit test page).
	 * If set these take precedence over the actual value of the control.
	 * You should not set both properties.
	 *
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.BindProperty
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BindProperty = FlexCommand.extend("sap.ui.rta.command.BindProperty", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newBinding : {
					type : "string",
					bindable : false
				},
				changeType : {
					type : "string",
					defaultValue : "propertyBindingChange"
				}
			},
			associations : {},
			events : {}
		}
	});

	BindProperty.prototype.init = function() {
		this.setChangeHandler(PropertyBindingChangeHandler);
	};

	/**
	 * @override to suppress the binding strings to be used as
	 */
	BindProperty.prototype.bindProperty = function(sName, oBindingInfo){
		if (sName === "newBinding"){
			return this.setNewBinding(oBindingInfo.bindingString);
		}
		return FlexCommand.prototype.bindProperty.apply(this, arguments);
	};

	BindProperty.prototype._getChangeSpecificData = function() {
		var oElement = this.getElement();
		// general format
		var mSpecificChangeInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				newBinding : this.getNewBinding()
			}
		};

		return mSpecificChangeInfo;
	};

	return BindProperty;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BindProperty.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Combine') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Combine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Combine",[
	'sap/ui/rta/command/FlexCommand'
], function(FlexCommand) {
	"use strict";

	/**
	 * Combine fields
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.46
	 * @alias sap.ui.rta.command.Combine
	 * @experimental Since 1.46. This class is experimental and provides only limited functionality. Also the API might be
	 *							 changed in future.
	 */
	var Combine = FlexCommand.extend("sap.ui.rta.command.Combine", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				source : {
					type : "any"
				},
				combineFields : {
					type : "any[]"
				}
			},
			associations : {},
			events : {}
		}
	});

	/**
	 * @override
	 */
	Combine.prototype._getChangeSpecificData = function() {
		var aFieldIds = [];
		this.getCombineFields().forEach(function(oField) {
			aFieldIds.push(oField.getId());
		});
		var mSpecificInfo = {
				changeType : this.getChangeType(),
				sourceControlId : this.getSource().getId(),
				combineFieldIds : aFieldIds
		};
		return mSpecificInfo;
	};

	return Combine;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Combine.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CreateContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CreateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/CreateContainer",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand'], function(jQuery, FlexCommand) {
	"use strict";

	/**
	 * Create new container
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CreateContainer
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CreateContainer = FlexCommand.extend("sap.ui.rta.command.CreateContainer", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				index : {
					type : "int"
				},
				newControlId : {
					type : "string"
				},
				label : {
					type : "string"
				}
			},
			associations : {},
			events : {}
		}
	});

	CreateContainer.prototype._getChangeSpecificData = function(bForward) {

		var mSpecificInfo = {
			changeType : this.getChangeType(),
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			newLabel : this.getLabel()
		};

		return mSpecificInfo;
	};

	return CreateContainer;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CreateContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.LREPSerializer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.LREPSerializer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/LREPSerializer",['sap/ui/base/ManagedObject', 'sap/ui/rta/command/Stack', 'sap/ui/fl/FlexControllerFactory'], function(ManagedObject, CommandStack, FlexControllerFactory) {
	"use strict";
	/**
	 * Basic implementation for the LREP Serializer.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.42
	 * @alias sap.ui.rta.command.LREPSerializer
	 * @experimental Since 1.42. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var LREPSerializer = ManagedObject.extend("sap.ui.rta.command.LREPSerializer", {
		metadata : {
			library : "sap.ui.rta",
			associations : {
				/** The root control which is needed for the Flex Controller */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				"commandStack" : {
					type : "object" // has to be of type sap.ui.rta.command.Stack
				}
			},
			aggregations : {}
		}
	});
	/**
	 * Serializes and saves all changes to LREP
	 *
	 * @returns {Promise}
	 * @public
	 */
	LREPSerializer.prototype.saveCommands = function() {
		var oCommandStack = this.getCommandStack();
		var oRootControl = sap.ui.getCore().byId(this.getRootControl());
		if (!oRootControl) {
			throw new Error("Can't save commands without root control instance!");
		}
		var oFlexController = FlexControllerFactory.createForControl(oRootControl);
		var aCommands = oCommandStack.getAllExecutedCommands();
		aCommands.forEach(function(oCommand) {
			var oElement = oCommand.getElement();
			oFlexController.addPreparedChange(oCommand.getPreparedChange(), oElement);
		});
		return oFlexController.saveAll().then(function() {
			jQuery.sap.log.info("UI adaptation successfully transfered changes to layered repository");
			this.getCommandStack().removeAllCommands();
		}.bind(this));
	};
	return LREPSerializer;
}, /* bExport= */true);

}; // end of sap/ui/rta/command/LREPSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Combine') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Combine.
jQuery.sap.declare('sap.ui.rta.plugin.Combine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Selection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Combine",[
	'sap/ui/rta/plugin/Plugin', 'sap/ui/dt/Selection', 'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils'
], function(Plugin, Selection, OverlayRegistry, Utils) {
	"use strict";

	/**
	 * Constructor for a new Combine Plugin.
	 *
	 * @class
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.46
	 * @alias sap.ui.rta.plugin.Combine
	 * @experimental Since 1.46. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Combine = Plugin.extend("sap.ui.rta.plugin.Combine", /** @lends sap.ui.rta.plugin.Combine.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * @private
	 */
	Combine.prototype._isEditable = function(oOverlay) {
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oOverlay);
		var oElement = oOverlay.getElementInstance();
		if (!Utils.getPublicParentDesigntimeMetadata(oOverlay)) {
			return false;
		}
		var oCombineAction = this._getCombineAction(oOverlay);
		if (oCombineAction && oCombineAction.changeType) {
			return this.hasChangeHandler(oCombineAction.changeType, oDesignTimeMetadata.getRelevantContainer(oElement)) && this.hasStableId(oOverlay);
		} else {
			return false;
		}
	};

	/**
	 * @param	{sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Combine.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @param	{sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {sap.ui.dt.DesignTimeMetadata} oDesignTimeMetadata
	 * @private
	 */
	Combine.prototype._getCombineAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("combine", oOverlay.getElementInstance());
	};

	Combine.prototype._checkForSameRelevantContainer = function(aSelectedOverlays) {
		var aElements = [];
		var aRelevantContainer = [];
		for (var i = 0, n = aSelectedOverlays.length; i < n; i++) {
			aElements[i] = aSelectedOverlays[i].getElementInstance();
			aRelevantContainer[i] = this._getEffectiveDesignTimeMetadata(aSelectedOverlays[i]).getRelevantContainer(aElements[i]);
			if (i > 0) {
				if ((aRelevantContainer[0] !== aRelevantContainer[i])
					|| (aElements[0].getMetadata().getName() !== aElements[i].getMetadata().getName())) {

					return false;
				}
			}
		}
		return true;
	};

	/**
	 * Checks if Combine is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if available
	 * @public
	 */
	Combine.prototype.isCombineAvailable = function(oOverlay) {
		var aSelectedOverlays = this.getDesignTime().getSelection();

		if (aSelectedOverlays.length <= 1) {
			return false;
		}
		return (this._checkForSameRelevantContainer(aSelectedOverlays) && this._isEditableByPlugin(oOverlay));
	};

	/**
	 * Checks if Combine is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean} true if enabled
	 * @public
	 */
	Combine.prototype.isCombineEnabled = function(oOverlay) {
		var aSelectedOverlays = this.getDesignTime().getSelection();

		// check that no more than 3 fields can be combined
		if (!this.isCombineAvailable(oOverlay) || aSelectedOverlays.length <= 1) {
			return false;
		}

		var aSelectedControls = aSelectedOverlays.map(function (oSelectedOverlay) {
			return oSelectedOverlay.getElementInstance();
		});

		// check that each selected element has an enabled action
		var bActionCheck = aSelectedOverlays.every(function(oSelectedOverlay) {
			var oAction = this._getCombineAction(oSelectedOverlay);
			if (!oAction) {
				return false;
			}

			// when isEnabled is not defined the default is true
			if (typeof oAction.isEnabled !== "undefined") {
				if (typeof oAction.isEnabled === "function") {
					return oAction.isEnabled(aSelectedControls);
				} else {
					return oAction.isEnabled;
				}
			}

			return true;
		}, this);

		return bActionCheck;
	};

	/**
	 * @param  {any} oCombineElement selected element
	 */
	Combine.prototype.handleCombine = function(oCombineElement) {
		var oElementOverlay = OverlayRegistry.getOverlay(oCombineElement);
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oElementOverlay);
		var oElement;

		if (oElementOverlay.isInHiddenTree()) {
			oElement = oElementOverlay.getPublicParentElementOverlay().getElementInstance();
		} else {
			oElement = oCombineElement;
		}

		var aToCombineElements = [];
		var aSelectedOverlays = this.getDesignTime().getSelection();

		for (var i = 0; i < aSelectedOverlays.length; i++) {
			var oSelectedElement = aSelectedOverlays[i].getElementInstance();
			aToCombineElements.push(oSelectedElement);
		}

		var oCombineCommand = this.getCommandFactory().getCommandFor(oElement, "combine", {
			source : oCombineElement,
			combineFields : aToCombineElements
		}, oDesignTimeMetadata);
		this.fireElementModified({
			"command" : oCombineCommand
		});

	};

	return Combine;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Combine.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.CreateContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Remove.
jQuery.sap.declare('sap.ui.rta.plugin.CreateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/CreateContainer",[
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/fl/Utils',
	'sap/ui/rta/Utils',
	'sap/ui/dt/OverlayRegistry'

], function(Plugin, FlexUtils, RtaUtils,  OverlayRegistry) {
	"use strict";

	/**
	 * Constructor for a new CreateContainer Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The CreateContainer allows trigger CreateContainer operations on the overlay
	 * @extends sap.ui.rta.plugin.Plugin
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.CreateContainer
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var CreateContainer = Plugin.extend("sap.ui.rta.plugin.CreateContainer", /** @lends sap.ui.rta.plugin.CreateContainer.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * This function gets called twice, on startup and when we create a context menu.
	 * On Startup bOverlayIsSibling is not defined as we don't know if it is a sibling or not. In this case we check both cases.
         * @param {sap.ui.dt.Overlay} oOverlay - overlay to be checked
         * @param {boolean} bOverlayIsSibling - (optional) describs whether given overlay is to be checked as a sibling or as a child on editable. Expected values: [true, false, undefined]
	 * @private
	 */
	CreateContainer.prototype._isEditable = function(oOverlay, bOverlayIsSibling) {
		if (bOverlayIsSibling === undefined || bOverlayIsSibling === null) {
			return this._isEditableCheck(oOverlay, false) || this._isEditableCheck(oOverlay, true);
		} else {
			return this._isEditableCheck(oOverlay, bOverlayIsSibling);
		}
	};

	CreateContainer.prototype._isEditableCheck = function (oOverlay, bOverlayIsSibling) {
		var bEditable = false;
		var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
		var oCreateContainerAction = {};

		if (!oOverlay.getPublicParentElementOverlay()) {
			return false;
		}

		oCreateContainerAction = this.getCreateAction(bOverlayIsSibling, oOverlay);
		if (oCreateContainerAction && oCreateContainerAction.changeType && oCreateContainerAction.aggregation === oPublicParentAggregationOverlay.getAggregationName()) {
			bEditable = this.hasChangeHandler(oCreateContainerAction.changeType, oOverlay.getPublicParentElementOverlay().getElementInstance());
		}

		if (!bEditable && !bOverlayIsSibling) {
			bEditable = this.checkAggregationsOnSelf(oOverlay, "createContainer");
		}

		if (bEditable) {
			return this.hasStableId(oOverlay);
		} else {
			return false;
		}
	};

	/**
	 * @private
	 */
	CreateContainer.prototype.getEffectiveDesignTimeMetadata = function(oOverlay) {
		return oOverlay.getDesignTimeMetadata();
	};

	CreateContainer.prototype._getParentOverlay = function(bSibling, oOverlay) {
		var oParentOverlay;
		if (bSibling) {
			oParentOverlay = oOverlay.getPublicParentElementOverlay();
		} else {
			oParentOverlay = oOverlay;
		}
		return oParentOverlay;
	};

	CreateContainer.prototype.getCreateAction = function(bSibling, oOverlay) {
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var aActions = oDesignTimeMetadata.getAggregationAction("createContainer", oOverlay.getElementInstance());
		return aActions[0];
	};

	CreateContainer.prototype.isCreateAvailable = function(bSibling, oOverlay) {
		return this._isEditable(oOverlay, bSibling);
	};

	CreateContainer.prototype.isCreateEnabled = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		if (!vAction) {
			return false;
		}

		if (vAction.isEnabled && typeof vAction.isEnabled === "function") {
			var fnIsEnabled = vAction.isEnabled;
			return fnIsEnabled.call(null, oOverlay.getElementInstance());
		} else {
			return true;
		}
	};

	CreateContainer.prototype._getCreatedContainerId = function(vAction, sNewControlID) {
		var sId = sNewControlID;
		if (vAction.getCreatedContainerId && typeof vAction.getCreatedContainerId === "function") {
			var fnMapToRelevantControlID = vAction.getCreatedContainerId;
			sId = fnMapToRelevantControlID.call(null, sNewControlID);

		}
		return OverlayRegistry.getOverlay(sId);
	};

	CreateContainer.prototype._determineIndex = function(oParentElement, oSiblingElement, sAggregationName, fnGetIndex) {
		return RtaUtils.getIndex(oParentElement, oSiblingElement, sAggregationName, fnGetIndex);
	};

	CreateContainer.prototype._getText = function(vAction, oElement, oDesignTimeMetadata, sText) {
		if (!vAction) {
			return sText;
		}
		var sContainerTitle = oDesignTimeMetadata.getAggregationDescription(vAction.aggregation, oElement).singular;
		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		return oTextResources.getText(sText, sContainerTitle);
	};

	CreateContainer.prototype.getCreateContainerText = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var oElement = oParentOverlay.getElementInstance();
		var sText = "CTX_CREATE_CONTAINER";
		return this._getText(vAction, oElement, oDesignTimeMetadata, sText);
	};

	CreateContainer.prototype._getContainerTitle = function(vAction, oElement, oDesignTimeMetadata) {
		var sText = "TITLE_CREATE_CONTAINER";
		return this._getText(vAction, oElement, oDesignTimeMetadata, sText);
	};

	CreateContainer.prototype.handleCreate = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var oTargetElement = oParentOverlay.getElementInstance();
		var oView = FlexUtils.getViewForControl(oTargetElement);

		var oSiblingElement;
		if (bSibling) {
			oSiblingElement = oOverlay.getElementInstance();
		}

		var sNewControlID = oView.createId(jQuery.sap.uid());

		// The below function is only defined if "createContainer" action is done on the simple form (Aggregation is in the hidden tree)
		var fnGetIndex = oDesignTimeMetadata.getAggregation(vAction.aggregation).getIndex;
		var iIndex = this._determineIndex(oTargetElement, oSiblingElement, vAction.aggregation, fnGetIndex);

		var oCommand = this.getCommandFactory().getCommandFor(oTargetElement, "createContainer", {
			newControlId : sNewControlID,
			label : this._getContainerTitle(vAction, oTargetElement, oDesignTimeMetadata),
			index : iIndex
		}, oDesignTimeMetadata);

		this.fireElementModified({
			"command" : oCommand
		});

		var oNewContainerOverlay  = this._getCreatedContainerId(vAction, sNewControlID);
		oNewContainerOverlay.setSelected(true);

		return oNewContainerOverlay;
	};

	return CreateContainer;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/CreateContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.CutPaste') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.CutPaste.
jQuery.sap.declare('sap.ui.rta.plugin.CutPaste'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.CutPaste'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/CutPaste",[
	'jquery.sap.global',
	'sap/ui/dt/plugin/CutPaste',
	'sap/ui/dt/OverlayUtil',
	'sap/ui/rta/plugin/Plugin',
	'sap/ui/rta/plugin/RTAElementMover'
],
function(jQuery,
		ControlCutPaste,
		OverlayUtil,
		Plugin,
		RTAElementMover) {
	"use strict";

	/**
	 * Constructor for a new CutPaste plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The CutPaste plugin adds functionality/styling required for RTA.
	 * @extends sap.ui.dt.plugin.CutPaste
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.CutPaste
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var CutPaste = ControlCutPaste.extend("sap.ui.rta.plugin.CutPaste", /** @lends sap.ui.rta.plugin.CutPaste.prototype */ {
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				commandFactory : {
					type : "object",
					multiple : false
				}
			},
			events : {
				dragStarted : {},

				elementModified : {
					command : {
						type : "sap.ui.rta.command.BaseCommand"
					}
				}
			}
		}
	});

	/**
	 * @override
	 */
	CutPaste.prototype.init = function() {
		ControlCutPaste.prototype.init.apply(this, arguments);
		this.setElementMover(new RTAElementMover());
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	CutPaste.prototype.registerElementOverlay = function(oOverlay) {
		ControlCutPaste.prototype.registerElementOverlay.apply(this, arguments);

		if (oOverlay.isMovable()) {
			Plugin.prototype.addToPluginsList.apply(this, arguments);
		}
	};

	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	CutPaste.prototype.deregisterElementOverlay = function(oOverlay) {
		ControlCutPaste.prototype.deregisterElementOverlay.apply(this, arguments);
		Plugin.prototype.removeFromPluginsList.apply(this, arguments);
	};

	/**
	 * @override
	 */
	CutPaste.prototype.paste = function(oTargetOverlay) {

		this._executePaste(oTargetOverlay);

		this.fireElementModified({
			"command" : this.getElementMover().buildMoveCommand()
		});

		this.stopCutAndPaste();
	};

	return CutPaste;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/CutPaste.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.DragDrop') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.DragDrop.
jQuery.sap.declare('sap.ui.rta.plugin.DragDrop'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ControlDragDrop'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/DragDrop",[
	'jquery.sap.global',
	'sap/ui/dt/plugin/ControlDragDrop',
	'sap/ui/rta/plugin/RTAElementMover',
	'sap/ui/rta/plugin/Plugin'
],
function(jQuery,
		ControlDragDrop,
		RTAElementMover,
		Plugin) {
	"use strict";

	/**
	 * Constructor for a new DragDrop plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The DragDrop plugin adds functionality/styling required for RTA.
	 * @extends sap.ui.dt.ControlDragDrop
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.DragDrop
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var DragDrop = ControlDragDrop.extend("sap.ui.rta.plugin.DragDrop", /** @lends sap.ui.rta.plugin.DragDrop.prototype */ {
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				commandFactory : {
					type : "object",
					multiple : false
				}
			},
			events : {
				dragStarted : {},

				elementModified : {
					command : {
						type : "sap.ui.rta.command.BaseCommand"
					}
				}
			}
		}
	});

	/**
	 * @override
	 */
	DragDrop.prototype.init = function() {
		ControlDragDrop.prototype.init.apply(this, arguments);
		this.setElementMover(new RTAElementMover());
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.registerElementOverlay = function(oOverlay) {
		ControlDragDrop.prototype.registerElementOverlay.apply(this, arguments);

		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
			Plugin.prototype.addToPluginsList.apply(this, arguments);
		}
	};

	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.deregisterElementOverlay = function(oOverlay) {
		ControlDragDrop.prototype.deregisterElementOverlay.apply(this, arguments);
		Plugin.prototype.removeFromPluginsList.apply(this, arguments);
		this._detachMovableBrowserEvents(oOverlay);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._attachMovableBrowserEvents = function(oOverlay) {
		oOverlay.attachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.attachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._detachMovableBrowserEvents = function(oOverlay) {
		oOverlay.detachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.detachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};


	/**
	 * Additionally to super->onDragStart this method stores the parent's id in an instance variable
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragStart = function(oOverlay) {
		this.fireDragStarted();

		ControlDragDrop.prototype.onDragStart.apply(this, arguments);

		this.getDesignTime().getSelection().forEach(function(oOverlay) {
			oOverlay.setSelected(false);
		});

		oOverlay.$().addClass("sapUiRtaOverlayPlaceholder");
	};

	/**
	 * Additionally to super->onDragEnd this method takes care about moving the element
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragEnd = function(oOverlay) {
		this.fireElementModified({
			"command" : this.getElementMover().buildMoveCommand()
		});

		oOverlay.$().removeClass("sapUiRtaOverlayPlaceholder");
		oOverlay.setSelected(true);
		oOverlay.focus();

		ControlDragDrop.prototype.onDragEnd.apply(this, arguments);
	};

	/**
	 * If overlay is draggable attach browser events o overlay. If not remove them.
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onMovableChange = function(oOverlay) {
		ControlDragDrop.prototype.onMovableChange.apply(this, arguments);
		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
		} else {
			this._detachMovableBrowserEvents(oOverlay);
		}
	};
	/**
	 * Handle mouse over event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseOver = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay !== this._oPreviousHoverTarget) {
			if (this._oPreviousHoverTarget) {
				this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
			}
			this._oPreviousHoverTarget = oOverlay;
			oOverlay.$().addClass("sapUiRtaOverlayHover");
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();

	};

	/**
	 * Handle mouse leave event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseLeave = function(oEvent) {
		if (this._oPreviousHoverTarget) {
			this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
		}
		delete this._oPreviousHoverTarget;
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	return DragDrop;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/DragDrop.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.MultiSelection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.dt.plugin.MultiSelection.
jQuery.sap.declare('sap.ui.rta.plugin.MultiSelection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/MultiSelection",['sap/ui/rta/plugin/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/rta/Utils'],
		function(Plugin, ElementUtil, RTAUtils) {
			"use strict";

			/**
			 * Constructor for a new MultiSelection.
			 *
			 * @param {string}
			 *          [sId] id for the new object, generated automatically if no id is given
			 * @param {object}
			 *          [mSettings] initial settings for the new object
			 *
			 * @class The MultiSelection allows to select the Overlays with a mouse click
			 * @extends sap.ui.rta.plugin.Plugin
			 *
			 * @author SAP SE
			 * @version 1.33.0-SNAPSHOT
			 *
			 * @constructor
			 * @private
			 * @since 1.33
			 * @alias sap.ui.rta.plugin.MultiSelection
			 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var MultiSelection = Plugin.extend("sap.ui.rta.plugin.MultiSelection", /** @lends sap.ui.dt.plugin.MultiSelection.prototype */
			{
				metadata : {
					library : "sap.ui.rta",
					properties : {
						multiSelectionTypes : {
							type : "string[]"
						}
					}
				}
			});

			/**
			 * @override
			 */
			MultiSelection.prototype.init = function() {
				Plugin.prototype.init.apply(this, arguments);
				this._fnKeyDown = this._onKeyDown.bind(this);
				this._fnKeyUp = this._onKeyUp.bind(this);

				window.addEventListener("keydown", this._fnKeyDown);
				window.addEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.exit = function() {
				Plugin.prototype.exit.apply(this, arguments);

				window.removeEventListener("keydown", this._fnKeyDown);
				window.removeEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.setDesignTime = function(oDesignTime) {
				this._oDesignTime = oDesignTime;

				if (this._oDesignTime) {
					this._oDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
				Plugin.prototype.setDesignTime.apply(this, arguments);

				if (oDesignTime) {
					oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
			};

			/**
			 * Event handler for key down events. Sets DesignTime SelectionMode to multi if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyDown = function(oEvent) {
				// left or right cmd / ctrl key
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				}
			};

			/**
			 * Event handler for key up events. Sets DesignTime SelectionMode to single if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyUp = function(oEvent) {
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				}
			};

			/**
			 * React on selection change from designTime
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent fired
			 * @override
			 */
			MultiSelection.prototype._onDesignTimeSelectionChange = function(oEvent) {
				if (this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				
				var aMultiSelectionTypes = this.getMultiSelectionTypes();
				var bMultiSelectisValid = true;
				var oCurrentSelectedOverlay = oEvent.getParameter("selection")[oEvent.getParameter("selection").length - 1];
				var aSelections = this._oDesignTime.getSelection();
				if (aSelections && aSelections.length === 1) {
					oCurrentSelectedOverlay.setSelected(true);
					return;
				}
				if (!oCurrentSelectedOverlay || this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				aMultiSelectionTypes.forEach(function(sType, iIndex, aArray) {
					aSelections.forEach(function(oSelecedElement) {
						if (!ElementUtil.isInstanceOf(oSelecedElement.getElementInstance(), sType)) {
							bMultiSelectisValid = false;
						}
					});
					oCurrentSelectedOverlay.setSelected(bMultiSelectisValid);
				});
			};

			return MultiSelection;
		}, /* bExport= */true);
}; // end of sap/ui/rta/plugin/MultiSelection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepConnectorLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepConnectorLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepConnectorLocalStorage",[
	"sap/ui/rta/util/FakeLrepLocalStorage"
	], function(
	FakeLrepLocalStorage) {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep changes in localStorage
	 *
	 * @class
	 * Utility functionality for SAP RTA Fake Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.46.2
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepConnectorLocalStorage
	 */

	var FakeLrepConnectorLocalStorage = {};

	/**
	 * Creates a Fake Lrep change in localStorage
	 * @param  {Object|Array} vChange - the change array/object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.create = function(vChange) {
		
		if (Array.isArray(vChange)) {
			vChange.forEach(function(elem) {
				FakeLrepLocalStorage.saveChange(elem.fileName, elem);
			});
		} else {
			FakeLrepLocalStorage.saveChange(vChange.fileName, vChange);	
		}
		return Promise.resolve();
	};

	/**
	 * Deletes a Fake Lrep change in localStorage
	 * @param  {Object} oChange - the change Object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChange = function(oChange) {

		FakeLrepLocalStorage.deleteChange(oChange.sChangeName);

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Deletes all Fake Lrep changes in localStorage
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChanges = function() {

		FakeLrepLocalStorage.deleteChanges();

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Loads the changes for the given Component class name
	 * from the FakeLrepLocalStorage
	 * and also loads the mandatory FakeLrepConnector.json file.
	 * The settings are take from the JSON file, but changes are replaced with
	 * the changes from the local storage.
	 * 
	 * @param {String} sComponentClassName - Component class name
	 * @returns {Promise} Returns a Promise with the changes and componentClassName
	 * @public
	 */
	FakeLrepConnectorLocalStorage.loadChanges = function(sComponentClassName) {

		var aChanges = FakeLrepLocalStorage.getChanges(),
			initialComponentJsonPath = this.sInitialComponentJsonPath;

		return new Promise(function(resolve, reject){
			jQuery.getJSON(initialComponentJsonPath).done(function(oResponse){
				oResponse.changes = aChanges;
				var result = {
					changes: oResponse,
					componentClassName: sComponentClassName
				};
				resolve(result);
			}).fail(function(error){
				reject(error);
			});
		});

	};

	return FakeLrepConnectorLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepConnectorLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RuntimeAuthoring') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.Main.
jQuery.sap.declare('sap.ui.rta.RuntimeAuthoring'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DesignTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Overlay'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ContextMenu'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.TabHandling'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.TransportSelection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RuntimeAuthoring",['jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/ui/rta/ui/ToolsMenu', 'sap/ui/dt/ElementUtil',
		'sap/ui/dt/DesignTime', 'sap/ui/dt/OverlayRegistry', 'sap/ui/dt/Overlay', 'sap/ui/rta/command/Stack',
		'sap/ui/rta/command/CommandFactory', 'sap/ui/rta/command/LREPSerializer', 'sap/ui/rta/plugin/Rename',
		'sap/ui/rta/plugin/DragDrop', 'sap/ui/rta/plugin/RTAElementMover', 'sap/ui/rta/plugin/CutPaste',
		'sap/ui/rta/plugin/Remove', 'sap/ui/rta/plugin/CreateContainer',
		'sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin','sap/ui/rta/plugin/additionalElements/AddElementsDialog',
		'sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer', 'sap/ui/rta/plugin/Combine', 'sap/ui/rta/plugin/Split',
		'sap/ui/rta/plugin/Selection', 'sap/ui/rta/plugin/MultiSelection', 'sap/ui/rta/plugin/Settings',
		'sap/ui/dt/plugin/ContextMenu', 'sap/ui/dt/plugin/TabHandling', 'sap/ui/fl/FlexControllerFactory',
		'sap/ui/rta/ui/SettingsDialog', './Utils',
		'sap/ui/fl/transport/Transports', 'sap/ui/fl/transport/TransportSelection','sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/MessageBox', 'sap/m/MessageToast'],
		function(
		jQuery, ManagedObject, ToolsMenu, ElementUtil, DesignTime, OverlayRegistry, Overlay, CommandStack,
		CommandFactory, LREPSerializer, RTARenamePlugin, RTADragDropPlugin, RTAElementMover, CutPastePlugin,
		RemovePlugin, CreateContainerPlugin, AdditionalElementsPlugin, AdditionalElementsDialog, AdditionalElementsAnalyzer,
		CombinePlugin, SplitPlugin, SelectionPlugin, RTAMultiSelectionPlugin, SettingsPlugin, ContextMenuPlugin, TabHandlingPlugin, FlexControllerFactory,
		SettingsDialog, Utils,  Transports, TransportSelection, FlexUtils, FlexSettings, MessageBox, MessageToast) {
	"use strict";
	/**
	 * Constructor for a new sap.ui.rta.RuntimeAuthoring class.
	 *
	 * @class The runtime authoring allows to adapt the fields of a running application.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.46.2
	 * @constructor
	 * @public
	 * @since 1.30
	 * @alias sap.ui.rta.RuntimeAuthoring
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */
	var RuntimeAuthoring = ManagedObject.extend("sap.ui.rta.RuntimeAuthoring", /** @lends sap.ui.rta.RuntimeAuthoring.prototype */
	{
		metadata : {
			// ---- control specific ----
			library : "sap.ui.rta",
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				/** The URL which is called when the custom field dialog is opened */
				"customFieldUrl" : "string",

				/** Whether the create custom field button should be shown */
				"showCreateCustomField" : "boolean",

				/** Whether the create custom field button should be shown */
				"showToolbars" : {
					type : "boolean",
					defaultValue : true
				},

				/** Whether rta is triggered from a dialog button */
				"triggeredFromDialog" : {
					type : "boolean",
					defaultValue : false
				},

				/** Temporary property : whether to show a dialog for changing control's properties#
				 * should be removed after DTA will fully switch to a property panel
				 */
				"showSettingsDialog" : {
					type : "boolean",
					defaultValue : true
				},

				/** Whether the window unload dialog should be shown */
				"showWindowUnloadDialog" : {
					type : "boolean",
					defaultValue : true
				},

				"commandStack" : {
					type : "sap.ui.rta.command.Stack"
				},

				/** Map indicating plugins in to be loaded or in use by RuntimeAuthoring and DesignTime  */
				"plugins" : {
					type : "any",
					defaultValue : {}
				}
			},
			events : {
				/** Fired when the runtime authoring is started */
				"start" : {},

				/** Fired when the runtime authoring is stopped */
				"stop" : {},

				/** Fired when the runtime authoring failed to start */
				"failed" : {},

				/**
				 * Event fired when a DesignTime selection is changed
				 */
				"selectionChange" : {
					parameters : {
						selection : { type : "sap.ui.dt.Overlay[]" }
					}
				},

				/**
				 * Fired when the undo/redo stack has changed, undo/redo buttons can be updated
				 */
				"undoRedoStackModified" : {}
			}
		},
		_sAppTitle : null

	});

	/**
	 * Returns (and creates) the default plugins of RuntimeAuthoring
	 *
	 * These are AdditionalElements, ContextMenu, CreateContainer, CutPaste,
	 * DragDrop, MultiSelection, Remove, Rename, Selection, Settings, TabHandling
	 *
	 * Method uses a local cache to hold the default plugins: Then on multiple access
	 * always the same instances get returned.
	 *
	 * @public
	 * @return {map} Map with plugins
	 */
	RuntimeAuthoring.prototype.getDefaultPlugins = function() {

		if (!this._mDefaultPlugins) {

			// Initialize local cache
			this._mDefaultPlugins = {};

			// Selection
			var oSelectionPlugin = new SelectionPlugin();
			this._mDefaultPlugins["selection"] = oSelectionPlugin;

			// Drag drop plugin
			var oRTAElementMover = new RTAElementMover();
			oRTAElementMover.setCommandFactory(CommandFactory);

			var oRTADragDropPlugin = new RTADragDropPlugin({
				elementMover : oRTAElementMover,
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			oRTADragDropPlugin.attachDragStarted(this._handleStopCutPaste, this);
			this._mDefaultPlugins["dragDrop"] = oRTADragDropPlugin;

			// Cut paste
			var oRTACutPastePlugin = new CutPastePlugin({
				elementMover : oRTAElementMover,
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["cutPaste"] = oRTACutPastePlugin;

			// Remove
			var oRemovePlugin = new RemovePlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["remove"] = oRemovePlugin;

			// Additional elements
			var oAdditionalElementsPlugin = new AdditionalElementsPlugin({
				commandFactory : CommandFactory,
				analyzer : AdditionalElementsAnalyzer,
				dialog : new AdditionalElementsDialog()
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["additionalElements"] = oAdditionalElementsPlugin;

			// Rename
			var oRenamePlugin = new RTARenamePlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			oRenamePlugin.attachEditable(this._handleStopCutPaste, this);
			this._mDefaultPlugins["rename"] = oRenamePlugin;

			// Multi selection
			var oMultiSelectionPlugin = new RTAMultiSelectionPlugin({
				multiSelectionTypes : ["sap.ui.comp.smartform.GroupElement"]
			});
			this._mDefaultPlugins["multiSelection"] = oMultiSelectionPlugin;

			// Settings
			var oSettingsPlugin = new SettingsPlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["settings"] = oSettingsPlugin;

			// Create container
			var oCreateContainerPlugin = new CreateContainerPlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["createContainer"] = oCreateContainerPlugin;

			// Combine
			var oCombinePlugin = new CombinePlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["combine"] = oCombinePlugin;

			// Split
			var oSplitPlugin = new SplitPlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._mDefaultPlugins["split"] = oSplitPlugin;

			// Context Menu
			var oContextMenuPlugin = new ContextMenuPlugin();
			this._mDefaultPlugins["contextMenu"] = oContextMenuPlugin;

			// TabHandling
			var oTabHandlingPlugin = new TabHandlingPlugin();
			this._mDefaultPlugins["tabHandling"] = oTabHandlingPlugin;
		}

		return jQuery.extend({}, this._mDefaultPlugins);


	};

	/**
	 * In order to clear the cache and to destroy the default plugins on exit use
	 * _destroyDefaultPlugins()
	 *
	 * In order to destroy default plugins not used, because replaced or removed,
	 * pass the list of active plugins: _destroyDefaultPlugins( mPluginsToKeep ).
	 *
	 * @param {map} mPluginsToKeep - list of active plugins to keep in _mDefaultPlugins
	 * @private
	 */
	RuntimeAuthoring.prototype._destroyDefaultPlugins = function (mPluginsToKeep) {
		// Destroy default plugins and clear cache
		// ... but keep those in mPluginsToKeep
		for (var sDefaultPluginName in this._mDefaultPlugins) {
			var oDefaultPlugin = this._mDefaultPlugins[sDefaultPluginName];

			if (oDefaultPlugin && !oDefaultPlugin.bIsDestroyed) {
				if (!mPluginsToKeep || mPluginsToKeep[sDefaultPluginName] !== oDefaultPlugin) {
					oDefaultPlugin.destroy();
				}
			}
		}
		if (!mPluginsToKeep) {
			this._mDefaultPlugins = null;
		}
	};

	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.init = function() {
		this._onCommandStackModified = this._onStackModified.bind(this);
	};

	RuntimeAuthoring.prototype.setPlugins = function(mPlugins) {
		if (this._oDesignTime) {
			throw new Error('Cannot replace plugins: runtime authoring already started');
		}
		this.setProperty("plugins", mPlugins);
	};

	/**
	 * Start Runtime Authoring
	 *
	 * @public
	 */
	RuntimeAuthoring.prototype.start = function() {
		this._aPopups = [];

		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._aSupportedControls = ["sap.ui.comp.smartform.Group", "sap.uxap.ObjectPageSection",
				"sap.uxap.ObjectPageLayout"];

		// Create DesignTime
		if (!this._oDesignTime) {

			this._oRootControl = sap.ui.getCore().byId(this.getRootControl());

			// Take default plugins if no plugins handed over
			if (!this.getPlugins() || !Object.keys(this.getPlugins()).length) {
				this.setPlugins(this.getDefaultPlugins());
			}

			// Destroy default plugins instantiated but not in use
			this._destroyDefaultPlugins(this.getPlugins());

			// Hand over currrent command stack to setting plugin
			if (this.getPlugins()["settings"]) {
				this.getPlugins()["settings"].setCommandStack(this.getCommandStack());
			}

			this._buildContextMenu();

			// Create design time
			var aKeys = Object.keys(this.getPlugins());
			var aPlugins = aKeys.map(function(sKey) {
				return this.getPlugins()[sKey];
			}, this);

			jQuery.sap.measure.start("rta.dt.startup","Measurement of RTA: DesignTime start up");
			this._oDesignTime = new DesignTime({
				rootElements : [this._oRootControl],
				plugins : aPlugins
			});

			jQuery(Overlay.getOverlayContainer()).addClass("sapUiRta");

			this._oDesignTime.attachSelectionChange(function(oEvent) {
				this.fireSelectionChange({selection: oEvent.getParameter("selection")});
			}, this);

			this._oDesignTime.attachEventOnce("synced", function() {
				this.fireStart();
				jQuery.sap.measure.end("rta.dt.startup","Measurement of RTA: DesignTime start up");
			}, this);

			this._oDesignTime.attachEventOnce("syncFailed", function() {
				this.fireFailed();
			}, this);

			// attach RuntimeAuthoring event to $document
			this.$document = jQuery(document);
			this.fnKeyDown = this._onKeyDown.bind(this);
			this.$document.on("keydown", this.fnKeyDown);
		}

		if (this.getShowToolbars()) {
			// Create ToolsMenu
			this._createToolsMenu();
			// set focus initially on top toolbar
			var oDelegate = {
				"onAfterRendering" : function() {
					this._oToolsMenu._oToolBar.focus();
					this._oToolsMenu._oToolBar.removeEventDelegate(oDelegate, this);
				}
			};
			this._oToolsMenu._oToolBar.addEventDelegate(oDelegate, this);

			// Show Toolbar(s)
			this._oToolsMenu.show();
		}

		// Register function for checking unsaved before leaving RTA
		this._oldUnloadHandler = window.onbeforeunload;
		window.onbeforeunload = this._onUnload.bind(this);

		sap.ui.getCore().getEventBus().subscribe("sap.ushell.renderers.fiori2.Renderer", "appClosed", this._onAppClosed, this);

	};

	var fnShowTechnicalError = function(vError) {
		var sErrorMessage = vError.message || vError.status || vError;
		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		jQuery.sap.log.error("Failed to transfer runtime adaptation changes to layered repository", sErrorMessage);
		jQuery.sap.require("sap.m.MessageBox");
		var sMsg = oTextResources.getText("MSG_LREP_TRANSFER_ERROR") + "\n"
				+ oTextResources.getText("MSG_ERROR_REASON", sErrorMessage);
		sap.m.MessageBox.error(sMsg);
	};

	RuntimeAuthoring.prototype._onAppClosed = function() {
		this.stop(true);
	};

	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.setCommandStack = function(oCommandStack) {
		var  oOldCommandStack = this.getProperty("commandStack");
		if (oOldCommandStack) {
			oOldCommandStack.detachModified(this._onCommandStackModified);
		}

		if (this._oInternalCommandStack) {
			this._oInternalCommandStack.destroy();
			delete this._oInternalCommandStack;
		}

		var oResult = this.setProperty("commandStack", oCommandStack);

		if (oCommandStack) {
			oCommandStack.attachModified(this._onCommandStackModified);
		}

		if (this.getPlugins() && this.getPlugins()["settings"]) {
			this.getPlugins()["settings"].setCommandStack(oCommandStack);
		}

		return oResult;
	};

	/**
	 *
	 * @override
	 */
	RuntimeAuthoring.prototype.getCommandStack = function() {
		var oCommandStack = this.getProperty("commandStack");
		if (!oCommandStack) {
			oCommandStack = new CommandStack();
			this._oInternalCommandStack = oCommandStack;
			this.setCommandStack(oCommandStack);
		}

		return oCommandStack;
	};

	/**
	 * adapt the enablement of undo/redo/reset/transport button
	 * @private
	 */
	RuntimeAuthoring.prototype._onStackModified = function() {
		var oCommandStack = this.getCommandStack();
		var bCanUndo = oCommandStack.canUndo();
		var bCanRedo = oCommandStack.canRedo();
		var oUshellContainer = Utils.getUshellContainer();

		if (this.getShowToolbars()) {
			this._oToolsMenu.adaptUndoRedoEnablement(bCanUndo, bCanRedo);
			this._oToolsMenu.adaptTransportEnablement(this._bChangesExist || bCanUndo);
			this._oToolsMenu.adaptRestoreEnablement(this._bChangesExist || bCanUndo);
		}
		this.fireUndoRedoStackModified();

		if (oUshellContainer) {
			if (bCanUndo) {
				oUshellContainer.setDirtyFlag(true);
			} else {
				oUshellContainer.setDirtyFlag(false);
			}
		}
	};

	RuntimeAuthoring.prototype._closeToolBars = function() {
		if (this.getShowToolbars()) {
			return this._oToolsMenu.hide();
		} else {
			return Promise.resolve();
		}
	};

	/**
	 * Returns a selection from the DesignTime
	 * @return {sap.ui.dt.Overlay[]} selected overlays
	 * @public
	 */
	RuntimeAuthoring.prototype.getSelection = function() {
		if (this._oDesignTime) {
			return this._oDesignTime.getSelection();
		} else {
			return [];
		}
	};

	/**
	 * stop Runtime Authoring
	 *
	 * @public
	 * @param {boolean} bDontSaveChanges - stop RTA with or w/o saving changes
	 * @returns {Promise} promise with no parameters
	 */
	RuntimeAuthoring.prototype.stop = function(bDontSaveChanges) {
		return ((bDontSaveChanges) ? Promise.resolve() : this._serializeToLrep())
			.then(this._closeToolBars.bind(this))
				.then(function(){
					this.exit();
					this.fireStop();
		}.bind(this))['catch'](fnShowTechnicalError);
	};

	RuntimeAuthoring.prototype.restore = function() {
		this._onRestore();
	};

	RuntimeAuthoring.prototype.transport = function() {
		this._onTransport();
	};

	// ---- backward compatibility API
	RuntimeAuthoring.prototype.undo = function() {
		this._onUndo();
	};

	RuntimeAuthoring.prototype.redo = function() {
		this._onRedo();
	};

	RuntimeAuthoring.prototype.canUndo = function() {
		return this.getCommandStack().canUndo();
	};

	RuntimeAuthoring.prototype.canRedo = function() {
		return this.getCommandStack().canRedo();
	};
	// ---- backward compatibility API

	RuntimeAuthoring.prototype._onKeyDown = function(oEvent) {
		// on macintosh os cmd-key is used instead of ctrl-key
		var bCtrlKey = sap.ui.Device.os.macintosh ? oEvent.metaKey : oEvent.ctrlKey;
		if ((oEvent.keyCode === jQuery.sap.KeyCodes.Z) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (bCtrlKey === true)) {
			// CTRL+Z
			this._onUndo();
			oEvent.stopPropagation();
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.Z) && (oEvent.shiftKey === true) && (oEvent.altKey === false) && (bCtrlKey === true)) {
			// CTRL+SHIFT+Z
			this._onRedo();
			oEvent.stopPropagation();
		}
	};

	/**
	 * Handle RuntimeAuthoring events attached by 
	 * $<element>.addEventListener(<event.type>, this, false);
	 * 
	 * @param {sap.ui.base.Event} oEvent - passed event
	 * @private
	 */
	RuntimeAuthoring.prototype.handleEvent = function(oEvent) {
		if (oEvent.type === "keydown") {
			this._onKeyDown(oEvent);
		}
	};

	/**
	 * Check for unsaved changes before Leaving Runtime Authoring
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onUnload = function() {
		var oCommandStack = this.getCommandStack();
		var bUnsaved = oCommandStack.canUndo() || oCommandStack.canRedo();
		if (bUnsaved && this.getShowWindowUnloadDialog()) {
			var sMessage = this._oTextResources.getText("MSG_UNSAVED_CHANGES");
			return sMessage;
		} else {
			window.onbeforeunload = this._oldUnloadHandler;
		}
	};

	RuntimeAuthoring.prototype._serializeToLrep = function() {
		var oSerializer = new LREPSerializer({commandStack : this.getCommandStack(), rootControl : this.getRootControl()});
		return oSerializer.saveCommands();
	};

	RuntimeAuthoring.prototype._onUndo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().undo();
	};

	RuntimeAuthoring.prototype._onRedo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().redo();
	};

	RuntimeAuthoring.prototype._createToolsMenu = function() {
		if (!this._oToolsMenu) {
			this._oToolsMenu = new ToolsMenu();
			this._oToolsMenu.setRootControl(this._oRootControl);
			this._oToolsMenu.createToolbar(this.getTriggeredFromDialog());
			this._checkChangesExist().then(function(bResult){
				this._bChangesExist = bResult;
				this._oToolsMenu.adaptTransportEnablement(bResult);
				this._oToolsMenu.adaptRestoreEnablement(bResult);
			}.bind(this));
			this._oToolsMenu.attachToolbarClose(this.stop.bind(this, false), this);
			this._oToolsMenu.attachTransport(this._onTransport, this);
			this._oToolsMenu.attachRestore(this._onRestore, this);
			this._oToolsMenu.attachUndo(this._onUndo, this);
			this._oToolsMenu.attachRedo(this._onRedo, this);
		}
	};

	/**
	 * Exit Runtime Authoring - destroy all controls and plugins
	 *
	 * @protected
	 */
	RuntimeAuthoring.prototype.exit = function() {
		if (this._oDesignTime) {
			jQuery(Overlay.getOverlayContainer()).removeClass("sapUiRta");
			this._oDesignTime.destroy();
			this._oDesignTime = null;

			// detach browser events
			this.$document.off("keydown", this.fnKeyDown);
			// Destroy default plugins
			this._destroyDefaultPlugins();
			// plugins have been destroyed as _oDesignTime.destroy()
			// plugins are set to defaultValue if parameter is null
			this.setPlugins(null);
		}
		if (this._oToolsMenu) {
			this._oToolsMenu.destroy();
			this._oToolsMenu = null;
		}
		this.setCommandStack(null);

		var oUshellContainer = Utils.getUshellContainer();
		if (oUshellContainer) {
			oUshellContainer.setDirtyFlag(false);
		}

		window.onbeforeunload = this._oldUnloadHandler;
	};

	/**
	 * Function to handle ABAP transport of the changes
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onTransport = function() {
		var fnHandleAllErrors = function (oError) {
			if (oError.message !== 'createAndApply failed') {
				FlexUtils.log.error("transport error" + oError);
				return this._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_ERROR", "MSG_TRANSPORT_ERROR", oError);
			}
		}.bind(this);

		this._handleStopCutPaste();

		return this._openSelection()
			.then(this._checkTransportInfo)
			.then(function(oTransportInfo) {
				if (oTransportInfo) {
					var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);
					return this._serializeToLrep().then(function () {
						return oFlexController.getComponentChanges().then(function (aAllLocalChanges) {
							if (aAllLocalChanges.length > 0) {
								return this._createAndApplyChanges(aAllLocalChanges, oFlexController)
									.then(this._transportAllLocalChanges.bind(this, oTransportInfo, oFlexController))
										['catch'](fnHandleAllErrors);
							}
						}.bind(this));
					}.bind(this))['catch'](fnShowTechnicalError);
				}
			}.bind(this)
		);
	};

	RuntimeAuthoring.prototype._checkTransportInfo = function(oTransportInfo) {
		if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
			return oTransportInfo;
		} else {
			return false;
		}
	};

	RuntimeAuthoring.prototype._openSelection = function () {
	   return new TransportSelection().openTransportSelection(null, this._oRootControl);
	};

	/**
	 * Create and apply changes
	 *
	 * Function is copied from FormP13nHandler. We need all changes for various controls.
	 * The function _createAndApplyChanges in the FormP13Handler calls that._getFlexController()
	 * which is specific for the SmartForm
	 *
	 * @private
	 * @param {array} aChangeSpecificData - array of objects with change specific data
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} promise that resolves with no parameters
	 */
	RuntimeAuthoring.prototype._createAndApplyChanges = function(aChangeSpecificData, oFlexController) {
		return Promise.resolve().then(function() {

			function fnValidChanges(oChangeSpecificData) {
				return oChangeSpecificData && oChangeSpecificData.selector && oChangeSpecificData.selector.id;
			}

			aChangeSpecificData.filter(fnValidChanges).forEach(function(oChangeSpecificData) {
				var oControl = sap.ui.getCore().byId(oChangeSpecificData.selector.id);
				oFlexController.createAndApplyChange(oChangeSpecificData, oControl);
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply error: " + oError);
			return oError;
		}).then(function(oError) {
			return oFlexController.saveAll().then(function() {
				if (oError) {
					throw oError;
				}
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply and/or save error: " + oError);
			return this._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_APPLYSAVE_ERROR", "MSG_TRANSPORT_APPLYSAVE_ERROR", oError);
		}.bind(this));
	};

	/**
	 * Delete all changes for current layer and root control's component
	 *
	 * @private
	 * @return {Promise} the promise from the FlexController
	 */
	RuntimeAuthoring.prototype._deleteChanges = function() {
		var oTransportSelection = new TransportSelection();
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);

		oFlexController.getComponentChanges().then(function(aChanges) {
			return FlexSettings.getInstance(FlexUtils.getComponentClassName(this._oRootControl)).then(function(oSettings) {
				if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
					return oTransportSelection.setTransports(aChanges, this._oRootControl);
				}
			}.bind(this)).then(function() {
				return oFlexController.discardChanges(aChanges);
			}).then(function() {
				return window.location.reload();
			});
		}.bind(this))["catch"](function(oError) {
			return this._showMessage(MessageBox.Icon.ERROR, "HEADER_RESTORE_FAILED", "MSG_RESTORE_FAILED", oError);
		}.bind(this));
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessage = function(oMessageType, sTitleKey, sMessageKey, oError) {
		var sMessage = this._oTextResources.getText(sMessageKey, oError ? [oError.message || oError] : undefined);
		var sTitle = this._oTextResources.getText(sTitleKey);

		return new Promise(function(resolve) {
			MessageBox.show(sMessage, {
				icon: oMessageType,
				title: sTitle,
				onClose: resolve
			});
		});
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessageToast = function(sMessageKey) {
		var sMessage = this._oTextResources.getText(sMessageKey);

		MessageToast.show(sMessage);
	};

	/**
	 * Check if restart of RTA is needed
	 * the RTA FLP plugin will check this
	 * and restart RTA if needed
	 *
	 * @public
	 * @static
	 * @returns {Boolean} if restart is needed
	 */
	RuntimeAuthoring.needsRestart = function() {

		var bRestart = !!window.localStorage.getItem("sap.ui.rta.restart");
		return bRestart;
	};

	/**
	 * Enable restart of RTA
	 * the RTA FLP plugin would handle the restart
	 *
	 * @public
	 * @static
	 */
	RuntimeAuthoring.enableRestart = function() {

		window.localStorage.setItem("sap.ui.rta.restart", true);
	};

	/**
	 * Disable restart of RTA
	 * the RTA FLP plugin whould handle the restart
	 *
	 * @public
	 * @static
	 */
	RuntimeAuthoring.disableRestart = function() {

		window.localStorage.removeItem("sap.ui.rta.restart");
	};

	/**
	 * Discard all LREP changes and restores the default app state,
	 * opens a MessageBox where the user can confirm
	 * the restoring to the default app state
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onRestore = function() {
		var sMessage = this._oTextResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._oTextResources.getText("FORM_PERS_RESET_TITLE");

		var fnConfirmDiscardAllChanges = function (sAction) {
			if (sAction === "OK") {
				this.getCommandStack().removeAllCommands();
				RuntimeAuthoring.enableRestart();
				this._deleteChanges();
			}
		}.bind(this);

		this._handleStopCutPaste();

		MessageBox.confirm(sMessage, {
			icon: MessageBox.Icon.WARNING,
			title : sTitle,
			onClose : fnConfirmDiscardAllChanges
		});
	};

	/**
	 * Prepare all changes and assign them to an existing transport
	 *
	 * @private
	 * @param {object} oTransportInfo - information about the selected transport
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} Promise which resolves without parameters
	 */
	RuntimeAuthoring.prototype._transportAllLocalChanges = function(oTransportInfo, oFlexController) {
		return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var aTransportData = oTransports._convertToChangeTransportData(aAllLocalChanges);
			var oTransportParams = {};
			//packageName is '' in CUSTOMER layer (no package input field in transport dialog)
			oTransportParams.package = oTransportInfo.packageName;
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;

			return oTransports.makeChangesTransportable(oTransportParams).then(function() {

				// remove the $TMP package from all changes; has been done on the server as well,
				// but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange) {

					if (oChange.getPackage() === '$TMP') {
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = oTransportInfo.packageName;
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function() {
				this._showMessageToast("MSG_TRANSPORT_SUCCESS");
			}.bind(this));
		}.bind(this));
	};

	/**
	 * Checks the two parent-information maps for equality
	 *
	 * @param {object}
	 *          oInfo1 *
	 * @param {object}
	 *          oInfo2
	 * @return {boolean} true if equal, false otherwise
	 * @private
	 */
	RuntimeAuthoring.prototype._isEqualParentInfo = function(oInfo1, oInfo2) {
		var oResult = !!oInfo1 && !!oInfo2;
		if (oResult && (oInfo1.parent && oInfo2.parent)) {
			oResult = oInfo1.parent.getId() === oInfo2.parent.getId();
		}
		if (oResult && (oInfo1.index || oInfo2.index)) {
			oResult = oInfo1.index === oInfo2.index;
		}
		if (oResult && (oInfo1.aggregation || oInfo2.aggregation)) {
			oResult = oInfo1.aggregation === oInfo2.aggregation;
		}
		return oResult;
	};

	/**
	 * Function to handle modification of an element
	 *
	 * @param {sap.ui.base.Event}
	 *          oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleElementModified = function(oEvent) {
		this._handleStopCutPaste();

		var oCommand = oEvent.getParameter("command");
		if (oCommand instanceof sap.ui.rta.command.BaseCommand) {
			this.getCommandStack().pushAndExecute(oCommand);
		}
	};

	/**
	 * Function to handle hiding an element by the context menu
	 *
	 * @param {object}
	 *          oOverlay object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRemoveElement = function(aOverlays) {
		this.getPlugins()["remove"].removeElement(aOverlays);
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._openSettingsDialog = function(oEventOrOverlays) {
		var aSelectedOverlays = (oEventOrOverlays.mParameters) ? oEventOrOverlays.getParameter("selectedOverlays") : oEventOrOverlays;
		var oElement = aSelectedOverlays[0].getElementInstance();
		this._handleStopCutPaste();

		if (!this._oSettingsDialog) {
			this._oSettingsDialog = new SettingsDialog();
		}
		this._oSettingsDialog.setCommandStack(this.getCommandStack());
		this._oSettingsDialog.open(oElement);
	};


	var fnMultiSelectionInactive = function(oOverlay) {
		return this._oDesignTime.getSelection().length < 2;
	};

	var fnIsMovable = function(oOverlay) {
		return oOverlay.getMovable();
	};

	var fnIsRemoveAvailable = function(oOverlay) {
		return this.getPlugins()["remove"].isRemoveAvailable(oOverlay);
	};

	var fnIsRemoveEnabled = function(oOverlay) {
		return this.getPlugins()["remove"].isRemoveEnabled(oOverlay);
	};

	var fnIsRenameAvailable = function(oOverlay) {
		return this.getPlugins()["rename"].isRenameAvailable(oOverlay);
	};

	var fnIsRenameEnabled = function(oOverlay) {
		return this.getPlugins()["rename"].isRenameEnabled(oOverlay);
	};

	var fnIsSettingsAvailable = function(oOverlay) {
		return this.getPlugins()["settings"].isSettingsAvailable(oOverlay);
	};

	var fnIsSettingsEnabled = function(oOverlay) {
		return this.getPlugins()["settings"].isSettingsEnabled(oOverlay);
	};

	var fnIsCombineAvailable = function(oOverlay) {
		return this.getPlugins()["combine"].isCombineAvailable(oOverlay);
	};

	var fnIsCombineEnabled = function(oOverlay) {
		return this.getPlugins()["combine"].isCombineEnabled(oOverlay);
	};

	var fnIsSplitAvailable = function(oOverlay) {
		return this.getPlugins()["split"].isSplitAvailable(oOverlay);
	};

	var fnIsSplitEnabled = function(oOverlay) {
		return this.getPlugins()["split"].isSplitEnabled(oOverlay);
	};

	RuntimeAuthoring.prototype._buildContextMenu = function() {
		// Return if plugin missing
		var oContextMenuPlugin = this.getPlugins()["contextMenu"];
		if (!oContextMenuPlugin) {
			return;
		}

		var oAdditionalElementsPlugin = this.getPlugins()["additionalElements"];
		var oCreateContainerPlugin = this.getPlugins()["createContainer"];

		if (this.getPlugins()["rename"]) {

			oContextMenuPlugin.addMenuItem({
				id : "CTX_RENAME_LABEL",
				text : this._oTextResources.getText("CTX_RENAME"),
				handler : this._handleRename.bind(this),
				available : fnIsRenameAvailable.bind(this),
				enabled : function(oOverlay) {
					return (fnMultiSelectionInactive.call(this, oOverlay) && fnIsRenameEnabled.call(this, oOverlay));
				}.bind(this)
			});
		}

		if (oAdditionalElementsPlugin){
			oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_ELEMENTS_AS_SIBLING",
				text : oAdditionalElementsPlugin.getContextMenuTitle.bind(oAdditionalElementsPlugin, true),
				handler : oAdditionalElementsPlugin.showAvailableElements.bind(oAdditionalElementsPlugin, true),
				available : oAdditionalElementsPlugin.isAvailable.bind(oAdditionalElementsPlugin, true),
				enabled : function(oOverlay) {
					return fnMultiSelectionInactive.call(this, oOverlay) && oAdditionalElementsPlugin.isEnabled(true, oOverlay);
				}.bind(this)
			});

			oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_ELEMENTS_AS_CHILD",
				text : oAdditionalElementsPlugin.getContextMenuTitle.bind(oAdditionalElementsPlugin, false),
				handler : oAdditionalElementsPlugin.showAvailableElements.bind(oAdditionalElementsPlugin, false),
				available : oAdditionalElementsPlugin.isAvailable.bind(oAdditionalElementsPlugin, false),
				enabled : function(oOverlay) {
					return fnMultiSelectionInactive.call(this, oOverlay) && oAdditionalElementsPlugin.isEnabled(false, oOverlay);
				}.bind(this)
			});

		}

		if (oCreateContainerPlugin) {

			oContextMenuPlugin.addMenuItem({
				id : "CTX_CREATE_CHILD_CONTAINER",
				text : oCreateContainerPlugin.getCreateContainerText.bind(oCreateContainerPlugin, false),
				handler : this._createContainer.bind(this, false),
				available : oCreateContainerPlugin.isCreateAvailable.bind(oCreateContainerPlugin, false),
				enabled : oCreateContainerPlugin.isCreateEnabled.bind(oCreateContainerPlugin, false)
			});

			oContextMenuPlugin.addMenuItem({
				id : "CTX_CREATE_SIBLING_CONTAINER",
				text : oCreateContainerPlugin.getCreateContainerText.bind(oCreateContainerPlugin, true),
				handler : this._createContainer.bind(this, true),
				available : oCreateContainerPlugin.isCreateAvailable.bind(oCreateContainerPlugin, true),
				enabled : oCreateContainerPlugin.isCreateEnabled.bind(oCreateContainerPlugin, true)
			});
		}

		if (this.getPlugins()["remove"]) {

			oContextMenuPlugin.addMenuItem({
				id : "CTX_REMOVE",
				text : this._oTextResources.getText("CTX_REMOVE"), // text can be defined also in designtime metadata
				handler : this._handleRemoveElement.bind(this),
				available : fnIsRemoveAvailable.bind(this),
				enabled : fnIsRemoveEnabled.bind(this)
			});
		}

		oContextMenuPlugin.addMenuItem({
			id : "CTX_CUT",
			text : this._oTextResources.getText("CTX_CUT"),
			handler : this._handleCutElement.bind(this),
			available : fnIsMovable,
			enabled : function () {
				return this._oDesignTime.getSelection().length === 1;
			}.bind(this)
		});

		if (this.getPlugins()["cutPaste"]) {

			oContextMenuPlugin.addMenuItem({
				id : "CTX_PASTE",
				text : this._oTextResources.getText("CTX_PASTE"),
				handler : this._handlePasteElement.bind(this),
				available : fnIsMovable,
				enabled : function(oOverlay) {
					return this.getPlugins()["cutPaste"].isElementPasteable(oOverlay);
				}.bind(this)
			});
		}

		oContextMenuPlugin.addMenuItem({
			id : "CTX_GROUP_FIELDS",
			text : this._oTextResources.getText("CTX_GROUP_FIELDS"),
			handler : this._handleCombineElements.bind(this),
			available : fnIsCombineAvailable.bind(this),
			enabled : fnIsCombineEnabled.bind(this)
		});

		oContextMenuPlugin.addMenuItem({
			id : "CTX_UNGROUP_FIELDS",
			text : this._oTextResources.getText("CTX_UNGROUP_FIELDS"),
			handler : this._handleSplitElements.bind(this),
			available : fnIsSplitAvailable.bind(this),
			enabled : fnIsSplitEnabled.bind(this)
		});

		if (this.getPlugins()["settings"]) {

			oContextMenuPlugin.addMenuItem({
				id : "CTX_SETTINGS",
				text : this._oTextResources.getText("CTX_SETTINGS"),
				handler : this._handleSettings.bind(this),
				available : fnIsSettingsAvailable.bind(this),
				enabled : fnIsSettingsEnabled.bind(this)
			});
		}
	};

	RuntimeAuthoring.prototype._createContainer = function(bSibling, aOverlays) {
		this._handleStopCutPaste();

		var oOverlay = aOverlays[0];
		var oNewContainerOverlay = this.getPlugins()["createContainer"].handleCreate(bSibling, oOverlay);

		if (this.getPlugins()["rename"]) {

			var oDelegate = {
				"onAfterRendering" : function() {
					// TODO : remove timeout
					setTimeout(function() {
						this.getPlugins()["rename"].startEdit(oNewContainerOverlay);
					}.bind(this), 0);
					oNewContainerOverlay.removeEventDelegate(oDelegate);
				}.bind(this)
			};

			oNewContainerOverlay.addEventDelegate(oDelegate);
		}

	};

	/**
	 * Function to handle renaming a label
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRename = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this.getPlugins()["rename"].startEdit(oOverlay);
	};

	/**
	 * Function to handle cutting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleCutElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this.getPlugins()["cutPaste"].cut(oOverlay);
	};

	/**
	 * Function to handle pasting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handlePasteElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this.getPlugins()["cutPaste"].paste(oOverlay);
	};

	/**
	 * Handler function to stop cut and paste, because some other operation has started
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleStopCutPaste = function() {
		this.getPlugins()["cutPaste"].stopCutAndPaste();
	};

	/**
	 * Function to handle combining of elements
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleCombineElements = function() {
		this._handleStopCutPaste();

		var oSelectedElement = this.getPlugins()["contextMenu"].getContextElement();
		this.getPlugins()["combine"].handleCombine(oSelectedElement);
	};

	/**
	 * Function to handle ungrouping of sap.ui.comp.smartform.GroupElements
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleSplitElements = function() {
		this._handleStopCutPaste();

		var oSelectedElement = this.getPlugins()["contextMenu"].getContextElement();
		this.getPlugins()["split"].handleSplit(oSelectedElement);
	};

	/**
	 * Function to handle settings
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleSettings = function(aOverlays) {
		this.getPlugins()["settings"].handleSettings(aOverlays);
	};

	/**
	 * @param {sap.ui.core.Element}
	 *          oElement The element which exists in the smart form
	 * @return {sap.ui.comp.smartform.SmartForm} the closest smart form found
	 * @private
	 */
	RuntimeAuthoring.prototype._getSmartFormForElement = function(oElement) {
		while (oElement && !ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
			oElement = oElement.getParent();
		}

		return oElement;
	};

	/**
	 * Get the Title of the Application from the manifest.json
	 *
	 * @private
	 * @returns {String} the application title or empty string
	 */
	RuntimeAuthoring.prototype._getApplicationTitle = function() {

		var sTitle = "";
		var oComponent = sap.ui.core.Component.getOwnerComponentFor(this._oRootControl);
		if (oComponent) {
			sTitle = oComponent.getMetadata().getManifestEntry("sap.app").title;
		}
		return sTitle;
	};

	/**
	 * Check if Changes exists
	 * @private
	 * @returns {Promise}
	 */
	RuntimeAuthoring.prototype._checkChangesExist = function() {
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);
		if (oFlexController.getComponentName().length > 0) {
			return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {
				return aAllLocalChanges.length > 0;
			});
		} else {
			return Promise.resolve(false);
		}
	};

	return RuntimeAuthoring;

}, /* bExport= */true);

}; // end of sap/ui/rta/RuntimeAuthoring.js
