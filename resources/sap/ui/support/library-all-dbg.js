// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.support.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.support.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.support.
 */
jQuery.sap.declare('sap.ui.support.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/support/library",["sap/ui/core/library"],
	function (library1) {
	"use strict";

	/**
	 * UI5 library: sap.ui.support.
	 *
	 * @namespace
	 * @name sap.ui.support
	 * @public
	 */

	// library dependencies

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.support",
		dependencies : ["sap.ui.core", "sap.ui.fl", "sap.m", "sap.ui.layout", "sap.ui.codeeditor"],
		types: ["sap.ui.support.Severity"],
		interfaces: [],
		controls: [],
		elements: [],
		noLibraryCSS: false,
		version: "1.46.2"
	});

	sap.ui.support.Severity = {
		Hint: "Hint",
		Warning: "Warning",
		Error: "Error"
	};

	sap.ui.support.Audiences = {
		Control: "Control",
		Internal: "Internal",
		Application: "Application"
	};

	sap.ui.support.Categories = {
		Accessibility: "Accessibility",
		Performance: "Performance",
		Memory: "Memory",
		Bindings: "Bindings",
		Consistency: "Consistency",
		Functionality : "Functionality",
		DataModel: "DataModel",
		Other: "Other"
	};

	return sap.ui.support;
});

}; // end of sap/ui/support/library.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.Analyzer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Creates an Analyser that async runs tasks added by addTask function. Analysis can be started, stopped, restarted, paused and continued.
 * THe analyser can be used to update the UI while a task is running with the current progress
 */
jQuery.sap.declare('sap.ui.support.supportRules.Analyzer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/Analyzer",["jquery.sap.global", "sap/ui/base/Object"],
	function (jQuery, BaseObject) {
		"use strict";

		/**
		 * Analyzer class that runs tasks. A Task runs a function for every entry in its object array.
		 * The Analyzer counts the task objects and calculates the percentages.
		 * With the start, restart, stop and pause methods the analyzer can be controlled.
		 * While started it walks async through the list of object for each task and completes them.
		 *
		 *
		 * @private
		 */
		var Analyzer = function () {
			this.reset();
		};

		/**
		 * Returns the total progress for all tasks with all their objects.
		 * @returns {int} total progress for all tasks with all their objects.
		 *
		 * @private
		 * @experimental
		 */
		Analyzer.prototype.getProgress = function () {
			return this._iTotalProgress;
		};

		/**
		 * Adds a task to with a name to the analyzer.
		 * The fnTaskProcessor function is called if the task is run for every object in aObjects.
		 *
		 * @param sTaskName
		 * @param fnTaskProcessor
		 * @param aObjects
		 */
		Analyzer.prototype.addTask = function (sTaskName, fnTaskProcessor, aObjects) {
			var oTask = {
				name: sTaskName,
				handler: fnTaskProcessor,
				objects: jQuery.extend(true, {arr: aObjects},{}).arr,
				progress: 0
			};
			this._aTasks.push(oTask);
			this._iTotalSteps = this._iTotalSteps + oTask.objects.length;
		};

		/**
		 * Resets the analyzer and clears all tasks
		 * @private
		 */
		Analyzer.prototype.reset = function () {
			this._iTotalProgress = 0;
			this._iTotalCompletedSteps = 0;
			this._iTotalSteps = 0;
			this._aTasks = [];
			this._oCurrent = {};
			this._bRunning = false;
			this._iStartTS = 0;
			this.startedAt = null;
			this.finishedAt = null;
			this.elapsedTime = null;
		};

		/**
		 * Returns whether the Analyzer is currently running
		 * @returns
		 */
		Analyzer.prototype.running = function () {
			return this._bRunning;
		};

		/**
		 * Starts the analyzer to run all tasks
		 * @private
		 */
		Analyzer.prototype.start = function () {
			var that = this;
			that.startedAt = new Date();
			var progressPromise = new Promise(
				function (resolve, reject) {
					that._iStartTS = performance.now();
					that._start(undefined, resolve);
				}
			);

			return progressPromise;
		};

		/**
		 * Internal method to start the next run on the next object.
		 * @param bContinue {boolean} true if called via timer
		 * @param fnResolve {function} resolve function
		 *
		 * @private
		 * @experimental
		 */
		Analyzer.prototype._start = function (bContinue, fnResolve) {
			if (this._bRunning && !bContinue) {
				return;
			}

			if (this._oCurrent.task) {
				if (bContinue) {
					this._next(fnResolve);
				}

				return;
			}

			for (var i = 0; i < this._aTasks.length; i++) {
				if (this._aTasks[i].progress < 100) {
					this._oCurrent = {
						task: this._aTasks[i],
						index: -1
					};

					this._bRunning = true;
					jQuery.sap.delayedCall(1, this, "_next", [fnResolve]);
					break;
				} else {
					this._bRunning = false;
				}
			}
		};

		/**
		 * Processes the next object in the current task
		 *
		 * @param fnResolve {function} resolves promise to notify of finished state
		 */
		Analyzer.prototype._next = function (fnResolve) {
			if (!this._bRunning) {
				return;
			}

			var oCurrent = this._oCurrent;

			if (oCurrent.task) {

				oCurrent.index++;
				if (oCurrent.task.objects[oCurrent.index]) {
					this._iTotalCompletedSteps++;
					this._iTotalProgress = Math.min(Math.ceil((this._iTotalCompletedSteps / this._iTotalSteps) * 100), 100);
					oCurrent.task.handler(oCurrent.task.objects[oCurrent.index]);
					oCurrent.task.progress = Math.min(Math.ceil((oCurrent.index / oCurrent.task.objects.length) * 100), 100);
				} else {
					//finished
					oCurrent.task.progress = 100;
					this._iTotalCompletedSteps = this._iTotalCompletedSteps + (oCurrent.task.objects.length - oCurrent.index);
					this._iTotalProgress = Math.min(Math.ceil((this._iTotalCompletedSteps / this._iTotalSteps) * 100), 100);
					this._oCurrent = {};
					this.finishedAt = new Date();
					this.elapsedTime = this.finishedAt.getTime() - this.startedAt.getTime(); // In milliseconds

					fnResolve();
				}
				if (performance.now() - this._iStartTS  > 100) {
					jQuery.sap.delayedCall(5, this, "_start", [true, fnResolve]);
					this._iStartTS = performance.now();
				} else {
					jQuery.sap.delayedCall(0, this, "_start", [true, fnResolve]);
				}
			}
		};

		Analyzer.prototype.getElapsedTimeString = function () {
			if (!this.elapsedTime) {
				return;
			}

			var oDate = new Date(null);
			oDate.setHours(0, 0, 0, 0);
			oDate.setMilliseconds(this.elapsedTime);
			var oBuffer = [
				(oDate.getHours() < 10 ? "0" : "") + oDate.getHours(),
				(oDate.getMinutes() < 10 ? "0" : "") + oDate.getMinutes(),
				(oDate.getSeconds() < 10 ? "0" : "") + oDate.getSeconds(),
				oDate.getMilliseconds()
			];

			return oBuffer.join(":");
		};

		return Analyzer;
	}, false);

}; // end of sap/ui/support/supportRules/Analyzer.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.CoreFacade') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 *
 * An interface to the core to be used by rules
 */

jQuery.sap.declare('sap.ui.support.supportRules.CoreFacade'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/support/supportRules/CoreFacade",[],
	function () {
		"use strict";

		var coreInstance = null;

		/**
		 * Constructor for facade to given core object
		 *
		 * @returns {object} Core facade
		 * @param {object} oCore Core object as available in plugin
		 */
		function CoreFacade(oCore) {
			coreInstance = oCore;

			return {
				/**
				 * @returns {object} Core metadata
				 */
				getMetadata: function () {
					return coreInstance.getMetadata();
				},
				/**
				 * @returns {object} UI areas
				 */
				getUIAreas: function () {
					return coreInstance.mUIAreas;
				},
				/**
				 * @returns {object} Components
				 */
				getComponents: function () {
					return coreInstance.mObjects.component;
				},
				/**
				 * @returns {object} Models
				 */
				getModels: function () {
					return coreInstance.oModels;
				}
			};
		}

		return CoreFacade;

	}, false);

}; // end of sap/ui/support/supportRules/CoreFacade.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.DataCollector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Creates a DataCollection that can be loaded from or downloaded to a zip file.
 */
jQuery.sap.declare('sap.ui.support.supportRules.DataCollector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jszip'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.support.ToolsAPI'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.URI'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/DataCollector",['jquery.sap.global', 'sap/ui/thirdparty/jszip', 'sap/ui/core/support/ToolsAPI', 'sap/ui/thirdparty/URI'],
	function (jQuery, JSZip, ToolsAPI, URI) {
	"use strict";

	/**
	 * The data collector collects files for zip download
	 */
	var DataCollector = function(oCore) {
		this._mData = {};
		this._oCore = oCore;
	};

	/**
	 * @returns {Array} All loaded manifest.json files.
	 */
	DataCollector.prototype.getAppInfo = function() {
		var appInfos = [];
		for (var componentName in this._oCore.mObjects.component) {
			var component = this._oCore.mObjects.component[componentName];
			var sapApp = component.getMetadata().getManifestEntry('sap.app');
			appInfos.push(sapApp);
		}
		return appInfos;
	};

	/**
	 * Retrieves all technical information. Reused from diagnostics tools.
	 * @returns {Object}
	 */
	DataCollector.prototype.getTechInfoJSON = function() {
		var oCfg = ToolsAPI.getFrameworkInformation();
		var oTechData = {
			sapUi5Version: null,
			version: oCfg.commonInformation.version,
			build: oCfg.commonInformation.buildTime,
			change: oCfg.commonInformation.lastChange,
			jquery: oCfg.commonInformation.jquery,
			useragent: oCfg.commonInformation.userAgent,
			docmode: oCfg.commonInformation.documentMode,
			debug: oCfg.commonInformation.debugMode,
			bootconfig: oCfg.configurationBootstrap,
			config:  oCfg.configurationComputed,
			libraries: oCfg.libraries,
			loadedLibraries: oCfg.loadedLibraries,
			modules: oCfg.loadedModules,
			uriparams: oCfg.URLParameters,
			appurl: oCfg.commonInformation.applicationHREF,
			title: oCfg.commonInformation.documentTitle,
			statistics: oCfg.commonInformation.statistics,
			resourcePaths: [],
			themePaths : [],
			locationsearch: document.location.search,
			locationhash: document.location.hash
		};

		//add absolute paths for resources
		var aModules = jQuery.sap.getAllDeclaredModules();
		var aResults = [];
		for (var i = 0; i < aModules.length; i++) {
			aResults.push({
				moduleName : aModules[i],
				relativePath: jQuery.sap.getResourcePath(aModules[i]),
				absolutePath: URI(jQuery.sap.getResourcePath(aModules[i])).absoluteTo(document.location.origin + document.location.pathname).toString()
			});
		}
		oTechData.resourcePaths = aResults;

		//add theme paths
		var mLibraries = this._oCore.getLoadedLibraries();
		aResults = [];
		for (var n in mLibraries) {
			var sPath = this._oCore._getThemePath(n, this._oCore.oConfiguration.theme);
			aResults.push({
				theme : this._oCore.oConfiguration.theme,
				library: n,
				relativePath: sPath,
				absolutePath: URI(sPath).absoluteTo(document.location.origin + document.location.pathname).toString()
			});
		}
		oTechData.themePaths = aResults;

		//add SAPUI5 version object
		try {
			oTechData.sapUi5Version = {
				version: sap.ui.getVersionInfo(),
				path: sap.ui.resource("", "sap-ui-version.json")
			};
		} catch (ex) {
			oTechData.sapUi5Version = null;
		}

		return oTechData;
	};

	/**
	 * Adds vData with the name to the data collection. sType json and has will use JSON.stringify
	 */
	DataCollector.prototype.add = function(sName, vData, sType) {
		if (!sName) {
			jQuery.sap.log.error("DataCollector: No name was given.");
			return false;
		}
		if (!vData) {
			jQuery.sap.log.error("DataCollector: No data was given.");
			return false;
		}
		if (typeof vData === "string") {
			this._mData[sName] = vData;
			return true;
		} else if (sType) {
			if ((sType === "json" || sType === "har") && (jQuery.isPlainObject(vData) || jQuery.isArray(vData))) {
				try {
					this._mData[sName] = JSON.stringify(vData);
					return true;
				} catch (ex) {
					jQuery.sap.log.error("DataCollector: JSON data could not be serialized for " + sName);
				}
			} else {
				jQuery.sap.log.error("DataCollector: JSON data could not be serialized for " + sType + ". Either the type is unknown or the data has a wrong format.");
			}
		} else {
			jQuery.sap.log.error("DataCollector: Data could not be serialized for " + sName + ". Data is is not a string or has a an invalid type.");
			return false;
		}
		return false;
	};

	/**
	 * Downloads a zip
	 */
	DataCollector.prototype.download = function() {
		var oZip = new JSZip();

		if (oZip) {
			for (var n in this._mData) {
				oZip.file(n, this._mData[n]);
			}

			var oContent = oZip.generate({
				base64 : true
			});
			var vRaw = window.atob(oContent),
				uInt8Array = new Uint8Array(vRaw.length);

			for (var i = 0; i < uInt8Array.length; ++i) {
				uInt8Array[i] = vRaw.charCodeAt(i);
			}

			var oBlob = new Blob([ uInt8Array ], {
				type : 'application/zip'
			});

			window.open(URL.createObjectURL(oBlob));
		}
	};

	DataCollector.prototype.clear = function() {
		this._mData = {};
		return true;
	};

	DataCollector.prototype.hasData = function(sName) {
		if (sName !== undefined) {
			return this._mData.hasOwnProperty(sName);
		}
		return Object.keys(this._mData).length > 0;
	};

	return DataCollector;
}, true);

}; // end of sap/ui/support/supportRules/DataCollector.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ElementTree') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ElementTree'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ElementTree",["jquery.sap.global", "sap/ui/base/ManagedObject"],
	function (jQuery, ManagedObject) {
		"use strict";

		function _isObject(data) {
			return (typeof data === "object" && !Array.isArray(data) && data !== null);
		}

		/**
		 * @param {ElementTreeRenderingOptions} options
		 * @returns {string}
		 * @private
		 */
		function _startElementTreeList(options) {

			return "<ul " + options.attributes.join(" ") + ">";
		}

		/**
		 * @returns {string}
		 * @private
		 */
		function _endElementTreeList() {
			return "</ul>";
		}

		/**
		 * @param {ElementTreeRenderingOptions.controls} options
		 * @returns {string}
		 * @private
		 */
		function _startElementTreeListItem(options, hasIssue) {
			var html = "<li id=\"" + options.id + "\" ";
			if (hasIssue) {
				html += "issue";
			}
			html += ">";
			return html;
		}

		/**
		 * @returns {string}
		 * @private
		 */
		function _endElementTreeListItem() {
			return "</li>";
		}

		/**
		 * Create HTML for the left part of the ElementTree list item.
		 * @param {ElementTreeOptions.controls} controls
		 * @param {number} paddingLeft
		 * @returns {string}
		 * @private
		 */
		function _getElementTreeLeftColumnOfListItem(controls, paddingLeft) {
			var html = "<offset style=\"padding-left:" + paddingLeft + "px\" >";

			if (controls.content.length > 0) {
				html += "<arrow down=\"true\"></arrow>";
			} else {
				html += "<place-holder></place-holder>";
			}

			html += "</offset>";

			return html;
		}

		/**
		 * Create HTML for the right part of the ElementTree list item.
		 * @param {Object} control - JSON object form {ElementTreeOptions.controls}
		 * @returns {string}
		 * @private
		 */
		function _getElementTreeRightColumnOfListItem(control, numberOfIssues) {
			var splitControlName = control.name.split(".");
			var name = splitControlName[splitControlName.length - 1];
			var nameSpace = control.name.replace(name, "");
			var hideShowClass = (numberOfIssues > 0) ? "showNumbOfIssues" : "hideNumbOfIssues";

			return "<tag data-search=\"" + control.name + control.id + "\">" +
				"&#60;" +
				"<namespace>" + nameSpace + "</namespace>" +
				name +
				"<attribute>&#32;id=\"<attribute-value>" + control.id + "</attribute-value>\"</attribute>" +
				"&#62;" +
				"</tag>" + "<span class = " + hideShowClass  + ">[" + numberOfIssues + "  issue(s)] </span>";
		}

		/**
		 * Search for the nearest parent Node.
		 * @param {element} element - HTML DOM element that will be the root of the search
		 * @param {string} parentNodeName - The desired HTML parent element nodeName
		 * @returns {Object} HTML DOM element
		 * @private
		 */
		function _findNearestDOMParent(element, parentNodeName) {
			while (element.nodeName !== parentNodeName) {
				if (element.nodeName === "CONTROL-TREE") {
					break;
				}
				element = element.parentNode;
			}

			return element;
		}

		/**
		 * ElementTree constructor.
		 * @param {string} id - The id of the DOM container
		 * @param {ElementTree} instantiationOptions
		 * @constructor
		 */
		function ElementTree(id, instantiationOptions) {
			var areInstantiationOptionsAnObject = _isObject(instantiationOptions);
			var options;

			/**
			 * Make sure that the options parameter is Object and
			 * that the ElementTree can be instantiate without initial options.
			 */
			if (areInstantiationOptionsAnObject) {
				options = instantiationOptions;
			} else {
				options = {};
			}

			// Save DOM reference
			this._ElementTreeContainer = document.getElementById(id);

			/**
			 * Method fired when the number of issues against an element is clicked
			 */
			this.onIssueCountClicked = options.onIssueCountClicked ? options.onIssueCountClicked : function () {};

			/**
			 * Method fired when the selected element in the ElementTree is changed.
			 * @param {string} selectedElementId - The selected element id
			 */
			this.onSelectionChanged = options.onSelectionChanged ? options.onSelectionChanged : function (selectedElementId) {};

			/**
			 * Method fired when the hovered element in the ElementTree is changed.
			 * @param {string} hoveredElementId - The hovered element id
			 */
			this.onHoverChanged = options.onHoverChanged ? options.onHoverChanged : function (hoveredElementId) {};

			/**
			 * Method fired when the initial ElementTree rendering is done.
			 */
			this.onInitialRendering = options.onInitialRendering ? options.onInitialRendering : function () {};

			// Object with the tree model that will be visualized
			this.setData(options.data);
		}

		/**
		 * Initialize Tree.
		 */
		ElementTree.prototype.init = function () {
			this._createHTML();
			this._createHandlers();

			// Fire event to notify that the ElementTree is initialized
			this.onInitialRendering();
		};

		/**
		 * Get the data model used for the tree.
		 * @returns {ElementTreeOptions} the data that is used for the tree
		 */
		ElementTree.prototype.getData = function () {
			return this._data;
		};

		/**
		 * Set the data model used for the tree.
		 * @param {ElementTreeOptions} data
		 * @returns {ElementTree}
		 */
		ElementTree.prototype.setData = function (data) {
			var oldData = this.getData();
			var isDataAnObject = _isObject(data);

			if (isDataAnObject === false) {
				jQuery.sap.log.warning("The parameter should be an Object");
				return;
			}

			// Make sure that the new data is different from the old one
			if (JSON.stringify(oldData) === JSON.stringify(data)) {
				return;
			}

			this._data = data;

			// Initialize ElementTree on first rendering
			// If it is a second rendering, render only the tree elements
			if (this._isFirstRendering === undefined) {
				this.init();
				this._isFirstRendering = true;
			} else {
				this._createTree();
			}

			return this;
		};

		/**
		 * Returns the selected <li> element of the tree.
		 * @returns {Element} HTML DOM element
		 */
		ElementTree.prototype.getSelectedElement = function () {
			return this._selectedElement;
		};

		/**
		 * Set the selected <li> element of the tree.
		 * @param {string} elementID - HTML DOM element id
		 * @returns {ElementTree}
		 */
		ElementTree.prototype.setSelectedElement = function (elementID, bNotify) {
			var selectedElement;

			if (typeof elementID !== "string") {
				jQuery.sap.log.warning("Please use a valid string parameter");
				return;
			}

			selectedElement = this._ElementTreeContainer.querySelector("#" + elementID);

			if (selectedElement === null) {
				jQuery.sap.log.warning("The selected element is not a child of the ElementTree");
				return;
			}

			this._selectedElement = selectedElement;
			this._selectTreeElement(selectedElement, bNotify);

			return this;
		};

		ElementTree.prototype.clearSelection = function () {
			var selectedList = this._ElementTreeContainer.querySelector("[selected]");

			if (selectedList) {
				selectedList.removeAttribute("selected");
			}
		};

		/**
		 * Create and places the ElementTree HTML.
		 * @private
		 */
		ElementTree.prototype._createHTML = function () {
			var html;

			html = this._createFilter();
			html += this._createTreeContainer();

			this._ElementTreeContainer.innerHTML = html;
			// Save reverences for future use
			this._setReferences();

			if (this.getData() !== undefined) {
				this._createTree();
			}
		};

		/**
		 * Create the HTML needed for filtering.
		 * @returns {string}
		 * @private
		 */
		ElementTree.prototype._createFilter = function () {
			return "<filter>" +
				"<end>" +
				"<label><input type=\"checkbox\" issues checked/>Issues</label>" +
				"<label><input type=\"checkbox\" namespaces checked/>Namespaces</label>" +
				"<label><input type=\"checkbox\" attributes/>Attributes</label>" +
				"</end>" +
				"</filter>";
		};

		/**
		 * Create the HTML container for the tree.
		 * @returns {string}
		 * @private
		 */
		ElementTree.prototype._createTreeContainer = function () {
			return "<tree show-namespaces show-problematic-elements></tree>";
		};

		/**
		 * Create ElementTree HTML.
		 */
		ElementTree.prototype._createTree = function () {
			var controls = this.getData().controls;

			this._treeContainer.innerHTML = this._createTreeHTML(controls);
		};

		/**
		 * Create HTML tree from JSON.
		 * @param {ElementTreeOptions.controls} controls
		 * @param {number} level - nested level
		 * @returns {string} HTML ElementTree in form of a string
		 * @private
		 */
		ElementTree.prototype._createTreeHTML = function (controls, level) {
			if (controls === undefined || controls.length === 0) {
				return "";
			}

			var html = "";
			var nestedLevel = level || 0;
			var paddingLeft = ++nestedLevel * 10;
			var that = this;
			var issuesIds = this.getData().issuesIds;

			controls.forEach(function (control) {
				html += _startElementTreeList({
					attributes: ["expanded=\"true\""]
				});

				var hasIssue = issuesIds[control.id] !== undefined ? true : false;
				var numberOfIssues = 0;
				var numberOfIssues = hasIssue ? issuesIds[control.id].length : 0;
					html += _startElementTreeListItem({
					id: control.id
				}, hasIssue);

				html += _getElementTreeLeftColumnOfListItem(control, paddingLeft);

				html += _getElementTreeRightColumnOfListItem(control, numberOfIssues);

				html += _endElementTreeListItem();

				html += that._createTreeHTML(control.content, nestedLevel);

				html += _endElementTreeList();
			});

			return html;
		};

		/**
		 * Hide/Show nested "<ul>" in "<li>" elements.
		 * @param {Element} target - DOM element
		 * @private
		 */
		ElementTree.prototype._toggleCollapse = function (target) {
			var targetParent = _findNearestDOMParent(target.parentNode, "UL");

			if (target.getAttribute("right") === "true") {
				target.removeAttribute("right");
				target.setAttribute("down", "true");

				targetParent.setAttribute("expanded", "true");
			} else if (target.getAttribute("down") === "true") {
				target.removeAttribute("down");

				targetParent.removeAttribute("expanded");
				target.setAttribute("right", "true");
			}
		};

		/**
		 * Add visual selection to clicked "<li>" elements.
		 * @param {Element} targetElement - DOM element
		 * @private
		 */
		ElementTree.prototype._selectTreeElement = function (targetElement, bNotify) {
			var target = _findNearestDOMParent(targetElement, "LI");
			// Prevent tree element selection for allowing proper multiple tree element selection for copy/paste
			if (target.id === this._ElementTreeContainer.id) {
				return;
			}


			this._scrollToElement(target);

			if (bNotify) {
				this.onSelectionChanged(target.id);
			}

			if (targetElement.classList.contains("showNumbOfIssues")) {
				this.clearSelection();

				target.setAttribute("selected", "true");

				if (bNotify) {
					this.onIssueCountClicked(target.id);
				}
			}
		};

		/**
		 * Scroll to element in the ElementTree.
		 * @param {Element} target - DOM element to which need to be scrolled
		 */
		ElementTree.prototype._scrollToElement = function (target) {
			var desiredViewBottomPosition = this._treeContainer.offsetHeight - this._treeContainer.offsetTop + this._treeContainer.scrollTop;

			if (target.offsetTop > desiredViewBottomPosition || target.offsetTop < this._treeContainer.scrollTop) {
				this._treeContainer.scrollTop = target.offsetTop - window.innerHeight / 6;
			}
		};

		/**
		 * Search tree elements that match given criteria.
		 * @param {string} userInput - Search criteria
		 * @private
		 */
		ElementTree.prototype._searchInTree = function (userInput) {
			var searchableElements = this._ElementTreeContainer.querySelectorAll("[data-search]");
			var searchInput = userInput.toLocaleLowerCase();
			var elementInformation;

			for (var i = 0; i < searchableElements.length; i++) {
				elementInformation = searchableElements[i].getAttribute("data-search").toLocaleLowerCase();

				if (elementInformation.indexOf(searchInput) !== -1) {
					searchableElements[i].parentNode.setAttribute("matching", true);
				} else {
					searchableElements[i].parentNode.removeAttribute("matching");
				}
			}
		};

		/**
		 * Remove  "matching" attribute from the search.
		 * @private
		 */
		ElementTree.prototype._removeAttributesFromSearch = function () {
			var elements = this._treeContainer.querySelectorAll("[matching]");

			for (var i = 0; i < elements.length; i++) {
				elements[i].removeAttribute("matching");
			}
		};

		/**
		 * Visualize the number of elements which satisfy the search.
		 * @private
		 */
		ElementTree.prototype._setSearchResultCount = function (count) {
			this._filterContainer.querySelector("results").innerHTML = "(" + count + ")";
		};

		/**
		 * Event handler for mouse click on a tree element arrow.
		 * @param {Object} event - click event
		 * @private
		 */
		ElementTree.prototype._onArrowClick = function (event) {
			var target = event.target;

			if (target.nodeName === "ARROW") {
				this._toggleCollapse(target);
			} else {
				this._selectTreeElement(target, true);
			}
		};

		/**
		 * Event handler for user input in "search" input.
		 * @param {Object} event - keyup event
		 * @private
		 */
		ElementTree.prototype._onSearchInput = function (event) {
			var target = event.target;
			var searchResultCount;

			if (target.getAttribute("search") !== null) {

				if (target.value.length !== 0) {
					this._searchInTree(target.value);
				} else {
					this._removeAttributesFromSearch("matching");
				}

				searchResultCount = this._treeContainer.querySelectorAll("[matching]").length;
				this._setSearchResultCount(searchResultCount);
			}
		};

		/**
		 * Event handler for onsearch event.
		 * @param {Object} event - onsearch event
		 * @private
		 */
		ElementTree.prototype._onSearchEvent = function (event) {
			var searchResultCount;

			if (event.target.value.length === 0) {
				this._removeAttributesFromSearch("matching");

				searchResultCount = this._treeContainer.querySelectorAll("[matching]").length;
				this._setSearchResultCount(searchResultCount);
			}

		};

		/**
		 * Event handler for ElementTree options change.
		 * @param {Object} event - click event
		 * @private
		 */
		ElementTree.prototype._onOptionsChange = function (event) {
			var target = event.target;

			if (target.getAttribute("filter") !== null) {
				if (target.checked) {
					this._treeContainer.setAttribute("show-filtered-elements", true);
				} else {
					this._treeContainer.removeAttribute("show-filtered-elements");
				}
			}

			if (target.getAttribute("issues") !== null) {
				if (target.checked) {
					this._treeContainer.setAttribute("show-problematic-elements", true);
				} else {
					this._treeContainer.removeAttribute("show-problematic-elements");
				}
			}

			if (target.getAttribute("namespaces") !== null) {
				if (target.checked) {
					this._treeContainer.setAttribute("show-namespaces", true);
				} else {
					this._treeContainer.removeAttribute("show-namespaces");
				}
			}

			if (target.getAttribute("attributes") !== null) {
				if (target.checked) {
					this._treeContainer.setAttribute("show-attributes", true);
				} else {
					this._treeContainer.removeAttribute("show-attributes");
				}
			}

		};

		/**
		 * Event handler for mouse hover on tree element.
		 * @param {Object} event - mouse event
		 * @private
		 */
		ElementTree.prototype._onTreeElementMouseHover = function (event) {
			var target = _findNearestDOMParent(event.target, "LI");
			
			var hoverList = this._ElementTreeContainer.querySelector("[hover]");

			if (hoverList) {
				hoverList.removeAttribute("hover");
			}
			
			target.setAttribute("hover", "true");
			this.onHoverChanged(target.id);
		};

		/**
		 * Create all event handlers for the ElementTree.
		 * @private
		 */
		ElementTree.prototype._createHandlers = function () {
			this._treeContainer.onclick = this._onArrowClick.bind(this);
			this._filterContainer.onkeyup = this._onSearchInput.bind(this);
			this._filterContainer.onsearch = this._onSearchEvent.bind(this);
			this._filterContainer.onchange = this._onOptionsChange.bind(this);
			this._ElementTreeContainer.onmouseover = this._onTreeElementMouseHover.bind(this);
		};

		/**
		 * Save references to ElementTree different sections.
		 * @private
		 */
		ElementTree.prototype._setReferences = function () {
			this._filterContainer = this._ElementTreeContainer.querySelector(":scope > filter");
			this._treeContainer = this._ElementTreeContainer.querySelector(":scope > tree");
		};

		return ElementTree;
	});

}; // end of sap/ui/support/supportRules/ElementTree.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ExecutionScope') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ExecutionScope'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ExecutionScope",["jquery.sap.global"],
	function(jQuery) {
		"use strict";

		var coreInstance = null,
			_context = null,
			elements = [];

		var coreContext = {
			setScope: function () {
				for (var i in coreInstance.mElements) {
					elements.push(coreInstance.mElements[i]);
				}
			}
		};

		var parentContext = {
			setScope: function () {
				var parent = sap.ui.getCore().byId(_context.parentId);
				//TODO: Handle parent not found
				elements = parent.findAggregatedObjects(true);
			}
		};

		var componentsContext = {
			setScope: function () {
				var set = {};
				_context.components.forEach(function (componentId) {
					var component = coreInstance.mObjects.component[componentId],
						aggregations = component.findAggregatedObjects(true);

					aggregations.forEach(function (agg) {
						set[agg.getId()] = agg;
					});
				});

				for (var i in set) {
					elements.push(set[i]);
				}
			}
		};

		var contextTypes = {
			core: coreContext,
			parent: parentContext,
			components: componentsContext
		};

		function ExecutionScope(core, context) {
			coreInstance = core;
			elements = [];
			_context = context;

			contextTypes[_context.type].setScope();

			return {
				getElements: function () {
					return elements;
				},
				getElementsByClassName: function (classNameSelector) {
					if (typeof classNameSelector === "string") {
						return elements.filter(function (element) {
							return element.getMetadata().getName() === classNameSelector;
						});
					}

					if (typeof classNameSelector === "function") {
						return elements.filter(function (element) {
							return element instanceof classNameSelector;
						});
					}
				},
				/**
				 * Gets the logged objects by object type
				 */
				getLoggedObjects: function (type) {
					var log = jQuery.sap.log.getLog(),
						loggedObjects = [];

					/**
					 * Add logEntries that have support info object,
					 * ad that have the same type as the type provided
					 */
					log.forEach(function (logEntry) {
						if (!logEntry.supportInfo) {
							return;
						}

						var elemIds = elements.map(function (element) {
							return element.getId();
						});

						var hasElemId = !!logEntry.supportInfo.elementId,
							typeMatch = logEntry.supportInfo.type === type || type === undefined,
							scopeMatch = !hasElemId || (jQuery.inArray(logEntry.supportInfo.elementId, elemIds) > -1);

						/**
						 * Give the developer the ability to pass filtering function
						 */
						if (typeof type === "function" && type(logEntry) && scopeMatch) {
							loggedObjects.push(logEntry);
							return;
						}

						if (typeMatch && scopeMatch) {
							loggedObjects.push(logEntry);
						}
					});

					return loggedObjects;
				},
				_getType: function () {
					return _context.type;
				},
				_getContext: function () {
					return _context;
				}
			};
		}

		return ExecutionScope;
	}, false);
}; // end of sap/ui/support/supportRules/ExecutionScope.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.Highlighter') ) {
jQuery.sap.declare('sap.ui.support.supportRules.Highlighter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/support/supportRules/Highlighter",[],
	function () {
		"use strict";

		// Reference for the highlighter DOM element
		var _highLighter = null;

		/**
		 * Hide the highlighter.
		 * @private
		 */
		function _hideHighLighter() {
			_highLighter.style.display = "none";
		}

		/**
		 * Show the highlighter.
		 * @private
		 */
		function _showHighLighter() {
			_highLighter.style.display = "block";
		}

		/**
		 * Create DOM element for visual highlighting.
		 * @private
		 */
		function _createHighLighter() {
			var highLighter = document.createElement("div");

			highLighter.style.cssText = "box-sizing: border-box;border:1px solid blue;background: rgba(20, 20, 200, 0.4);position: absolute";

			var highLighterWrapper = document.createElement("div");

			highLighterWrapper.id = "ui5-highlighter";
			highLighterWrapper.style.cssText = "position: fixed;top:0;right:0;bottom:0;left:0;z-index: 1000;overflow: hidden;";
			highLighterWrapper.appendChild(highLighter);

			document.body.appendChild(highLighterWrapper);

			// Save reference for later usage
			_highLighter = document.getElementById("ui5-highlighter");

			// Add event handler
			_highLighter.onmouseover = _hideHighLighter;
		}

		/**
		 * Highlight controls.
		 * @type {{setDimensions: Function}}
		 */
		return {
			/**
			 * Set the position of the visual highlighter.
			 * @param {string} elementId - The id of the DOM element that need to be highlighted
			 * @returns {exports}
			 */
			highlight: function (elementId) {
				var highlighter;
				var targetDomElement;
				var targetRect;

				if (_highLighter === null && !document.getElementById("ui5-highlighter")) {
					_createHighLighter();
				} else {
					_showHighLighter();
				}

				highlighter = _highLighter.firstElementChild;
				targetDomElement = document.getElementById(elementId);

				if (targetDomElement) {
					targetRect = targetDomElement.getBoundingClientRect();

					highlighter.style.top = targetRect.top + "px";
					highlighter.style.left = targetRect.left + "px";
					highlighter.style.height = targetRect.height + "px";
					highlighter.style.width = targetRect.width + "px";
				}

				return this;
			}
		};
	});

}; // end of sap/ui/support/supportRules/Highlighter.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.IssueManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.support.supportRules.IssueManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/IssueManager",["jquery.sap.global", "sap/ui/base/Object"],
	function (jQuery, BaseObject) {
		"use strict";

		var _aIssues = [];
		var _aHistory = [];

		var IssueManager = {
			/**
			 * Adds an issue to the list of issues found
			 * @param {object} oIssue
			 */
			addIssue: function (oIssue) {
				_aIssues.push(oIssue);
			},
			/**
			 * @param {function} fnCb Callback function to be used in the same
			 * fashion as Array.prototype.forEach
			 */
			walkIssues: function (fnCb) {
				_aIssues.forEach(fnCb);
			},
			clearIssues: function () {
				// Return if no issues
				if (!_aIssues.length) {
					return;
				}

				// Add to history. Using object for future compatibility
				_aHistory.push({
					// Copy array
					issues: _aIssues.slice()
				});

				// Reset issues array
				_aIssues = [];
			},
			/**
			 * @returns {array} Issue history - array of objects.
			 * Each history object has an issues key that contains an array of
			 * issues
			 */
			getHistory: function () {
				this.clearIssues();
				// Copy and return history
				return _aHistory.slice();
			},
			createCheckFunctionProxy: function (oRule) {
				return new CheckFunctionProxy(oRule);
			}
		};

		var CheckFunctionProxy = function (oRule) {
			this.oRule = oRule;
		};

		CheckFunctionProxy.prototype.addIssue = function (oIssue) {
			oIssue.rule = this.oRule;

			if (!sap.ui.support.Severity[oIssue.severity]) {
				throw "The issue from rule " + this.oRule.title + " does not have proper severity defined. Allowed values can be found" +
						"in sap.ui.support.Severity";
			}

			if (!oIssue.context || !oIssue.context.id) {
				throw "The issue from rule '" + this.oRule.title + "' should provide a context id.";
			}

			if (!oIssue.details) {
				throw "The issue from rule '" + this.oRule.title + "' should provide details for the generated issue.";
			}

			IssueManager.addIssue(oIssue);
		};

		return IssueManager;

	}, true);

}; // end of sap/ui/support/supportRules/IssueManager.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ReportProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Creates a report from data.
 */
jQuery.sap.declare('sap.ui.support.supportRules.ReportProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.handlebars'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ReportProvider",['jquery.sap.global', 'sap/ui/thirdparty/handlebars'], function(jQuery, Handlebars) {
	"use strict";

	// Private fields
	var reportTemplateUrl = jQuery.sap.getResourcePath('sap/ui/support/supportRules/ui/Report_template.html');

	/*
	 * Functions taken from core.support.plugins.TechInfo.js
	 */
	var techInfoRenderer = {
		line: function (buffer, right, border, label, content) {
			buffer.push("<tr><td ", right ? "align='right' " : "", "valign='top'>", "<label class='sapUiSupportLabel'>", jQuery.sap.escapeHTML(label || ""), "</label></td><td",
					border ? " class='sapUiSupportTechInfoBorder'" : "", ">");
			var ctnt = content;
			if (jQuery.isFunction(content)) {
				ctnt = content(buffer);
			}
			buffer.push(jQuery.sap.escapeHTML(ctnt || ""));
			buffer.push("</td></tr>");
		},
		multiline: function (buffer, right, border, label, content){
			var that = this;
			that.line(buffer, right, border, label, function(buffer){
				buffer.push("<table border='0' cellspacing='0' cellpadding='3'>");
				jQuery.each(content, function(i,v){
					var val = "";
					if (v) {
						if (typeof (v) === "string" || typeof (v) === "string" || typeof (v) === "boolean") {
							val = v;
						} else if ((jQuery.isArray(v) || jQuery.isPlainObject(v)) && window.JSON) {
							val = window.JSON.stringify(v);
						}
					}
					that.line(buffer, false, false, i, "" + val);
				});
				buffer.push("</table>");
			});
		}
	};

	function getFile(sUrl) {
		var sContent = "",
			bError = false;
		jQuery.ajax({
			type: "GET",
			url: sUrl,
			dataType: "text",
			success: function (sResult) {
				sContent = sResult;
			},
			error: function (sResult) {
				bError = true;
			},
			data: {},
			async: false
		});
		if (bError) {
			return "";
		}
		return sContent;
	}

	/*
	 * Modified version of the function onsapUiSupportTechInfoData from core.support.plugins.TechInfo.js
	 */
	function getTechnicalInformation(technicalInfo) {
		var content = '';

		if (!technicalInfo) {
			return new Handlebars.SafeString(content);
		}

		try {
			technicalInfo.modules.sort();
			var html = ["<div class='sapUiSupportToolbar'>",
						"<div><div class='sapUiSupportTechInfoCntnt'>",
						"<table border='0' cellpadding='3'>"];
			techInfoRenderer.line(html, true, true, "SAPUI5 Version", function(buffer){
				var sapUI5Version = technicalInfo.sapUi5Version;
				if (sapUI5Version && sapUI5Version.version) {
					var oVersionInfo = sapUI5Version.version;
					var sVersion = jQuery.sap.escapeHTML(oVersionInfo.version || "");
					buffer.push(sVersion, " (built at ", jQuery.sap.escapeHTML(oVersionInfo.buildTimestamp || ""), ", last change ", jQuery.sap.escapeHTML(oVersionInfo.scmRevision || ""), ")");
				} else {
					buffer.push("not available");
				}
			});
			techInfoRenderer.line(html, true, true, "Core Version", function(buffer){
				return technicalInfo.version + " (built at " + technicalInfo.build + ", last change " + technicalInfo.change + ")";
			});
			techInfoRenderer.line(html, true, true, "Loaded jQuery Version", function(buffer){
				return technicalInfo.jquery;
			});
			techInfoRenderer.line(html, true, true, "User Agent", function(buffer){
				return technicalInfo.useragent + (technicalInfo.docmode ? ", Document Mode '" + technicalInfo.docmode + "'" : "");
			});
			techInfoRenderer.line(html, true, true, "Application", technicalInfo.appurl);
			techInfoRenderer.multiline(html, true, true, "Configuration (bootstrap)", technicalInfo.bootconfig);
			techInfoRenderer.multiline(html, true, true, "Configuration (computed)", technicalInfo.config);
			if (!jQuery.isEmptyObject(technicalInfo.libraries)) {
				techInfoRenderer.multiline(html, true, true, "Libraries", technicalInfo.libraries);
			}
			techInfoRenderer.multiline(html, true, true, "Loaded Libraries", technicalInfo.loadedLibraries);
			techInfoRenderer.line(html, true, true, "Loaded Modules", function(buffer){
				jQuery.each(technicalInfo.modules, function(i,v){
					if (v.indexOf("sap.ui.core.support") < 0) {
						buffer.push("<span>", jQuery.sap.escapeHTML(v || ""), "</span>");
						if (i < technicalInfo.modules.length - 1) {
							buffer.push(", ");
						}
					}
				});
			});
			techInfoRenderer.multiline(html, true, true, "URI Parameters", technicalInfo.uriparams);

			html.push("</table></div>");
			content = html.join('');
		} catch (ex) {
			jQuery.sap.log.warning('There was a problem extracting technical info.');
		}

		return new Handlebars.SafeString(content);
	}

	function getEscapedString(value) {
		if (value) {
			if (jQuery.isArray(value)) {
				return jQuery.sap.escapeHTML(value.join(', '));
			} else {
				return jQuery.sap.escapeHTML(value);
			}
		} else {
			return '';
		}
	}

	function groupIssues(issues) {
		var groupedIssues = {};

		for (var i = 0; i < issues.length; i++) {
			var issue = issues[i];

			if (!groupedIssues[issue.ruleLibName]) {
				groupedIssues[issue.ruleLibName] = {};
			}

			if (!groupedIssues[issue.ruleLibName][issue.ruleId]) {
				groupedIssues[issue.ruleLibName][issue.ruleId] = [];
			}

			groupedIssues[issue.ruleLibName][issue.ruleId].push(issue);
		}

		return groupedIssues;
	}

	function renderGroup(groupName, ruleGroup, groupId, groupNumber) {
		var content = '';
		var container = '';
		var ruleNumber = 1;
		var totalIssues = 0;

		for (var group in ruleGroup) {
			var issues = ruleGroup[group];
			totalIssues += issues.length;
			var issue = issues[0]; // Get the first issue from this rule group and add all common information.
			container += '<tr id="' + groupId + '_rule_' + ruleNumber + '" class="filterable" data-severity="' + getEscapedString(issue.severity) + '" data-numberOfIssues="' + issues.length + '">';
			container += '<td>';
			container += '<div class="expandable-control collapsed-content" data-expandableElement="' + groupId + '_rule_' + ruleNumber + '_content">';
			container += '<div class="expandable-title"> ' + ruleNumber + '. ' + getEscapedString(issue.name) + ' (' + issues.length + ' issues) ' + '</div></div>';
			container += '<div id="' + groupId + '_rule_' + ruleNumber + '_content">';
			container += '<div><span class="sapUiSupportLabel">Description: </span>' + getEscapedString(issue.description) + '</div>';
			container += '<div><span class="sapUiSupportLabel">Resolution: </span>' + getEscapedString(issue.resolution) + '</div>';
			container += '<div>';
			if (issue.resolutionUrls) {
				for (var k = 0; k < issue.resolutionUrls.length; k++) {
					container += '<div><a href="' + getEscapedString(issue.resolutionUrls[k].href) + '" target="_blank">' + getEscapedString(issue.resolutionUrls[k].text) + '</a></div>';
				}
			}
			container += '</div>';
			container += '<table class="sapUiTable"><tr><th></th><th>Element Id</th><th>Class</th><th>Details</th></tr>';
			for (var i = 0; i < issues.length; i++) {
				container += '<tr><td>' + (i + 1) + '</td><td>' + getEscapedString(issues[i].context.id) + '</td>';
				container += '<td>' + getEscapedString(issues[i].context.className) + '</td>';
				container += '<td>' + getEscapedString(issues[i].details) + '</td></tr>';
			}
			container += '</table>';
			container += '</div></td>';
			container += '<td class="' + getEscapedString(issue.severity) + '">' + getEscapedString(issue.severity) + '</td>';
			container += '<td>' + getEscapedString(issue.categories) + '</td>';
			container += '<td>' + getEscapedString(issue.audiences) + '</td>';
			container += '</tr>';

			ruleNumber++;
		}

		// Make the first group expanded.
		var expandedClass = 'collapsed-content';
		if (groupNumber === 1) {
			expandedClass = 'expanded-content';
		}

		content += '<tr>';
		content += '<td colspan="100" class="expandable-control ' + expandedClass + '" data-expandableElement="' + groupId + '" data-groupName="' + groupName + '" data-groupNumber="' + groupNumber + '">';
		content += '<span class="sapUiSupportLabel expandable-title"> ' + groupNumber + '. ' + groupName + ' (' + (ruleNumber - 1) + ' rules, ' + totalIssues + ' issues)</span>';
		content += '</td></tr><tbody id="' + groupId + '">';
		content += container;
		content += '</tbody>';

		return content;
	}

	function getIssues(issues) {
		var content = '';
		var groups = {};
		var groupNumber = 1;

		if (!issues) {
			return new Handlebars.SafeString(content);
		}

		try {
			groups = groupIssues(issues);

			content += '<table class="sapUiTable"><tr><th>Title</th><th>Status</th><th>Categories</th><th>Audiences</th></tr>';

			for (var group in groups) {
				content += renderGroup(group, groups[group], 'group' + groupNumber, groupNumber);
				groupNumber++;
			}

			content += '</table>';
		} catch (ex) {
			jQuery.sap.log.warning('There was a problem extracting issues info.');
			content = '';
		}

		return new Handlebars.SafeString(content);
	}

	function getComponentPart(value) {
		var result = '<td>';
		if (value) {
			result += jQuery.sap.escapeHTML(value);
		}
		result += '</td>';
		return result;
	}

	function getAppInfo(appInfo) {
		var content = '';

		if (!appInfo) {
			return new Handlebars.SafeString(content);
		}

		content += '<table class="sapUiTable"><tr><th>Component ID</th><th>Type</th><th>Title</th><th>Subtitle</th><th>Application version</th><th>Description</th><th>BCP Component</th></tr>';

		try {
			for (var i = 0; i < appInfo.length; i++) {
				var component = appInfo[i];
				content += '<tr>';
				content += getComponentPart(component.id);
				content += getComponentPart(component.type);
				content += getComponentPart(component.title);
				content += getComponentPart(component.subTitle);
				if (component.applicationVersion) {
					content += getComponentPart(component.applicationVersion.version);
				} else {
					content += '<td></td>';
				}
				content += getComponentPart(component.description);
				content += getComponentPart(component.ach);
				content += '</tr>';
			}

			content += '</table>';
		} catch (ex) {
			jQuery.sap.log.warning('There was a problem extracting app info.');
			content = '';
		}

		return new Handlebars.SafeString(content);
	}

	function getSeverityFilter(severity, count, isActive) {
		var activeClass = isActive ? 'filter-active' : '';
		return '<div data-severity="' + severity + '" class="filter ' + activeClass + ' ' + severity + '">' + severity + '(' + count + ')</div>' + ' | ';
	}

	function getSeverityFilters(issues) {
		var content = '';
		var severities = {};
		var severityProperty;
		var severity;

		if (!issues) {
			return new Handlebars.SafeString(content);
		}

		try {
			for (var i = 0; i < issues.length; i++) {
				severityProperty = issues[i].severity;
				if (severities[severityProperty]) {
					severities[severityProperty]++;
				} else {
					severities[severityProperty] = 1;
				}
			}
			content += getSeverityFilter('Total', issues.length, true);

			for (severity in severities) {
				content += getSeverityFilter(severity, severities[severity], false);
			}
		} catch (ex) {
			jQuery.sap.log.warning('There was a problem creating severity filters.');
			content = '';
		}

		return new Handlebars.SafeString(content);
	}

	function getCoreScope(displaySettings) {
		var content = '';
		content += '<div><span class="sapUiSupportLabel">' + displaySettings.displayName + '</span>';
		content += '<span class="description"> (' + displaySettings.description + ')</span></div>';
		return content;
	}

	function getParentScope(parentId, displaySettings) {
		var content = '';
		content += '<div><span class="sapUiSupportLabel">' + displaySettings.displayName + ' with id:</span> ' + parentId;
		content += '<span class="description"> (' + displaySettings.description + ')</span></div>';
		return content;
	}

	function getComponentsScope(components, displaySettings) {
		var content = '';
		// Make components collapsable if they are too many.
		if (components.length > 5) {
			content += '<div class="expandable-control collapsed-content" data-expandableElement="execution-scope-components">';
			content += '<span class="expandable-title"><span class="sapUiSupportLabel">' + displaySettings.displayName + '</span>';
			content += '<span class="description"> (' + displaySettings.description + ')</span></span></div>';
		} else {
			content += '<div><span class="sapUiSupportLabel">' + displaySettings.displayName + '</span>';
			content += '<span class="description"> (' + displaySettings.description + ')</span></div>';
		}

		content += '<ol id="execution-scope-components" class="top-margin-xsmall">';
		for (var i = 0; i < components.length; i++) {
			content += '<li>' + components[i] + '</li>';
		}
		content += '</ol>';

		return content;
	}

	function getScope(scope) {
		var content = '';

		try {
			var scopeType = scope.executionScope._getType();
			var scopeDisplaySettings = scope.scopeDisplaySettings.executionScopes[scopeType];
			var scopeDisplayTitle = scope.scopeDisplaySettings.executionScopeTitle;
			content += '<div class="sapUiSupportLabel">' + scopeDisplayTitle + ': </div>';

			switch (scopeType) {
				case 'core':
					content += getCoreScope(scopeDisplaySettings);
					break;
				case 'parent':
					content += getParentScope(scope.executionScope._getContext().parentId, scopeDisplaySettings);
					break;
				case 'components':
					content += getComponentsScope(scope.executionScope._getContext().components, scopeDisplaySettings);
					break;
			}
		} catch (ex) {
			jQuery.sap.log.warning('There was a problem extracting scope info.');
			content = '';
		}

		return new Handlebars.SafeString(content);
	}

	Handlebars.registerHelper('getTechnicalInformation', function (technicalInfo) {
		return getTechnicalInformation(technicalInfo);
	});
	Handlebars.registerHelper('getIssues', function (issues) {
		return getIssues(issues);
	});
	Handlebars.registerHelper('getAppInfo', function (appInfo) {
		return getAppInfo(appInfo);
	});
	Handlebars.registerHelper('getSeverityFilters', function (issues) {
		return getSeverityFilters(issues);
	});
	Handlebars.registerHelper('getScope', function (scope) {
		return getScope(scope);
	});

	// Public functions

	/**
	 * Creates an html string containing the whole report.
	 * @param {Object} oData
	 * @returns {String}
	 */
	function getReportHtml(oData) {
		var template = Handlebars.compile(getFile(reportTemplateUrl));

		var reportContext = {
			technicalInfo: oData.technical,
			issues: oData.issues,
			appInfo: oData.application,
			metadata: {
				title: 'SAPUI5 Check Results',
				title_TechnicalInfo: 'Technical Information',
				title_Issues: 'Issues',
				title_AppInfo: 'Application Information',
				timestamp: new Date(),
				scope: oData.scope,
				analysisDuration: oData.analysisDuration,
				analysisDurationTitle: oData.analysisDurationTitle
			}
		};

		return template(reportContext);
	}

	return {
		getReportHtml: getReportHtml
	};
}, true);
}; // end of sap/ui/support/supportRules/ReportProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.RuleSerializer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.support.supportRules.RuleSerializer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/support/supportRules/RuleSerializer",[],
	function () {
		"use strict";

		return {
			serialize: function serializeRule(rule) {
				var replacer = function (key, value) {
					if (typeof value === "function") {
						return value.toString();
					} else {
						return value;
					}
				};

				var result = JSON.stringify(rule, replacer);
				return result;
			},
			deserialize: function (serializedRule, stringifyCheck) {
				var rule = JSON.parse(serializedRule);

				/* eslint-disable no-eval */
				if (!stringifyCheck && rule.check !== undefined) {
					eval("rule.check = " + rule.check);
				}
				/* eslint-enable no-eval */

				return rule;
			}
		};
	}, true);

}; // end of sap/ui/support/supportRules/RuleSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.RuleSet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.support.supportRules.RuleSet'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/RuleSet",["jquery.sap.global", "sap/ui/base/Object"],
	function (jQuery, BaseObject) {
		"use strict";

		var mRulesets = {};

		var Ruleset = function (oSettings) {
			if (!oSettings.name) {
				jQuery.sap.log.error("Please provide a name for the Ruleset.");
			}

			if (mRulesets[oSettings.name]) {
				return mRulesets[oSettings.name];
			}
			this._oSettings = oSettings;
			this._mRules = {};
			mRulesets[oSettings.name] = this;
		};

		Ruleset.prototype.getRules = function () {
			return this._mRules;
		};

		Ruleset.prototype.updateRule = function (oldId, newSettings) {
			var verifyResult = this._verifySettingsObject(newSettings, true);

			if (verifyResult === "success") {
				delete this._mRules[oldId];
				this._mRules[newSettings.id] = newSettings;
			}

			return verifyResult;
		};

		Ruleset.prototype._verifySettingsObject = function (oSettings, update) {
			if (!oSettings.id) {
				jQuery.sap.log.info("Support rule needs an unique id.");
				return "Support rule needs an unique id.";
			}

			if (!update && this._mRules[oSettings.id]) {
				jQuery.sap.log.info("Support rule with the id " + oSettings.id + " already exists.");
				return "Support rule with the id " + oSettings.id + " already exists.";
			}

			if (!oSettings.check) {
				jQuery.sap.log.info("Support rule needs a check function.");
				return "Support rule needs a check function.";
			}

			if (!oSettings.title) {
				jQuery.sap.log.info("Support rule needs a title.");
				return "Support rule needs a title.";
			}

			if (!oSettings.description) {
				jQuery.sap.log.info("Support rule needs a description.");
				return "Support rule needs a description.";
			}

			if (!oSettings.resolution && (!oSettings.resolutionurls || !oSettings.resolutionurls.length > 0)) {
				jQuery.sap.log.info("Support rule needs either a resolution or resolutionurls or should have a ticket handler function");
				return "Support rule needs either a resolution or resolutionurls or should have a ticket handler function";
			}

			if (!oSettings.audience || oSettings.audience.length === 0) {
				jQuery.sap.log.info("Support rule should have an audience. Applying ['Control']");
				oSettings.audience = [sap.ui.support.Audiences.Control];
			}

			if (oSettings.audience && oSettings.audience.forEach) {
				var wrongAudience = false,
					audName = "";
				oSettings.audience.forEach(function (aud) {
					if (!sap.ui.support.Audiences[aud]) {
						wrongAudience = true;
						audName = aud;
					}
				});

				if (wrongAudience) {
					return "Audience " + audName + " does not exist. Please use the audiences from sap.ui.support.Audiences";
				}
			}

			if (!oSettings.categories || oSettings.categories.length === 0) {
				jQuery.sap.log.info("Support rule should have a category. Applying 'Performance'");
				oSettings.category = ["Performance"];
			}

			if (oSettings.categories && oSettings.categories.forEach) {
				var wrongCategory = false,
					catName = "";
				oSettings.categories.forEach(function (cat) {
					if (!sap.ui.support.Categories[cat]) {
						wrongCategory = true;
						catName = cat;
					}
				});

				if (wrongCategory) {
					return "Category " + catName + " does not exist. Please use the categories from sap.ui.support.Categories";
				}
			}

			return "success";
		};

		Ruleset.prototype.addRule = function (oSettings) {
			var verifyResult = this._verifySettingsObject(oSettings);

			if (verifyResult === "success") {
				this._mRules[oSettings.id] = oSettings;
				oSettings.libName = this._oSettings.name;
			}

			return verifyResult;
		};

		return Ruleset;
	}, true);

}; // end of sap/ui/support/supportRules/RuleSet.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.WindowCommunicationBus') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.support.supportRules.WindowCommunicationBus'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/support/supportRules/WindowCommunicationBus",[],
	function () {
		"use strict";

		var CommunicationBus = {
			channels: {}
		};

		var origin = jQuery.sap.getUriParameters().get("sap-ui-xx-support-origin");

		if (!origin) {
			// When loading from CDN
			var modulePathURI = new window.URI(jQuery.sap.getModulePath('./'));
			var protocol = modulePathURI.protocol() === "" ?
					window.location.protocol.replace(":", "") : modulePathURI.protocol();

			var host = modulePathURI.host() === "" ?
					window.location.host : modulePathURI.host();

			origin = protocol + "://" + host;
		}

		CommunicationBus.origin = origin;

		CommunicationBus.subscribe = function (channelName, callback, context) {
			if (!this.channels[channelName]) {
				this.channels[channelName] = [{
					callback : callback,
					context: context
				}];
				return;
			}

			this.channels[channelName].push({
				callback : callback,
				context: context
			});
		};

		CommunicationBus.publish = function (channelName, aParams) {
			var receivingWindow = this._getReceivingWindow(),
				dataObject = {
					channelName: channelName,
					params: aParams
				};

			// TODO: we need to find a way to make sure we're executing on the
			// correct window. Issue happen in cases where we're too fast to
			// post messages to the iframe but it is not there yet
			receivingWindow.postMessage(dataObject, this.origin);
		};

		CommunicationBus.destroyChanels = function () {
			CommunicationBus.channels = {};
		};

		CommunicationBus._getReceivingWindow = function () {
			if (document.getElementById("sap-ui-supportToolsFrame")) {
				return document.getElementById("sap-ui-supportToolsFrame").contentWindow;
			}

			return window.parent;
		};

		CommunicationBus.onmessage = function (evt) {
			var channelName = evt.data.channelName,
				params = evt.data.params,
				callbackObjects = CommunicationBus.channels[channelName];

			if (!callbackObjects) {
				return;
			}

			callbackObjects.forEach(function (cbObj) {
				cbObj.callback.apply(cbObj.context , [params]);
			});
		};

		if (window.addEventListener) {
			window.addEventListener("message", CommunicationBus.onmessage, false);
		} else {
			window.attachEvent("onmessage", CommunicationBus.onmessage);
		}

		return CommunicationBus;
	}, true);

}; // end of sap/ui/support/supportRules/WindowCommunicationBus.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.CodeEditor') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ui.CodeEditor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.ace.ace'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.ace.mode-javascript'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.ace.mode-json'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/CodeEditor",[
	"jquery.sap.global",
	"sap/ui/core/Control",
	"sap/ui/thirdparty/ace/ace",
	"sap/ui/thirdparty/ace/mode-javascript",
	"sap/ui/thirdparty/ace/mode-json"
], function(jQuery, Control) {
	"use strict";

	var CodeEditor = Control.extend("sap.ui.core.support.tools.ui.CodeEditor", {
		metadata: {
			library: "sap.ui.core",
			properties: {
				value: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},
				type: {
					type: "string",
					group: "Appearance",
					defaultValue: "javascript"
				},
				width: {
					type: "sap.ui.core.CSSSize",
					group: "Appearance",
					defaultValue: "400px"
				},
				height: {
					type: "sap.ui.core.CSSSize",
					group: "Appearance",
					defaultValue: "400px"
				},
				editable: {
					type: "boolean",
					group: "Behavior",
					defaultValue: true
				},
				showLineNumbers: {
					type: "boolean",
					group: "Behavior",
					defaultValue: true
				}
			},
			events: {
				liveChange: {},
				change: {}
			},
			defaultProperty: "content"
		},
		renderer: function(oRm, oControl) {
			oRm.write("<div ");
			oRm.writeControlData(oControl);
			oRm.addStyle("width", oControl.getWidth());
			oRm.addStyle("height", oControl.getHeight());
			oRm.writeStyles();
			oRm.write(">");
			oRm.write("</div>");
		}
	});

	CodeEditor.prototype.init = function() {
		var oDomRef = document.createElement("div");
		var that = this;

		this._oEditorDomRef = oDomRef;
		this._oEditorDomRef.style.height = "100%";
		this._oEditorDomRef.style.width = "100%";
		this._oEditor = window.ace.edit(oDomRef);
		this._oEditor.setValue("");
		this._oEditor.getSession().setUseWrapMode(true);
		this._oEditor.getSession().setMode("ace/mode/javascript");
		this._oEditor.renderer.setShowGutter(true);

		this._oEditor.addEventListener("change", function(oEvent) {
			var sValue = that.getCurrentValue();
			that.fireLiveChange({
				value: sValue,
				editorEvent: oEvent
			});
		});

		this._oEditor.addEventListener("blur", function(oEvent) {
			var sValue = that.getCurrentValue(),
				sCurrentValue = that.getValue();
			that.setProperty("value", sValue, true);
			if (sValue != sCurrentValue) {
				that.fireChange({
					value: sValue,
					oldValue: sCurrentValue
				});
			}
		});
	};

	CodeEditor.prototype.invalidate = function() {
		//no invalidation needed.
	};

	CodeEditor.prototype.setEditable = function(bValue) {
		this.setProperty("editable", bValue, true);
		this._oEditor.setReadOnly(!this.getEditable());

		return this;
	};

	CodeEditor.prototype.focus = function() {
		this._oEditor.focus();
	};

	CodeEditor.prototype.setType = function(sType) {
		this.setProperty("type", sType, true);
		this._oEditor.getSession().setMode("ace/mode/" + this.getType());

		return this;
	};

	CodeEditor.prototype.setValue = function(sValue) {
		this.setProperty("value", sValue, true);
		this._oEditor.setValue(this.getProperty("value"));

		return this;
	};

	CodeEditor.prototype.getCurrentValue = function () {
		return this._oEditor.getValue();
	};

	CodeEditor.prototype.showLineNumbers = function(bValue) {
		this.setProperty("showLineNumbers", bValue, true);
		this._oEditor.renderer.setShowGutter(this.getShowLineNumbers());

		return this;
	};

	CodeEditor.prototype.onAfterRendering = function() {
		this.getDomRef().appendChild(this._oEditorDomRef);
	};

	return CodeEditor;
}, /* bExport= */true);

}; // end of sap/ui/support/supportRules/ui/CodeEditor.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.IFrameController') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ui.IFrameController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/IFrameController",[
	"jquery.sap.global", 
	"sap/ui/base/ManagedObject", 
	"sap/ui/support/supportRules/WindowCommunicationBus"],
	function (jQuery, ManagedObject, CommunicationBus) {
		"use strict";

		var oIFrameController = null;

		function openFrame(sUrl) {
			var toolFrame = document.createElement("IFRAME");
			var style = toolFrame.style;

			toolFrame.id = "sap-ui-supportToolsFrame";
			toolFrame.src = sUrl;

			style.width = "100%";
			style.height = "50%";
			style.position = "absolute";
			style.left = "0";
			style.bottom = "0";
			style.border = "none";
			style.zIndex = "1001";
			// style.transition = "width 300ms ease-in-out, height 300ms ease-in-out";
			style.boxShadow = "1px -10px 42px -4px #888";

			document.body.appendChild(toolFrame);

			// This interval is needed because sometimes an app is placed at
			// the body element which involves moving everything already there
			// into a new, hidden DIV element
			var parentCheckInterval = setTimeout(function () {
				if (toolFrame.parentNode.nodeName !== "BODY") {
					document.body.appendChild(toolFrame);
				}
			}, 500);

			// The interval should run for no more than 5sec
			setTimeout(function () {
				clearInterval(parentCheckInterval);
			}, 5000);

			return toolFrame;
		}

		var IFrameController = ManagedObject.extend("sap.ui.support.IFrameController", {
			constructor: function () {
				if (!oIFrameController) {
					ManagedObject.apply(this, arguments);
					this._setCommunicationSubscriptions();
				} else {
					jQuery.sap.log.warning("Only one support tool allowed");
					return oIFrameController;
				}
			}
		});

		IFrameController.prototype._setCommunicationSubscriptions = function () {
			CommunicationBus.subscribe("ensureOpened", function(){
				if (document.getElementById("sap-ui-supportToolsFrame").style.height === "28px") {
					this.resizeFrame(true);
				}
			}, this);
			CommunicationBus.subscribe("resizeFrame", function (aParams) {
				oIFrameController.resizeFrame(aParams.bigger);
			});
		};

		IFrameController.prototype.injectFrame = function () {
			var sToolUrl = jQuery.sap.getModulePath("sap.ui.support.supportRules.ui",
					"/overlay.html?sap-ui-xx-formfactor=compact&sap-ui-xx-support-origin=" +
					window.location.protocol + "//" + window.location.host);

			openFrame(sToolUrl);
		};

		IFrameController.prototype.resizeFrame = function (bigger) {
			var toolFrameStyle = document.getElementById("sap-ui-supportToolsFrame").style;

			if (bigger) {
				if (toolFrameStyle.height === "50%") {
					toolFrameStyle.height = "100%";
				} else if (toolFrameStyle.height === "28px") {
					toolFrameStyle.height = "50%";
				}
			} else {
				if (toolFrameStyle.height === "100%") {
					toolFrameStyle.height = "50%";
				} else if (toolFrameStyle.height === "50%") {
					toolFrameStyle.height = "28px";
				}
			}
		};

		/**
		 * Toggles frame state between hidden and shown
		 * Default is shown
		 *
		 * @param hidden {boolean} should the frame hide or not
		 */
		IFrameController.prototype.toggleHide = function (hidden) {
			var toolFrameStyle = document.getElementById("sap-ui-supportToolsFrame").style;

			if (hidden) {
				this._originalSize = {
					width: toolFrameStyle.width,
					height: toolFrameStyle.height
				};

				toolFrameStyle.width = "170px";
				toolFrameStyle.height = "28px";
			} else {
				toolFrameStyle.width = this._originalSize.width;
				toolFrameStyle.height = this._originalSize.height;

				this._originalSize = null;
			}
		};

		IFrameController.prototype._stop = function () {
			this._oCssLink.parentNode.removeChild(this._oCssLink);
			this._oDomRef.parentNode.removeChild(this._oCssLink);
			this._oCore = null;
		};

		oIFrameController = new IFrameController();

		return oIFrameController;

	}, true);

}; // end of sap/ui/support/supportRules/ui/IFrameController.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.models.SharedModel') ) {

jQuery.sap.declare('sap.ui.support.supportRules.ui.models.SharedModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/models/SharedModel",[
	"sap/ui/model/json/JSONModel"
], function (JSONModel) {
	"use strict";

	var executionScopes = {
			core: {
				key: "core",
				displayName: "Global",
				description: "The Rules will be / are executed on the complete application with all loaded elements and components, including all previously loaded pages"
			},
			parent: {
				key: "parent",
				displayName: "Sub-tree",
				description: "The Rules will be / are executed on the specified sub-tree root element, including all child elements (aggregated sub-elements)"
			},
			components: {
				key: "components",
				displayName: "Component(s)",
				description: "The Rules will be / are executed on the selected components from the list of currently loaded components (or fragments)"
			}
		};

	var model = new JSONModel({
		selectedRule: null,
		libraries: null,
		selectedIssue: null,
		issues: [],
		progress: 0.1,
		showProgressIndicator: false,
		coreStateChanged: true,
		analyzePressed: false,
		selectedRulePreviewKey: "ruleProperties",
		selectedRuleCreateKey: "ruleProperties",
		selectedRuleEditKey: "ruleProperties",
		newRule: {},
		newRuleStringified: "",
		updateRuleStringified: "",
		parentExecutionContextId: "",
		availableComponents: [],
		audiences: sap.ui.support.Audiences,
		categories: sap.ui.support.Categories,
		severities: sap.ui.support.Severity,
		audiencesFilter : ["All"].concat(Object.keys(sap.ui.support.Audiences)),
		categoriesFilter : ["All"].concat(Object.keys(sap.ui.support.Categories)),
		severitiesFilter : ["All"].concat(Object.keys(sap.ui.support.Severity)),
		newEmptyRule: {
			libName: "",
			id: "",
			categories: [sap.ui.support.Categories.Other],
			audiences: [sap.ui.support.Audiences.Internal],
			title: "",
			description: "",
			resolution: "",
			resolutionurls: [],
			check: "function(oIssueManager, oCoreFacade, oScope) {\n\t/* \n\t oIssueManager - allows you to add new issues with the addIssue() method \n\t oCoreFacade - gives you access to state of the core: getMetadata(), getUIAreas(), getComponents(), getModels() \n\t oScope - retrieves elements in the scope with these methods: getElements(), getElementsByClassName(className), getLoggedObjects(type) \n\t*/ \n}",
			selected: true
		},
		editRule: null,
		tempLink: {
			href: "",
			text: ""
		},
		selectedRuleStringify: "",
		analyzeContext: executionScopes.core,
		executionScopes: executionScopes,
		executionScopeTitle: "Execution scope",
		lastAnalysisElapsedTime: "",
		analysisDurationTitle: "Last analysis duration"
	});

	return model;
});
}; // end of sap/ui/support/supportRules/ui/models/SharedModel.js
if ( !jQuery.sap.isDeclared('sap.ui.table.TableHelper.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Helper functionality for table, list and tree controls for the Support Tool infrastructure.
 */
jQuery.sap.declare('sap.ui.table.TableHelper.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/table/TableHelper.support",["jquery.sap.global", "sap/ui/support/library"],
	function(jQuery, SupportLib) {
	"use strict";

	// shortcuts
	var Audiences = SupportLib.Audiences, // Control, Internal, Application
		Categories = SupportLib.Categories, // Accessibility, Performance, Memory, ...
		Severity = SupportLib.Severity;	// Hint, Warning, Error


	var TableSupportHelper = {

		DOCU_REF : "https://sapui5.hana.ondemand.com/",

		DEFAULT_RULE_DEF : {
			audience: [Audiences.Application],
			categories: [Categories.Other],
			enabled: true,
			minversion: "1.38",
			maxversion: "-",
			title: "",
			description: "",
			resolution: "",
			resolutionurls: [],
			check: function(oIssueManager, oCoreFacade, oScope) {}
		},

		/**
		 * Normalizes the given rule definition.
		 * The rule definition object can/must have the following parameters:
		 *
		 * 		id:				ID of the rule, MANDATORY
		 * 		audience:		[Audiences.Application, ...] - Choose one or several, Default "Application"
		 * 		categories:		[Categories.Accessibility, ...] - choose one or several, Default "Other" (TBD)
		 * 		enabled:		true/false - Default true
		 * 		minversion:		the minimum version required to run the rule - Default "1.38"
		 * 		maxversion:		the maximum version required to run the rule - Default "-"
		 * 		title:			user friendly title, MANDATORY
		 * 		description:	detailed description, MANDATORY
		 * 		resolution:		proposed resolution steps, MANDATORY
		 * 		resolutionurls: [{text: "Text to be displayed", href: "URL to public(!) docu"}] - list of useful URLs, Default []
		 * 		check:			function(oIssueManager, oCoreFacade, oScope) { ... } - Check function code, MANDATORY
		 *
		 * @param {object} The rule definition
		 * @returns The normalized rule definition
		 */
		normalizeRule : function(oRuleDef) {
			return jQuery.extend({}, TableSupportHelper.DEFAULT_RULE_DEF, oRuleDef);
		},

		/**
		 * Normalizes the given rule definition and adds it to the given Ruleset.
		 *
		 * @see #normalizeRule
		 *
		 * @param {object} The rule definition
		 * @param {sap.ui.support.supportRules.RuleSet} The ruleset
		 */
		addRuleToRuleset : function(oRuleDef, oRuleset) {
			oRuleDef = jQuery.extend({}, TableSupportHelper.DEFAULT_RULE_DEF, oRuleDef);
			var sResult = oRuleset.addRule(oRuleDef);
			if (sResult != "success") {
				jQuery.sap.log.warning("Support Rule '" + oRuleDef.id + "' for library sap.m not applied: " + sResult);
			}
		},

		/**
		 * Creates a documentation link description in the format as requested by the parameter resolutionurls of a rule.
		 * @param {string} sText 		The text of the docu link.
		 * @param {string} sRefSuffix 	The url suffix. It gets automatically prefixed by TableSupportHelper.DOCU_REF.
		 * @returns Documentation link description
		 */
		createDocuRef : function(sText, sRefSuffix) {
			return {
				text: sText,
				href: TableSupportHelper.DOCU_REF + sRefSuffix
			};
		},

		/**
		 * Adds an issue with the given text, severity and context to the given issue manager.
		 * @param {sap.ui.support.IssueManager} oIssueManager The issue manager
		 * @param {string} sText 						The text of the issue.
		 * @param {sap.ui.support.Severity} [sSeverity] The severity of the issue, if nothing is given Warning is used.
		 * @param {string} [sControlId] 				The id of the control the issue is related to. If nothing is given the "global" context is used.
		 */
		reportIssue : function(oIssueManager, sText, sSeverity, sControlId) {
			oIssueManager.addIssue({
				severity: sSeverity || Severity.Warning,
				details: sText,
				context: {id: sControlId || "WEBPAGE"}
			});
		},

		/**
		 * Checks whether the given object is of the given type (given in AMD module syntax)
		 * without the need of loading the types module.
		 * @param {sap.ui.base.ManagedObject} oObject The object to check
		 * @param {string} sType The type given in AMD module syntax
		 * @returns {boolean}
		 */
		isInstanceOf : function(oObject, sType) {
			if (!oObject || !sType) {
				return false;
			}
			var oType = sap.ui.require(sType);
			return !!(oType && (oObject instanceof oType));
		},

		/**
		 * Return all existing control instances of the given type.
		 * @param {object} oScope The scope as given in the rule check function.
		 * @param {boolean} bVisisbleOnly Whether all existing controls or only the ones which currently have a DOM reference should be returned.
		 * @param {string} sType The type given in AMD module syntax
		 * @returns All existing control instances
		 */
		find: function(oScope, bVisisbleOnly, sType) {
			var mElements = oScope.getElements();
			var aResult = [];
			for (var n in mElements) {
				var oElement = mElements[n];
				if (TableSupportHelper.isInstanceOf(oElement, sType)) {
					if (bVisisbleOnly && oElement.getDomRef() || !bVisisbleOnly) {
						aResult.push(oElement);
					}
				}
			}
			return aResult;
		},

		/**
		 * Iterates over the available log entries.
		 *
		 * Both parameter functions gets a log entry object passed in with the following properties:
		 * <ul>
		 *    <li>{jQuery.sap.log.Level} oLogEntry.level One of the log levels FATAL, ERROR, WARNING, INFO, DEBUG, TRACE</li>
		 *    <li>{string} oLogEntry.message     The logged message</li>
		 *    <li>{string} oLogEntry.details     The optional details for the message</li>
		 *    <li>{string} oLogEntry.component   The optional log component under which the message was logged</li>
		 *    <li>{float}  oLogEntry.timestamp   The timestamp when the log entry was written</li>
		 *    <li>{object} oLogEntry.supportInfo The optional support info object</li>
		 * </ul>
		 *
		 * @param {function} fnFilter Filter function to filter out irrelevant log entries.
		 *                            If the function returns <code>true</code> the log entry is kept, otherwise it's filtered out.
		 * @param {string} fnCheck Check function to check the remaining log entries.
		 *                         If the function returns <code>true</code> the checking procedure is stopped,
		 *                         otherwise the next entry is passed for checking.
		 */
		checkLogEntries : function(fnFilter, fnCheck) {
			var aLog = jQuery.sap.log.getLogEntries(); //oScope.getLoggedObjects(); /*getLoggedObjects returns only log entries with supportinfo*/
			var oLogEntry;
			for (var i = 0; i < aLog.length; i++) {
				oLogEntry = aLog[i];
				if (fnFilter(oLogEntry)) {
					if (fnCheck(oLogEntry)) {
						return;
					}
				}
			}
		}

	};



	return TableSupportHelper;

}, true);
}; // end of sap/ui/table/TableHelper.support.js
if ( !jQuery.sap.isDeclared('sap.ui.table.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules of the sap.ui.table library to the support infrastructure.
 */
jQuery.sap.declare('sap.ui.table.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/table/library.support",["jquery.sap.global", "sap/ui/support/library", "sap/ui/support/supportRules/RuleSet", "./TableHelper.support"],
	function(jQuery, SupportLib, Ruleset, SupportHelper) {
	"use strict";

	// shortcuts
	var Categories = SupportLib.Categories, // Accessibility, Performance, Memory, ...
		Severity = SupportLib.Severity;	// Hint, Warning, Error
		//Audiences = SupportLib.Audiences; // Control, Internal, Application

	var oLib = {
		name: "sap.ui.table",
		niceName: "UI5 Table library"
	};

	var oRuleset = new Ruleset(oLib);

	function createRule(oRuleDef) {
		oRuleDef.id = "GRIDTABLE_" + oRuleDef.id;
		SupportHelper.addRuleToRuleset(oRuleDef, oRuleset);
	}



	//**********************************************************
	// Helpers related to sap.ui.table Controls
	//**********************************************************

	/**
	 * Loops over all columns of all visible tables and calls the given callback with the following parameters:
	 * table instance, column instance, column template instance.
	 *
	 * If the column does not have a template or a type is given and the template is not of this type the callback is not called.
	 *
	 * @param {function} fnDoCheck Callback
	 * @param {object} oScope The scope as given in the rule check function.
	 * @param {string} [sType] If given an additional type check is performed. Module syntax required!
	 */
	function checkColumnTemplate(fnDoCheck, oScope, sType) {
		var aTables = SupportHelper.find(oScope, true, "sap/ui/table/Table");
		var aColumns, oTemplate;
		for (var i = 0; i < aTables.length; i++) {
			aColumns = aTables[i].getColumns();
			for (var k = 0; k < aColumns.length; k++) {
				oTemplate = aColumns[k].getTemplate();
				if (oTemplate && (!sType || SupportHelper.isInstanceOf(oTemplate, sType))) {
					fnDoCheck(aTables[i], aColumns[k], oTemplate);
				}
			}
		}
	}




	//**********************************************************
	// Rule Definitions
	//**********************************************************


	/*
	 * Checks whether content densities are used correctly.
	 */
	createRule({
		id : "CONTENT_DENSITY",
		title : "Content Density Usage",
		description : "Checks whether the content densities 'Cozy', 'Compact' and 'Condensed' are used correctly.",
		resolution : "Ensure that either only the 'Cozy' or 'Compact' content density is used or the 'Condensed' and 'Compact' content densities in combination are used.",
		resolutionurls : [SupportHelper.createDocuRef("How to use Content Densities", "#docs/guide/e54f729da8e3405fae5e4fe8ae7784c1.html")],
		check : function(oIssueManager, oCoreFacade, oScope) {
			var $Document = jQuery("html");
			var $Cozy = $Document.find(".sapUiSizeCozy");
			var $Compact = $Document.find(".sapUiSizeCompact");
			var $Condensed = $Document.find(".sapUiSizeCondensed");

			function checkDensity($Source, sTargetClass, sMessage) {
				var bFound = false;
				$Source.each(function(){
					if (jQuery(this).closest(sTargetClass).length) {
						bFound = true;
					}
				});
				if (bFound && sMessage) {
					SupportHelper.reportIssue(oIssueManager, sMessage, Severity.Error);
				}
				return bFound;
			}

			checkDensity($Compact, ".sapUiSizeCozy", "'Compact' content density is used within 'Cozy' area.");
			checkDensity($Cozy, ".sapUiSizeCompact", "'Cozy' content density is used within 'Compact' area.");
			checkDensity($Condensed, ".sapUiSizeCozy", "'Condensed' content density is used within 'Cozy' area.");
			checkDensity($Cozy, ".sapUiSizeCondensed", "'Cozy' content density is used within 'Condensed' area.");

			if ($Condensed.length > 0) {
				var bFound = checkDensity($Condensed, ".sapUiSizeCompact");
				if (!bFound) {
					SupportHelper.reportIssue(oIssueManager, "'Condensed' content density must be used in combination with 'Compact'.", Severity.Error);
				}
			}
		}
	});

	/*
	 * Validates sap.ui.core.Icon column templates.
	 */
	createRule({
		id : "VALIDATE_COLUMN_TEMPLATE_ICON",
		categories: [Categories.Accessibility],
		title : "Column template validation - 'sap.ui.core.Icon'",
		description : "The 'decorative' property of control 'sap.ui.core.Icon' is set to 'true' although the control is used as column template.",
		resolution : "Set the 'decorative' property of control 'sap.ui.core.Icon' to 'false' if the control is used as column template.",
		check : function(oIssueManager, oCoreFacade, oScope) {
			checkColumnTemplate(function(oTable, oColumn, oIconTemplate) {
				if (!oIconTemplate.isBound("decorative") && oIconTemplate.getDecorative()) {
					var sId = oColumn.getId();
					SupportHelper.reportIssue(oIssueManager, "Column '" + sId + "' of table '" + oTable.getId() + "' uses decorative 'sap.ui.core.Icon' control.", Severity.Error, sId);
				}
			}, oScope, "sap/ui/core/Icon");
		}
	});

	/*
	 * Validates sap.m.Text column templates.
	 */
	createRule({
		id : "VALIDATE_COLUMN_TEMPLATE_M_TEXT",
		title : "Column template validation - 'sap.m.Text'",
		description : "The 'wrapping' property of the control 'sap.m.Text' is set to 'true' although the control is used as a column template.",
		resolution : "Set the 'wrapping' property of the control 'sap.m.Text' to 'false' if the control is used as a column template.",
		check : function(oIssueManager, oCoreFacade, oScope) {
			checkColumnTemplate(function(oTable, oColumn, oMTextTemplate) {
				if (!oMTextTemplate.isBound("wrapping") && oMTextTemplate.getWrapping()) {
					var sColumnId = oColumn.getId();
					SupportHelper.reportIssue(oIssueManager, "Column '" + sColumnId + "' of table '" + oTable.getId() + "' uses an 'sap.m.Text' control with wrapping enabled.", Severity.Error, sColumnId);
				}
			}, oScope, "sap/m/Text");
		}
	});


	/*
	 * Checks for No Deviating units issue in AnalyticalBinding
	 */
	createRule({
		id : "ANALYTICS_NO_DEVIATING_UNITS",
		categories: [Categories.Bindings],
		title : "Analytical Binding reports 'No deviating units found...'",
		description : "The analytical service returns duplicate IDs. This could also lead to many requests because the analytical binding " +
						"will request the measures without deviating units again and expects to receive just one record, but again gets several ones ...",
		resolution : "Adjust the service implementation.",
		check : function(oIssueManager, oCoreFacade, oScope) {
			var aTables = SupportHelper.find(oScope, true, "sap/ui/table/AnalyticalTable");
			var sAnalyticalErrorId = "NO_DEVIATING_UNITS";
			var oIssues = {};

			SupportHelper.checkLogEntries(function(oLogEntry) {
				// Filter out totally irrelevant issues
				if (oLogEntry.level != jQuery.sap.log.Level.ERROR && oLogEntry.level != jQuery.sap.log.Level.FATAL) {
					return false;
				}
				var oInfo = oLogEntry.supportInfo;
				if (oInfo && oInfo.type === "sap.ui.model.analytics.AnalyticalBinding" && oInfo.analyticalError === sAnalyticalErrorId) {
					return true;
				}
				return false;
			}, function(oLogEntry){
				// Check the remaining Issues
				var sBindingId = oLogEntry.supportInfo.analyticalBindingId;
				if (sBindingId && !oIssues[sAnalyticalErrorId + "-" + sBindingId]) {
					var oBinding;
					for (var i = 0; i < aTables.length; i++) {
						oBinding = aTables[i].getBinding("rows");
						if (oBinding && oBinding.__supportUID === sBindingId) {
							oIssues[sAnalyticalErrorId + "-" + sBindingId] = true; // Ensure is only reported once
							SupportHelper.reportIssue(oIssueManager, "Analytical Binding reports 'No deviating units found...'", Severity.Error, aTables[i].getId());
						}
					}
				}
			});
		}
	});


	return {lib: oLib, ruleset: oRuleset};

}, true);

}; // end of sap/ui/table/library.support.js
if ( !jQuery.sap.isDeclared('sap.viz.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules to the core
 */
jQuery.sap.declare('sap.viz.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/viz/library.support",["jquery.sap.global", "sap/ui/support/supportRules/RuleSet"],
	function(jQuery, Ruleset) {
		"use strict";

		var oLib = {
			name: "sap.viz",
			niceName: "UI5 Charts library"
		};

		var oRuleset = new Ruleset(oLib);

		/**
		 * Checks whether the preload configuration was set correctly to async
		 */
		oRuleset.addRule({
			id : "VizCheck",
			audiences: ["Control","Internal"],
			categories: ["Performance"],
			enabled: true,
			minversion: "1.32",
			maxversion: "-",
			title: "Viz Check",
			description: "Checks whether the preload configuration was set correctly to async",
			resolution: "Add \"data-sap-ui-preload=\"async\"\" to script tag that includes \"sap-ui-core.js\"",
			resolutionurls: [{
				text: "Performance: Speed Up Your App",
				href:"https://sapui5.hana.ondemand.com/#docs/guide/408b40efed3c416681e1bd8cdd8910d4.html"
			}],
			check: function(issueManager, oCoreFacade) {
				jQuery.sap.log.info("It's from the viz library");
			}
		});

		return {
			lib: oLib,
			ruleset: oRuleset
		};
	}, true);

}; // end of sap/viz/library.support.js
if ( !jQuery.sap.isDeclared('sap.m.ListTableTree.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Defines support rules of the List, Table and Tree controls of sap.m library.
 */
jQuery.sap.declare('sap.m.ListTableTree.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/m/ListTableTree.support",["jquery.sap.global", "sap/ui/support/library", "../ui/table/TableHelper.support"],
	function(jQuery, SupportLib, SupportHelper) {
	"use strict";

	// shortcuts
	var Categories = SupportLib.Categories, // Accessibility, Performance, Memory, ...
		Severity = SupportLib.Severity;	// Hint, Warning, Error
		//Audiences = SupportLib.Audiences; // Control, Internal, Application


	var aRules = [];

	function createRule(oRuleDef) {
		aRules.push(oRuleDef);
	}


	//**********************************************************
	// Rule Definitions
	//**********************************************************


	/*
	 * Only an example.
	 */
	// TBD remove when a "real" rule is added
	createRule({
		id : "MTABLE_TEST",
		categories: [Categories.Other],
		title : "Just a test for the support rules",
		description : "Test description",
		resolution : "Test resolution",
		enabled : false,
		check : function(oIssueManager, oCoreFacade, oScope) {
			var aLists = SupportHelper.find(oScope, true, "sap/m/Table");
			if (!aLists) { // Do some suitable check instead
				SupportHelper.reportIssue(oIssueManager, "There seems to be no table", Severity.Hint);
			}
		}
	});



	return {
		addRulesToRuleset: function(oRuleset) {
			jQuery.each(aRules, function(idx, oRuleDef){
				SupportHelper.addRuleToRuleset(oRuleDef, oRuleset);
			});
		}
	};

}, true);
}; // end of sap/m/ListTableTree.support.js
if ( !jQuery.sap.isDeclared('sap.m.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules of the sap.m library to the support infrastructure.
 */
jQuery.sap.declare('sap.m.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/m/library.support",["jquery.sap.global", "sap/ui/support/library", "sap/ui/support/supportRules/RuleSet", "./ListTableTree.support"],
	function(jQuery, SupportLib, Ruleset, ListTableTreeSupport) {
	"use strict";

	// shortcuts
	//var Audiences = SupportLib.Audiences, // Control, Internal, Application
	//	Categories = SupportLib.Categories, // Accessibility, Performance, Memory, Modelbindings, ...
	//	Severity = SupportLib.Severity;	// Hint, Warning, Error

	var oLib = {
		name: "sap.m",
		niceName: "UI5 Main Library"
	};

	var oRuleset = new Ruleset(oLib);

	// Adds the rules related to sap.m.List, sap.m.Table and sap.m.Tree
	ListTableTreeSupport.addRulesToRuleset(oRuleset);

	//Add rules with the addRule method
	//oRuleset.addRule({})

	/**
	 * Checks whether the correct type of layout data is set for flex items
	 */
	oRuleset.addRule({
		id : "flexitemdatatype",
		audiences: [sap.ui.support.Audiences.Application],
		categories: [sap.ui.support.Categories.Functionality],
		enabled: true,
		minversion: "1.28",
		title: "Incorrect Flex Item Data Type",
		description: "Checks whether the correct type of layout data is set for flex items",
		resolution: "Use sap.m.FlexItemData for the layout data of flex items (the child controls of a sap.m.FlexBox\/HBox\/VBox)",
		resolutionurls: [{
			text: "Functionality: Use the correct flex item data type",
			href:"https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.m.FlexItemData.html"
		}],
		check: function(issueManager, oCoreFacade, oScope) {
			oScope.getElements().filter(function(oElement) {
				var oType = sap.ui.require("sap/m/FlexBox");
				return !!(oType && (oElement instanceof oType));
			}).forEach(function(oElement) {
				oElement.getItems().filter(function(oItem) {
					return (oItem.getLayoutData() && !(oItem.getLayoutData() instanceof sap.m.FlexItemData));
				}).forEach(function(oItem) {
					issueManager.addIssue({
						severity: sap.ui.support.Severity.Error,
						details: "Layout data set on " + oItem.getId() + " is not an instance of sap.m.FlexItemData.",
						context: {
							id: oItem.getId()
						}
					});
				});
			});
		}
	});

	/**
	 * Checks whether the FlexBox render type has been set explicitly
	 */
	oRuleset.addRule({
		id : "flexboxrendertype",
		audiences: [sap.ui.support.Audiences.Application],
		categories: [sap.ui.support.Categories.Functionality],
		enabled: true,
		minversion: "1.42",
		title: "Explicit setting for FlexBox render type",
		description: "Checks whether the FlexBox render type has been set explicitly",
		resolution: "In most cases, 'Bare' is the best default choice for the render type of a sap.m.FlexBox\/HBox\/VBox to avoid browser inconsistencies. It must be set explicitly.",
		resolutionurls: [{
			text: "Functionality: Set the render type to 'Bare'",
			href:"https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.m.FlexRendertype.html"
		}],
		check: function(issueManager, oCoreFacade, oScope) {
			oScope.getElements().filter(function(oElement) {
				var oType = sap.ui.require("sap/m/FlexBox");
				return !!(oType && (oElement instanceof oType) && !oElement.mProperties.hasOwnProperty("renderType"));
			}).forEach(function(oItem) {
				issueManager.addIssue({
					severity: sap.ui.support.Severity.Hint,
					details: "No explicit setting for the render type of " + oItem.getId() + ".",
					context: {
						id: oItem.getId()
					}
				});
			});
		}
	});

	return {lib: oLib, ruleset: oRuleset};

}, true);
}; // end of sap/m/library.support.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.ListTable.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Defines support rules of the SmartTable, ... controls of sap.ui.comp library.
 */
jQuery.sap.declare('sap.ui.comp.ListTable.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/ListTable.support",["jquery.sap.global", "sap/ui/support/library", "../table/TableHelper.support"],
	function(jQuery, SupportLib, SupportHelper) {
	"use strict";

	// shortcuts
	var Categories = SupportLib.Categories, // Accessibility, Performance, Memory, ...
		Severity = SupportLib.Severity;	// Hint, Warning, Error
		//Audiences = SupportLib.Audiences; // Control, Internal, Application


	var aRules = [];

	function createRule(oRuleDef) {
		aRules.push(oRuleDef);
	}


	//**********************************************************
	// Rule Definitions
	//**********************************************************


	/*
	 * Check for default ODataModel
	 */
	createRule({
		id: "SMARTTABLE_MODEL_BINDING",
		categories: [Categories.Bindings],
		title: "Model and Binding",
		description: "Checks whether the default/unnamed model is present and is an ODataModel and if the binding makes use of this model",
		resolution: "Ensure that the desired ODataModel is set as an unnamed/default model on the control/view and is used in the binding accordingly",
		check: function(oIssueManager, oCoreFacade, oScope) {
			var aSmartTables = SupportHelper.find(oScope, true, "sap/ui/comp/smarttable/SmartTable");
			var i, iLen = aSmartTables.length, oSmartTable, oModel, oInfo;
			for (i = 0; i < iLen; i++) {
				oSmartTable = aSmartTables[i];
				if (oSmartTable) {
					oModel = oSmartTable.getModel();
					// Check whether default model exists
					if (!oModel) {
						SupportHelper.reportIssue(oIssueManager, "The SmartTable expects a default/unnamed model to be present", Severity.Warning, oSmartTable.getId());
					}
					// Check if default model is an ODataModel (old/v2)
					if (!SupportHelper.isInstanceOf(oModel, "sap/ui/model/odata/ODataModel") && !SupportHelper.isInstanceOf(oModel, "sap/ui/model/odata/v2/ODataModel")) {
						SupportHelper.reportIssue(oIssueManager, "ODataModel should be used as the default/unnamed model", Severity.Warning, oSmartTable.getId());
					}
					// Check if binding on the inner UI5 table is done for an unnamed model
					oInfo = oSmartTable.getTable().getBindingInfo(oSmartTable._sAggregation);
					if (oInfo.model) {
						SupportHelper.reportIssue(oIssueManager, "For binding rows/items of the table in the SmartTable an unnamed (default) model should be used", Severity.Warning, oSmartTable.getId());
					}
				}
			}
		}
	});



	return {
		addRulesToRuleset: function(oRuleset) {
			jQuery.each(aRules, function(idx, oRuleDef){
				SupportHelper.addRuleToRuleset(oRuleDef, oRuleset);
			});
		}
	};

}, true);
}; // end of sap/ui/comp/ListTable.support.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules of the sap.m library to the support infrastructure.
 */
jQuery.sap.declare('sap.ui.comp.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/library.support",["jquery.sap.global", "sap/ui/support/library", "sap/ui/support/supportRules/RuleSet", "./ListTable.support"],
	function(jQuery, SupportLib, Ruleset, ListTableSupport) {
	"use strict";

	// shortcuts
	//var Audiences = SupportLib.Audiences, // Control, Internal, Application
	//	Categories = SupportLib.Categories, // Accessibility, Performance, Memory, ...
	//	Severity = SupportLib.Severity;	// Hint, Warning, Error

	var oLib = {
		name: "sap.ui.comp",
		niceName: "UI5 Smart Controls Library"
	};

	var oRuleset = new Ruleset(oLib);

	// Adds the rules related to sap.ui.comp.smarttable.SmartTable, ...
	ListTableSupport.addRulesToRuleset(oRuleset);

	//Add rules with the addRule method
	//oRuleset.addRule({})

	return {lib: oLib, ruleset: oRuleset};

}, true);
}; // end of sap/ui/comp/library.support.js
if ( !jQuery.sap.isDeclared('sap.ui.core.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules to the core
 */
jQuery.sap.declare('sap.ui.core.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/core/library.support",["jquery.sap.global", "sap/ui/support/supportRules/RuleSet"],
	function(jQuery, Ruleset) {
		"use strict";

		var oLib = {
			name: "sap.ui.core",
			niceName: "UI5 Core Library"
		};

		var oRuleset = new Ruleset(oLib);

		/**
		 * Checks whether the preload configuration was set correctly to async
		 */
		oRuleset.addRule({
			id : "preloadasynccheck",
			audiences: [sap.ui.support.Audiences.Control, sap.ui.support.Audiences.Internal],
			categories: [sap.ui.support.Categories.Performance],
			enabled: true,
			minversion: "1.32",
			maxversion: "-",
			title: "Preload Configuration",
			description: "Checks whether the preload configuration was set correctly to async",
			resolution: "Add \"data-sap-ui-preload=\"async\"\" to script tag that includes \"sap-ui-core.js\"",
			resolutionurls: [{
				text: "Performance: Speed Up Your App",
				href:"https://sapui5.hana.ondemand.com/#docs/guide/408b40efed3c416681e1bd8cdd8910d4.html"
			}],
			check: function(issueManager, oCoreFacade) {
				if (sap.ui.getCore().getConfiguration().getPreload() !== "async") {
					issueManager.addIssue({
						severity: sap.ui.support.Severity.Error,
						details: "None",
						context: {
							id: "WEBPAGE"
						}
					});
				}
			}
		});

		/**
		 * Checks whether the unsupported fakeOS parameter was used
		 */
		oRuleset.addRule({
			id : "fakeoscheck",
			audiences: [sap.ui.support.Audiences.Internal],
			categories: [sap.ui.support.Categories.Functionality],
			enabled: true,
			minversion: "1.28",
			maxversion: "-",
			title: "Usage of fakeOS parameter",
			description: "Checks whether the unsupported fakeOS parameter was used",
			resolution: "Remove the parameter 'sap-ui-xx-fakeOS' from the URL or the UI5 bootstrap tag.",
			resolutionurls: [],
			check: function(issueManager, oCoreFacade) {
				var FAKE_OS_PATTERN = /(?:\?|&)sap-ui-xx-fakeOS=([^&]+)/;
				var result = document.location.search.match(FAKE_OS_PATTERN);
				var resultUA = result && result[1] || jQuery.sap.byId("sap-ui-bootstrap").attr("data-sap-ui-xx-fakeOS");

				if (resultUA) {
					issueManager.addIssue({
						severity: sap.ui.support.Severity.Error,
						details: "None",
						context: {
							id: "WEBPAGE"
						}
					});
				}
			}
		});

		oRuleset.addRule({
			id : "errorlogs",
			audiences: ["Control","Internal"],
			categories: ["Performance"],
			enabled: true,
			minversion: "1.32",
			maxversion: "-",
			title: "Error logs",
			description: "Checks for the amount of error logs in the console",
			resolution: "Error logs should be fixed",
			resolutionurls: [],
			check: function (issueManager, oCoreFacade) {
				var count = 0,
					message = "";

				var log = jQuery.sap.log.getLog();
				log.forEach(function (logEntry) {
					if (logEntry.level === jQuery.sap.log.Level.ERROR) {
						count++;
						if (count <= 20) {
							message += "- " + logEntry.message + "\n";
						}
					}
				});

				issueManager.addIssue({
					severity: sap.ui.support.Severity.Hint,
					details: "Total error logs: " + count + "\n" + message,
					context: {
						id: "WEBPAGE"
					}
				});
			}
		});


		/**
		 * Checks whether there are orphaned controls
		 */
		oRuleset.addRule({
			id : "orphanedelement",
			audiences: [sap.ui.support.Audiences.Control, sap.ui.support.Audiences.Internal, sap.ui.support.Audiences.Application],
			categories: [sap.ui.support.Categories.Memory],
			enabled: true,
			minversion: "1.32",
			maxversion: "-",
			title: "Controls/Elements that miss a parent",
			description: "Orphaned Controls and Elements might cause memory leaks.",
			resolution: "Call the destroy method of Elements, if they are not needed anymore",
			resolutionurls: [{
				text: "Element destroy",
				href: "https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.ui.core.Element.html#destroy"
			}],
			check: function(issueManager, oCoreFacade, oScope) {
				var mElements = oScope.getElements();
				for (var n in mElements) {
					var oElement = mElements[n];
					if (!oElement.getParent()) {
						issueManager.addIssue({
							severity: sap.ui.support.Severity.Warning,
							details: "The element " + oElement.getId() + " has no parent.",
							context: {
								id: oElement.getId()
							}
						});
					}
				}
			}
		});

		/**
		 * Checks whether there are bindings for models where the model is available but a property binding has no result (is undefined)
		 * It checks the path structure and checks for typos
		 */
		oRuleset.addRule({
			id : "unresolvedpropertybindings",
			audiences: [sap.ui.support.Audiences.Control, sap.ui.support.Audiences.Application],
			categories: [sap.ui.support.Categories.Modelbindings],
			enabled: true,
			minversion: "1.32",
			title: "Unresolved Property Bindings",
			description: "Unresolved bindings might be caused by typos in their path",
			resolution: "Check the binding path for typos",
			resolutionurls: [
				{
					href: "https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.ui.model.Context.html",
					text: "Context class"
				},
				{
					href: "https://sapui5.hana.ondemand.com/#docs/guide/e5310932a71f42daa41f3a6143efca9c.html",
					text: "Data binding"
				},
				{
					href: "https://sapui5.hana.ondemand.com/#docs/guide/97830de2d7314e93b5c1ee3878a17be9.html",
					text: "Aggregation binding with templates"
				},
				{
					href: "https://sapui5.hana.ondemand.com/#docs/guide/6c7c5c266b534e7ea9a28f861dc515f5.html",
					text: "Element binding"
				}
			],
			check: function(issueManager, oCoreFacade, oScope) {
				var mElements = oScope.getElements();
				for (var n in mElements) {
					var oElement = mElements[n],
						mBindingInfos = oElement.mBindingInfos;
					for (var m in mBindingInfos) {
						var oBinding = mBindingInfos[m].binding;
						if (oBinding) {
							if (!(oBinding instanceof sap.ui.model.CompositeBinding) && oBinding instanceof sap.ui.model.PropertyBinding && oBinding.getModel()) {
								if (oBinding.getValue() === undefined) {
									var sPath = oBinding.getPath(),
										oContext = oBinding.getContext();
									if (oContext) {
										issueManager.addIssue({
											severity: sap.ui.support.Severity.Hint,
											details: "Element " + oElement.getId() + " has unresolved bindings.",
											context: {
												id: oElement.getId()
											}
										});
									} else if (!oContext && !jQuery.sap.startsWith(sPath, "/")) {
										issueManager.addIssue({
											severity: sap.ui.support.Severity.Hint,
											details: "Element " + oElement.getId() + " has unresolved bindings.",
											context: {
												id: oElement.getId()
											}
										});
									} else {
										var aParts = sPath.split("/");
										var oData = null;
										while (aParts.length > 0) {
											var oData = oBinding.getModel().getProperty("/" + aParts.join("/"));
											if (oData) {
												var sData = JSON.stringify(oData);
												if (sData.length > 40) {
													sData = sData.substring(0,40) + "...";
												}

												break;
											}
										}
										issueManager.addIssue({
											severity: sap.ui.support.Severity.Hint,
											details: "Element " + oElement.getId() + " has unresolved bindings.",
											context: {
												id: oElement.getId()
											}
										});
									}
								}
							}
						}
					}
				}
			}
		});

		return {
			lib: oLib,
			ruleset: oRuleset
		};
	}, true);

}; // end of sap/ui/core/library.support.js
if ( !jQuery.sap.isDeclared('sap.ui.fl.library.support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
/**
 * Adds support rules of the sap.ui.
 * fl library to the support infrastructure.
 */
jQuery.sap.declare('sap.ui.fl.library.support'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/fl/library.support",["jquery.sap.global", "sap/ui/support/library", "sap/ui/support/supportRules/RuleSet", "sap/ui/fl/Utils"],
	function(jQuery, SupportLib, Ruleset, Utils) {
	"use strict";


	var oLib = {
		name: "sap.ui.fl",
		niceName: "UI5 Flexibility Library"
	};

	var oRuleset = new Ruleset(oLib);

	function fnCheckElementIsNoClone(oElement) {
		var bElementIsNoClone = true;

		if (oElement.getBindingContext && oElement.getBindingContext()) {
			var aBindingHierarchy = oElement.getBindingContext().getPath().split("/");
			var sLowestBindingHierarchy = aBindingHierarchy[aBindingHierarchy.length - 1];
			bElementIsNoClone = isNaN(sLowestBindingHierarchy);
		}

		return bElementIsNoClone;
	}

		oRuleset.addRule({
			id : "stableId",
			audiences: [sap.ui.support.Audiences.Application],
			categories: [sap.ui.support.Categories.Functionality],
			enabled: true,
			minversion: "1.25",
			title: "ID for Flexibility Features Not Suitable",
			description: "Checks whether the IDs of controls are suitable to support flexibility features.",
			resolution: "Replace the generated control ID with an explicit ID.\nTo ensure that an update of SAPUI5 with additional flexibility functionality " +
			"will be also available in the shipped application, you must specify an explicit ID for the control.\n" +
			"For more details, see the Developer Guide.",
			resolutionurls: [{
				text: "Developer Guide: Stable IDs",
				href: "https://sapui5.hana.ondemand.com/#docs/guide/f51dbb78e7d5448e838cdc04bdf65403.html"
			}],
			check: function(issueManager, oCoreFacade, oScope) {
				var oAppComponent;

				oScope.getElements().forEach(function(oElement) {
					oAppComponent = oAppComponent || Utils.getAppComponentForControl(oElement);
					var sControlId = oElement.getId();
					var sHasConcatenatedId = sControlId.indexOf("--") !== -1;
					if (!Utils.checkControlId(sControlId, oAppComponent, true) && fnCheckElementIsNoClone(oElement)) {
						if (!sHasConcatenatedId) {
							issueManager.addIssue({
								severity: sap.ui.support.Severity.Error,
								details: "The ID '" + sControlId + "' for the control was generated and flexibility features " +
								"cannot support controls with generated IDs.",
								context: {
									id: sControlId
								}
							});
						} else {
							issueManager.addIssue({
								severity: sap.ui.support.Severity.Hint,
								details: "The ID '" + sControlId + "' for the control was concatenated and has a generated onset.\n" +
								"Therefore, flexibility features are not supported for this control.\n" +
								"To enable the control for flexibility features, you must specify an ID for the control providing the onset.\n" +
								"This control was marked with an error.",
								context: {
									id: sControlId
								}
							});
						}
					}
				});
			}
		});
	return {lib: oLib, ruleset: oRuleset};

}, true);

}; // end of sap/ui/fl/library.support.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.Main') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.support.supportRules.Main'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/Main",[
		"jquery.sap.global",
		"sap/ui/base/ManagedObject",
		"sap/ui/model/json/JSONModel",
		"sap/ui/support/supportRules/Analyzer",
		"sap/ui/support/supportRules/CoreFacade",
		"sap/ui/support/supportRules/ExecutionScope",
		"sap/ui/support/supportRules/Highlighter",
		"sap/ui/support/supportRules/WindowCommunicationBus",
		"sap/ui/support/supportRules/RuleSerializer",
		"sap/ui/support/supportRules/RuleSet",
		"sap/ui/support/supportRules/IssueManager",
		"sap/ui/support/supportRules/DataCollector",
		"sap/ui/support/supportRules/ReportProvider"
	],
	function (jQuery, ManagedObject, JSONModel, Analyzer, CoreFacade,
			ExecutionScope, Highlighter, CommunicationBus, RuleSerializer,
			Ruleset, IssueManager, DataCollector, ReportProvider) {
		"use strict";

		var IFrameController = null;
		var oMain = null;

		/**
		 * Controller for the support tools
		 * Provides integration with respective data services
		 */
		var Main = ManagedObject.extend("sap.ui.support.Main", {
			constructor: function () {
				if (!oMain) {
					var that = this;
					this._oCore = null;
					this._rulesCreated = false;
					this._mRulesets = {};
					this._setCommunicationSubscriptions();
					this._oAnalyzer = new Analyzer();
					ManagedObject.apply(this, arguments);

					jQuery.sap.support = {
							analyze: function () {
								return oMain.analyzeAll();
							},
							getIssueHistory: function () {
								if (that._oAnalyzer.running()) {
									return null;
								}

								return IssueManager.getHistory();
							}
							
					};
					var evt = document.createEvent("CustomEvent");
					evt.initCustomEvent("supportToolLoaded", true, true, {});
					
				} else {
					jQuery.sap.log.warning("Only one support tool allowed");

					return oMain;
				}
			}
		});

		/**
		 * This controller is started by the core as plugin
		 */
		Main.prototype.startPlugin = function () {
			var that = this;
			sap.ui.getCore().registerPlugin({
				startPlugin: function (oCore) {
					that._oCore = oCore;
					that._oDataCollector = new DataCollector(oCore);
					that._oCoreFacade = CoreFacade(oCore);
					that._oExecutionScope = null;
					that._createCoreSpies();
					oCore.attachLibraryChanged(that._onLibraryChanged, that);

					var supportModeConfig = oCore.getConfiguration()["xx-support"];

					if (supportModeConfig.indexOf("silent") === -1) {
						// Lazily, asynchronously load the frame controller
						sap.ui.require([
							"sap/ui/support/supportRules/ui/IFrameController"
						], function(IFrameCtrl) {
							IFrameController = IFrameCtrl;
							IFrameController.injectFrame();
						});
					} else {
						that._updatesupportRules();
					}
				},
				stopPlugin: function () {
					IFrameController._stop();
					that._oCore = null;
					that._oCoreFacade = null;
					that._oDataCollector = null;
					that._oExecutionScope = null;
				}
			});
		};

		Main.prototype._onLibraryChanged = function (oEvent) {
			if (oEvent.getParameter("stereotype") === "library" && this._rulesCreated) {
				this._updatesupportRules();
			}
		};

		Main.prototype._createCoreSpies = function () {
			var that = this,
				notifyDirtyStateInterval = 500;

			this._dirtyTimeoutHandle = null;

			var spyFunction = function (fnName) {
				var oldFunction = that._oCore[fnName];
				that._oCore[fnName] = function () {
					oldFunction.apply(that._oCore, arguments);
					/**
					 * If we have 50 new elements in the core, don't send 50 new messages for
					 * dirty state instead wait 500ms and send one message.
					 */
					clearTimeout(that._dirtyTimeoutHandle);
					that._dirtyTimeoutHandle = setTimeout(function () {
						CommunicationBus.publish("coreStateChanged");
					}, notifyDirtyStateInterval);
				};
			};

			spyFunction("registerElement");
			spyFunction("deregisterElement");
		};

		Main.prototype._setCommunicationSubscriptions = function () {
			CommunicationBus.subscribe("verifyNewRule", function (tempRuleSerialized) {
				var tempRule = RuleSerializer.deserialize(tempRuleSerialized),
					tempRuleSet = this._mRulesets.temporary.ruleset,
					result = tempRuleSet.addRule(tempRule);
				CommunicationBus.publish("verifyRuleCreateResult", {
					result: result,
					newRule: RuleSerializer.serialize(tempRule)
				});
			}, this);

			CommunicationBus.subscribe("verifyUpdateRule", function (data) {
				var tempRule = RuleSerializer.deserialize(data.updateObj),
					tempRuleSet = this._mRulesets.temporary.ruleset,
					result = tempRuleSet.updateRule(data.oldId, tempRule);
				CommunicationBus.publish("verifyRuleUpdateResult", {
					result: result,
					updateRule: RuleSerializer.serialize(tempRule)
				});
			}, this);

			CommunicationBus.subscribe("getAvailableComponents", function () {
				CommunicationBus.publish("postAvailableComponents", Object.keys(this._oCore.mObjects.component));
			}, this);

			CommunicationBus.subscribe("onAnalyzePressed", function (data) {
				this.analyze(data.selectedRules, data.executionContext);
			}, this);

			CommunicationBus.subscribe("analysisInit", function () {
				this._updatesupportRules();
			}, this);

			CommunicationBus.subscribe("onViewReportPressed", function (reportConstants) {
				var data = this._getReportData(reportConstants);
				var html = ReportProvider.getReportHtml(data);
				var reportWindow = window.open("", "_blank");
				// Sometimes document.write overwrites the document html and sometimes it appends to it so we need a wrapper div.
				if (reportWindow.document.getElementById("sap-report-content")) {
					reportWindow.document.getElementById("sap-report-content").innerHtml = html;
				} else {
					reportWindow.document.write('<div id="sap-report-content">' + html + '</div>');
				}
				reportWindow.document.title = "Report";
			}, this);

			CommunicationBus.subscribe("onDownloadReportPressed", function (reportConstants) {
				var data = this._getReportData(reportConstants);
				var html = ReportProvider.getReportHtml(data);
				var report = '<!DOCTYPE HTML><html><head><title>Report</title></head><body><div id="sap-report-content">' + html + '</div></body></html>';
				var issues = { "issues": data.issues };
				var appInfos = { "appInfos": data.application };
				this._oDataCollector.add("technicalInfo.json", data.technical, "json");
				this._oDataCollector.add("issues.json", issues, "json");
				this._oDataCollector.add("appInfos.json", appInfos, "json");
				this._oDataCollector.add("report.html", report);
				this._oDataCollector.download();
				this._oDataCollector.clear();
			}, this);

			CommunicationBus.subscribe("markElement", function (id) {
				var $domElem = sap.ui.getCore().byId(id).$();
				$domElem.css("background-color", "red");
			}, this);

			CommunicationBus.subscribe("openUrl", function (url) {
				var win = window.open(url, "_blank");
				win.focus();
			}, this);

			CommunicationBus.subscribe("treeElementHover", function (elementId) {
				Highlighter.highlight(elementId);
			}, this);

			CommunicationBus.subscribe("toggleFrameHidden", function (hidden) {
				IFrameController.toggleHide(hidden);
			});
		};

		Main.prototype._updatesupportRules = function () {
			var mLibraries = sap.ui.getCore().getLoadedLibraries();
			for (var n in mLibraries) {
				try {
					if (!this._mRulesets[n]) {
						sap.ui.requireSync([n.replace(/\./g, "/") + "/library.support"]);
						this._mRulesets[n] = jQuery.sap.getObject(n).library.support;
					}
				} catch (ex) {
					jQuery.sap.log.info("No support file found.");
				}
			}

			this._initTempRulesLib();
			this._rulesCreated = true;

			CommunicationBus.publish("updatesupportRules", RuleSerializer.serialize(this._mRulesets));
		};

		Main.prototype._initTempRulesLib = function () {
			if (this._mRulesets.temporary) {
				return;
			}

			this._mRulesets.temporary = {
				lib: {
					name: "temporary"
				},
				ruleset: new Ruleset({
					name: "temporary",
					niceName: "Temporary ruleset"
				})
			};
		};

		Main.prototype.analyze = function (ruleDescriptors, executionContext) {
			if (this._oAnalyzer && this._oAnalyzer.running()) {
				return;
			}

			this._oAnalyzer.reset();

			var that = this;

			this._oExecutionScope = ExecutionScope(this._oCore, executionContext);
			ruleDescriptors.forEach(function (ruleDescriptor) {
				var libWithRules = that._mRulesets[ruleDescriptor.libName],
					executedRule = libWithRules.ruleset.getRules()[ruleDescriptor.ruleId];
					that._oAnalyzer.addTask([executedRule.title], function (oObject) {
						that._analyzeSupportRule(oObject, executionContext);
					}, [executedRule]);
			});

			IssueManager.clearIssues();

			return this._oAnalyzer.start();
		};

		/**
		 * @returns {promise} to notify of finished state
		 */
		Main.prototype.analyzeAll = function () {
			if (this._oAnalyzer && this._oAnalyzer.running()) {
				return;
			}

			this._oAnalyzer.reset();

			var that = this;

			this._oExecutionScope = ExecutionScope(this._oCore, {
				type: "core"
			});
			Object.keys(that._mRulesets).map(function (libName) {
				var rulesetRules = that._mRulesets[libName].ruleset.getRules();
				Object.keys(rulesetRules).map(function(ruleId) {
					var rule = rulesetRules[ruleId];
					that._oAnalyzer.addTask([rule.title], function (oObject) {
						that._analyzeSupportRule(oObject, {type: "core"});
					}, [rule]);
				});
			});
			IssueManager.clearIssues();
			return this._oAnalyzer.start();
		};

		/**
		 * Called after the analyzer finished and reports whether there are issues or not.
		 */
		Main.prototype._done = function () {
			var issues = this._createIssuesViewModel(),
				elementTree = this._createElementTree();

			CommunicationBus.publish("analyzeFinish", {
				issues: issues,
				elementTree: elementTree,
				elapsedTime: this._oAnalyzer.getElapsedTimeString()
			});
		};

		Main.prototype._createElementTree = function () {
			var	contextElements = this._copyElementsStructure(),
				elementTree = [];

			this._setContextElementReferences(contextElements);

			for (var i in contextElements) {
				if (contextElements[i].skip) {
					continue;
				}
				elementTree.push(contextElements[i]);
			}

			return [{
				content: elementTree,
				id: "WEBPAGE",
				name: "WEBPAGE"
			}];
		};

		Main.prototype._setContextElementReferences = function (contextElements) {
			var coreElements = this._oCore.mElements;

			for (var elementId in contextElements) {
				var element = contextElements[elementId],
					parent = coreElements[elementId] == undefined ? undefined : coreElements[elementId].getParent();

				if (coreElements[elementId] instanceof sap.ui.core.ComponentContainer) {
					var componentContainer = coreElements[elementId],
						componentId = componentContainer.getComponent();
					element.content.push(contextElements[componentId]);
					contextElements[componentId].skip = true;
				}

				if (parent) {
					var parentId = parent.getId();
					if (!contextElements[parentId]) {
						continue;
					}
					contextElements[parentId].content.push(contextElements[elementId]);
					contextElements[elementId].skip = true;
				}
			}
		};

		// TODO: the element crushing needs to be encapsulated on it's own 
		Main.prototype._copyElementsStructure = function () {
			var copy = {},
				that = this;

			var copyElementsFromCoreObject = function (coreObject, elemNames) {
				for (var i in coreObject) {
					var element = coreObject[i],
						elementCopy = {
							content: [],
							id: element.getId(),
							name: (elemNames == undefined) ? element.getMetadata().getName() : elemNames
						};
					copy[element.getId()] = elementCopy;
				}
			};

			copyElementsFromCoreObject(this._oExecutionScope.getElements());

			this._oExecutionScope.getElements().forEach(function (element) {
				if (element instanceof sap.ui.core.ComponentContainer) {
					var componentId = element.getComponent(),
						component = that._oCore.mObjects.component[componentId];
					copyElementsFromCoreObject([component], "sap-ui-component");
				}
			});

			// TODO: we need to make those "case"s using constants
			switch (this._oExecutionScope._getType()) {
				case "core":
					copyElementsFromCoreObject(this._oCoreFacade.getUIAreas(), "sap-ui-area");
					copyElementsFromCoreObject(this._oCoreFacade.getComponents(), "sap-ui-component");
					break;

				case "parent":
					var parentId = this._oExecutionScope._getContext().parentId;
					copyElementsFromCoreObject([this._oCore.mElements[parentId]]);
					break;

				case "components":
					var components = this._oExecutionScope._getContext().components;
					components.forEach(function (componentId) {
						copyElementsFromCoreObject([that._oCore.mObjects.component[componentId]], "sap-ui-component");
					});
					break;
			}

			return copy;
		};

		Main.prototype._createIssuesViewModel = function () {
			var viewModel = [];
			IssueManager.walkIssues(function (issue) {
				//TODO: What is the ID of the core ?!
				var className = issue.context.id === "WEBPAGE" ? "sap.ui.core" : sap.ui.getCore().byId(issue.context.id).getMetadata().getName();
				viewModel.push({
					severity: issue.severity,
					name: issue.rule.title,
					description: issue.rule.description,
					resolution: issue.rule.resolution,
					resolutionUrls: issue.rule.resolutionurls,
					audiences: issue.rule.audiences,
					categories: issue.rule.categories,
					details: issue.details,
					ruleLibName: issue.rule.libName,
					ruleId: issue.rule.id,
					context: {
						className: className,
						id: issue.context.id
					}
				});
			});

			return viewModel;
		};

		Main.prototype._getReportData = function (reportConstants) {
			return {
				issues: this._createIssuesViewModel(),
				technical: this._oDataCollector.getTechInfoJSON(),
				application: this._oDataCollector.getAppInfo(),
				scope: {
					executionScope: this._oExecutionScope,
					scopeDisplaySettings: {
						executionScopes: reportConstants.executionScopes,
						executionScopeTitle: reportConstants.executionScopeTitle
					}
				},
				analysisDuration: this._oAnalyzer.getElapsedTimeString(),
				analysisDurationTitle: reportConstants.analysisDurationTitle
			};
		};

		/**
		 * Callback for checking a support rule from the analyzer
		 *
		 * @param oRule
		 */
		Main.prototype._analyzeSupportRule = function (oRule, executionContext) {
			oRule.check(IssueManager.createCheckFunctionProxy(oRule), this._oCoreFacade, this._oExecutionScope);

			CommunicationBus.publish("progressUpdate", {
				currentProgress: this._oAnalyzer.getProgress()
			});

			if (this._iDoneTimer) {
				jQuery.sap.clearDelayedCall(this._iDoneTimer);
			}

			this._iDoneTimer = jQuery.sap.delayedCall(100, this, "_done");
		};

		var oMain = new Main();

		return oMain;

	}, true);

}; // end of sap/ui/support/supportRules/Main.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.controllers.Analysis.controller') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ui.controllers.Analysis.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/controllers/Analysis.controller",[
	"jquery.sap.global", 
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/m/Panel",
	"sap/m/List",
	"sap/m/ListItemBase",
	"sap/m/StandardListItem",
	"sap/m/InputListItem",
	"sap/m/Button",
	"sap/m/Toolbar",
	"sap/m/ToolbarSpacer",
	"sap/m/Label",
	"sap/m/MessageToast",
	"sap/ui/support/supportRules/WindowCommunicationBus",
	"sap/ui/support/supportRules/ui/models/SharedModel",
	"sap/ui/support/supportRules/RuleSerializer"
], function ($, Controller, JSONModel, Panel, List, ListItemBase, StandardListItem, InputListItem, Button, Toolbar, ToolbarSpacer,
		Label, MessageToast, CommunicationBus, SharedModel, RuleSerializer) {
	"use strict";
	return Controller.extend("sap.ui.support.supportRules.ui.controllers.Analysis", {
		onInit: function () {
			this.model = SharedModel;
			this.setCommunicationSubscriptions();
			
			CommunicationBus.publish("analysisInit");

			this.hackListItemBase();
			this.getView().setModel(this.model);
		},
		setCommunicationSubscriptions: function () {
			CommunicationBus.subscribe("updatesupportRules", this.updatesupportRules, this);

			CommunicationBus.subscribe("verifyRuleCreateResult", function (data) {
				var result = data.result,
					newRule = RuleSerializer.deserialize(data.newRule, true);
				if (result == "success") {
					this.model.getProperty("/libraries").forEach(function (lib) {
						if (lib.title == "temporary") {
							lib.rules.push(newRule);
						}
					});
					
					var emptyRule = this.model.getProperty("/newEmptyRule");
					this.model.setProperty("/newRule", jQuery.extend(true, {}, emptyRule));
					this.goToRuleProperties();
					this.createRulesUI();
					var lastPanelItemIndex = this.getView().byId("ruleSetContainer").getContent().length - 1;
					var lastPanelItem = this.getView().byId("ruleSetContainer").getContent()[lastPanelItemIndex];
					lastPanelItem.setExpanded(true);
					 this.model.setProperty("/selectedRule", newRule);
				} else {
					MessageToast.show("Add rule failed because: " + result);
				}
			}, this);

			CommunicationBus.subscribe("verifyRuleUpdateResult", function (data) {
				var result = data.result,
					updateRule = RuleSerializer.deserialize(data.updateRule, true);

				if (result === "success") {
					var ruleSource = this.model.getProperty("/editRuleSource");
					var libraries = this.model.getProperty('/libraries');
					libraries.forEach(function(lib, libIndex){
						if (lib.title === 'temporary') {
							lib.rules.forEach(function(rule, ruleIndex){
								if (rule.id === ruleSource.id) {
									lib.rules[ruleIndex] = updateRule;
								}
							});
						}
					});

					this.model.checkUpdate(true);
					this.model.setProperty('/selectedRule', updateRule);

					this.goToRuleProperties();
				} else {
					MessageToast.show("Update rule failed because: " + result);
				}
			}, this);
		},
		createNewRulePress: function(oEvent) {
			var oItem = oEvent.getParameter("item"),
				actionToTake = oItem.getText();
			if (actionToTake === 'New Rule') {
				var emptyRule = this.model.getProperty("/newEmptyRule");
				this.model.setProperty("/newRule", jQuery.extend(true, {}, emptyRule));
				this.goToCreateRule();
			} else {
				var selectedRuleCopy = jQuery.extend(true, {}, this.model.getProperty("/selectedRule"));
				this.model.setProperty("/newRule", selectedRuleCopy);
				this.model.checkUpdate(true, false);
				this.goToCreateRule();
			}
		},
		goToRuleProperties: function () {
			var navCont = this.getView().byId("rulesNavContainer");
			navCont.to(this.getView().byId("rulesDisplayPage"), "show");
		},
		/**
		 * Here we need a new behavior for the sap.m.List - we need to be able to both click on the checkbox,
		 * and click on the whole list item, and those 2 clicks to be separate from each other (with separate
		 * event handlers) 
		 * In our case 1 list is the rules for 1 library, we have more than one list, and we need the select 
		 * state to also be shared between 2 or more lists (visualy).
		 * Could be implemented with extension control of the list item, but because we are in iframe this is also fine.
		 */
		hackListItemBase: function () {
			var that = this,
				oldTap = ListItemBase.prototype.ontap,
				oldUpdateSelectedDom = ListItemBase.prototype.updateSelectedDOM,
				oldAfterRendering = ListItemBase.prototype.onAfterRendering;

			ListItemBase.prototype.onAfterRendering = function () {
				oldAfterRendering.apply(this, arguments);
				if (this.getParent().getMode() === "MultiSelect") {
					this.$().removeClass("sapMLIBSelected");
				}
			};

			ListItemBase.prototype.ontap = function (oEvent) {
				if (this.getParent().getMode() !== "MultiSelect") {
					oldTap.call(this, oEvent);
					return;
				}
				if ($(oEvent.target).hasClass("sapMCbBg") || $(oEvent.target).hasClass("sapMCb")) {
					oldTap.call(this, oEvent);
				} else {
					that.model.setProperty("/selectedRuleStringify", "");
					that.markLIBAsSelected(this);

					var selectedRule = this.getBindingContext().getObject();
					that.model.setProperty("/selectedRule", selectedRule);
					that.model.setProperty("/selectedRuleStringify", that.createRuleString(selectedRule));
				}
			};

			ListItemBase.prototype.updateSelectedDOM = function(bSelected, $This) {
				oldUpdateSelectedDom.call(this, bSelected, $This);
				if (this.getParent().getMode() === "MultiSelect") {
					$This.removeClass("sapMLIBSelected");
				}
			};
		},
		createRuleString: function (rule) {
			var str = "{\n",
				count = 0,
				keysLength = Object.keys(rule).length;

			for (var key in rule) {
				var value = rule[key];
				count++;
				str += "\t";
				str += key + ": ";
				if (key === "check") {
					str += value.split("\n").join("\n\t");
				} else {
					str += JSON.stringify(value);
				}

				//Don't add comma after last value
				if (count < keysLength) {
					str += ",";
				}

				str += "\n";
			}
			str += "}";
			return str;
		},
		markLIBAsSelected: function (listItemBase) {
			if (!listItemBase) {
				var selectedRuleTitle = this.model.getProperty("/selectedRule/title");
				this.getView().byId("ruleSetContainer").getContent().forEach(function (libPanel) {
					libPanel.getContent()[0].getItems().forEach(function (libItem) {
						if (libItem.getLabel() === selectedRuleTitle) {
							listItemBase = libItem;
						}
					});
				});
			}

			this.getView().$().find(".sapMLIB").removeClass("sapMLIBSelected");
			listItemBase.$().addClass("sapMLIBSelected");
		},
		onAfterNavigate: function (oEvent) {
			var to = oEvent.getParameter("to"),
				that = this;

			if (to === this.getView().byId("rulesDisplayPage")) {
				setTimeout(function () {
					that.markLIBAsSelected();
				}, 250);
			}
		},
		selectAll: function (libraryIndex) {
			var that = this;
			this.visitAllRules(function (rule, ruleIndex, libIndex) {
				if (libraryIndex === libIndex) {
					that.model.setProperty("/libraries/" + libIndex + "/rules/" + ruleIndex + "/selected", true);
				}
			});
		},
		deselectAll: function (libraryIndex) {
			var that = this;
			this.visitAllRules(function (rule, ruleIndex, libIndex) {
				if (libraryIndex === libIndex) {
					that.model.setProperty("/libraries/" + libIndex + "/rules/" + ruleIndex + "/selected", false);
				}
			});
		},
		updateRule: function () {
			var oldId = this.model.getProperty("/editRuleSource/id"),
				updateObj = this.model.getProperty("/editRule");

			if (this.checkFunctionString(updateObj.check)) {
				CommunicationBus.publish("verifyUpdateRule", {
					oldId: oldId,
					updateObj: RuleSerializer.serialize(updateObj)
				});
			}
		},
		updatesupportRules: function (data) {
			data = RuleSerializer.deserialize(data);

			var libraries = [],
				that = this;

			for (var i in data) {
				var rules = [],
					ruleSets = data[i].ruleset._mRules;

				for (var j in ruleSets) {
					var rule = ruleSets[j];
					rule.libName = i;
					rule.selected = true;
					rules.push(rule);
				}

				libraries.push({
					title: i,
					type: "library",
					rules: rules
				});
			}

			var firstSelectedRule = libraries[0].rules[0];
			that.model.setProperty("/selectedRuleStringify", "");
			that.model.setProperty("/selectedRule", firstSelectedRule);
			that.model.setProperty("/selectedRuleStringify", that.createRuleString(firstSelectedRule));
			that.model.setProperty("/libraries", libraries);

			that.createRulesUI();
			var panel = that.getView().byId("ruleSetContainer").getContent()[0];
			panel.setExpanded(true);

		},
		createRulesUI: function () {
			var libs = this.model.getProperty("/libraries"),
				rulesCount = 0,
				that = this,
				vlContainer = this.getView().byId("ruleSetContainer");

			vlContainer.getContent().forEach(function (content, contentIndex) {
				vlContainer.removeContent(content);
			});

			libs.forEach(function (lib, libIndex) {
				var content = lib.title === "temporary" ? new sap.m.Button({
					icon:"sap-icon://edit",
					press: function (oEvent) {
						var sourceObject = this.getParent().getBindingContext().getObject();
						that.model.setProperty("/editRuleSource", sourceObject);
						that.model.setProperty("/editRule", jQuery.extend(true, {}, sourceObject));
						that.model.checkUpdate(true, true);
						var navCont = that.getView().byId("rulesNavContainer");
						navCont.to(that.getView().byId("ruleUpdatePage"), "show");
					}
				}) : null;
				var rulesList = new List({
					mode : "MultiSelect",
					includeItemInSelection: true,
					items: {
						path: "/libraries/" + libIndex + "/rules",
						template: new InputListItem({
							label: "{title}",
							selected: "{selected}",
							content: content
						})
					}
				});

				if (lib.rules.length === undefined) {
					rulesCount = 1;
				} else {
					rulesCount = lib.rules.length;
				}

				var libPanel = new Panel({
					width: "100%",
					expandable: true,
					expanded: false,
					content: rulesList,
					headerToolbar: new Toolbar({
						content: [
							new Label({
								text: lib.title + " (" + rulesCount + ")"
							}),
							new ToolbarSpacer(),
							new Button({
								text: "Select all",
								press: function () {
									that.selectAll(libIndex);
								}
							}),
							new Button({
								text: "Deselect all",
								press: function () {
									that.deselectAll(libIndex);
								}
							})
						]
					})
				});

				vlContainer.addContent(libPanel);
			});

		},
		addLinkToNewRule: function () {
			var tempLink = this.model.getProperty("/tempLink"),
				copy = jQuery.extend(true, {}, tempLink);
			this.model.getProperty("/newRule/resolutionurls").push(copy);
			this.model.checkUpdate(true, true);
		},
		addLinkToEditRule: function () {
			var tempLink = this.model.getProperty("/tempLink"),
				copy = jQuery.extend(true, {}, tempLink);
			this.model.getProperty("/editRule/resolutionurls").push(copy);
			this.model.checkUpdate(true, true);
		},
		goToCreateRule: function () {
			var navCont = this.getView().byId("rulesNavContainer");
			navCont.to(this.getView().byId("rulesCreatePage"), "show");
		},
		checkFunctionString: function (functionString) {
			try {
				/* eslint-disable no-eval */
				eval("var testAsignedVar = " + functionString);
				/* eslint-enable no-eval */
			} catch (err) {
				MessageToast.show("Your check function contains errors, and can't be evaluated:" + err);
				return false;
			}
			return true;
		},
		addNewRule: function () {
			var newRule = this.model.getProperty("/newRule");
			if (this.checkFunctionString(newRule.check)) {
				CommunicationBus.publish("verifyNewRule", RuleSerializer.serialize(newRule));
			}
		},
		rulesToolbarITHSelect: function (oEvent) {
			if (oEvent.getParameter("key") === "jsonOutput") {
				var newRule = this.model.getProperty("/newRule"),
					stringifiedJson = this.createRuleString(newRule);
				this.model.setProperty("/newRuleStringified", stringifiedJson);
			}
		},
		rulesToolbarEditITHSelect: function (oEvent) {
			if (oEvent.getParameter("key") === "jsonOutput") {
				var newRule = this.model.getProperty("/editRule"),
					stringifiedJson = this.createRuleString(newRule);
				this.model.setProperty("/updateRuleStringified", stringifiedJson);
			}
		},
		visitAllRules: function (callback) {
			var libs = this.model.getProperty("/libraries");
			libs.forEach(function (lib, libIndex) {
				lib.rules.forEach(function (rule, ruleIndex) {
					callback(rule, ruleIndex, libIndex);
				});
			});
		}
	});
});
}; // end of sap/ui/support/supportRules/ui/controllers/Analysis.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.controllers.Issues.controller') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ui.controllers.Issues.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/controllers/Issues.controller",[
	"jquery.sap.global",
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/support/supportRules/WindowCommunicationBus",
	"sap/ui/support/supportRules/ui/models/SharedModel",
	"sap/ui/support/supportRules/ElementTree"
], function ($, Controller, JSONModel, CommunicationBus, SharedModel, ElementTree) {
	"use strict";

	var mIssueSettings = {
		severitytexts: {
			Error: "Error",
			Warning: "Warning",
			Hint: "Information",
			All: "All Severities"
		},
		severitystates: {
			Error: "Error",
			Warning: "Warning",
			Hint: "None",
			All: "None"
		},
		severityicons: {
			Error: "sap-icon://message-error",
			Warning: "sap-icon://message-warning",
			Hint: "sap-icon://message-information",
			All: "sap-icon://multiselect-all"
		}
	};

	return Controller.extend("sap.ui.support.supportRules.ui.controllers.Issues", {
		onInit: function () {
			CommunicationBus.subscribe("analyzeFinish", function (data) {
				var problematicControlsIds = {};

				data.issues.forEach(function (issue) {
					if (!issue.context || !issue.context.id) {
						return;
					}

					if (!problematicControlsIds[issue.context.id]) {
						problematicControlsIds[issue.context.id] = [issue.name];
					} else {
						problematicControlsIds[issue.context.id].push(issue.name);
					}

				});
				this.model.setSizeLimit(1000);
				this.model.setProperty("/issues", data.issues);
				this.model.setProperty("/selectedIssue", data.issues[0]);
				this.model.setProperty('/analyzePressed', true);
				this.model.setProperty("/visibleIssuesCount", data.issues.length);
				this.elementTree.setData({
					controls: data.elementTree,
					issuesIds: problematicControlsIds
				});
				this.clearFilters();
			}, this);

			this.model = SharedModel;
			this.getView().setModel(this.model);
			this.clearFilters();
		},
		onAfterRendering: function () {
			var that = this;
			this.elementTree = new ElementTree(this.getView().byId("elementTreeContainer").getId(), {
				onIssueCountClicked: function (selectedElementId) {
					that.clearFilters();
					that.model.setProperty("/elementFilter", selectedElementId);
					that.updateIssuesVisibility();
				},
				onHoverChanged: function (hoveredElementId) {
					CommunicationBus.publish("treeElementHover", hoveredElementId);
				}
			});
		},
		clearFilters: function () {
			this.model.setProperty("/severityFilter", "All");
			this.model.setProperty("/categoryFilter", "All");
			this.model.setProperty("/elementFilter", "All");
			this.model.setProperty("/audienceFilter", "All");
			this.updateIssuesVisibility();
		},
		clearFiltersAndElementSelection: function () {
			this.clearFilters();
			this.elementTree.clearSelection();
		},
		onIssuePressed: function (event) {
			var pressedLi = event.mParameters.listItem,
				selectedIssue = pressedLi.getBindingContext().getObject();
			this.model.setProperty("/selectedIssue", selectedIssue);
			this.elementTree.setSelectedElement(selectedIssue.context.id, false);
		},
		openDocumentation: function (oEvent) {
			var link = sap.ui.getCore().byId(oEvent.mParameters.id),
				url = link.getBindingContext().getProperty("href");
			CommunicationBus.publish("openUrl", url);
		},
		updateIssuesVisibility: function () {
			var visibleIssuesCount = 0;
			var issuesList = this.getView().byId("issuesList");
			issuesList.getItems().forEach(function (item) {
				item.updateProperty("visible");
			});

			issuesList.getItems().forEach(function (item) {
				if (item.getVisible()) {
					visibleIssuesCount++;
				}
			});
			this.model.setProperty("/visibleIssuesCount", visibleIssuesCount);
		},
		filterIssueListItems: function (issue) {
			var sevFilter = this.model.getProperty("/severityFilter"),
				sevFilterApplied = issue.severity === sevFilter || sevFilter === 'All',
				catFilter = this.model.getProperty("/categoryFilter"),
				catFilterApplied = $.inArray( catFilter, issue.categories ) > -1 || catFilter === 'All',
				elementFilter = this.model.getProperty("/elementFilter"),
				elementFilterApplied =  elementFilter ===  issue.context.id || elementFilter === 'All',
				audFilter = this.model.getProperty("/audienceFilter"),
				audienseFilterApplied =  $.inArray( audFilter, issue.audiences ) > -1 || audFilter === 'All';

			return sevFilterApplied && catFilterApplied && elementFilterApplied && audienseFilterApplied;
		},
		filterSevirityIcon: function(sValue) {
			return mIssueSettings.severityicons[sValue];
		},
		filterSevirityState: function(sValue) {
			return mIssueSettings.severitystates[sValue];
		},
		filterSevirityText: function(sValue) {
			return mIssueSettings.severitytexts[sValue];
		}
	});
});
}; // end of sap/ui/support/supportRules/ui/controllers/Issues.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.support.supportRules.ui.controllers.Main.controller') ) {
jQuery.sap.declare('sap.ui.support.supportRules.ui.controllers.Main.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/support/supportRules/ui/controllers/Main.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/support/supportRules/WindowCommunicationBus",
	"sap/ui/support/supportRules/ui/models/SharedModel"
], function (Controller, JSONModel, WindowCommunicationBus, SharedModel) {
	"use strict";
	return Controller.extend("sap.ui.support.supportRules.ui.controllers.Main", {
		onInit: function () {
			this.model = SharedModel;
			this.getView().setModel(this.model);
			this.resizeDown();
			this.initSettingsPopover();
			this.setCommunicationSubscriptions();

			this.hidden = false;
			this.updateShowButton();
		},

		initSettingsPopover: function () {
			this._settingsPopover = sap.ui.xmlfragment("sap.ui.support.supportRules.ui.views.AnalyzeSettings", this);
			this._settingsPopover.setModel(SharedModel);
			this.getView().addDependent(this._oPopover);
		},

		setCommunicationSubscriptions: function () {
			WindowCommunicationBus.subscribe("analyzeFinish", function (data) {
				this.ensureOpened();
				this.model.setProperty("/showProgressIndicator", false);
				this.model.setProperty("/coreStateChanged", false);
				this.model.setProperty("/lastAnalysisElapsedTime", data.elapsedTime);
				this.goToIssues();
			}, this);

			WindowCommunicationBus.subscribe("progressUpdate", function (data) {
				var currentProgress = data.currentProgress,
					pi = this.getView().byId("progressIndicator");

				pi.setDisplayValue(currentProgress + "/" + 100);
				this.model.setProperty("/progress", currentProgress);
			}, this);

			WindowCommunicationBus.subscribe("coreStateChanged", function () {
				this.model.setProperty("/coreStateChanged", true);
			}, this);

			WindowCommunicationBus.subscribe("postAvailableComponents", function (data) {
				this.model.setProperty("/availableComponents", data);
			}, this);
		},

		resizeUp: function () {
			WindowCommunicationBus.publish("resizeFrame", {bigger: true});
		},

		ensureOpened: function () {
			WindowCommunicationBus.publish("ensureOpened");
		},

		resizeDown: function () {
			WindowCommunicationBus.publish("resizeFrame", {bigger: false});
		},

		onAnalyze: function () {
			var selectedRules = this._getSelectedRules(),
				executionContext = this._getExecutionContext();
			WindowCommunicationBus.publish("onAnalyzePressed", {
				selectedRules: selectedRules,
				executionContext: executionContext
			});
			this.model.setProperty("/showProgressIndicator", true);
			this.clearProgressIndicator();
		},

		onViewReport: function () {
			var data = this._getReportData();
			WindowCommunicationBus.publish("onViewReportPressed", data);
		},

		onContextSelect: function (oEvent) {
			if (oEvent.getParameter("selected")) {
				var source = oEvent.getSource(),
					radioKey = source.getCustomData()[0].getValue(),
					execScope = this.model.getProperty("/executionScopes")[radioKey];
				this.model.setProperty("/analyzeContext", execScope);
			}
		},

		onBeforePopoverOpen: function () {
			WindowCommunicationBus.publish("getAvailableComponents");
		},

		onAnalyzeSettings: function (oEvent) {
			WindowCommunicationBus.publish("ensureOpened");
			this._settingsPopover.openBy(oEvent.getSource());
		},

		onDownloadReport: function () {
			var data = this._getReportData();
			WindowCommunicationBus.publish("onDownloadReportPressed", data);
		},

		onNavConAfterNavigate: function (oEvent) {
			var to = oEvent.getParameter("to");
			if (to === this.getView().byId("analysis")) {
				setTimeout(function () {
					to.getController().markLIBAsSelected();
				}, 250);
			}
		},
		_getReportData: function () {
			return {
				executionScopes: this.model.getProperty("/executionScopes"),
				executionScopeTitle: this.model.getProperty("/executionScopeTitle"),
				analysisDurationTitle: this.model.getProperty("/analysisDurationTitle")
			};
		},

		_getExecutionContext: function () {
			var ctx = {
				type: this.model.getProperty("/analyzeContext/key")
			};

			// TODO: these "if"s can be consistently turned into switch with constants
			if (ctx.type === "parent") {
				ctx.parentId = this.model.getProperty("/parentExecutionContextId");
			}

			if (ctx.type === "components") {
				var selectionContainer = sap.ui.getCore().byId("componentsSelectionContainer"),
					cbs = selectionContainer.getContent();

				ctx.components = [];
				cbs.forEach(function (checkBox) {
					if (checkBox.getSelected()) {
						ctx.components.push(checkBox.getText());
					}
				});
			}

			return ctx;
		},

		_getSelectedRules: function () {
			var libs = this.model.getProperty("/libraries"),
				selectedRules = [];

			libs.forEach(function (lib, libIndex) {
				lib.rules.forEach(function (rule) {
					if (rule.selected) {
						selectedRules.push({
							libName: lib.title,
							ruleId: rule.id
						});
					}
				});
			});

			return selectedRules;
		},

		goToAnalysis: function (evt) {
			var navCon = this.getView().byId("navCon");
			navCon.to(this.getView().byId("analysis"), "show");
			this.ensureOpened();
		},

		goToIssues: function () {
			var navCon = this.getView().byId("navCon");
			navCon.to(this.getView().byId("issues"), "show");
			this.ensureOpened();
		},

		goToWiki: function () {
			 window.open('https://uacp2.hana.ondemand.com/viewer/DRAFT/SAPUI5_Internal/57ccd7d7103640e3a187ed55e1d2c163.html','_blank');
		},

		clearProgressIndicator: function () {
			var pi = this.getView().byId("progressIndicator");
			pi.setDisplayValue("None");
			this.model.setProperty("/progress", 0.1);
		},

		setRulesLabel: function (libs) {
			var selectedCounter = 0;
			if (libs === null) {
				return "Manage Rules (" + selectedCounter + ")";
			} else {
				libs.forEach(function (lib, libIndex) {
					selectedCounter += lib.rules.length;
				});
				return "Manage Rules (" + selectedCounter + ")";
			}
		},

		updateShowButton: function () {
			// When hidden is true - the frame is minimized and we show the "show" button
			this.getView().byId("sapSTShowButtonBar").setVisible(this.hidden);
		},

		toggleHide: function () {
			this.hidden = !this.hidden;
			this.updateShowButton();

			WindowCommunicationBus.publish("toggleFrameHidden", this.hidden);
		}
	});
});
}; // end of sap/ui/support/supportRules/ui/controllers/Main.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.support.Bootstrap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.support.Bootstrap.
jQuery.sap.declare('sap.ui.support.Bootstrap'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/support/Bootstrap",["jquery.sap.global", "./library", "sap/ui/support/supportRules/Main"],
	function (jQuery, library, Main) {
		"use strict";

	var Bootstrap = {
		initSupportRules: function (settings) {
			if (settings[0].toLowerCase() === "true" || settings[0].toLowerCase() === "silent") {
				Main.startPlugin();
				/**
				 * Enables the additional logging capabilites of the logger,
				 * allowing the developers to pass custom data, that is later going to be added
				 * to the executionScope of the rules
				 */
				jQuery.sap.log.logSupportInfo(true);
			}
		}
	};

	return Bootstrap;
});

}; // end of sap/ui/support/Bootstrap.js
