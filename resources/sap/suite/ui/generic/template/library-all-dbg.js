// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.generic.template.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.P13nDimMeasurePanelExt') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.P13nDimMeasurePanelExt'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nDimMeasurePanel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/P13nDimMeasurePanelExt",[
    "jquery.sap.global", "sap/m/library", "sap/m/P13nDimMeasurePanel"
], function(jQuery, library, P13nDimMeasurePanel) {
    "use strict";


    var P13nDimMeasurePanelExt = P13nDimMeasurePanel.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.P13nDimMeasurePanelExt",
    {
        renderer:{}
    });


    P13nDimMeasurePanelExt.prototype._includeModelItem = function(oItem, iIndex) {
        if (iIndex < 0) {
            iIndex = this._oTable.getItems().length;
        }

        var fGetAvailableRoleTypes = function() {
            return [
                {
                    key: "row",
                    text: "Row"
                }, {
                    key: "column",
                    text: "Column"
                }
            ];
        };
        var oModelItem = {
            columnKey: oItem.getColumnKey(),
            visible: true,
            text: oItem.getText(),
            tooltip: oItem.getTooltip(),
            aggregationRole: oItem.getAggregationRole(),
            availableRoleTypes: fGetAvailableRoleTypes(),

            // default value
            persistentIndex: -1,
            persistentSelected: undefined,
            role: undefined,

            tableIndex: undefined
        };
        var oModel = this.getModel("$sapmP13nDimMeasurePanel");
        oModel.getData().items.splice(iIndex, 0, oModelItem);
    };

});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/P13nDimMeasurePanelExt.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/SmartFilterBarExt",[
    "sap/ui/comp/smartfilterbar/SmartFilterBar",
    "sap/m/SegmentedButton",
    "sap/m/SegmentedButtonItem"
], function(SmartFilterBar, SegmentedButton, SegmentedButtonItem) {
    "use strict";

	var FILTER_MODE_COMPACT = "compact";

	// Need to integrate with the existing smart filter bar integration with the SmartChart and SmartTable.
	// Since we have no control over changing the SmartFilterBar, SmartTable and SmartChart, and we need the
	//   SmartVisualFilterBar to integrate with the SmartChart and SmartTable, it makes sense to extend the SmartFilterBar to act as a fascade.
	//   This fascade will return the correct set of filters when in either Visual Filter mode or the standard Compact filter mode.
	var SmartFilterBarExt = SmartFilterBar.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt", {
		metadata: {
			properties: {
				mode: { type: "string", group: "Misc", defaultValue: FILTER_MODE_COMPACT },
				smartVisualFilterBarId: { type: "string", group: "Misc", defaultValue: null },
				hideVisualFilter: { type: "boolean", group: "Misc", defaultValue: null }
			},
			events: {
				switchToVisualFilter: {}
			}
		},
		renderer: {}
	});
	/**
	 * set currently active filter mode for the application Visual/Compact
	 * @param {mode} mode Visual/Compact
	 * @return {void}
	 */
	SmartFilterBarExt.prototype.setMode = function(mode) {
		this.setProperty("mode", mode);
	};

	SmartFilterBarExt.prototype.getFilterCount = function() {
		var filters = SmartFilterBar.prototype.retrieveFiltersWithValues.apply(this, arguments);
		return filters ? filters.length : 0;
	};
	
	SmartFilterBarExt.prototype._getView = function() {
		if (this._view)
			return this._view;

		var p = this.getParent();
		while (p) {
			if (p instanceof sap.ui.core.mvc.View) {
				this._view = p;
				break;
			}
			p = p.getParent();
		}

		return this._view;
	};

	SmartFilterBarExt.prototype._createFilters = function() {
		var oForm = SmartFilterBar.prototype._createFilters.apply(this, arguments);
		//Segment Button added only after checking if VF is to be shown
		if (this.getHideVisualFilter() === false) {
			var filterSwitchItems = [
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:"compact", tooltip:"{i18n>FILTER_COMPACT}"}),
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:"visual", tooltip:"{i18n>FILTER_VISUAL}"})
			];
			var filterSwitch = new SegmentedButton({
				width:"inherit",
				selectedKey:"compact",
				items: filterSwitchItems
			});
			filterSwitch.attachSelect(function(){
				//Save changes done at SmartFilter dialog and close it.
				this._bOKFiltersDialogTriggered = true;
				this._searchRequested(oForm);
				//Switch to VFD only after successful form validation of SmartFilter dialog
				if (this._validateState() && this._validateMandatoryFields()) {
					this.fireSwitchToVisualFilter();
				}
				//If form validation fails switch back to SmartFilter dialog
				else {
					filterSwitch.setSelectedKey("compact");
				}
			}.bind(this));

			var oToolbar = new sap.m.OverflowToolbar({
				design: sap.m.ToolbarDesign.Transparent,
				content: [
					new sap.m.ToolbarSpacer(),
					filterSwitch
				]
			}).addStyleClass("alpFilterDialogToolbar");
			oForm.setToolbar(oToolbar);
		}
		return oForm;
	};
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/SmartFilterBarExt.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem",["sap/ui/core/Control", "sap/ui/model/Filter"],
	function(Control) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItem = Control.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem", {
		metadata: {
			properties: {
				filterRestriction : { type: "string", group: "Misc", defaultValue: null },
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				dimensionField: { type: "string", group: "Misc", defaultValue: null },
				dimensionFieldIsDateTime: { type: "boolean", group: "Misc", defaultValue: false },
				dimensionFieldDisplay: { type: "string", group: "Misc", defaultValue: null },
				dimensionFilter: { type: "object[]", group: "Misc", defaultValue: null },
				dimensionFilterExternal: { type: "sap.ui.model.Filter", group: "Misc", defaultValue: null },
				measureField: { type: "string", group: "Misc", defaultValue: null },
				measureSortDescending: { type: "boolean", group: "Misc", defaultValue: false },
				unitField: { type: "string", group: "Misc", defaultValue: null },
				isCurrency: { type: "boolean", group: "Misc", defaultValue: false },
				isMandatory: { type: "boolean", group: "Misc", defaultValue: false },
				width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				title: { type: "string", group: "Misc", defaultValue: "" },
				outParameter: { type: "string", group: "Misc", defaultValue: null },
				inParameters: { type: "object[]", group: "Misc", defaultValue: null},
				parentProperty: { type: "string", group: "Misc", defaultValue: null },
				sortOrder: { type: "object[]", group: "Misc", defaultValue: null},
				scaleFactor : {type: "string", group: "Misc", defaultValue: null}
			},
			aggregations: {
				control: {type: "sap.ui.core.Control", multiple: false}
			},
			events: {
				filterChange: {},
				titleChange: {}
			}
		},
		renderer: {}
	});

	return FilterItem;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChart') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.viz.ui5.controls.VizFrame'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.format.ChartFormatter'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.api.env.Format'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChart",[
	"sap/viz/ui5/controls/VizFrame",
	"sap/viz/ui5/format/ChartFormatter", "sap/viz/ui5/api/env/Format",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem",
	"sap/ui/model/Sorter"
],
function(VizFrame,
		ChartFormatter, Format,
		FilterItem,
		Sorter) {
	"use strict";
	var FilterItemChart = FilterItem.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChart", {
		metadata: {
			aggregations: {
				control: {type: "sap.viz.ui5.controls.VizFrame", multiple: false}
			}
		},

		renderer: function(oRm, oControl) {
			oRm.renderControl(oControl.getAggregation("control"));
			// If multiple units are present put an overlay
			if (oControl._multiUnit){
				//Overlay message based on whether measure is a currency or unit
				var sOverlayMessage = oControl.getIsCurrency() ? oControl.getModel("i18n").getResourceBundle().getText("MULTIPLE_CURRENCY_OVERLAY_MESSAGE") : oControl.getModel("i18n").getResourceBundle().getText("MULTIPLE_UNIT_OVERLAY_MESSAGE");
				// overlay div is created
				oRm.write('<div class = "sapUiOverlay alpVFOverflow"');
				oRm.addStyle("width",oControl._chart.getWidth());
				// height has been reduced to 0.25 to get optimal space between chart title and overlay
				oRm.addStyle("height", String(parseFloat(oControl.getHeight()) - 0.25) + "rem");
				oRm.writeStyles();
				oRm.write('>');
				//label with error message from i18n is created
				oRm.write('<Label>' + sOverlayMessage + '</Label>');
				oRm.write('</div>');
			}
		}

	});

	FilterItemChart.prototype._formattingId = "__UI5__ShortIntegerMaxFraction2";
	FilterItemChart.prototype._maxFractionalDigits = 1;
	FilterItemChart.prototype._maxFractionalDigitsValsLessThanZero = 7; // limit to 7 decimal places, e.g. if scale is B and value is 700 will show 0.0000007, if value is 70, the shortened value will be 0.
	FilterItemChart.prototype._minFractionalDigits = 1;
	FilterItemChart.prototype._shortRefNumber = undefined;
	FilterItemChart.prototype._thousandsRefNumber = undefined;
	FilterItemChart.prototype._isTriggeredBySync = false;
	FilterItemChart.prototype._multiUnit = false;

	FilterItemChart.prototype.init = function() {
		this._registerChartFormatters();

		this._attachChartEvents();
	};
	/**
	*Function returns two arrays, an array of contructors for sorting and an array of sort order properties
	*params {[objects]} aSortOrder array of sortOrder property from annotations
	*return {object} oSorters Object that consists of array of construcotrs for sortig and array of sort order properties
	*/
	FilterItemChart._getSorter = function(aSortOrder) {
		var aSortFields = [], aSortDescending = [], aSorters = [];
		//For each type of sortOrder, we save the sortOrder Type and Ascending/descending values into  two arrays. Elements of these arrays are then passed into Sorter()
		for (var i = 0; i < aSortOrder.length; i++) {
			aSortFields[i] = aSortOrder[i].Field.String;
			aSortDescending[i] = aSortOrder[i].Descending.Boolean;
			aSorters.push(new Sorter(aSortFields[i], aSortDescending[i]));
		}
		var oSorter = {sorter : aSorters, sortFields: aSortFields};
		return oSorter;
	};

	FilterItemChart.prototype._getNumberFormatter = function(showScale, maxFractionalDigits) {
		var fixedInteger = sap.ui.core.format.NumberFormat.getIntegerInstance({
			style: "short",
			minFractionDigits: this._minFractionalDigits,
			maxFractionDigits: maxFractionalDigits,
			showScale: showScale,
			shortRefNumber: this._shortRefNumber
		});

		return fixedInteger;
	};

	FilterItemChart.prototype._registerChartFormatters = function() {
		var chartFormatter = ChartFormatter.getInstance();
		var me = this;
		chartFormatter.registerCustomFormatter(this._formattingId,
			function(value) {
				var maxFractionDigits = me._maxFractionalDigits;
				var shiftedVal = Math.abs(value) / me._thousandsRefNumber;
				if (me._thousandsRefNumber != undefined && shiftedVal < 1) {
					// if a shortRefNumber is set and the value is well below, then we need to preserve the lowest most digit and not round to 0.
					// E.g. if the shortRefNumber is 1000 (meaning the scale is K) and the value is 70, we want to display 0.07, not 0.0 to not give the impression that the actual value is 0.
					var i = 0;
					for (; i < me._maxFractionalDigitsValsLessThanZero && shiftedVal < 1; i++)
						shiftedVal *= 10;

					maxFractionDigits = i;
				}

				var fixedInteger = me._getNumberFormatter(false, maxFractionDigits);
				return fixedInteger.format(value);
		});

		Format.numericFormatter(chartFormatter);
	};

	FilterItemChart.prototype._attachChartEvents = function() {
		if (this._chart.onAfterRendering) {
			var origOnAfterRendering = this._chart.onAfterRendering;
			var me = this;

			this._chart.onAfterRendering = function() {
				me._registerChartFormatters(); // have to re-register, ChartFormatter gets overwritten when opening the Chart KPI

				origOnAfterRendering.apply(this, arguments);

				// apply selection
				me._applyDimensionFilter();
				me._chart.setBusy(false);
			};
		}

		this._chart.attachSelectData(this._onChartSelectData, this);
		this._chart.attachDeselectData(this._onChartDeselectData, this);
	};

	FilterItemChart.prototype.setWidth = function(width) {
		this.setProperty("width", width);
		this._chart.setWidth(width);
	};

	FilterItemChart.prototype.setHeight = function(height) {
		this.setProperty("height", height);
		this._chart.setHeight(height);
	};

	FilterItemChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._updateBinding();
	};

	FilterItemChart.prototype.setDimensionField = function(dimensionField) {
		this.setProperty("dimensionField", dimensionField);
		this._updateBinding();
	};

	FilterItemChart.prototype.setDimensionFieldIsDateTime = function(dimensionFieldIsDateTime) {
		this._isDateTimeChanged = this.getDimensionFieldIsDateTime() != dimensionFieldIsDateTime;
		this.setProperty("dimensionFieldIsDateTime", dimensionFieldIsDateTime);
		this._updateBinding();
		this._isDateTimeChanged = false;
	};

	FilterItemChart.prototype.setDimensionFieldDisplay = function(dimensionFieldDisplay) {
		this.setProperty("dimensionFieldDisplay", dimensionFieldDisplay);
		this._updateBinding();
	};

	FilterItemChart.prototype.setMeasureField = function(measureField) {
		this.setProperty("measureField", measureField);
		this._updateBinding();
	};

	FilterItemChart.prototype.setMeasureSortDescending = function(measureSortDescending) {
		this.setProperty("measureSortDescending", measureSortDescending);
		this._updateBinding();
	};

	FilterItemChart.prototype.setUnitField = function(unitField) {
		this.setProperty("unitField", unitField);
		this._updateBinding();
	};
	/**
	*Set Sortorder property so that chart data can be sorted
	*@param{array} sortOrder - Array of sortOrder Property objects from annotations
	*@return{void}
	*/
	FilterItemChart.prototype.setSortOrder = function(sortOrder) {
		this.setProperty("sortOrder",sortOrder);
		this._updateBinding();
	};
	/**
	 * Set external dimension Filters so that the filter item can be rendered
	 *
	 * @param {array} filter - array of filters
	 * @param {boolean} bIsTriggeredBySync - whether filter was triggered by sync or not
	 * @returns {void}
	 */
	FilterItemChart.prototype.setDimensionFilterExternal = function(filter, bIsTriggeredBySync) {
		this.setProperty("dimensionFilterExternal", filter);
		// if triggered by sync do not reset
		// until reset is done by filter item interaction
		if (!this._isTriggeredBySync) {
			this._isTriggeredBySync = (bIsTriggeredBySync != undefined && bIsTriggeredBySync);
		}
		this._updateBinding();
	};

	/**
	 * Triggered on selection of chart data point also triggers change to content area on chart selection
	 *
	 * @param {event} ev - event triggered by selecting data point
	 * @returns {void}
	 *
	 * @private
	 */
	FilterItemChart.prototype._onChartSelectData = function(ev) {
		var dimFilterList = this.getDimensionFilter(),
			dataList = ev.getParameter("data");
		if (this._ignoreNextSelectionChange) { // don't act on programmatic setting of the selection
			this._ignoreNextSelectionChange = false;
			/*if (this._isTriggeredBySync) {
				this._isTriggeredBySync = false;
			} else {*/
				return;
			//}
		}

		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var filterRestriction = this.getFilterRestriction();
		var dimFilterList = this.getDimensionFilter();

		//if the dimension filter list is null/udefined or filterRestriction is "single-value" then set dimension filter list as an empty array
		if (!dimFilterList || filterRestriction == "single")
		{
			dimFilterList = [];
		}

		var fnCheckIfValueExists = function (element) {
			return element.dimValue === this;
		};

		for (var i = 0; i < dataList.length; i++) {
			var data = dataList[i].data;

			var valueExists = dimFilterList.filter(fnCheckIfValueExists, data[dimFieldDisplay]);

			if (valueExists.length === 0) {
				dimFilterList.push({
					dimValue: data[dimFieldDisplay],
					dimValueDisplay: data[dimFieldDisplay + ".d"] // VizFrame puts the display value in the <field>.d attribute
				});
			}
		}

		this.setProperty("dimensionFilter", dimFilterList); // set without calling setDimensionFilter so that the selected points don't get reapplied

		this.fireFilterChange({
			filterList: dimFilterList,
			property: this.getParentProperty(),
			filterRestriction: filterRestriction
		});
	};

	FilterItemChart.prototype._onChartDeselectData = function(ev) {
		if (this._ignoreNextSelectionChange) { // don't act on programmatic setting of the selection
			this._ignoreNextSelectionChange = false;
			return;
		}

		var dimFieldDisplay = this.getDimensionFieldDisplay();

		// Get the unselected data points
		var valList = [];
		var dataList = ev.getParameter("data");
		for (var i = 0; i < dataList.length; i++) {
			var data = dataList[i].data;
			valList.push({
				dimValue: data[dimFieldDisplay],
				dimValueDisplay: data[dimFieldDisplay + ".d"] // VizFrame puts the display value in the <field>.d attribute
			});
		}

		var dimFilterList = this.getDimensionFilter();
		if (!dimFilterList)
			dimFilterList = [];

		// Remove from the unselected from the selected
		for (var i = 0; i < valList.length; i++) {
			var val = valList[i].dimValue;
			for (var j = 0; j < dimFilterList.length; j++) {
				if (val == dimFilterList[j].dimValue)
					dimFilterList.splice(j, 1);
			}
		}
		this.setProperty("dimensionFilter", dimFilterList); // set without calling setDimensionFilter so that the selected points don't get reapplied

		this.fireFilterChange({
			filterList: dimFilterList,
			property: this.getParentProperty(),
			filterRestriction: this.getFilterRestriction(),
			removeGlobalFilter: this.getOutParameter(),
			removeGlobalFilterValue: data[dimFieldDisplay]
		});
	};

	/**
	*Function returns config object with all the below mentioned properties.
	*return {object} Config object is returned by the object.
	*/
	FilterItemChart.prototype.getP13NConfig = function() {
		var aPropList = [
			"width", "height","filterRestriction","sortOrder","scaleFactor",
			"entitySet", "dimensionField", "dimensionFieldDisplay", "dimensionFieldIsDateTime", "dimensionFilter", "measureField", "measureSortDescending", "unitField", "isCurrency", "isMandatory", "outParameter", "inParameters", "parentProperty"
		];

		// simple properties
		var oConfig = {};
		for (var i = 0; i < aPropList.length; i++) {
			var name = aPropList[i];
			oConfig[name] = this.getProperty(name);
			if ((name == 'outParameter' || name == 'inParameters') && oConfig[name] == "") {
				oConfig[name] = undefined;
			}
		}

		return oConfig;
	};

	FilterItemChart.prototype.setDimensionFilter = function(dimFilter) {
		this.setProperty("dimensionFilter", dimFilter);

		this._applyDimensionFilter();
	};
	/**
	 * @private
	 * This function apply the dimension filter.
	 * @return {void}
	 */
	FilterItemChart.prototype._applyDimensionFilter = function() {
		// apply to the underlying chart
		var points = [];
		var dimFilter = this.getDimensionFilter();

		if (dimFilter) {
			this._ignoreNextSelectionChange = this._ignoreNextSelectionChange || dimFilter.length > 0; // Then change will be triggered, so ignore since this is the programmatic setting

			// Although requesting the display field, the chart control stores the techincal value in this field.  The display value is stored in the <this.getDimensionFieldDisplay()> + '.d'
			var dimField = this.getDimensionFieldDisplay();
			for (var i = 0; i < dimFilter.length; i++) {
				var data = {};

				data[dimField] = dimFilter[i].dimValue;
				points.push({
					data: data
				});
			}
		}

		// convert dimFilter into actual points
		this._chart.vizSelection(points, {});

		var aChartSelections = this._chart.vizSelection();

		// if chart has filters but there are
		// no selections on the chart
		// set ignoreNextSelectionChange to false
		if (this._ignoreNextSelectionChange === true && (aChartSelections && aChartSelections.length === 0) && dimFilter.length > 0) {
			this._ignoreNextSelectionChange = false;
		}

	};

	FilterItemChart.prototype._onDataReceived = function(ev) {
		var data = ev.getParameter("data");
		if (!data || !data.results)
			return;

		if (this.getControl().getVizType() != "donut") {
			// Unit determination, if chart type is donut this will happen in onDatarecieved of donut
			this._determineUnit(data.results);
			// Scaling determination
			// doesn't apply to donut since always percentage based
			var measureField = this.getMeasureField();
			var minVal = null;
			var maxVal = null;
			for (var i = 0; i < data.results.length; i++) {
				var val = Math.abs(parseFloat(data.results[i][measureField]));
				minVal = i == 0 ? val : Math.min(minVal, val);
				maxVal = i == 0 ? val : Math.max(maxVal, val);
			}

			if (!minVal) // NaN, null, 0
				minVal = 0;
			if (!maxVal) // NaN, null, 0
				maxVal = 0;

			this._applyMinMaxValue(minVal, maxVal);
		}
	};
	/**
	* @private
	* This function determine unit and set it.
	*	@param{array} data list from which unit determination to be done
	* @return{void}
	*/
	FilterItemChart.prototype._determineUnit = function (data){
		var unitField = this.getUnitField();
		if (unitField) {
			var prevUnit = "";
			this._multiUnit = false;
			for (var i = 0; i < data.length; i++) {
				//Others category in donut chart is not considered for unit determination
				if (data[i]["__IS_OTHER__"] !== true){
					var unit = data[i][unitField];
				}
				if (!unit || (prevUnit && unit != prevUnit)) {
					if (data.length > 1){
						this._multiUnit = true;
					}
					break;
				}
				prevUnit = unit;
			}
			var oTemplatePrivate = this.getModel("_templPriv");
			var dimProperty = oTemplatePrivate.getProperty("/alp/visualFilter/" + this.getParentProperty());
			if (!dimProperty) {
				dimProperty = {
					hasMultiUnit: this._multiUnit
				};
			}
			else {
				dimProperty.hasMultiUnit = this._multiUnit;
			}
			oTemplatePrivate.setProperty("/alp/visualFilter/" + this.getParentProperty(), dimProperty);
			this._applyUnitValue(this._multiUnit ? "" : prevUnit);
		}
		else {
			// no unit field, so no unit displayed in title
			this._applyUnitValue("");
		}
	};
	FilterItemChart.prototype._applyUnitValue = function(val) {
		if (this._lastUnitValue != val) {
			this._lastUnitValue = val;
			this.fireTitleChange();
		}
	};

	FilterItemChart.prototype._applyMinMaxValue = function(min, max) {
		if (this._lastMinValue != min || this._lastMaxValue != max) {
			this._lastMinValue = min;
			this._lastMaxValue = max;

			this._scaleValue = "";
			this._shortRefNumber = undefined; // reset

			var absMax = Math.max(Math.abs(min), Math.abs(max)); // use absolute maximum to determine the scale
			if (absMax) {
				// Determine the scale, to get scaleFactor from annotations or from locally defined values
				var scaleFactor = this.getScaleFactor() ? this.getScaleFactor() : this._getScaleFactor(absMax);
				this._shortRefNumber = scaleFactor;
				this._determineThousandsRefNumber(scaleFactor);

				var fixedInteger = this._getNumberFormatter(true, this.maxFractionalDigits);
				var format = fixedInteger.oLocaleData.getDecimalFormat("short", scaleFactor, "other");

				if (format) { // for numbers less than 1000 the returned format is undefined, so handle that
					// remove 0's
					for (var i = 0; i < format.length; i++) {
						if (format[i] != "0")
							this._scaleValue += format[i];
					}
				}
			}

			this.fireTitleChange();
		}
	};

	FilterItemChart.prototype._determineThousandsRefNumber = function(scaleFactor) {
		var shiftedFactor = scaleFactor;

		if (scaleFactor >= 1000) {
			var thousandsCount = 0;
			while (shiftedFactor >= 1000) {
				shiftedFactor /= 1000;
				thousandsCount++;
			}

			this._thousandsRefNumber = thousandsCount == 0 ? undefined : thousandsCount * 1000;
		}
		else {
			this._thousandsRefNumber = undefined;
		}
	};

	FilterItemChart.prototype._getScaleFactor = function(val) {
		var val = parseFloat(val);
		var precision = this._minFractionalDigits;
		for (var i = 0; i < 14; i++) {
			var scaleFactor = Math.pow(10, i);
			if (Math.round(Math.abs(val) / scaleFactor, precision - 1) < 10)
				return scaleFactor;
		}

		return undefined;
	};
	/**
	* An overlay if multiple units are present is put on chart
	* @return {void}
	*/
	FilterItemChart.prototype.rerender = function(){
		// If multiple units are present put an overlay
		if (this._multiUnit){
			//Overlay message based on whether measure is a currency or unit
			var sOverlayMessage = this.getIsCurrency() ? this.getModel("i18n").getResourceBundle().getText("MULTIPLE_CURRENCY_OVERLAY_MESSAGE") : this.getModel("i18n").getResourceBundle().getText("MULTIPLE_UNIT_OVERLAY_MESSAGE");
			//label with error message from i18n is created
			var $label = jQuery("<Label>").text(sOverlayMessage);
			// overlay div is created
			// height has been reduced to 0.25 to get optimal space between chart title and overlay
			var $overlay = jQuery("<div></div>").addClass("sapUiOverlay alpVFOverflow").css({"height":String(parseFloat(this._chart.getHeight()) - 0.25) + "rem","width":this._chart.getWidth()});
			this._chart.$().append($overlay.append($label));
		}
	};

	FilterItemChart.prototype.getTitle = function() {
		var model = this.getModel();

		if (!model)
			return "";

		var basePath = "/" + this.getEntitySet() + "/";
		var measureLabel = model.getData(basePath + this.getMeasureField() + "/#@sap:label");
		// if sap:label is not defined
		if (measureLabel === undefined) {
			measureLabel = this.getMeasureField();
		}
		var dimLabel = model.getData(basePath + this.getDimensionField() + "/#@sap:label");
		// if sap:label is not defined
		if (dimLabel === undefined) {
			dimLabel = this.getDimensionField();
		}

		// Get the Unit
		var unitValue = this._lastUnitValue ? this._lastUnitValue : "";

		// Get the Scale factor
		var scaleValue = this._scaleValue ? this._scaleValue : "";

		var i18nModel = this.getModel("i18n");
		if (!i18nModel)
			return "";

		var rb = i18nModel.getResourceBundle();

		var title = "";
		if (scaleValue && unitValue)
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT_CURR", [measureLabel, dimLabel, scaleValue, unitValue]);
		else if (unitValue)
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, unitValue]);
		else if (scaleValue)
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, scaleValue]);
		else
			title = rb.getText("VIS_FILTER_TITLE_MD", [measureLabel, dimLabel]);

		return title;
	};

	return FilterItemChart;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartBar') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.viz.ui5.controls.VizFrame'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.FlattenedDataset'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.DimensionDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.MeasureDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.common.feeds.FeedItem'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.format.ChartFormatter'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.api.env.Format'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartBar",[
	"sap/viz/ui5/controls/VizFrame", "sap/viz/ui5/data/FlattenedDataset", "sap/viz/ui5/data/DimensionDefinition", "sap/viz/ui5/data/MeasureDefinition", "sap/viz/ui5/controls/common/feeds/FeedItem",
	"sap/viz/ui5/format/ChartFormatter", "sap/viz/ui5/api/env/Format",
	"sap/ui/model/Sorter",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChart",
	"sap/ui/model/json/JSONModel"
],
function(VizFrame, FlattenedDataset, DimensionDefinition, MeasureDefinition, FeedItem,
		ChartFormatter, Format,
		Sorter,
		FilterItemChart,
		JSONModel) {
	"use strict";

	var FilterItemChartBar = FilterItemChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartBar", {
		metadata: {
			properties: {
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 },
				fixedCount: {type: "int", defaultValue: 3}
			},
			aggregations: {
				dataset: {type: "sap.viz.ui5.data.Dataset", multiple : false}
			}
		},

		renderer: {}
	});

	FilterItemChartBar.prototype.init = function() {
		// Too many issues with using the Smart Chart, toolbar, duplicate ids, ... so use the VisFrame directly
		this._chart = new VizFrame({
			vizType: "bar",
			legendVisible: false
		});
		this.setControl(this._chart);

		this._chart.setModel(new JSONModel()); // set the chart's model to a JSON model initially so that the binding doesn't trigger an OData request
		this._sorters = [];
		FilterItemChart.prototype.init.apply(this, arguments);
	};

	FilterItemChartBar.prototype._updateBinding = function() {
		// Make sure all binding are available
		var entityName = this.getEntitySet();
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var measureField = this.getMeasureField();
		var unitField = this.getUnitField();
		var filter = this.getDimensionFilterExternal();
		var aSortOrder = [], aSortFields = [];
		aSortOrder = this.getSortOrder();
		var oSortObject = FilterItemChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;
		if (!entityName || !measureField || !dimField || !dimFieldDisplay) // All fields must be present
			return;

		var vizProps = {
			general: {
				background: {
					color: "transparent"
				}
			},
			plotArea: {
				colorPalette: ["#006ca7"], // TODO: read palette from variables based on theme
				dataLabel: {
					formatString: this._formattingId,
					visible: true,
					position: "inside" // Need the equivalent of outsideFirst -> insideFirst, not supported by VizFrame
				},
				gridline: { visible: false },
				background: {
					color: "transparent"
				},
				gap: {
					barSpacing: 0.5
				}
			},
			valueAxis: { visible: false },
			categoryAxis: {
				title:    { visible: false },
				axisTick: { visible: false },
				axisLine: { visible: false },
				hoverShadow: {
					color: "transparent"
				},
				layout: {
					width: this.getLabelWidthPercent()
				}
			},
			tooltip: { visible: false },
			title:   { visible: false },
			interaction: {
				selectability: {
					mode: "MULTIPLE"
				},
				enableDeselectAll: false
			}
		};

		if (JSON.stringify(vizProps) != JSON.stringify(this.lastVizProps)) // diff objects, perhaps not the most efficient, but dealing with a small enough event, small and simple structure that this won't significantly impact performance
			this._chart.setVizProperties(vizProps);
		this.lastVizProps = vizProps;

		// Create the required Feed entries for the Chart
		var feedList = this._chart.getFeeds();
		var createFeeds = true;
		if (feedList && feedList.length == 2) {
			// check if the values set on the feed match
			var dimFeed = feedList[0]; // Dimension
			var measureFeed = feedList[1]; // Measure
			createFeeds = dimFeed.getValues() != dimFieldDisplay || measureFeed.getValues() != measureField;
		}

		// since dimension and measure for filter item will always be a string
		// but FeedItem expects an array of strings
		var dimFieldArray = [dimFieldDisplay],
			measureFieldArray = [measureField];

		if (createFeeds) {
			this._chart.removeAllFeeds(); // Clear any previously set feeds
			this._chart.addFeed(
				new FeedItem({
					"uid": "categoryAxis",
					"type": "Dimension",
					"values": dimFieldArray
				})
			);

			this._chart.addFeed(
				new FeedItem({
					"uid": "valueAxis",
					"type": "Measure",
					"values": measureFieldArray
				})
			);
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay)
			selectFields.push(dimFieldDisplay);

		if (unitField)
			selectFields.push(unitField);

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length > 0)
			filterList = [filter];

		this.setDataset(this._getDataSet(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay));
		this._chart.setDataset(this._getChartDataSet(entityName, filterList, measureField, dimField, dimFieldDisplay));

		this._applyDimensionFilter();

		this._chart.setBusy(true);
	};

	FilterItemChartBar.prototype._getDataSet = function(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay) {
		var me = this;
		var count = this.getFixedCount();

		var dataSet = new FlattenedDataset({
			data: {
				path: "/" + entityName,
				startIndex: 0,
				length: count,
				sorter: this._sorters, // Not declarable (doesn't take effect if an instance of the Sorter is not provided)
				filters: filterList,
				parameters: {
					select: selectFields.join(",")
				},
				events: {
					dataReceived: function(ev) {
						me._onDataReceived(ev);
					}
				}
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: { // Without this formatter and the subsequent call to data.GetContexts the "dataReceived" event will not be triggered
					parts: [dimFieldDisplay, measureField],
					formatter: function(dimLabel, dimValue) {
						var dataSet = me.getDataset();
						if (!dataSet)
							return "";

						// It would be great if the Donut chart would provide this
						var data = dataSet.getBinding("data");
						if (!data)
							return "";

						data.getContexts(0, count);

						return "";
					}
				}
			}),
			measures: [
				new MeasureDefinition({
					name: measureField,
					value: "{" + measureField + "}"
				})
			]
		});

		var binding = dataSet.getBinding("data");
		if (binding) // manually trigger
			binding.getContexts(0, count);

		return dataSet;
	};

	FilterItemChartBar.prototype._getChartDataSet = function(entityName, filterList, measureField, dimField, dimFieldDisplay) {
		var chartDataSet = new FlattenedDataset({
			data: {
				path: "/" + entityName
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: { // Without this formatter and the subsequent call to data.GetContexts the "dataReceived" event will not be triggered
					parts: [dimFieldDisplay],
					formatter: function(dimLabel) {
						var dimLabel = dimLabel instanceof Date ? dimLabel.toDateString() : dimLabel;
						return dimLabel && typeof dimLabel == "string" && dimLabel.indexOf("__DUMMY_") == 0 ? "" : dimLabel;
					}
				}
			}),
			measures: [
				new MeasureDefinition({
					"name": measureField,
					"value": "{" + measureField + "}"
				})
			]
		});

		return chartDataSet;
	};

	FilterItemChartBar.prototype._onDataReceived = function(ev) {
		var dataSet = this.getDataset();
		if (!dataSet)
			return;

		// Copy the existing model and the missing data
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var propList = [
			dimField,
			dimFieldDisplay,
			this.getMeasureField(),
			this.getUnitField()
		];

		var dataList = [];

		// Copy from the request context to the local data to be stored in a json model
		var count = this.getFixedCount();
		var contextList = dataSet.getBinding("data").getContexts(0, count);
		for (var i = 0; i < contextList.length; i++) {
			var context = contextList[i];
			var rowObj = {};
			for (var j = 0; j < propList.length; j++) {
				var prop = propList[j];
				rowObj[prop] = context.getObject(prop);
			}

			dataList.push(rowObj);
		}

		// check that the list contains the required amount, if not add more blank entries
		for (var i = contextList.length; i < count; i++) {
			var rowObj = {};
			for (var j = 0; j < propList.length; j++) {
				var prop = propList[j];
				rowObj[prop] = ""; // set to empty
			}

			rowObj[dimField] = "__DUMMY_" + i;

			dataList.push(rowObj);
		}

		var data = {};
		var entityName = this.getEntitySet();

		data[entityName] = dataList;

		this._chart.setModel(new JSONModel(data));

		FilterItemChart.prototype._onDataReceived.apply(this, arguments);

		this._chart.rerender();
	};

	return FilterItemChartBar;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartDonut') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartDonut'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.viz.ui5.controls.VizFrame'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.VizFrameRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.FlattenedDataset'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.DimensionDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.MeasureDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.common.feeds.FeedItem'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.format.ChartFormatter'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.api.env.Format'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartDonut",[
	"sap/viz/ui5/controls/VizFrame", "sap/viz/ui5/controls/VizFrameRenderer", "sap/viz/ui5/data/FlattenedDataset", "sap/viz/ui5/data/DimensionDefinition", "sap/viz/ui5/data/MeasureDefinition", "sap/viz/ui5/controls/common/feeds/FeedItem",
	"sap/viz/ui5/format/ChartFormatter", "sap/viz/ui5/api/env/Format",
	"sap/ui/model/Sorter",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChart",
	"sap/ui/model/json/JSONModel"
],
function(VizFrame, VizFrameRenderer, FlattenedDataset, DimensionDefinition, MeasureDefinition, FeedItem,
		ChartFormatter, Format,
		Sorter,
		FilterItemChart,
		JSONModel) {
	"use strict";

	var FilterItemChartDonut = FilterItemChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartDonut", {
		metadata: {
			properties: {
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 2 }
			},
			aggregations: {
				dataset : {type : "sap.viz.ui5.data.Dataset", multiple : false},
				totalDataset : {type : "sap.viz.ui5.data.Dataset", multiple : false}
			}
		},

		renderer: {}
	});

	FilterItemChartDonut.prototype.init = function() {
		// Too many issues with using the Smart Chart, toolbar, duplicate ids, ... so use the VisFrame directly
		this._chart = new VizFrame({
			vizType: "donut",
			legendVisible: false
		});

		this.setControl(this._chart);

		this._chart.setModel(new JSONModel()); // set the chart's model to a JSON model initially so that the binding doesn't trigger an OData request

		this._otherField = "__IS_OTHER__"; // may need to replace if the data contains this
		this._otherID = "__OTHER__"; // may need to replace if the data contains this
		this._measureScaledField = "__MEASURE_SCALED__"; // may need to replace if the data contains this
		this._percentField = "__PERCENT__"; // may need to replace if the data contains this
		this._sorters = [];
		FilterItemChart.prototype.init.apply(this, arguments);
	};

	FilterItemChartDonut.prototype._updateBinding = function() {
		// Make sure all binding are available
		var entityName = this.getEntitySet();
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var measureField = this.getMeasureField();
		var unitField = this.getUnitField();
		var filter = this.getDimensionFilterExternal();
		var aSortOrder = [], aSortFields = [];
		aSortOrder = this.getSortOrder();
		var oSortObject = FilterItemChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;
		if (!entityName || !measureField || !dimField || !dimFieldDisplay) // All fields must be present
			return;

		var vizProps = {
			general: {
				layout: {
					paddingRight: 10,
					padding: 0
				},
				background: {
					color: "transparent"
				}
			},
			legend: {
				visible: true,
				itemMargin: 1.5
			},
			legendGroup: {
				layout: {
					alignment: "center",
					//width: this.getLabelWidthPercent() * parseInt(this.getWidth(), 10)
					//Converting width in percentage
					width: ((this.getLabelWidthPercent() * 100 )  + "%")
				}
			},
			plotArea: {
				innerRadiusRatio: 0.65,
				colorPalette: ["#006ca7", "#55A1C4", "#8BBDD4"], // TODO: read palette from variables based on theme
				background: {
					visible: false
				}
			},
			tooltip: { visible: false },
			title:   { visible: false },
			interaction: {
				selectability: {
					mode: "MULTIPLE"
				},
				enableDeselectAll: false
			}
		};

		if (JSON.stringify(vizProps) != JSON.stringify(this.lastVizProps)) // diff objects, perhaps not the most efficient, but dealing with a small enough event, small and simple structure that this won't significantly impact performance
			this._chart.setVizProperties(vizProps);
		this.lastVizProps = vizProps;

		// Create the required Feed entries for the Chart
		var feedList = this._chart.getFeeds();
		var createFeeds = true;
		if (feedList && feedList.length == 2) {
			// check if the values set on the feed match
			var dimFeed = feedList[0]; // Dimension
			var measureFeed = feedList[1]; // Measure
			createFeeds = dimFeed.getValues() != dimFieldDisplay || measureFeed.getValues() != this._measureScaledField;
		}

		if (createFeeds) {
			this._chart.removeAllFeeds(); // Clear any previously set feeds
			// since dimension and measure for filter item will always be a string
			// but FeedItem expects an array of strings
			var dimFieldArray = [dimFieldDisplay],
				measureFieldArray = [this._measureScaledField];

			this._chart.addFeed(
				new FeedItem({
					"uid": "color",
					"type": "Dimension",
					"values": dimFieldArray
				})
			);

			this._chart.addFeed(
				new FeedItem({
					"uid": "size",
					"type": "Measure",
					"values": measureFieldArray
				})
			);
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay)
			selectFields.push(dimFieldDisplay);

		if (unitField)
			selectFields.push(unitField);

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length > 0)
			filterList = [filter];

		// Set the regular, the total and the chart data sets
		this._totalReady = false;

		this.setDataset(this._getDataSet(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay));
		this.setTotalDataset(this._getTotalDataSet(entityName, filterList, measureField, dimField, dimFieldDisplay));
		this._chart.setDataset(this._getChartDataSet(entityName, filterList, measureField, dimField, dimFieldDisplay));

		this._applyDimensionFilter();

		this._chart.setBusy(true);
	};

	FilterItemChartDonut.prototype._getDataSet = function(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay) {
		var me = this;
		// Requsting for top four records to check if the chart selections are more than three
		var count = 4;

		var dataSet = new FlattenedDataset({
				data: {
				path: "/" + entityName,
				startIndex: 0,
				length: count,
				sorter: this._sorters, // Not declarable (doesn't take effect if an instance of the Sorter is not provided)
				filters: filterList,
				parameters: {
					select: selectFields.join(",")
				},
				events: {
					dataReceived: function(ev) {
						//Need to be sure that top 4 query has returned as well.
						me._topTwoReady = true;
						me._onDataReceived(ev);	//Sending explicit true to indicate first two are also ready.
					}
				}
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: { // Without this formatter and the subsequent call to data.GetContexts the "dataReceived" event will not be triggered
					parts: [dimFieldDisplay, measureField],
					formatter: function(dimLabel, dimValue) {
						var dataSet = me.getDataset();
						if (!dataSet)
							return "";

						// It would be great if the Donut chart would provide this
						var data = dataSet.getBinding("data");
						if (!data)
							return "";

						data.getContexts(0, count);

						return "";
					}
				}
			}),
			measures: [
				new MeasureDefinition({
					name: measureField,
					value: measureField
				})
			]
		});

		var binding = dataSet.getBinding("data");
		if (binding) // manually trigger
			binding.getContexts(0, count);

		return dataSet;
	};

	FilterItemChartDonut.prototype._getTotalDataSet = function(entityName, filterList, measureField, dimField, dimFieldDisplay) {
		var me = this;
		var count = 1; // only 1 total

		var totalDataSet = new FlattenedDataset({
				data: {
				path: "/" + entityName,
				startIndex: 0,
				length: count,
				filters: filterList,
				parameters: {
					select: measureField
				},
				events: {
					dataReceived: function(ev) {
						me._onTotalReceived(ev);
					}
				}
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: { // Without this formatter and the subsequent call to data.GetContexts the "dataReceived" event will not be triggered
					parts: [dimFieldDisplay, measureField],
					formatter: function(dimLabel, dimValue) {
						var totalDataSet = me.getTotalDataset();
						if (!totalDataSet)
							return "";

						// It would be great if the Donut chart would provide this
						var data = totalDataSet.getBinding("data");
						if (!data)
							return "";

						data.getContexts(0, count);

						return "";
					}
				}
			}),
			measures: [
				new MeasureDefinition({
					name: measureField,
					value: measureField
				})
			]
		});

		var binding = totalDataSet.getBinding("data");
		if (binding) // manually trigger
			binding.getContexts(0, count);

		return totalDataSet;
	};

	FilterItemChartDonut.prototype._getChartDataSet = function(entityName, filterList, measureField, dimField, dimFieldDisplay) {
		var me = this;
		var count = 3;

		var chartDataSet = new FlattenedDataset({
			data: {
				path: "/" + entityName
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: {
					parts: [dimFieldDisplay, this._percentField],
					formatter: function(dimLabel, percent) {
						var chartDataSet = me._chart.getDataset();
						if (!chartDataSet)
							return "";

						// It would be great if the Donut chart would provide this
						var data = chartDataSet.getBinding("data");
						if (!data)
							return "";
						data.getContexts(0, count);

						return dimLabel + ": " + percent + "%";
					}
				}
			}),
			measures: [
				new MeasureDefinition({
					name: this._measureScaledField,
					value: {
						path: this._measureScaledField,
						formatter: function(valScaled) {
							return valScaled;
						}
					}
				})
			]
		});

		return chartDataSet;
	};

	FilterItemChartDonut.prototype._getMaxScaleFactor = function(contextList, field) {
		var max;
		for (var i = 0; i < contextList.length; i++) {
			var context = contextList[i];
			var val = Math.abs(parseFloat(context.getObject(field)));
			max = i == 0 ? val : Math.max(max, val);
		}

		return this._getScaleFactor(max); // get the scale factor from the max
	};

	FilterItemChartDonut.prototype._onDataReceived = function(ev) {
		//Update binding is setting chart busy status to true.
		//It will set back to false only after rendering – since there is no data it will bypass the rendering so we have set the busy status to false.
		if (ev.getParameter('data').results.length === 0) {
			this._chart.setBusy(false);
			return;
		}

		//Both top records and total has to be ready
		if (!(this._totalReady && this._topTwoReady))
			return;
		var dataSet = this.getDataset();
		var totalDataSet = this.getTotalDataset(totalDataSet);
		if (!dataSet || !totalDataSet)
			return;

		// Combine the existing model and the "Other" category
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var measureField = this.getMeasureField();
		var unitField = this.getUnitField();
		var propList = [
			dimField,
			dimFieldDisplay,
			measureField,
			unitField
		];

		var combinedDataList = [];

		var totalContextList = totalDataSet.getBinding("data").getContexts(0, 1);
		if (totalContextList.length != 1)
			return;

		var totalContext = totalContextList[0];

		var contextList = dataSet.getBinding("data").getContexts();
		// If more than three chart slections then add only top two to the combinedDataList.
		// And add Others as the third item to the list
		var iContextLength = contextList.length > 3 ? 2 : contextList.length;

		var otherVal = parseFloat(totalContext.getObject(measureField));
		var totalScaled = parseFloat(totalContext.getObject(measureField));
		var sumDataScaled = 0;

		for (var i = 0; i < iContextLength; i++) {
			var context = contextList[i];
			var rowObj = {};
			for (var j = 0; j < propList.length; j++) {
				var prop = propList[j];
				rowObj[prop] = context.getObject(prop);

				if (prop == measureField) {
					rowObj[this._measureScaledField] = rowObj[prop]; // scale so rounding can affect the sum and apply to the "Other" category so no discrepency
				}
			}

			combinedDataList.push(rowObj);

			sumDataScaled += parseFloat(rowObj[this._measureScaledField]);
			otherVal -= parseFloat(rowObj[measureField]);
		}

		// Adjust the total to account for when it is less than the sum
		//if (totalScaled < sumDataScaled)
			//totalScaled = totalScaled + sumDataScaled;

		if (contextList.length > 3) { // Only add Other if more than 3 chart selections
			var i18nModel = this.getModel("i18n");

			var rowObj = {};
			rowObj[this._otherField] = true;
			rowObj[dimField] = this._otherID;
			rowObj[dimFieldDisplay] = i18nModel ? i18nModel.getResourceBundle().getText("VIS_FILTER_DONUT_OTHER") : "";
			rowObj[measureField] = otherVal;
			rowObj[this._measureScaledField] = totalScaled - sumDataScaled;
			rowObj[unitField] = ""; // can't say, could be anything

			combinedDataList.push(rowObj);
		}

		// Calculate percentage based on scaled value (will be different than absolute value)

		var fixedInteger = sap.ui.core.format.NumberFormat.getFloatInstance({
			style: "short",
			minFractionDigits: this._minFractionalDigits,
			maxFractionDigits: this._maxFractionalDigits
		});

		for (var i = 0; i < combinedDataList.length; i++) {
			var percentVal = combinedDataList[i][this._measureScaledField] / totalScaled * 100;
			combinedDataList[i][this._percentField] = fixedInteger.format(percentVal); // round value
			//combinedDataList[i][this._percentField] = percentVal.toFixed(2); // round value
		}
		//unit determination
		if (combinedDataList){
			this._determineUnit(combinedDataList);
		}
		var combinedData = {};
		var entityName = this.getEntitySet();

		combinedData[entityName] = combinedDataList;

		this._chart.setModel(new JSONModel(combinedData));

		FilterItemChart.prototype._onDataReceived.apply(this, arguments);

		this._totalReady = false;
		this._topTwoReady = false;

		this._chart.rerender();
	};

	FilterItemChartDonut.prototype._getScaledValue = function(val, scaleFactor, keepSign) {
		var decimalShift = this._maxFractionalDigits * 10;

		var floatVal = keepSign ? parseFloat(val) : Math.abs(parseFloat(val));
		var scaledVal = Math.round(floatVal * decimalShift / scaleFactor) / decimalShift;
		return scaledVal;
	};

	FilterItemChartDonut.prototype._onTotalReceived = function(ev) {
		this._totalReady = true;

		this._onDataReceived(ev);
	};

	FilterItemChartDonut.prototype._onChartSelectData = function(ev) {
		var dimField = this.getDimensionField(); // although the display field key, actually the technical field key... due to setting the displayValue in the DimensionDefinition.  A little strange.
		var selectionList = this._chart.vizSelection();

		var binding = this._chart.getDataset().getBinding("data");
		var resetSelection = false;
		var points = [];
		for (var i = 0; i < selectionList.length; i++) {
			var selection = selectionList[i].data;

			var rowObj = binding.getContexts(selection._context_row_number, 1)[0].getObject();
			if (rowObj[this._otherField]) {
				// Cannot support the "Other" selection due to limitations on the Filter critera supported by SAP's Gateway implementation of OData/BI
				// So unselect
				resetSelection = true;
				selectionList.splice(i, 1);
			}
			else {
				var data = {};

				data[dimField] = selection[dimField];
				points.push({
					data: data
				});
			}
		}

		if (resetSelection) {
			var i18nModel = this.getModel("i18n");
			var dimFieldDisplay = this.getDimensionFieldDisplay();
			var points = [];
			var data = {};

			if (dimField === dimFieldDisplay) {
				data[dimField] = i18nModel ? i18nModel.getResourceBundle().getText("VIS_FILTER_DONUT_OTHER") : "";
			} else {
				data[dimFieldDisplay] = this._otherID;
			}

			points.push({
				data: data
			});
			this._ignoreNextSelectionChange = true; // ignore the deselect, else refilter
			this._chart.vizSelection(points, {deselection: true});
			this._chart.rerender();
		}
		else {
			FilterItemChart.prototype._onChartSelectData.apply(this, arguments);
		}
	};

	return FilterItemChartDonut;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartDonut.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartLine') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.viz.ui5.controls.VizFrame'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.VizFrameRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.FlattenedDataset'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.DimensionDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.MeasureDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.common.feeds.FeedItem'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.format.ChartFormatter'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.api.env.Format'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartLine",[
	"sap/viz/ui5/controls/VizFrame", "sap/viz/ui5/controls/VizFrameRenderer", "sap/viz/ui5/data/FlattenedDataset", "sap/viz/ui5/data/DimensionDefinition", "sap/viz/ui5/data/MeasureDefinition", "sap/viz/ui5/controls/common/feeds/FeedItem",
	"sap/viz/ui5/format/ChartFormatter", "sap/viz/ui5/api/env/Format",
	"sap/ui/model/Sorter",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChart",
	"sap/ui/model/json/JSONModel"
],
function(VizFrame, VizFrameRenderer, FlattenedDataset, DimensionDefinition, MeasureDefinition, FeedItem,
		ChartFormatter, Format,
		Sorter,
		FilterItemChart,
		JSONModel) {
	"use strict";

	var FilterItemChartLine = FilterItemChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartLine", {
		metadata: {
			properties: {
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 },
				fixedCount: {type: "int", defaultValue: 6}
			},
			aggregations: {
				dataset: {type: "sap.viz.ui5.data.Dataset", multiple : false}
			}
		},

		renderer: {}
	});

	FilterItemChartLine.prototype.init = function() {
		// Too many issues with using the Smart Chart, toolbar, duplicate ids, ... so use the VisFrame directly
		this._chart = new VizFrame({
			vizType: "line",
			legendVisible: false
		});
		this.setControl(this._chart);

		this._chart.setModel(new JSONModel()); // set the chart's model to a JSON model initially so that the binding doesn't trigger an OData request

		this._generateFiller = true;
		this._sorters = [];
		FilterItemChart.prototype.init.apply(this, arguments);
	};

	FilterItemChartLine.prototype._updateBinding = function() {
		// Make sure all binding are available
		var entityName = this.getEntitySet();
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var isDateTime = this.getDimensionFieldIsDateTime();
		var measureField = this.getMeasureField();
		var unitField = this.getUnitField();
		var filter = this.getDimensionFilterExternal();
		var aSortOrder = [], aSortFields = [];
		aSortOrder = this.getSortOrder();
		var oSortObject = FilterItemChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;
		if (!entityName || !measureField || !dimField || !dimFieldDisplay) // All fields must be present
			return;

		var chartTypeChange = false;
		// If the dimension is of type dateTime, the different chart type
		if (isDateTime && this._chart.getVizType() != "timeseries_line") {
			this._chart = new VizFrame({
				vizType: "timeseries_line",
				legendVisible: false
			});

			chartTypeChange = true;
		}
		else if (!isDateTime && this._chart.getVizType() != "line") {
			this._chart = new VizFrame({
				vizType: "line",
				legendVisible: false
			});

			chartTypeChange = true;
		}

		if (chartTypeChange) { // reinitialize
			this.setControl(this._chart);

			this._chart.setWidth(this.getWidth());
			this._chart.setHeight(this.getHeight());

			this._attachChartEvents();
		}

		// Get the chart properties
		var vizProps = this._getVizProps(isDateTime);

		if (chartTypeChange || JSON.stringify(vizProps) != JSON.stringify(this.lastVizProps)) // diff objects, perhaps not the most efficient, but dealing with a small enough event, small and simple structure that this won't significantly impact performance
			this._chart.setVizProperties(vizProps);
		this.lastVizProps = vizProps;

		// Create the required Feed entries for the Chart
		var feedList = this._chart.getFeeds();
		var createFeeds = true;
		if (feedList && feedList.length == 2) {
			// check if the values set on the feed match
			var dimFeed = feedList[0]; // Dimension
			var measureFeed = feedList[1]; // Measure
			createFeeds = dimFeed.getValues() != dimFieldDisplay || measureFeed.getValues() != measureField;
		}

		if (chartTypeChange || createFeeds) {
			this._chart.removeAllFeeds(); // Clear any previously set feeds
			// since dimension and measure for filter item will always be a string
			// but FeedItem expects an array of strings
			var dimFieldArray = [dimFieldDisplay],
				measureFieldArray = [measureField];
			this._chart.addFeed(
				new FeedItem({
					"uid": isDateTime ? "timeAxis" : "categoryAxis",
					"type": "Dimension",
					"values": dimFieldArray
				})
			);

			this._chart.addFeed(
				new FeedItem({
					"uid": "valueAxis",
					"type": "Measure",
					"values": measureFieldArray
				})
			);
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay)
			selectFields.push(dimFieldDisplay);

		if (unitField)
			selectFields.push(unitField);

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length > 0)
			filterList = [filter];

		this.setDataset(this._getDataSet(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay));
		this._chart.setDataset(this._getChartDataSet(entityName, filterList, measureField, dimField, dimFieldDisplay));

		this._applyDimensionFilter();

		this._chart.setBusy(true);
	};

	FilterItemChartLine.prototype._getVizProps = function(isDateTime) {
		var vizProps;

		if (isDateTime) {
			vizProps = {
				general: {
					background: {
						color: "transparent"
					},
					layout: {
						padding: 0
					}
				},
				plotArea: {
					colorPalette: ["#006ca7"], // TODO: read palette from variables based on theme
					dataLabel: {
						formatString: this._formattingId,
						visible: true
					},
					window: {
						start: "firstDataPoint",
						end: "lastDataPoint"
					},
					gridline: { visible: false },
					background: {
						color: "transparent"
					}
				},
				valueAxis: { visible: false },
				timeAxis: {
					title:    { visible: false },
					axisTick: { visible: false },
					hoverShadow: {
						color: "transparent"
					},
					levels: [
						"day",
						"month"
					],
					levelConfig: {
						year: {
							visible: false
						}
					}
				},
				tooltip: { visible: false },
				title:   { visible: false },
				interaction: {
					selectability: {
						mode: "MULTIPLE"
					},
					enableDeselectAll: false
				}
			};
		}
		else {
			vizProps = {
				general: {
					background: {
						color: "transparent"
					},
					layout: {
						padding: 0
					}
				},
				plotArea: {
					colorPalette: ["#006ca7"], // TODO: read palette from variables based on theme
					dataLabel: {
						formatString: this._formattingId,
						visible: true,
						position: "inside"
					},
					gridline: { visible: false },
					background: {
						color: "transparent"
					}
				},
				valueAxis: { visible: false },
				categoryAxis: {
					title:    { visible: false },
					axisTick: { visible: false },
					hoverShadow: {
						color: "transparent"
					},
					label: {
						angle: 0,
						rotation: "auto"
					}
				},
				tooltip: { visible: false },
				title:   { visible: false },
				interaction: {
					selectability: {
						mode: "MULTIPLE"
					},
					enableDeselectAll: false
				}
			};
		}

		return vizProps;
	};

	FilterItemChartLine.prototype._getDataSet = function(entityName, selectFields, filterList, measureField, dimField, dimFieldDisplay) {
		var me = this;
		var count = this.getFixedCount();
		var isDateTime = this.getDimensionFieldIsDateTime();
		var dataSet = new FlattenedDataset({
			data: {
				path: "/" + entityName,
				startIndex: 0,
				length: count,
				sorter: this._sorters, // Not declarable (doesn't take effect if an instance of the Sorter is not provided)
				filters: filterList,
				parameters: {
					select: selectFields.join(",")
				},
				events: {
					dataReceived: function(ev) {
						me._onDataReceived(ev);
					}
				}
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: { // Without this formatter and the subsequent call to data.GetContexts the "dataReceived" event will not be triggered
					parts: [dimFieldDisplay, measureField],
					formatter: function(dimLabel, dimValue) {
						var dataSet = me.getDataset();
						if (!dataSet)
							return "";

						// It would be great if the Donut chart would provide this
						var data = dataSet.getBinding("data");
						if (!data)
							return "";

						data.getContexts(0, count);

						return "";
					}
				},
				dataType: isDateTime ? "date" : "string"
			}),
			measures: [
				new MeasureDefinition({
					name: measureField,
					value: "{" + measureField + "}"
				})
			]
		});

		var binding = dataSet.getBinding("data");
		if (binding) // manually trigger
			binding.getContexts(0, count);

		return dataSet;
	};

	FilterItemChartLine.prototype._getChartDataSet = function(entityName, filterList, measureField, dimField, dimFieldDisplay) {
		var isDateTime = this.getDimensionFieldIsDateTime();

		var chartDataSet = new FlattenedDataset({
			data: {
				path: "/" + entityName
			},
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: {
					parts: [dimFieldDisplay],
					formatter: function(dimLabel) {
						return dimLabel && typeof dimLabel == "string" && dimLabel.indexOf("__DUMMY_") == 0 ? "" : dimLabel;
					}
				},
				dataType: isDateTime ? "date" : "string"
			}),
			measures: [
				new MeasureDefinition({
					name: measureField,
					value: "{" + measureField + "}"
				})
			]
		});

		return chartDataSet;
	};

	FilterItemChartLine.prototype._onDataReceived = function(ev) {
		var dataSet = this.getDataset();
		if (!dataSet)
			return;

		// Copy the existing model and the missing data
		var propList = this._propsToCopy();
		var dataList = [];

		// Copy from the request context to the local data to be stored in a json model
		var count = this.getFixedCount();
		var contextList = dataSet.getBinding("data").getContexts(0, count);
		for (var i = 0; i < contextList.length; i++) {
			var context = contextList[i];
			var rowObj = {};
			for (var j = 0; j < propList.length; j++) {
				var prop = propList[j];
				rowObj[prop] = context.getObject(prop);
			}

			dataList.push(rowObj);
		}

		// Fill in missing data, always want the fixed count (i.e. 6 points in the line)
		if (this._generateFiller) {
			if (this.getDimensionFieldIsDateTime())
				dataList = this._generateDateTimeFiller(contextList, dataList, count);
			else
				dataList = this._generateStringFiller(contextList, dataList, count);
		}

		// Adjust to fit data
		this._adjustMinMax(dataList);

		var data = {};
		var entityName = this.getEntitySet();

		data[entityName] = dataList;

		this._chart.setModel(new JSONModel(data));

		FilterItemChart.prototype._onDataReceived.apply(this, arguments);

		this._chart.rerender();
	};

	FilterItemChartLine.prototype._adjustMinMax = function(dataList) {
		// Workaround for values getting clipped on the top and bottom of the plotArea, determine min/max and create enough buffer that they won't be clipped
		var measureField = this.getMeasureField();
		var min = 0;
		var max = 100;

		for (var i = 0; i < dataList.length; i++) {
			var rowObj = dataList[i];
			var val = parseFloat(rowObj[measureField]);
			if (isNaN(val))
				val = 0;
			if (i == 0) {
				min = max = val;
			}
			else {
				min = Math.min(min, val);
				max = Math.max(max, val);
			}
		}

		// based on the height, calculate a buffer
		var height = parseInt(this.getHeight(), 10) * 0.4; // remove the height taken up by the axis
		var diff = max - min;
		var bufferHeight = 2;
		if (diff != 0) {
			var percent = (height - 2 * bufferHeight) / height; // buffer (top bottom) * height
			var bufferVal = (diff - diff * percent) / 2;
			min -= bufferVal;
			max += bufferVal;
		}

		this._chart.setVizScales([{
			feed: "valueAxis",
			min: min,
			max: max
		}]);
	};

	FilterItemChartLine.prototype._propsToCopy = function() {
		var propList = [
			this.getDimensionField(),
			this.getDimensionFieldDisplay(),
			this.getMeasureField(),
			this.getUnitField()
		];

		return propList;
	};

	FilterItemChartLine.prototype._generateDateTimeFiller = function(contextList, dataList, count) {
		var dimField = this.getDimensionField();

		var periodIncrementFn = this._getPeriodIncrementFn();

		// List is already sorted, starting point is always today, need to work back from today and find the 6 matching entries (may not be included in the result set)
		var date = new Date();
		date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
//		var date = new Date(1446249600000); // test date for EASI service

		var firstDate = date;
		var lastDate = date;

		var resultIndex = 0;
		var fixedDateList = [];
		for (var i = 0; i < count; i++) {
			// see if the date is in the result dataList
			var rowObj = null;
			if (resultIndex < dataList.length) {
				var resultDate = dataList[resultIndex][dimField];

				if (date.getUTCFullYear() == resultDate.getUTCFullYear() && date.getUTCMonth() == resultDate.getUTCMonth() && date.getUTCDate() == resultDate.getUTCDate()) {
					// Then date matches, so use its value here instead of dummy
					rowObj = dataList[resultIndex];

					// Restrict to Year, Month, Day
					dataList[resultIndex][dimField] = new Date(resultDate.getUTCFullYear(), resultDate.getUTCMonth(), resultDate.getUTCDate());
					resultIndex++;
				}
			}

			if (!rowObj) { // Add dummy
				rowObj = this._createDummyRowDate(date);
			}

			fixedDateList.splice(0, 0, rowObj);

			lastDate = date;

			date = periodIncrementFn.apply(this, [date]);
		}

		// Add buffer so the first and last dates are not clipped by the plotting area
		var firstBuffer = periodIncrementFn.apply(this, [firstDate, true]);

		var rowObj = this._createDummyRowDate(firstBuffer);
		fixedDateList.splice(0, 0, rowObj);

		var lastBuffer = periodIncrementFn.apply(this, [lastDate, false, true]);

		var rowObj = this._createDummyRowDate(lastBuffer);
		fixedDateList.push(rowObj);

		return fixedDateList;
	};

	FilterItemChartLine.prototype._createDummyRowDate = function(date) {
		var propList = this._propsToCopy();
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var measureField = this.getMeasureField();

		var rowObj = {};
		for (var j = 0; j < propList.length; j++) {
			var prop = propList[j];
			rowObj[prop] = ""; // set to empty
		}

		rowObj[dimField] = date;
		rowObj[dimFieldDisplay] = date;
		rowObj[measureField] = null;

		return rowObj;
	};

	FilterItemChartLine.prototype._getPeriodIncrementFn = function() {
		var bDecrease = this.getMeasureSortDescending();

		// Don't have a fixed period, for now can only assume single day, should come through a setting (via annotation)
		var dayPeriodFn = function(date, bOpposite, bHalfInc) {
			var ms = date.getTime();

			var factor = (bDecrease ? -1 : 1);
			if (bOpposite)
				factor *= -1;

			ms = ms + factor * (bHalfInc ? 86400000 / 4 : 86400000);
			return new Date(ms);
		};

		return dayPeriodFn;
	};

	FilterItemChartLine.prototype._generateStringFiller = function(contextList, dataList, count) {
		var propList = this._propsToCopy();
		var dimField = this.getDimensionField();

		// check that the list contains the required amount, if not add more blank entries
		for (var i = contextList.length; i < count; i++) {
			var rowObj = {};
			for (var j = 0; j < propList.length; j++) {
				var prop = propList[j];
				rowObj[prop] = ""; // set to empty
			}

			rowObj[dimField] = "__DUMMY_" + i;

			dataList.splice(0, 0, rowObj);
		}

		return dataList;
	};

	return FilterItemChartLine;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemChartLine.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveBarChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveBarChartBar'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.common.feeds.FeedItem'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.FlattenedDataset'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.DimensionDefinition'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.data.MeasureDefinition'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroBar",["sap/suite/ui/microchart/InteractiveBarChart",
	"sap/suite/ui/microchart/InteractiveBarChartBar",
	"sap/viz/ui5/controls/common/feeds/FeedItem",
	"sap/viz/ui5/data/FlattenedDataset",
	"sap/ui/model/Sorter",
	"sap/viz/ui5/data/DimensionDefinition",
	"sap/viz/ui5/data/MeasureDefinition"],
	function(InteractiveBarChart, InteractiveBarChartBar, FeedItem, FlattenedDataset, Sorter, DimensionDefinition, MeasureDefinition) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItemMicroBar = InteractiveBarChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar", {
		metadata: {
			properties: {
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				dimensionField: { type: "string", group: "Misc", defaultValue: null },
				dimensionFieldIsDateTime: { type: "boolean", group: "Misc", defaultValue: false },
				dimensionFieldDisplay: { type: "string", group: "Misc", defaultValue: null },
				dimensionFilter: { type: "string[]", group: "Misc", defaultValue: null },
				dimensionFilterExternal: { type: "sap.ui.model.Filter", group: "Misc", defaultValue: null },
				measureField: { type: "string", group: "Misc", defaultValue: null },
				measureSortDescending: { type: "boolean", group: "Misc", defaultValue: false },
				unitField: { type: "string", group: "Misc", defaultValue: null },
				width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 }
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveBarChart", multiple: false}
			},
			events: {
				filterChange: {},
				unitChange: {}
			}
		},
		renderer: function(oRm, oControl) {
			oRm.renderControl(oControl.getAggregation("control"));
		}
	});

	FilterItemMicroBar.prototype.init = function() {
		var oBar = new InteractiveBarChartBar({
			label : "S/4 Hana Implementations",
			value : 20
		});

		// Too many issues with using the Smart Chart, toolbar, duplicate ids, ... so use the VisFrame directly
		this._chart = new sap.suite.ui.microchart.InteractiveBarChart({
			maxDisplayedSegemnts : 3,
			selectionEnabled : true,
			bars : [
				oBar.clone(), oBar.clone(), oBar.clone()
			],
			min: 0,
			max: 100
		});
		this.setControl(this._chart);

		this._attachChartEvents();
	};

	FilterItemMicroBar.prototype._attachChartEvents = function() {
		if (this._chart.onAfterRendering) {
			var origOnAfterRendering = this._chart.onAfterRendering;
			var me = this;

			this._chart.onAfterRendering = function() {
				origOnAfterRendering.apply(this, arguments);

				// apply selection
				//me._applyDimensionFilter();
				me._chart.setBusy(false);
			};
		}

		// this._chart.attachSelectData(this._onChartSelectData, this);
		// this._chart.attachDeselectData(this._onChartDeselectData, this);
	};

	FilterItemMicroBar.prototype.setWidth = function(width) {
		this.setProperty("width", width);
		//this._chart.setWidth(width);
	};

	FilterItemMicroBar.prototype.setHeight = function(height) {
		this.setProperty("height", height);
		//this._chart.setHeight(height);
	};

	FilterItemMicroBar.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setDimensionField = function(dimensionField) {
		this.setProperty("dimensionField", dimensionField);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setDimensionFieldIsDateTime = function(dimensionFieldIsDateTime) {
		this._isDateTimeChanged = this.getDimensionFieldIsDateTime() != dimensionFieldIsDateTime;
		this.setProperty("dimensionFieldIsDateTime", dimensionFieldIsDateTime);
		this._updateBinding();
		this._isDateTimeChanged = false;
	};

	FilterItemMicroBar.prototype.setDimensionFieldDisplay = function(dimensionFieldDisplay) {
		this.setProperty("dimensionFieldDisplay", dimensionFieldDisplay);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setMeasureField = function(measureField) {
		this.setProperty("measureField", measureField);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setMeasureSortDescending = function(measureSortDescending) {
		this.setProperty("measureSortDescending", measureSortDescending);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setUnitField = function(unitField) {
		this.setProperty("unitField", unitField);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.setDimensionFilterExternal = function(filter) {
		this.setProperty("dimensionFilterExternal", filter);
		this._updateBinding();
	};

	FilterItemMicroBar.prototype.getP13NConfig = function() {
		var propList = [
			"width", "height",
			"entitySet", "dimensionField", "dimensionFieldDisplay", "dimensionFieldIsDateTime", "dimensionFilter", "measureField", "measureSortDescending"
		];

		// simple properties
		var config = {};
		for (var i = 0; i < propList.length; i++) {
			var name = propList[i];
			config[name] = this.getProperty(name);
		}

		return config;
	};

	FilterItemMicroBar.prototype.setDimensionFilter = function(dimFilter) {
		this.setProperty("dimensionFilter", dimFilter);

		//this._applyDimensionFilter();
	};

	FilterItemMicroBar.prototype._updateBinding = function() {
		// Make sure all binding are available
		var entityName = this.getEntitySet();
		var dimField = this.getDimensionField();
		var dimFieldDisplay = this.getDimensionFieldDisplay();
		var measureField = this.getMeasureField();
		var unitField = this.getUnitField();
		var filter = this.getDimensionFilterExternal();

		if (!entityName || !measureField || !dimField || !dimFieldDisplay) // All fields must be present
			return;

		// Create the required Feed entries for the Chart
		var feedList = this._chart.getFeeds();
		var createFeeds = true;
		if (feedList && feedList.length == 2) {
			// check if the values set on the feed match
			var dimFeed = feedList[0]; // Dimension
			var measureFeed = feedList[1]; // Measure
			createFeeds = dimFeed.getValues() != dimFieldDisplay || measureFeed.getValues() != measureField;
		}

		if (createFeeds) {
			this._chart.removeAllFeeds(); // Clear any previously set feeds
			this._chart.addFeed(
				new FeedItem({
					"uid": "categoryAxis",
					"type": "Dimension",
					"values": dimFieldDisplay
				})
			);

			this._chart.addFeed(
				new FeedItem({
					"uid": "valueAxis",
					"type": "Measure",
					"values": measureField
				})
			);
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField];

		if (dimField != dimFieldDisplay)
			selectFields.push(dimFieldDisplay);

		if (unitField)
			selectFields.push(unitField);

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length > 0)
			filterList = [filter];

		var me = this;
		var count = 3;
		var measureSortDescending = this.getMeasureSortDescending();

		var dataBinding = {
			path: "/" + entityName,
			startIndex: 0,
			length: count,
			sorter: new Sorter(measureField, measureSortDescending), // Not declarable (doesn't take effect if an instance of the Sorter is not provided)
			filters: filterList,
			parameters: {
				select: selectFields.join(",")
			},
			events: {
				dataReceived: function(ev) {
					me._onDataReceived(ev);
				}
			}
		};

		var dataSet = new FlattenedDataset({
			data: dataBinding,
			dimensions: new DimensionDefinition({
				name: dimFieldDisplay,
				value: "{" + dimField + "}",
				displayValue: "{" + dimFieldDisplay + "}"
			}),
			measures: [
				new MeasureDefinition({
					"name": measureField,
					"value": "{" + measureField + "}"
				})
			]
		});
		this._chart.setDataset(dataSet);

		this._applyDimensionFilter();

		var binding = dataSet.getBinding("data");
		if (binding) // manually trigger
			binding.getContexts(0, count);

		this._chart.setBusy(true);
	};

	FilterItemMicroBar.prototype._onDataReceived = function(ev) {
		var data = ev.getParameter("data");
		var unitField = this.getUnitField();
		if (!data || !data.results || !unitField) {
			this._applyUnitValue("");
			return;
		}

		var prevVal = "";
		for (var i = 0; i < data.results.length; i++) {
			var unit = data.results[i][unitField];
			if (!unit || (prevVal && unit != prevVal)) {
				this._applyUnitValue("");
				return;
			}

			prevVal = unit;
		}

		this._applyUnitValue(prevVal);
	};

	FilterItemMicroBar.prototype._applyUnitValue = function(val) {
		if (this._lastUnit != val) {
			this._lastUnit = val;
			//TODO RC Check with Vincent what is this function do?
			this.fireUnitChange({unitValue: val});
		}
	};


	return FilterItemMicroBar;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveDonutChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveDonutChartSegment'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroDonut",["sap/suite/ui/microchart/InteractiveDonutChart",
	"sap/suite/ui/microchart/InteractiveDonutChartSegment"],
	function(InteractiveDonutChart, InteractiveDonutChartSegment) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItemMicroDonut = InteractiveDonutChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut", {
		metadata: {
			properties: {
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				dimensionField: { type: "string", group: "Misc", defaultValue: null },
				dimensionFieldIsDateTime: { type: "boolean", group: "Misc", defaultValue: false },
				dimensionFieldDisplay: { type: "string", group: "Misc", defaultValue: null },
				dimensionFilter: { type: "string[]", group: "Misc", defaultValue: null },
				dimensionFilterExternal: { type: "sap.ui.model.Filter", group: "Misc", defaultValue: null },
				measureField: { type: "string", group: "Misc", defaultValue: null },
				measureSortDescending: { type: "boolean", group: "Misc", defaultValue: false },
				unitField: { type: "string", group: "Misc", defaultValue: null },
				width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 }
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveDonutChart", multiple: false}
			},
			events: {
				filterChange: {},
				unitChange: {}
			}
		},
		renderer: function(oRm, oControl) {
			oRm.renderControl(oControl.getAggregation("control"));
		}
	});

	FilterItemMicroDonut.prototype.init = function() {
		var oSegment = new sap.suite.ui.microchart.InteractiveDonutChartSegment({
			label : "Phase 1",
			value : 20
		});

		this._chart = new sap.suite.ui.microchart.InteractiveDonutChart({
			maxDisplayedSegemnts : 3,
			selectionEnabled : true,
			segments : [
				oSegment.clone(), oSegment.clone(), oSegment.clone().setLabel("others")
			]
		});

		this.setControl(this._chart);
	};

	FilterItemMicroDonut.prototype.setWidth = function(width) {
		this.setProperty("width", width);
		//this._chart.setWidth(width);
	};

	FilterItemMicroDonut.prototype.setHeight = function(height) {
		this.setProperty("height", height);
		//this._chart.setHeight(height);
	};


	return FilterItemMicroDonut;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroDonut.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveLineChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveLineChartPoint'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroLine",["sap/suite/ui/microchart/InteractiveLineChart",
	"sap/suite/ui/microchart/InteractiveLineChartPoint"],
	function(InteractiveLineChart, InteractiveLineChartPoint) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItemMicroLine = InteractiveLineChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine", {
		metadata: {
			properties: {
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				dimensionField: { type: "string", group: "Misc", defaultValue: null },
				dimensionFieldIsDateTime: { type: "boolean", group: "Misc", defaultValue: false },
				dimensionFieldDisplay: { type: "string", group: "Misc", defaultValue: null },
				dimensionFilter: { type: "string[]", group: "Misc", defaultValue: null },
				dimensionFilterExternal: { type: "sap.ui.model.Filter", group: "Misc", defaultValue: null },
				measureField: { type: "string", group: "Misc", defaultValue: null },
				measureSortDescending: { type: "boolean", group: "Misc", defaultValue: false },
				unitField: { type: "string", group: "Misc", defaultValue: null },
				width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 }
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveLineChart", multiple: false}
			},
			events: {
				filterChange: {},
				unitChange: {}
			}
		},
		renderer: function(oRm, oControl) {
			oRm.renderControl(oControl.getAggregation("control"));
		}
	});

	FilterItemMicroLine.prototype.init = function() {
		var oPoint = new sap.suite.ui.microchart.InteractiveLineChartPoint({
			label : "May",
			value : 40,
			unit : "%"
		});

		this._chart = new sap.suite.ui.microchart.InteractiveLineChart({
			maxDisplayedPoints : 6,
			selectionEnabled : true,
			points : [
				oPoint, oPoint.clone(), oPoint.clone(),
				oPoint.clone(), oPoint.clone(), oPoint.clone()
			]
		});

		this.setControl(this._chart);
	};

	FilterItemMicroLine.prototype.setWidth = function(width) {
		this.setProperty("width", width);
		//this._chart.setWidth(width);
	};

	FilterItemMicroLine.prototype.setHeight = function(height) {
		this.setProperty("height", height);
		//this._chart.setHeight(height);
	};


	return FilterItemMicroLine;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroLine.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController') ) {
/* global $ */
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.personalization.Util'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterType'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController",[
		"sap/ui/base/EventProvider",
		"sap/ui/comp/personalization/Util",
		"sap/ui/table/AnalyticalTable",
		"sap/ui/core/mvc/Controller",
		"sap/ui/model/FilterType"
	],
    function(EventProvider, PersonalizationControllerUtil, AnalyticalTable, Controller, FilterType) {
		"use strict";
		var eventProvider = new EventProvider();

		var tController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController", {
			setState: function(oState) {
				var me = this;
				this.oState = oState;

				this._enableExpandByFilter = true;
				this._enableUpdateExpandLevelInfo = false;
				this._isRebindTriggeredByChart = false;

				var smartTable = this.oState.oSmartTable;
				var table = smartTable.getTable();
				table.attachEvent("_rowsUpdated", function(ev) {
					me._updateRows("_rowsUpdated");
				});

				var oComponent = this.oState.oController.getOwnerComponent();
				//Default to filter behavior instead of highlight
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/autoHide', oComponent.getAutoHide() ? "filter" : "highlight");

				smartTable.attachInitialise(this._onSmartTableInit, this);
				smartTable.attachBeforeRebindTable(this._onBeforeRebindTable, this);

				// Since the SmartTable in this detail area is not directly connected to the SmartFilterBar, we need to intercept some of the regular events which
				// would cause an overlay to show on the SmartTable and simulate a direct connection.
				/*var origTableShowOverlay = this.oState.oSmartTable._showOverlay;
				this.oState.oSmartTable._showOverlay = function() {
					origTableShowOverlay.apply(me.oState.oSmartTable, arguments);
					smartTable._showOverlay.apply(smartTable, arguments);
				};*/
			},
			_onSmartTableInit: function() {
				var smartTable = this.oState.oSmartTable,
					toolbar = smartTable.getCustomToolbar(),
					oToolBarcontent = toolbar.getContent(),
					nSettingsLength ;

				//Adding view switch button to smart table toolbar
				//BUttons added here as opposed to XML because of maintaining their position in toolbar
				if (this.oState._pendingTableToolbarInit) {
					toolbar.insertContent(this.oState.alr_viewSwitchButtonOnTable, oToolBarcontent.length);
				}

				// Add to the SmartTable's toolbar to the left of the settings button.
				if ( this.oState._pendingTableToolbarInit ){
						// this block gets the position of the eye icon in the toolbar i.e just before the settins icon
						for (var i = 0; i < oToolBarcontent.length ;  i++) {
							if (oToolBarcontent[i].mProperties.text === "Settings") {
								nSettingsLength = i ;
                                                        }
						}
						toolbar.insertContent(this.oState._autoHideToggleBtn, nSettingsLength);
				}
				delete this.oState._pendingTableToolbarInit;

				//Disable the toolbars once search is triggered
				this.oState.oSmartTable.attachShowOverlay(function(oEvent){
					this.oState.oSmartTable.getCustomToolbar().setEnabled(!oEvent.getParameter("overlay").show);
				}, this);
			},
			_onBindingDataReceived: function() {
				var table = this.oState.oSmartTable.getTable();

				// check if table is analytical
				if (table instanceof AnalyticalTable) {
					// new data has arrived, expand if needed
					this._expandByFilter("bindingDataReceived");
				}
				if (!this.isFilter()) {
					this._applyParamsToTableAsHighlight("bindingDataReceived");
				}
			},
			/**
			 * Called before rebinding table
			 * @param  {Object} oEvent Event Object
			 */
			_onBeforeRebindTable: function(oEvent) {
				var variant = this.oState.oSmartTable.fetchVariant(),
					lastVariant = variant,
					changeObject = {};
				if (!variant)
					return;

				//To apply chart selections on the table without using _applyParamToTableAsFilters()
				if (this.isFilter())
					this._applyChartSelectionOnTableAsFilter(oEvent);

				// Update the chart with the personalization state
				// Get the list of grouped columns
				var groupList = [];
				var colList = this.oState.oSmartTable.getTable().getColumns();
				for (var i = 0; i < colList.length; i++) {
					var col = colList[i];
					//getGrouped is only available for Analytical Table
					if (col.getGrouped && col.getGrouped())
						groupList.push(col.getLeadingProperty ? col.getLeadingProperty() : PersonalizationControllerUtil.getColumnKey(col));
				}

				this._updateExpandLevelInfo(groupList);

				var sortList = [];
				if (variant.sort && variant.sort.sortItems) {
					for (var i = 0; i < variant.sort.sortItems.length; i++) {
						var isDescending = variant.sort.sortItems[i].operation === "Descending" ? true : false;
						sortList.push(new sap.ui.model.Sorter(variant.sort.sortItems[i].columnKey, isDescending));
					}
				} else if (!lastVariant.sort) { // check if last variant had sort, if not -> all sort removed from table
					changeObject.allTableSortRemoved = true;
				}

				this._isRebindTriggeredByChart = false;

				//Make sure views with paramters are working and change the tableBindingPath to the pattern parameterSet(params)/resultNavProp
				if (this.oState.oSmartFilterbar && this.oState.oSmartFilterbar.getAnalyticBindingPath && this.oState.oSmartFilterbar.getConsiderAnalyticalParameters()) {
					//catching an exception if no values are yet set.
					//TODO: This event actually shoudn't be called before mandatory fields are populated
					try {
						var sAnalyticalPath = this.oState.oSmartFilterbar.getAnalyticBindingPath();
						if (sAnalyticalPath) {
							this.oState.oSmartTable.setTableBindingPath(sAnalyticalPath);
						}
					} catch (e) {
						jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
					}
				}

				//Call controller extension
				this.oState.oController.onBeforeRebindTableExtension(oEvent);
			},
			///////////////////////
			// EVENT: TableChange
			///////////////////////
			attachTableChange: function(oData, fnFunction, oListener) {
				return eventProvider.attachEvent("TableChange", oData, fnFunction, oListener);
			},
			detachTableChange: function(fnFunction, oListener) {
				return eventProvider.detachEvent("TableChange", fnFunction, oListener);
			},
			/**
			 * Checks and confirm if autoHide mode is set for filter, if it is set for highlight then it will return false
			 * @return {Boolean} true for filter, false for highlight
			 */
			isFilter: function() {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				return oTemplatePrivate.getProperty("/alp/autoHide") === "filter";
			},
			applyParamsToTable: function() {
				this._isRebindTriggeredByChart = true;
				this.oState.oSmartTable.rebindTable();
			},
			_getBindingProperty: function(binding, name) {
				if (binding.getProperty) {
					return binding.getProperty(name);
				}
				else {
					var propList = binding.oEntityType.property;
					for (var i = 0; i < propList.length; i++) {
						if (propList[i].name == name)
							return propList[i];
					}

					return null;
				}
			},
			_isFilterDiff: function(f1, f2) {
				if ($.isArray(f1) != $.isArray(f2))
					return true;

				if ($.isArray(f1))
					return this._isFilterListDiff(f1, f2);
				else
					return this._isFilterObjDiff(f1, f2);
			},
			_isFilterObjDiff: function(f1, f2) {
				if (!f1 || !f2)
					return true;
				for (var a in f1) {
					if (a == "aFilters") {
						if (this._isFilterListDiff(f1.aFilters, f2.aFilters))
							return true;
					}
					else if (f1[a] != f2[a])
						return true;
				}

				return false;
			},
			_isFilterListDiff: function(fList1, fList2) {
				if (!fList1 || !fList2)
					return true;
				if (fList1.length != fList2.length)
					return true;

				for (var i = 0; i < fList1.length; i++) {
					var f1 = fList1[i];
					var f2 = fList2[i];

					if (this._isFilterObjDiff(f1, f2))
						return true;
				}

				return false;
			},
			_getPageFilters: function(oBinding) {
				var pageFilterList = this.oState.oSmartFilterbar.getFilters();

				for (var i = 0; i < pageFilterList.length; i++) {
					// in case there are more than one value in the filter
					// or the filter property is sap:filter-restriction="multi-value"
					if (pageFilterList[i].aFilters !== undefined) {

						var filterList = pageFilterList[i].aFilters;

						for (var j = 0; j < filterList.length; j++) {
							var filter = filterList[j];
							var name = filter.sPath;

							// Check if the filter exits
							if (!oBinding.getProperty(name)) {
								jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
								continue;
							}

							filter.sPath = name;
						}
					} else {
						// in case property with sap:filter-restriction="single-value" is the only value in the filter
						// if there are multiple properties with sap:filter-restriction="single-value" then it goes to if condition above
						var filter = pageFilterList[i];
						var name = filter.sPath;

						// Check if the filter exits
						if (!oBinding.getProperty(name)) {
							jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
							continue;
						}

						filter.sPath = name;

					}
				}

				return pageFilterList;
			},
			_applyParamsToTableAsHighlight: function(updateType) {
				if (!this.oState)
					return;
				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}
				var paramList = this._getSelParamsFromChart(chart);
				var dimNameList = chart.getVisibleDimensions();
				var lastSelected = this.oState.oSmartChart._lastSelected;
				var table = this.oState.oSmartTable.getTable();
				var binding = this._getTableBinding(table);
				if (!binding) { // if columns haven't been choosen then binding is undefined
					jQuery.sap.log.error("No table binding to apply the selection(s) to");
					return;
				}

				// get only those with actual binding values, filter out those without matching properties
				var paramListFiltered = [];
				for (var i = 0; i < paramList.length; i++) {
					var param = paramList[i];

					var paramMap = {};
					for (var name in param) { // all parameters must match
						// parameter must exist in the binding and the name must be in the dimension list
						if (dimNameList.indexOf(name) == -1 || !this._getBindingProperty(binding, name))
							continue;

						paramMap[name] = param[name];
					}

					paramListFiltered.push(paramMap);
				}

				//Add drill down filters for highlight
				var drillFiltersFromChart = this.oState.oSmartChart.getDrillStackFilters();
				drillFiltersFromChart.forEach(function(oFilter) {
					var name = oFilter.sPath,
						obj = {};
					obj[name] = oFilter.oValue1;
					paramListFiltered.push(obj);
				});

				if (!this._lastFilter) {
					this._lastFilter = binding.aApplicationFilter;
				}

				var pageFilters = this._getPageFilters(binding);
				if (this._isFilterDiff(this._lastFilter, pageFilters)) {
					binding.filter(pageFilters, FilterType.Application);
					this._lastFilter = pageFilters;
				}

				this._paramListFiltered = paramListFiltered;
				this._lastSelected = lastSelected;

				this._updateRows(updateType);
			},
			_expandByFilter: function(updateType) {
				if (!this._enableExpandByFilter)
					return;

				var table = this.oState.oSmartTable.getTable();

				var binding = this._getTableBinding(table);
				if (binding && this._lastBinding != binding) {
					var me = this;

					binding.attachDataReceived(this._onBindingDataReceived, this);
					binding.attachEvent("change", function(ev) {
						if (me._expandingProgrammatically) // then expansion triggered through the chart selection or data load, keep the current mode
							return;

						var reason = ev.getParameter("reason");
						if (reason == "expand" ||  reason == "collapse") // User triggered expansion, so don't sync Chart+Table
							me._inUserChartSelectMode = false;
					});
					this._lastBinding = binding;
				}

				// no way to distinquish rowUpdate events that are data driven or user driven, but these must be distinquished in order to properly handle setting the first visible row of the table.
				// For example, the two events of end user scrolling, or the expansion completion cannot be distinguished.  But the first visible row should only be set if the expansion operation has completed (may require a backend call).
				if (updateType == "selection" || updateType == "bindingDataReceived")
					this._firstVisibleRelevantEventTS = new Date().getTime();

				if (updateType == "selection") // User triggered selection in the chart, so sync Chart+Table
					this._inUserChartSelectMode = true;

				if (!this._inUserChartSelectMode)
					return;

				var rowList = this._getTableRows();
				for (var i = 0; i < rowList.length; i++) {
					var row = rowList[i];

					// see if the row should be expanded
					var bindingCtxt = row.getBindingContext();
					if (!bindingCtxt)
						continue;

					var rowIndex = table.getFirstVisibleRow() + i;
					if (this._isRowHighlighted(bindingCtxt.getObject())) { // Row should be expanded
						if (table.isExpanded(rowIndex)) // already expanded
							continue;

						// Row should be expanded and is currently not expanded.
						if (!row._bHasChildren) // not expandable
							continue;

						if (!binding.findNode(rowIndex)) // Not ready yet
							continue;

						this._expandingProgrammatically = true;
						table.expand(rowIndex);
						this._expandingProgrammatically = false;
					}
					else { // Row should be collapsed
						if (!table.isExpanded(rowIndex)) // already collapsed
							continue;

						// Row should be collapsed and is currently not expanded.
						if (!row._bHasChildren) // not collapsible
							continue;

						if (!binding.findNode(rowIndex)) // Not ready yet
							continue;

						this._expandingProgrammatically = true;
						table.collapse(rowIndex);
						this._expandingProgrammatically = false;
					}
				}

				// determine the first visible row, find the first highlightable row
				this._updateFirstVisibleRow(updateType);
			},
			_updateFirstVisibleRow: function(updateType) {
				var table = this.oState.oSmartTable.getTable();

				var binding = this._getTableBinding(table);
				var count = binding.getTotalSize();
				if (count == 0 || (new Date().getTime() - this._firstVisibleRelevantEventTS) > 250)
					return;

				var table = this.oState.oSmartTable.getTable();
				if (updateType == "selection" && (!this._paramListFiltered || this._paramListFiltered.length == 0)) { // deselect all
					table.setFirstVisibleRow(0);
					return;
				}

				var bindingCtxtList = binding.getContexts(0, count);
				for (var i = 0; i < bindingCtxtList.length; i++) {
					// see if the row should be expanded
					var rowObj = bindingCtxtList[i].getObject();

					if (!this._isRowHighlighted(rowObj))
						continue;

					if (this._lastSelected && !this._rowMatch(this._lastSelected, rowObj)) // if a lastSelected, then use that to determine the firstVisibleRow
						continue;

					var lastIndex = table.getFirstVisibleRow();
					if (updateType == "selection" || this.isFilter()) {
						table.setFirstVisibleRow(i);
					}
					else {
						if (i > lastIndex)
							table.setFirstVisibleRow(i);
					}

					break;
				}
			},
			_rowMatch: function(selObj, rowObj) {
				for (var name in selObj) {
					if (name.indexOf("__") != -1)
						continue;

					if (!rowObj.hasOwnProperty(name)) // support for node level highlighting
						continue;

					if (selObj[name] != rowObj[name])
						return false;
				}

				return true;
			},
			_updateExpandLevelInfo: function(groupList) {
				if (!this._enableUpdateExpandLevelInfo) // New design: don't autoexpand, keep code in case this is re-enabled
					return false;

				var oTable = this.oState.oSmartTable.getTable();
				if (!oTable.getNumberOfExpandedLevels)
					return false;

				var oBinding = oTable.getBinding();
				if (!oBinding)
					return false;

				var expandLevels = groupList.length;

				var bLevelUpdate = false;
				if (expandLevels >= oBinding.aMaxAggregationLevel.length) {
					bLevelUpdate = true;
					expandLevels = oBinding.aMaxAggregationLevel.length - 1; // else null pointer exception
					this.wasAtMaxLevel = true;
				}
				else {
					bLevelUpdate = oTable.getNumberOfExpandedLevels() != expandLevels || this.wasAtMaxLevel;
					this.wasAtMaxLevel = false;
				}

				if (bLevelUpdate) {
					if (expandLevels >= 0) {
						oTable.setNumberOfExpandedLevels(expandLevels);
						oTable.bindRows(oTable.getBindingInfo("rows")); // trigger an update of the AnalyticalBinding's numberOfExpandedLevels property
					}

					// Firing the group event updates the personalization dialog, without this the table grouping state and personalization state would become inconsistent
					var groupedColList = oTable.getGroupedColumns();
					oTable.fireGroup({column: groupedColList[0], groupedColumns: groupedColList, type: sap.ui.table.GroupEventType.group});
				}

				return bLevelUpdate;
			},
			_updateRows: function(updateType) {
				var chart = this.oState.oSmartChart.getChart();
				var paramList = this._getSelParamsFromChart(chart);

				this._latestUpdateRow(paramList.length);

				var table = this.oState.oSmartTable.getTable();

				// check if table is analytical
				if (table instanceof AnalyticalTable) {
					// expand corresponding nodes
					this._expandByFilter(updateType);
				}
			},
			_getTableRows: function() {
				var table = this.oState.oSmartTable.getTable();
				if (table.getRows)
					return table.getRows();
				else
					return table.getItems();
			},
			_isRowHighlighted: function(rowObj) {

				var paramListFiltered = this._paramListFiltered;
				if (!paramListFiltered)
					return false;

				var bMatch = true;
				// perform this operation for the number of data records present
				for (var i = 0; i < paramListFiltered.length; i++) { // go through all parameter lists, each could correspond to a selected segment, if one segment matches, then the row should be selected
					var paramMap = paramListFiltered[i];

					// verify the rowObj has all parameters
					for (var name in paramMap) { // all parameters must match
						if (!rowObj.hasOwnProperty(name)) // support for node level highlighting
							continue;

						if (paramMap[name] != rowObj[name]) { // if one doesnt' match then skip to the next segement
							bMatch = false;
							break;
						}
					}

					if (bMatch) // first match of a segment is enough to select the row, not all segments must match
						return true;
				}

				return false;
			},
			_getTableBinding: function (table) {
				//In case of ResponsiveTable, the aggregation is items, else it is either rows or blank
				return table.getBinding() ? table.getBinding() : table.getBinding("items");
			},
			/**
			 * To apply chart selection to Table as filters from_onBeforeRebindTable()
			 * @param  {Object} oEvent Event Object
			 */
			_applyChartSelectionOnTableAsFilter: function(oEvent) {
				//Apply drill down filters if available
				var filtersFromChart = this.oState.oSmartChart.getDrillStackFilters();
				oEvent.mParameters.bindingParams.filters.push.apply(oEvent.mParameters.bindingParams.filters, filtersFromChart);

				//This needs to be revisit when SmartChart provide direct Api for getting selected params.
				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}

				var paramList = this._getSelParamsFromChart(chart);

				if (paramList.length > 0){
					var dimNameList = chart.getVisibleDimensions();

					for (var i = 0; i < paramList.length; i++) {
						var param = paramList[i];

						for (var name in param) {
							// Check if the filter exits
							if (dimNameList.indexOf(name) == -1) {
								jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
								continue;
							}
							//Pushing the chart selection in to oEvent filter list
							oEvent.mParameters.bindingParams.filters.push(new sap.ui.model.Filter({
								path: name,
								operator: sap.ui.model.FilterOperator.EQ,
								value1: param[name]
							}));
						}
					}

				}

				this._latestUpdateRow(paramList.length);
			},
			/**
			 * latest refactored update row code.
			 * @param  isHighlighted, boolean true/false.
			 */
			_latestUpdateRow: function(paramListLength){
				var isFilterMode = this.isFilter();
				var rowList = this._getTableRows();
				var isHighlighted = false;

				for (var i = 0; i < rowList.length; i++) {
					var row = rowList[i];

					if (!isFilterMode){
						if (row.getBindingContext()) {
							var rowObj = row.getBindingContext().getObject();
							isHighlighted = this._isRowHighlighted(rowObj);
						}
					}

					var domRef = row.getDomRefs ? row.getDomRefs(true) : row.getDomRef();
					if (!domRef)
						continue;
					if (domRef.row)
						domRef.row.toggleClass("alr_rowHighlighted", (isFilterMode && paramListLength) ? isFilterMode : isHighlighted);
					else
						$(domRef).toggleClass("alr_rowHighlighted", (isFilterMode && paramListLength) ? isFilterMode : isHighlighted);
				}
			},
			/**
			 * To extract selected param list from chart.
			 * @param  {Object} chart object
			 */
			_getSelParamsFromChart: function(chart) {
				var dpList = [];

				if (chart._getVizFrame().vizSelection()) // workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					dpList = chart.getSelectedDataPoints().dataPoints;

				return this._getSelParamsFromDPList(dpList);
			},
			/**
			 * To extract selected param list from selected datapoints list from chart.
			 * @param  {Object} dpList datapoint list
			 */
			_getSelParamsFromDPList: function(dpList) {
				if (!dpList)
					return [];

				var paramList = [];
				for (var i = 0; i < dpList.length; i++) {
					var dp = dpList[i];
					var ctxt = dp.context;
					if (!ctxt) // happens when drill down state has changed, chart is inconsistent at this point
						continue;

					var ctxtObj = ctxt.getProperty(ctxt.sPath);
					var param = {};
					if (this._selectFilterByMeasure) {
						for (var j = 0; j < dp.measures.length; j++) {
							var name = dp.measures[j];
							var val = ctxtObj[name];
							param[name] = val;
						}
					}
					else { // Filter by all measures/dimensions at the context path of the selected data point
						for (var name in ctxtObj)
							param[name] = ctxtObj[name];
					}
					paramList.push(param);
				}

				return paramList;
			}
		});

		return tController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController",["sap/m/OverflowToolbar","sap/m/ToolbarSpacer","sap/m/FlexItemData", "sap/m/ToolbarDesign",
		"sap/ui/core/mvc/Controller"
	],
    function(OverflowToolbar, ToolbarSpacer, FlexItemData, ToolbarDesign, Controller) {
		"use strict";
		var cController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController", {
			setState: function(oState) {
				this.triggeredByTableSort = false;
				this.tableSortSelection;
				this._selectFilterByMeasure = false; // else will filter by all dimensions/measures at the selection
				this.oState = oState;

				// Attach the init method to e.g., hook into the data selection event
				oState.oSmartChart.attachInitialise(this._onSmartChartInit, this);
				oState.oSmartChart.attachBeforeRebindChart(this._onBeforeRebindChart, this);

				this.oState.attachSearchButtonPressed(this._onSearchButtonPressed, this);
			},
			/**
			 * onBeforeRebindChart binds the table query params
			 * @param  {Object} oEvent Event object
			 */
			_onBeforeRebindChart: function (oEvent) {
				//this check is to prevent rebind of chart triggered by table via smartFilterBar
				//comparing previous list of applied filters with current filters list
				var currentFilter = oEvent.mParameters.bindingParams.filters;
				if (this._lastFilter) {
					if (!this.oState.detailController._isFilterDiff(this._lastFilter,currentFilter)) {
						oEvent.mParameters.bindingParams.preventChartBind = true;
					}
				}
				this._lastFilter = oEvent.mParameters.bindingParams.filters;
				// modifying chart binding params to sort chart based on table data
				if (this.triggeredByTableSort && this.tableSortSelection) {
					var variant = this.oState.oSmartChart.fetchVariant();
					if (this.tableSortSelection.length > 0) {
						variant.sort = {};
						variant.sort.sortItems = [];
						for (var i = 0; i < (this.tableSortSelection.length); i++) {
							oEvent.mParameters.bindingParams.sorter.push(this.tableSortSelection[i]);
							variant.sort.sortItems.push({
								columnKey: this.tableSortSelection[i].sPath,
								operation: this.tableSortSelection[i].bDescending ? "Descending" : "Ascending"
							});
						}
					} else {
						oEvent.mParameters.bindingParams.sorter = this.tableSortSelection;
						// to set data in personalization dailog
						if (variant.sort) {
							delete variant.sort;
						}
					}

					// apply variant so that P13n is also updated, rebind chart does not update p13n
					this.oState.oSmartChart.applyVariant(variant);
					this.triggeredByTableSort = false;
				}

				//Make sure views with paramters are working
				if (this.oState.oSmartFilterbar && this.oState.oSmartFilterbar.getAnalyticBindingPath && this.oState.oSmartFilterbar.getConsiderAnalyticalParameters()) {
					try {
						var sAnalyticalPath = this.oState.oSmartFilterbar.getAnalyticBindingPath();
						if (sAnalyticalPath) {
							this.oState.oSmartChart.setChartBindingPath(sAnalyticalPath);
						}
					} catch (e) {
						jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
					}
				}

				this.oState.oController.onBeforeRebindChartExtension(oEvent);
			},
			_onSmartChartInit: function() {
				var oState = this.oState;

				this.oChart = oState.oSmartChart.getChart();
				//Disable the toolbars once search is triggered
				oState.oSmartChart.attachShowOverlay(function(oEvent){
					oState.oSmartChart.getToolbar().setEnabled(!oEvent.getParameter("overlay").show);
				}, this);
				
				// TODO: check if need to handle chart type change
				this.oChart.attachSelectData(this._onChartSelectData, this);
				this.oChart.attachDeselectData(this._onChartDeselectData, this);

				// Adding the view switch button to smartChart toolbar
				// Buttons added here as opposed to XML to maintain their position in toolbar
				if (this.oState._pendingChartToolbarInit) {
					this.oState.oSmartChart.getToolbar().insertContent(this.oState.alr_viewSwitchButtonOnChart, this.oState.oSmartChart.getToolbar().getContent().length);
				}

				delete this.oState._pendingChartToolbarInit;

				this.oState.oSmartChart.getChart().setVizProperties({
					"valueAxis":{
						"title":{
							"visible":false
						}
					},
					"legendGroup":{
						"layout":{
							"position":"bottom"
						}
					}
				});

				jQuery.sap.log.info("Smart Chart Annotation initialized");
			},
			_onChartSelectData: function(ev) {
				var chart = this.oState.oSmartChart.getChart();
				if (chart._getVizFrame().vizSelection()) { // workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					var selList = chart.getSelectedDataPoints().dataPoints;
					this._lastSelected = this._getLastSel(selList, this._lastSelectedList);
					this._lastSelectedList = selList;
				}

				// get the set of filter critera based on the selection, could be differences based on type, so get in a different function
				this._updateTable("selection");
			},
			_getLastSel: function(newList, oldList) {
				var chart = this.oState.oSmartChart.getChart();
				var newSelList = this.oState.detailController._getSelParamsFromDPList(newList);
				var oldSelList = this.oState.detailController._getSelParamsFromDPList(oldList);

				for (var i = 0; i < newSelList.length; i++) {
					var newSel = newSelList[i];
					var match = false;
					for (var j = 0; j < oldSelList.length; j++) {
						var oldSel = oldSelList[j];

						match = true;
						for (var a in oldSel) {
							if (a.indexOf("__") != -1)
								continue;

							if (newSel[a] != oldSel[a]) {
								match = false;
								break;
							}
						}

						if (match)
							break;
					}

					if (!match) {
						var dimList = chart.getVisibleDimensions();
						var newSelOnlyDim = {};
						for (var j = 0; j < dimList.length; j++) {
							var name = dimList[j];
							newSelOnlyDim[name] = newSel[name];
						}

						return newSelOnlyDim;
					}
				}

				return null;
			},
			_onChartDeselectData: function(ev) {
				var me = this;
				this._lastSelected = null;
				setTimeout(function() { // due to the selection data points not being updated during the deselectData event, must check again asynchronously
					var chart = me.oState.oSmartChart.getChart();
					if (chart.getSelectedDataPoints().count == 0) // Clear the filter if no selections remain.  If a selection exists it would have come through the SelectData event
						me._updateTable("selection");
					else if (chart.getSelectionMode() == "MULTIPLE") // Treat an unselect with remaining selection points as a select
						me._onChartSelectData(ev);
				}, 1);

				// A drilldown via the breadcrumb (no other event to listen to drilldown events), the drilledUp event doesn't get triggered in this case
				var evtSrc = ev.getParameter("oSource");
				if (evtSrc && evtSrc instanceof sap.m.Link && evtSrc.getParent() instanceof sap.m.Breadcrumbs)
					me._onChartDrilledUp(ev);
			},
			_onChartDrilledUp: function(ev) {
				this._updateTable();
			},
			_onChartDrilledDown: function(ev) {
				this._updateTable();
			},
			_onSearchButtonPressed: function() {
				this._updateTable();
			},
			updateTable: function() {
				var variant = this.oState.oSmartChart.fetchVariant(),
				sortData = {};

				if (variant.sort && variant.sort.sortItems) {
					sortData.sortList = variant.sort.sortItems;
					sortData.allSortRemoved = false;
				} else {
					sortData.sortList = undefined;
					sortData.allSortRemoved = true;
				}

				this._updateTable(undefined, sortData);
			},
			_updateTable: function(updateType) {

				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}

				var dpList = [];
				if (chart._getVizFrame().vizSelection()) // workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					dpList = chart.getSelectedDataPoints().dataPoints;
				if (!dpList || dpList.length == 0)
					this._lastSelected = null;

				this.oState.detailController.applyParamsToTable();

			}
		});
		return cController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController",["sap/m/SegmentedButtonItem", "sap/m/Button", "sap/m/ButtonType", "sap/ui/base/EventProvider", "sap/m/SegmentedButton","sap/ui/core/mvc/Controller"
    ],
    function(SegmentedButtonItem, Button, ButtonType, EventProvider, SegmentedButton, Controller) {
        "use strict";

		var	CONTAINER_VIEW_TABLE = "table",
			CONTAINER_VIEW_CHART = "chart",
			CONTAINER_VIEW_CHARTTABLE = "charttable";

		//var masterDetailViewInit = false;



		var tbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController", {
			setState:function(oState) {
				var me = this;
				me.oState = oState;
				me._uiCompRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

				var defaultView = oState.oController.getOwnerComponent().getDefaultContentView();

				// delay insertion out custom toolbar buttons until the
				// smartTable and smartChart are properly initialized
				me.oState._pendingTableToolbarInit = true;
				me.oState._pendingChartToolbarInit = true;


				//Creating the view switch buttons for the chart and table
				if (!me.oState.alr_viewSwitchButtonOnChart || !me.oState.alr_viewSwitchButtonOnTable) {
					me.oState.alr_viewSwitchButtonOnChart = me.createViewSwitchButton(true);
					me.oState.alr_viewSwitchButtonOnTable = me.createViewSwitchButton(false);
				}

				var oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/contentView', defaultView);
			},
			_addComponentInstanceToUI:function(oComponentInstance) {
				var me = this;
				var oMainVBox = me.oState.alr_detailContainer;
				sap.ui.core.ResizeHandler.register(
					oMainVBox,
					function() {
						oComponentContainer.setHeight(oMainVBox.getDomRef().clientHeight + "px");
					});

				//var metaModel = oComponentInstance.getModel().getMetaModel();

				oMainVBox.removeAllItems();

				if (oComponentInstance.getRouter() && !oComponentInstance.getRouter()._bIsInitialized) {
					oComponentInstance.getRouter().initialize();
				}

				var oComponentContainer = new sap.ui.core.ComponentContainer({
					component: oComponentInstance
				});

				if (oMainVBox.getDomRef()) {
					oComponentContainer.setHeight(oMainVBox.getDomRef().clientHeight + "px");
				}

				oMainVBox.addItem(oComponentContainer);
			},
			createViewSwitchButton:function(chartMode) {

				var buttonItems = [
					new sap.m.SegmentedButtonItem({
						tooltip:"{i18n>CONTAINER_VIEW_CHARTTABLE}",
						key:CONTAINER_VIEW_CHARTTABLE,
						icon:"sap-icon://chart-table-view"
					}),
					new sap.m.SegmentedButtonItem({
						tooltip:"{i18n>CONTAINER_VIEW_CHART}",
						key:CONTAINER_VIEW_CHART,
						icon:"sap-icon://vertical-bar-chart-2"
					}),
					new sap.m.SegmentedButtonItem({
						tooltip:"{i18n>CONTAINER_VIEW_TABLE}",
						key:CONTAINER_VIEW_TABLE,
						icon:"sap-icon://table-view"
					})
				];

				var btnSettings = {
					select:  jQuery.proxy(function(){
								this.oState.oController._templateEventHandlers.onSegmentButtonPressed(!this.oState.oController.getOwnerComponent().getProperty('smartVariantManagement'));
						}, this),
					layoutData: new sap.m.OverflowToolbarLayoutData({
						priority:sap.m.OverflowToolbarPriority.NeverOverflow
					}),
					items:buttonItems,
					selectedKey: "{_templPriv>/alp/contentView}"
				};
				if (chartMode) {
					jQuery.extend(btnSettings, {
						visible: "{= (${_templPriv>/alp/contentView} === 'chart' || ${_templPriv>/alp/contentView} === 'charttable') && !${_templPriv>/alp/fullScreen} }"
					});
					var segBtn = new SegmentedButton(btnSettings);
				} else {
					jQuery.extend(btnSettings, {
						visible: "{= (${_templPriv>/alp/contentView} === 'table') && !${_templPriv>/alp/fullScreen} }"
					});
					var segBtn = new SegmentedButton(btnSettings);
				}
				return segBtn;
			}
		});

		return tbController;
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController",[
		"sap/ui/core/mvc/Controller"
	],
    function(Controller) {
		"use strict";
		var vfbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController", {
			init: function(oState) {
				this.oState = oState;

				var ownerComp = this.oState.oController.getOwnerComponent();

				this._filterBar = this.oState.alr_visualFilterBar;
				this._filterBar.setEntitySet(ownerComp.getEntitySet());
			}
		});
		return vfbController;
	}
);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/NonDraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Non draft transaction controller to be used in extensions of AnalyticalListPage. Breakout coding can access an instance of
	 * this class via <code>EtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 *
	 * Note: Only one object can be edited at a given point in time.
	 *
	 * @class
	 * @name sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var sEditingStatus = "none";

		function fnEditFinished() {
			sEditingStatus = "none";
		}

		return /** @lends sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController.prototype */ {
			/**
			 * Start editing one list entry
			 *
			 * @param {sap.ui.model.Context} oContext the context identifying the entry to be edited
			 * @public
			 */
			edit: function(oContext) {
				if (!oContext) {
					throw new Error("Nothing to edit provided");
				}
				if (sEditingStatus !== "none") {
					throw new Error("Attempt to edit multiple contexts (" + oContext + ")");
				}
				if (oController.getView().getModel().hasPendingChanges()) {
					throw new Error("Attempt to edit while already pending changes exist");
				}
				sEditingStatus = "editing";
			},
			/**
			 * Cancel editing
			 *
			 * @public
			 */
			cancel: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				oTemplateUtils.oServices.oTransactionController.resetChanges();
				fnEditFinished();
			},
			/**
			 * Save the changes which have been applied to the OData model
			 *
			 * @return {Promise} is resolved when entry is successfully saved and rejected when saving fails
			 * @public
			 */
			save: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				sEditingStatus = "saving";
				var oPromise = oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges();
				oPromise.then(fnEditFinished, function() {
					sEditingStatus = "editing";
				});
				return oPromise;
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context",
        "sap/ui/model/odata/AnnotationHelper"
    ],
    function(BaseObject, Context, ODataAnnoHelper) {
        "use strict";

        var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper");

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper.criticalityConstants = {
            StateValues: {
                None: "None",
                Negative: "Error",
                Critical: "Warning",
                Positive: "Success"
            },
            ColorValues: {
                None: "Neutral",
                Negative: "Error",
                Critical: "Critical",
                Positive: "Good"
            }
        };

        AnnotationHelper.selectionPresentationVariantResolveWithQualifier = function(oContext) {
            //var oResult = Basics.followPath(oContext, oContext.getObject());

            var oKpi = oContext.getObject();
            var oModel = oContext.getModel();
            var oMetaModel = oModel.getProperty("/metaModel");
            var oEntitySet = oMetaModel.getODataEntitySet(oKpi.entitySet);
            var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
            var sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.SelectionPresentationVariant#" + oKpi.qualifier;
            return oMetaModel.createBindingContext(sAnnotationPath);

        };


        AnnotationHelper.resolveParameterizedEntitySet = function(oDataModel, oEntitySet, oSelectionVariant) {

            jQuery.sap.require("sap.ui.model.analytics.odata4analytics");
            var path = "";
            var o4a = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oDataModel));
            var queryResult = o4a.findQueryResultByName(oEntitySet.name);
            var queryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(queryResult);
            var parameterization = queryResult.getParameterization();

            if (parameterization) {
                queryResultRequest.setParameterizationRequest(new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(parameterization));
                jQuery.each(oSelectionVariant.Parameters, function() {
                    if (this.RecordType === "com.sap.vocabularies.UI.v1.IntervalParameter") {
                        queryResultRequest.getParameterizationRequest().setParameterValue(
                            this.PropertyName.PropertyPath,
                            this.PropertyValueFrom.String,
                            this.PropertyValueTo.String
                        );
                    } else {
                        queryResultRequest.getParameterizationRequest().setParameterValue(
                            this.PropertyName.PropertyPath,
                            this.PropertyValue.String
                        );
                    }
                });
            }

            try {
                path = queryResultRequest.getURIToQueryResultEntitySet();
            } catch (exception) {
                queryResult = queryResultRequest.getQueryResult();
                path = "/" + queryResult.getEntitySet().getQName();
                jQuery.sap.log.error("getEntitySetPathWithParameters", "binding path with parameters failed - " + exception || exception.message);
            }
            return path;
        };

        return AnnotationHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",[
	"sap/ui/base/Object",
	"sap/ui/model/Context"
	],	function(BaseObject, Context) {
		"use strict";
		var KpiUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil");

		/**
		 * [getNumberValue parses the oValue into the number value based on the type ]
		 * @param  {object} oValue [value]
		 * @return {number}        [returns the value in the number format  ]
		 */
		KpiUtil.getNumberValue = function (oValue) {
			var value ;//= "";

			if (oValue) {
				if (oValue.String) {
					value = Number(oValue.String);
				} else if (oValue.Int) {
					value = Number(oValue.Int);
				} else if (oValue.Decimal) {
					value = Number(oValue.Decimal);
				} else if (oValue.Double) {
					value = Number(oValue.Double);
				} else if (oValue.Single) {
					value = Number(oValue.Single);
				}
			}

			return value;
		};
		/**
		 * [getBooleanValue  get the boolean value ]
		 * @param  {object} oValue   [Value]
		 * @param  {boolean} bDefault [default value ]
		 * @return {boolean}          [returns true/false based on the value]
		 */
		KpiUtil.getBooleanValue = function(oValue, bDefault){
			if (oValue && oValue.Bool) {
				if (oValue.Bool.toLowerCase() === "true") {
					return true;
				} else if (oValue.Bool.toLowerCase() === "false") {
					return false;
				}
			}
			return bDefault;
		};


		/**
		 * [getPrimitiveValue returns the value with respective type]
		 * @param  {object} oValue [description]
		 * @return {*}        [returns the primitive type]
		 */
		KpiUtil.getPrimitiveValue = function (oValue) {
			var value;

			if (oValue) {
				if (oValue.String ) {
					value = oValue.String;
				} else if (oValue.Bool) {
					value = KpiUtil.getBooleanValue(oValue);
				} else if (oValue.EnumMember){
					value = oValue.EnumMember.split("/")[1];
				} else {
					value = KpiUtil.getNumberValue(oValue);
				}
			}

			return value;
		};

		/**
		 * [getPathOrPrimitiveValue returns the path of the oItem ]
		 * @param  {object} oModel [model name against which path to be verified]
		 * @param  {object} oItem     [oItem]
		 * @return {*}           [returns the path or its primitive Value]
		 */
		KpiUtil.getPathOrPrimitiveValue = function (oItem) {
			if (oItem) {
				if (oItem.Path) {
				//return "{path:'" + oModel + ">" + oItem.Path + "'}"; 
				return "{path:'" + oItem.Path + "'}"; 
				} else {
				return KpiUtil.getPrimitiveValue(oItem);
			}
		} else {
			return "";
		}
	};
	/**
	 * [isBindingValue  ]
	 * @param  {object}  oValue [value]
	 * @return {Boolean}        [returns true or false]
	 */
	KpiUtil.isBindingValue = function(oValue) {
		return (typeof oValue === "string") && oValue.charAt(0) === "{";
	};

	KpiUtil.getNumberFormatter = function(showMeasure, scale, maxFractionDigits) {
		var fixedInteger = sap.ui.core.format.NumberFormat.getIntegerInstance({
			style: "short",
			minFractionDigits: 0,
			maxFractionDigits: maxFractionDigits,
			showScale: showMeasure,
			shortRefNumber: scale
		});
		return fixedInteger;
	};

	KpiUtil.determineThousandsRefNumber = function(scaleFactor) {
		var shiftedFactor = scaleFactor;

		if (scaleFactor >= 1000) {
			var thousandsCount = 0;
			while (shiftedFactor >= 1000) {
				shiftedFactor /= 1000;
				thousandsCount++;
			}
			return thousandsCount == 0 ? undefined : thousandsCount * 1000;
		} else {
			return undefined;
		}
	};


	/**
	 * [formatNumberForPresentation formats the absolute number value]
	 * @param  {object} oValue                   [value to be formatted]
	 * @param  {boolean} bShowScale               [if if the scale has to be shown with the format]
	 * @param  {number} nNumberOfFractionalDigits [numberOfFractionalDigits from the datapoint annotation for the enityset]
	 * @return {sap.ui.core.format.NumberFormat}	[returns the float instance of the NumberFormat]
    */
	KpiUtil.formatNumberForPresentation = function(oValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor) {
		var num = Number(oValue);
		var sCurrentLocale = sap.ui.getCore().getConfiguration().getLanguage();
		var oCurrentLocale = new sap.ui.core.Locale(sCurrentLocale);
		if (nNumberOfFractionalDigits > 2) {
			nNumberOfFractionalDigits = 2 ; // additional check is required here since decimals param is taking precendence over maxFractionDigits below
		}
		var oNumberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
			style: "short",
			showScale: bShowScale,
			minFractionDigits: 0,
			maxFractionDigits: 2,
			decimals: nNumberOfFractionalDigits,
			shortRefNumber: fScaleFactor
		}, oCurrentLocale).format(num) ;
		return oNumberFormat;
	};

	/**
	 * [formatNumberForPercentPresentation formats the number with percent presentation]]
	 * @param  {object} oValue                   [value]
	 * @param  {number} nNumberOfFractionalDigits [number of fractional Digits from OdataPOint annotations]
	 * @return {sap.ui.core.format.NumberFormat}	[returns integer instance of the NumberFormat]

	 */
	KpiUtil.formatNumberForPercentPresentation = function (oValue, nNumberOfFractionalDigits) {
		var percentNumber = Number(oValue);
		if (nNumberOfFractionalDigits)
		{
			var minDigits = 0;
			//var maxDigits = nNumberOfFractionalDigits;
			var maxDigits = nNumberOfFractionalDigits ;
			if (nNumberOfFractionalDigits > 2) { // check to restrict the max allowed digit to two at all times
				maxDigits = 2;
			}
			var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
			style: "short",
			minFractionDigits: minDigits,
			maxFractionDigits: maxDigits
			});
			return percentFormatter.format(percentNumber);
		} else {
		 var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
			style: "short",
			minFractionDigits: 0,
			maxFractionDigits: 1
		});

		return percentFormatter.format(percentNumber);
		}
	};


	/**
	 * [getUnitofMeasure checks for unit of measure]
	 * @param  {object} oModel [Context   current context]
	 * @param  {object} oEntityTypeProperty [enity property for the respective entity type and enity set]
	 * @return {string}      [returns the Unit of Measure]
	 */
	KpiUtil.getUnitofMeasure = function(oModel, oEntityTypeProperty)
	{
		var result ;
		if (oEntityTypeProperty && oEntityTypeProperty["Org.OData.Measures.V1.Unit"] ) {
			var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
			result =  KpiUtil.getPathOrPrimitiveValue(oUnit);
		}
		else if (oEntityTypeProperty && oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"] ) {
			var oISOCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
			result =  KpiUtil.getPathOrPrimitiveValue(oISOCurrency);
		}
		if (result === undefined ) {
				result = "";
		}
		return result;
	};


	/**
	 * [isRelative checks if the passed datapoint is relative]
	 * @param  {object}  oDataPoint [data point annotation]
	 * @return {Boolean}            [returns true/false]
	 */
	KpiUtil.isRelative = function(oDataPoint) {
		var trendCalc = oDataPoint.TrendCalculation;
		var relative = false;
		if (trendCalc) {
			var defaultVal = trendCalc.IsRelativeDifference.DefaultValue;
			relative = KpiUtil.getBooleanValue(trendCalc.IsRelativeDifference, defaultVal ? ({
				"true": true,
				"false": false
			})[defaultVal.toLowerCase()] : false);
		}
		return relative;
	};


	return KpiUtil;

}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil",[
	"sap/ui/base/Object"
	],	function(BaseObject) {
		"use strict";
		var ModelUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil");
		//Constants
		var FILTER = "Filter";
		/**
		 * [showFooterBar To determine if footerbar to be shown]
		 * @param  {[oContext]}  sEntitySet [ViewMode]
		 * @return {Boolean}              [Returns status of footerbar to the xml]
		 */
		ModelUtil.hasVisibleChild = function(oContext){
			var oChild = this.getContent();
			for (var i = 0; i < oChild.length; i++) {
				var sType = oChild[i].getMetadata().getName();
				if ( sType === 'sap.m.HBox' ) {
					var customData = oChild[i].data(FILTER);
					if ( oContext.indexOf(customData) !== -1 ) {
						return true;
					}
				}
			}
			return false;
		};
	return ModelUtil;
}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode') ) {
/**
* File for mapping operation code to operator
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode",function() {
  "use strict";
  jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode");
  //default position of the operator is left
  sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode = {
    "EQ": {
      "code": "="
    },
    "GT": {
      "code": ">"
    },
    "GE": {
      "code": ">="
    },
    "LT": {
      "code": "<"
    },
    "LE": {
      "code": "<="
    },
    "NE": {
      "code": "!"
    },
    "BT": {
      "code": "...",
      "position": "mid"
    },
    "EndsWith": {
      "code": "*"
    },
    "StartsWith": {
      "code": "*",
      "position": "last"
    },
    "Contains": {
      "code": "*",
      "position": "mid"
    }
  };
  return sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms') ) {
/**
* File for keeping V4 Annotation Constants
* New Constants should be added in the below dictionary and then be used
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms",function() {
	"use strict";
	jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms");

	sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms = {
		Label: "com.sap.vocabularies.Common.v1.Label",
		Unit: "Org.OData.Measures.V1.Unit",
		ISOCurrency: "Org.OData.Measures.V1.ISOCurrency",
		FilterRestrictions: "Org.OData.Capabilities.V1.FilterRestrictions",
		SelectionFields: "com.sap.vocabularies.UI.v1.SelectionFields",
		FieldGroup: "com.sap.vocabularies.UI.v1.FieldGroup",
		ValueList: "com.sap.vocabularies.Common.v1.ValueList",
		DataPoint: "com.sap.vocabularies.UI.v1.DataPoint",
		SelectionRangeSignType: "com.sap.vocabularies.UI.v1.SelectionRangeSignType",
		ValueListParameterIn: "com.sap.vocabularies.Common.v1.ValueListParameterIn",
		ValueListParameterOut: "com.sap.vocabularies.Common.v1.ValueListParameterOut",
		ValueListParameterInOut: "com.sap.vocabularies.Common.v1.ValueListParameterInOut"
	};
	return sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.AnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/AnnotationHelper",[], function() {
	"use strict";
	/* Templating helper functions that are specific to the ListReport Template */
	var AnnotationHelper = {
		resolveMetaModelPath: function(oContext) {
			var sPath = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(sPath);
		},
		/* The context definition for the ListReport
			1. only check if there is a default presentation variant for now. If it exists we
			   need to check if it has a LineItem annotation and use this one rather than the default LineItem annotation
			Compare with similar function in AnalyticalListReport
		*/
		createWorkingContext: function(oContext) {
			var oParameter = oContext.getObject(),
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Find default PresentationVariant */
			sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant";
			oWorkingContext.presentationVariantQualifier = "";
			oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.presentationVariantPath = sAnnotationPath;
			/* Determine LineItem and Chart via PV */
			if (oWorkingContext.presentationVariant && oWorkingContext.presentationVariant.Visualizations) {
				oWorkingContext.presentationVariant.Visualizations.forEach(function(visualization) {
					/* get rid of the @ and put a / in front */
					var sPath = "/" + visualization.AnnotationPath.slice(1);
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}

			oModel.setProperty("/workingContext", oWorkingContext);
			return "/workingContext";
		}
	};

	return AnnotationHelper;
}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/ListReport/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.IappStateHandler') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.IappStateHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/IappStateHandler",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/generic/app/navigation/service/SelectionVariant"], function(jQuery, BaseObject, SelectionVariant) {
	"use strict";

		// Constants which are used as property names for storing custom filter data and generic filter data
		var dataPropertyNameCustom = "sap.suite.ui.generic.template.customData",
			dataPropertyNameGeneric = "sap.suite.ui.generic.template.genericData";
			
		// variant contexts which should not lead to change the iappstate
		var aIrrelevantVariantLoadContext = ["INIT", "DATA_SUITE", "CANCEL", "RESET", "SET_VM_ID"];
	
	function fnNullify(oObject) {
		if (oObject) {
			for (var sProp in oObject) {
				oObject[sProp] = null;
			}
		}
	}
	
	function fnNotEqual(oObject1, oObject2){
		var aKeys1 = Object.keys(oObject1);
		if (aKeys1.length !== Object.keys(oObject2).length){
			return true;
		}
		for (var i = 0; i < aKeys1.length; i++){
			var sKey = aKeys1[i];
			var aPar1 = oObject1[sKey];
			var aPar2 = oObject2[sKey];
			if (aPar1.length !== aPar2.length){
				return true;
			}
			for (var j = 0; j < aPar1.length; j++){
				if (aPar1[j] !== aPar2[j]){
					return true;
				}
			}
		}
		return false;
	}
	
	function getMethods(oState, oController, oNavigationHandler) {
		
		var bSmartVariantManagement = oController.getOwnerComponent().getSmartVariantManagement();
		var oInnerAppStatePromise = Promise.resolve({ 
			appStateKey: "",
			urlParams: {},
			selectionVariant: "",
			tableVariantId: ""			
		}); // A Promise that resolves to the information currently available in the url about parameters
		var bDataAreShownInTable = false;
		var iOpenAdaptations = 0;
		var iOpenUrlAdaptations = 0;
		var bAppStateDirty = false;
		var oEditStateFilter = oController.byId("editStateFilter");

		var getByDefaultNonVisibleCustomFilterNames = (function(){
			var aNonVisibleCustomFilterNames;
			return function(){
				aNonVisibleCustomFilterNames = aNonVisibleCustomFilterNames || oState.oSmartFilterbar.getNonVisibleCustomFilterNames();
				return aNonVisibleCustomFilterNames;
			};
		})();
		
		function areDataShownInTable(){
			return bDataAreShownInTable;
		}

		function getPageState() {
			var oCustomAndGenericData = {};
			oCustomAndGenericData[dataPropertyNameCustom] = {};
			// Store information about visible custom filters
			var aVisibleCustomFieldNames = [];
			var aByDefaultNonVisibleCustomFilterNames = getByDefaultNonVisibleCustomFilterNames();
			for (var i = 0; i < aByDefaultNonVisibleCustomFilterNames.length; i++){ // loop over all custom fields which are not visible in filterbar by default
				var sName = aByDefaultNonVisibleCustomFilterNames[i];
				if (oState.oSmartFilterbar.isVisibleInFilterBarByName(sName)){ // custom field is visible in filterbar now
					aVisibleCustomFieldNames.push(sName);
				}
			}			
			oCustomAndGenericData[dataPropertyNameGeneric] = {
				suppressDataSelection: !bDataAreShownInTable,
				visibleCustomFields: aVisibleCustomFieldNames
			};
			if (oEditStateFilter) {
				oCustomAndGenericData[dataPropertyNameGeneric].editStateFilter = oEditStateFilter.getSelectedKey();
			}
			// extension is responsible for retrieving custom filter state. The method has a more generic name		
			// for historical reasons (change would be incompatible).		

			oController.getCustomAppStateDataExtension(oCustomAndGenericData[dataPropertyNameCustom]);
			return oCustomAndGenericData;
		}

		function getCurrentAppState() {
			/*			 
			 * Special handling for selection fields, for which defaults are defined: If a field is visible in the	
			 * SmartFilterBar and the user has cleared the input value, the field is not included in the selection		
			 * variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by	
			 * purpose, we have to store the selection with the value "", in order to set it again to an empty value,
			 * when restoring the selection after a back navigation. Otherwise, the default value would be set.		
			 */
			
			var sCurrentSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
			var oSelectionVariant = new SelectionVariant(sCurrentSelectionVariant);
			var aVisibleFields = oController.getVisibleSelectionsWithDefaults();
			for (var i = 0; i < aVisibleFields.length; i++) {
				if (!oSelectionVariant.getValue(aVisibleFields[i])) {
					oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
				}
			}
			var oRet = {
				selectionVariant: oSelectionVariant.toJSONString(),
				tableVariantId: (!bSmartVariantManagement && oState.oSmartTable.getCurrentVariantId()) || "",
				customData: getPageState()
			};
			return oRet;
		}
		
		function fnReduceOpenUrlAdaptations(){
			iOpenUrlAdaptations--;	
		}
		
		function fnStoreCurrentAppStateAndAdjustURL() {
			// - nothing, if ushellContainer not available		
			// - adjusts URL immediately		
			// - stores appState for this URL (asynchronously)	

			if (!bAppStateDirty){
				return;
			}
			
			bAppStateDirty = false;

			// currently NavigationHandler raises an exception when ushellContainer is not available, should be changed		
			// by Denver
			iOpenUrlAdaptations++;
			var oDenverAppStatePromise;
			try {
				oDenverAppStatePromise = oNavigationHandler.storeInnerAppState(getCurrentAppState());
			} catch (err) {
				jQuery.sap.log.error("ListReport.fnStoreCurrentAppStateAndAdjustURL: " + err);
			}
			if (oDenverAppStatePromise){
				oDenverAppStatePromise.then(fnReduceOpenUrlAdaptations, fnReduceOpenUrlAdaptations);
			} else {
				iOpenUrlAdaptations--;	
			}
		}

		function fnRestoreGenericFilterState(oGenericData, bApplySearchIfConfigured) {
			if (oGenericData && oGenericData.editStateFilter !== undefined) {
				if (oEditStateFilter) {
					oEditStateFilter.setSelectedKey((oGenericData.editStateFilter === null) ? 0 : oGenericData.editStateFilter);
				}
			}
			// Restore information about visible custom filters
			var aVisibleCustomFields = oGenericData && oGenericData.visibleCustomFields;
			if (aVisibleCustomFields && aVisibleCustomFields.length > 0){
				var aItems = oState.oSmartFilterbar.getAllFilterItems();
				for (var i = 0; i < aItems.length; i++){
					var oItem = aItems[i];
					var sName = oItem.getName();
					if (aVisibleCustomFields.indexOf(sName) !== -1){
						oItem.setVisibleInFilterBar(true);
					}
				}
			}
			bDataAreShownInTable = bApplySearchIfConfigured && !(oGenericData && oGenericData.suppressDataSelection);
			if (bDataAreShownInTable){
				oState.oSmartFilterbar.search();	
			}
		}

		// method is responsible for retrieving custom filter state. The correspomding extension-method has a more generic name	
		// for historical reasons (change would be incompatible).	
		function fnRestoreCustomFilterState(oCustomData) {
			oController.restoreCustomAppStateDataExtension(oCustomData || {});
		}

		// This method is responsible for restoring the data which have been stored via getPageState.	
		// However, it must be taken care of data which have been stored with another (historical) format.	
		// Therefore, it is checked whether oCustomAndGenericData possesses two properties with the right names.
		// If this is this case it is assumed that the data have been stored according to curreent logic. Otherwise, it is	
		// assumed that the data have been stored with the current logic. Otherwise, it is assumed that the properties have been
		// stored with a logic containing only custom properties (with possible addition of _editStateFilter).	

		function fnRestorePageState(oCustomAndGenericData, bApplySearchIfConfigured) {
			oCustomAndGenericData = oCustomAndGenericData || {};
			if (oCustomAndGenericData.hasOwnProperty(dataPropertyNameCustom) && oCustomAndGenericData.hasOwnProperty(dataPropertyNameGeneric)) {
				fnRestoreCustomFilterState(oCustomAndGenericData[dataPropertyNameCustom]);
				fnRestoreGenericFilterState(oCustomAndGenericData[dataPropertyNameGeneric], bApplySearchIfConfigured);
			} else {
				// historic format. May still have property _editStateFilter which was used generically.	
				if (oCustomAndGenericData._editStateFilter !== undefined) {
					fnRestoreGenericFilterState({
						editStateFilter: oCustomAndGenericData._editStateFilter
					});
					delete oCustomAndGenericData._editStateFilter;
				}
				fnRestoreCustomFilterState(oCustomAndGenericData);
			}
		}
		
		// returns a Promise which resolves to an iAppstate-parameter-value pair
		function getUrlParameterInfo(){
			return oInnerAppStatePromise.then(function(oAppState){
				if (oAppState.appStateKey){
					return {
						"sap-iapp-state": [oAppState.appStateKey]
					};
				}
				return oAppState.urlParams;
			});	
		}
		
		function changeIappState(bFilterOrSettingsChange, bDataAreShown){
			if (iOpenAdaptations === 0 && (bFilterOrSettingsChange || bDataAreShown !== bDataAreShownInTable)){
				bDataAreShownInTable = bDataAreShown;
				if (!bAppStateDirty){
					bAppStateDirty = true;
					if (!oState.oSmartFilterbar.isDialogOpen()){
						setTimeout(fnStoreCurrentAppStateAndAdjustURL, 0);
					}
				}
			}
		}
		
		function fnAdaptToAppStateImpl(oCurrentAppState, fnResolve, oAppData, oURLParameters, sNavType){
			var sAppstateKey = oAppData.appStateKey || "";
			var sSelectionVariant =  oAppData.selectionVariant || "";
			var sTableVariantId = (!bSmartVariantManagement && oAppData.tableVariantId) || "";
			var oNewUrlParameters = (!sAppstateKey && oURLParameters) || {};
			if ((oCurrentAppState.appStateKey !== sAppstateKey || 
				oCurrentAppState.selectionVariant !== sSelectionVariant || 
				oCurrentAppState.tableVariantId !== sTableVariantId ||
				fnNotEqual(oCurrentAppState.urlParams, oNewUrlParameters)) && sNavType !== sap.ui.generic.app.navigation.service.NavType.initial) {
				if (iOpenUrlAdaptations === 0){
					var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
					if (oAppData.oSelectionVariant && oCurrentAppState.selectionVariant !== sSelectionVariant){
						var aSelectionVariantProperties = oAppData.oSelectionVariant.getParameterNames().concat(
							oAppData.oSelectionVariant.getSelectOptionsPropertyNames());
						for (var i = 0; i < aSelectionVariantProperties.length; i++) {
							oState.oSmartFilterbar.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
						}
					}
					//according to BCP 1670373497 and 1670406892 we need to check whether the current variant is standard 
					if (!bHasOnlyDefaults || oState.oSmartFilterbar.isCurrentVariantStandard()) {
						// A default variant could be loaded.
						// Do not clear oSmartFilterbar.clearVariantSelection and oSmartFilterbar.clear due to BCP 1680012595 is not valid anymore
						// with BCP 1670406892 it was made clear that both clear are needed when this GIT change 1941921 in navigation handler is available
						oState.oSmartFilterbar.clearVariantSelection();
						oState.oSmartFilterbar.clear();
						oState.oSmartFilterbar.setDataSuiteFormat(sSelectionVariant, true);
					}
					if (sTableVariantId !== oCurrentAppState.tableVariantId) {
						oState.oSmartTable.setCurrentVariantId(sTableVariantId);
					}
					fnRestorePageState(oAppData.customData, true);
				}
				oInnerAppStatePromise = Promise.resolve({
					appStateKey: sAppstateKey,
					urlParams: oNewUrlParameters,
					selectionVariant: sSelectionVariant,
					tableVariantId: sTableVariantId
				});
			}
			fnResolve();			
		}
		
		function fnAdaptToAppState(fnResolve, oAppData, oURLParameters, sNavType){
			var oCurrentInnerAppStatePromise = oInnerAppStatePromise;
			oCurrentInnerAppStatePromise.then(function(oCurrentAppState){
				if (oCurrentInnerAppStatePromise !== oInnerAppStatePromise){  // inner app state has been modified meanwhile. Try again with new inner app state
					fnAdaptToAppState(fnResolve, oAppData, oURLParameters, sNavType);
					return;
				}
				fnAdaptToAppStateImpl(oCurrentAppState, fnResolve, oAppData, oURLParameters, sNavType);
			});
		}
		
		function fnReduceOpenAdaptations(){
			iOpenAdaptations--;	
		}
		
		function fnParseUrlAndApplyAppState(){
			iOpenAdaptations++;
			var oRet = new Promise(function(fnResolve, fnReject){
				var oParseNavigationPromise = oNavigationHandler.parseNavigation();
				oParseNavigationPromise.done(fnAdaptToAppState.bind(null, fnResolve));
				oParseNavigationPromise.fail(fnReject);
			});
			oRet.then(fnReduceOpenAdaptations, fnReduceOpenAdaptations);
			return oRet;
		}
		
		function onBeforeSFBVariantSave(bAdjust){
			/*
			 * When the app is started, the VariantManagement of the SmartFilterBar saves the initial state in the
			 * STANDARD (=default) variant and therefore this event handler is called. So, even though the name of
			 * the event handler is confusing, we need to provide the initial state to allow the SmartFilterBar to
			 * restore it when needed (i.e. when the user clicks on restore). Thus, no check against STANDARD
			* context is needed!
			 */
			var oCurrentAppState = getCurrentAppState();
			oState.oSmartFilterbar.setFilterData({
				_CUSTOM: oCurrentAppState.customData
			});
		}
		
		function onAfterSFBVariantSave(){
			changeIappState(true, bDataAreShownInTable);	
		}
		
		function onAfterSFBVariantLoad(oEvent) {
			var sContext = oEvent.getParameter("context");
			var oData = oState.oSmartFilterbar.getFilterData();
			if (oData._CUSTOM !== undefined) {
				fnRestorePageState(oData._CUSTOM);
			} else {
				// make sure that the custom data are nulled for the STANDARD variant
				var oCustomAndGenericData = getPageState();
				fnNullify(oCustomAndGenericData[dataPropertyNameCustom]);
				fnNullify(oCustomAndGenericData[dataPropertyNameGeneric]);
				fnRestorePageState(oCustomAndGenericData);
			}
			bDataAreShownInTable = oEvent.getParameter("executeOnSelect");
			// store navigation context
			if (aIrrelevantVariantLoadContext.indexOf(sContext) < 0) {
				changeIappState(true, bDataAreShownInTable);
			} 
		}
		
		function onAfterTableVariantSave() {
			if (!bSmartVariantManagement){
				changeIappState(true, bDataAreShownInTable);
			}
		}
		
		function onAfterApplyTableVariant() {
			if (!bSmartVariantManagement){
				changeIappState(true, bDataAreShownInTable);
			}
		}
		
		function isStateChange(){
			if (iOpenUrlAdaptations > 0){
				fnParseUrlAndApplyAppState();
				return true;
			}
			return false;
		}
		
		function onSmartFilterBarInitialise(){
			oState.oSmartFilterbar.attachFiltersDialogClosed(fnStoreCurrentAppStateAndAdjustURL);
		}
		
		// Make the getCurrentAppState function available for others via the oState object
		oState.getCurrentAppState = getCurrentAppState;
		
		return {
			areDataShownInTable: areDataShownInTable,
			parseUrlAndApplyAppState: fnParseUrlAndApplyAppState,
			getUrlParameterInfo: getUrlParameterInfo,
			changeIappState: changeIappState,
			onSmartFilterBarInitialise: onSmartFilterBarInitialise,
			onBeforeSFBVariantSave: onBeforeSFBVariantSave,
			onAfterSFBVariantSave: onAfterSFBVariantSave,
			onAfterSFBVariantLoad: onAfterSFBVariantLoad,
			onAfterTableVariantSave: onAfterTableVariantSave,
			onAfterApplyTableVariant: onAfterApplyTableVariant,
			isStateChange: isStateChange
		};
	}
	
	return BaseObject.extend("sap.suite.ui.generic.template.lib.IappStateHandler", {
		constructor: function(oState, oController, oNavigationHandler) {
			jQuery.extend(this, getMethods(oState, oController, oNavigationHandler));
		}
	});
});
}; // end of sap/suite/ui/generic/template/ListReport/controller/IappStateHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Non draft transaction controller to be used in extensions of ListReport. Breakout coding can access an instance of
	 * this class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * Note: Only one object can be edited at a given point in time.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var sEditingStatus = "none";

		function fnEditFinished() {
			sEditingStatus = "none";
		}

		return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController.prototype */ {
			/**
			 * Start editing one list entry
			 * 
			 * @param {sap.ui.model.Context} oContext the context identifying the entry to be edited
			 * @public
			 */
			edit: function(oContext) {
				if (!oContext) {
					throw new Error("Nothing to edit provided");
				}
				if (sEditingStatus !== "none") {
					throw new Error("Attempt to edit multiple contexts (" + oContext + ")");
				}
				if (oController.getView().getModel().hasPendingChanges()) {
					throw new Error("Attempt to edit while already pending changes exist");
				}
				sEditingStatus = "editing";
			},
			/**
			 * Cancel editing
			 * 
			 * @public
			 */
			cancel: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				oTemplateUtils.oServices.oTransactionController.resetChanges();
				fnEditFinished();
			},
			/**
			 * Save the changes which have been applied to the OData model. Sets the application busy during execution 
			 * and doesn't execute if application is already busy when called (i.e. don't use <code>ExtensionAPI.securedExecution</code>
			 * to call this method).
			 * 
			 * @return {Promise} is resolved when entry is successfully saved and rejected when saving fails
			 * @public
			 */
			save: function() {
				
				var fnFunction = function() {
					if (sEditingStatus !== "editing") { throw new Error("Nothing edited"); }
					sEditingStatus = "saving";
					var oPromise = oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges();
					oPromise.then(fnEditFinished, function() {
						sEditingStatus = "editing";
					});
					return oPromise;
				};

				// set default values for parameters
				var mParameters = {};
				mParameters = jQuery.extend(true, {
					busy: {
						set: true,
						check: true
					},
					dataloss: {
						popup: false,
						navigation: false
					}
				}, mParameters);

				return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 *
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the activate event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Detach a handler from the activate event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Attach a handler to the discard event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the discard event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			},
				/**
			 * Attach a handler to the delete event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * perform a draft saving operation, executed in a sequential order
			 *
			 * @param {function} fnFunction function that saves the draft and returns a promise
			 * @public
			 * @experimental
			 */
			saveDraft: function(fnFunction) {
				oTemplateUtils.oServices.oApplicationController.addOperationToQueue(fnFunction, {draftSave : true});
			},
			/**
			 * checks if side effects exist for the given properties or entities and executes them. if there are
			 *  pending changes in the model those pending changes are sent as a patch request with the side effect
			 *  batch request. If no source property and no source entity is passed a global side effect is executed
			 *
			 * @param {object} [oSideEffects] object containing any of the following properties:
			 * @param {array}  oSideEffects.sourceProperties array with property paths
			 * @param {array}  oSideEffects.sourceEntities array with navigation property paths
			 * @public
			 * @experimental
			 */
			executeSideEffects: function(oSideEffects) {
				oSideEffects = oSideEffects || {};
				oTemplateUtils.oServices.oApplicationController.executeSideEffects(oController.getView().getBindingContext(),oSideEffects.sourceProperties, oSideEffects.sourceEntities, false);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController", {
		constructor: function(oTemplateUtils, oController) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Non Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Detach a handler from the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Attach a handler to the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Attach a handler to the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Registers a function that provides information whether there are unsaved custom data
			 * 
			 * This method must be used when an extension ui may contain user input that is <b>not</b> bound to
			 * the standard OData model of the app.
			 * In this case a function must be provided that returns the information whether the extension ui still
			 * contains unsaved user changes.
			 * @param {function} fnHasUnsavedData Callback function returning either true or false
			 * @public
			 */
			registerUnsavedDataCheckFunction: function(fnHasUnsavedData) {
				oState.aUnsavedDataCheckFunctions.push(fnHasUnsavedData);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock",['sap/uxap/BlockBase'],
	function (BlockBase) {
		"use strict";

		var DummyBlock = BlockBase.extend("sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock", {
			metadata: {
				views: {
					Collapsed: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					},
					Expanded: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					}
				}
			}.fragments
		});

		return DummyBlock;

	});
}; // end of sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component') ) {
jQuery.sap.require('sap.ui.generic.app.AppComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component");

sap.ui.generic.app.AppComponent.extend("sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component", {
	metadata: {
		manifest: "json"
	}
});
}; // end of sap/suite/ui/generic/template/app/blankAnalyticalListPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.NavigationController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/NavigationController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * API to be used for navigation in extensions of Smart Template Applications. Breakout coding can access an instance
	 * of this class via {@link sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI} or
	 * {@link sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI}. Do not instantiate yourself.
	 * @class
	 * @name sap.suite.ui.generic.template.extensionAPI.NavigationController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		return /** @lends sap.suite.ui.generic.template.extensionAPI.NavigationController.prototype */ {
			/**
			 * Navigates to the given intent
			 * 
			 * @param {string} sOutbound The name of the outbound defined in the manifest
			 * @param {object} [mParameters] map with parameters for the navigation. If no parameters are provided, default are the parameters defined in the manifest
			 * @public
			 */
			navigateExternal: function(sOutbound, mParameters) {
				var oManifestEntry = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app");
				var oOutbound = oManifestEntry.crossNavigation.outbounds[sOutbound];
				
				if (!oOutbound) {
					jQuery.sap.log.error("navigateExternal: mandatory parameter 'Outbound' is missing, or different from manifest entry");
					return;
				}
					
				if (mParameters){
					oOutbound.parameters = mParameters;
				} else {
					// todo: evaluate parameters
				}
				oTemplateUtils.oCommonUtils.navigateExternal(oOutbound, oState);
			},
			/**
			 * Triggers a navigation to another page within the application
			 * 
			 * @param {sap.ui.model.Context} oContext The target context for the navigation
			 * @param {object} [oNavigationData] object containing navigation data
			 * @param {string} [oNavigationData.navigationProperty] The navigation property identifying the target of the navigation
			 * @public
			 */
			navigateInternal: function(oContext, oNavigationData) {
				if (oContext) {
					oTemplateUtils.oCommonUtils.navigateToContext(oContext, oNavigationData);
				}
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.extensionAPI.NavigationController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));
		}
	});
});
}; // end of sap/suite/ui/generic/template/extensionAPI/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.UIMode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides inactive support for controls
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.UIMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/UIMode",[], function() {
    "use strict";
	/**
	 * Enumeration for uimode of SmartTemplates
	 * 
	 * The uimode describes the state of the UI in regards of the currently displayed
	 * object instance (e.g. a Sales Order, a Contact or a Purchasing Document)
	 * @readonly
	 * @enum {string}
	 */
	var UIMode = {
		//** The object instance has just been created */
		Create: "Create",
		//** The object instance is displayed read only
		Display: "Display",
		//** The object instance is open for editing
		Edit: "Edit"
	};

	return UIMode;
});
}; // end of sap/suite/ui/generic/template/extensionAPI/UIMode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.fragments.MessagePage.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.fragments.MessagePage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/fragments/MessagePage.controller",[
	"sap/ui/core/mvc/Controller"
], function(Controller) {
	"use strict";
	
	// Controller of the EmptyPage view
	return Controller.extend("sap.suite.ui.generic.template.fragments.MessagePage", {
		navButtonPress: function() {
			window.history.back();
		}
	});
});
}; // end of sap/suite/ui/generic/template/fragments/MessagePage.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelper') ) {
(function () {
	"use strict";
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained

    
    var UIMode = sap.ui.require("sap/suite/ui/generic/template/extensionAPI/UIMode");

	jQuery.sap.declare("sap.suite.ui.generic.template.js.AnnotationHelper");

	var oAnnotationHelper = {
		// returns the enablement expression for Delete buttons on Object Page toolbars
		buildDeleteButtonEnablementExpression: function (mFacet) {
			var sButtonId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(mFacet) + "::deleteEntry";
			return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
		},

		// the following getXYId and getIconTabFilterKey/Text methods are needed for the table tab mode to correctly initialize the table instances
		// use same IDs as for non-table-tab mode and add a unique suffix (table tab filter key) 
		getSmartTableId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "listReport";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getAnalyticalTableId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "analyticalTable";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getGridTableId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "GridTable";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getResponsiveTableId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "responsiveTable";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getAddEntryId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "addEntry";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getDeleteEntryId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "deleteEntry";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getShowDetailsId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "showDetails";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getDraftObjectMarkerId: function(oManifestEntry, oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oManifestEntry, oTabItem);
			var sResult = "DraftObjectMarker";
			if (sSuffix) {
				sResult = sResult.concat("-" + sSuffix);
			}
			return sResult;
		},

		getIconTabFilterKey: function(oManifestEntry, oTabItem) {
			if (oTabItem && oTabItem.key) {
				return oTabItem.key;
			} else {
				for (var i in oManifestEntry) {
					if (oManifestEntry[i].qualifier === oTabItem.qualifier) {
						return oTabItem.qualifier;
					}
				}
			}
			return "";
		},
		
		getIconTabFilterText: function(oInterface, oManifestEntry) {
			var oModel = oInterface.getModel();
			var sEntityType = oModel.oData.entityType;
			var oEntityType = oModel.oData.metaModel.getODataEntityType(sEntityType);
			var oSelectionVariant = oEntityType[oManifestEntry.qualifier];
			if (oSelectionVariant && oSelectionVariant.Text) {
				return oSelectionVariant.Text.String;
			}
		},

		// returns the 'enabled' value for a button based on annotations
		buildAnnotatedActionButtonEnablementExpression: function (mInterface, mDataField, mFacet, mEntityType, bIsPhone) {
			var mFunctionImport, sButtonId, sAction, oMetaModel;

			// WORKAROUND: as analytical table/chart is not yet fully capable of supporting applicable path (issues with analytical binding), we always set enabled to true
			if (mEntityType && mEntityType["sap:semantics"] === "aggregate" && !bIsPhone) {
				return true;
			}
			// END OF WORKAROUND

			sAction =  mDataField && mDataField.Action && mDataField.Action.String;
			if (sAction) {
				sButtonId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartForDatafieldActionButton(mDataField, mFacet);
				 // if RecordType is UI.DataFieldForIntentBasedNavigation and RequiresContext is not "false" (default value is "true") then return binding expression
				if (mDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
					if (!mDataField.RequiresContext || mDataField.RequiresContext.Bool !== "false") {
						return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
					}
				} else if (mDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
					oMetaModel = mInterface.getInterface(0).getModel();
					mFunctionImport = oMetaModel.getODataFunctionImport(sAction);
					 // if RecordType is UI.DataFieldForAction and if sap:action-for is defined then return binding expression
					if (!mFunctionImport) {
						jQuery.sap.log.error("The function import " + sAction + " is not defined in the metadata. Buttons that call this function import will not behave as expected.");
					} else if (mFunctionImport["sap:action-for"] && mFunctionImport["sap:action-for"] !== "" && mFunctionImport["sap:action-for"] !== " ") {
						return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
					}
				}

				return true; // default enabled value for annotated actions
			}
		},

		// returns the applicable-path - which is set to the property 'requestAtLeastFields' on the SmartChart
		// the requestAtLeastFields property will add to the $select OData parameter in order to get the necessary data
		getApplicablePathForChartToolbarActions: function (oInterface, mChartAnnotation, sEntityType) {
			var oMetaModel = oInterface.getInterface(0).getModel();
			var mEntityType = oMetaModel.getODataEntityType(sEntityType);
			var aActions = (mChartAnnotation && mChartAnnotation.Actions) || [];
			var sFunctionImport, mFunctionImport, mODataProperty, aFunctionImport = [], aApplicablePath = [], sApplicablePath;

			// check each annotation for UI.DataFieldForAction and verify that Inline & Determining are not set to true, which will imply that the Action is a toolbar action (based on Actions Concept)
			for (var i = 0; i < aActions.length; i++) {
				if (aActions[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" &&
						(!aActions[i].Inline || aActions[i].Inline.Bool !== "true") && (!aActions[i].Determining || aActions[i].Determining.Bool !== "true")) {
					sFunctionImport = aActions[i].Action && aActions[i].Action.String;
					mFunctionImport = oMetaModel.getODataFunctionImport(sFunctionImport);
					if (mFunctionImport) {
						aFunctionImport.push(mFunctionImport);
					}
				}
			}

			for (var i = 0; i < aFunctionImport.length; i++) {
				// verify that both the sap:action-for and sap:applicable-path annotation are applied to the function import
				mFunctionImport = aFunctionImport[i];
				if (mFunctionImport &&
					mFunctionImport["sap:action-for"] && mFunctionImport["sap:action-for"] !== "" && mFunctionImport["sap:action-for"] !== " " &&
					mFunctionImport["sap:applicable-path"] && mFunctionImport["sap:applicable-path"] !== "" && mFunctionImport["sap:applicable-path"] !== " ") {
					sApplicablePath = mFunctionImport["sap:applicable-path"];
					mODataProperty = oMetaModel.getODataProperty(mEntityType, sApplicablePath);

					// the applicable-path needs to point to a property that has the annotation 'sap:aggregation-role' equal to 'dimension' (and not 'measure' for example)
					if (mODataProperty && mODataProperty["sap:aggregation-role"] === "dimension") {
						aApplicablePath.push(sApplicablePath);
					} else {
						jQuery.sap.log.error("AnnotationHelper.js - method getApplicablePathForChartToolbarActions: the applicable-path " + sApplicablePath +
							" is either pointing to an entity type property which doesn't exist or does not have 'sap:aggregation-role' set to to 'dimension'.");
					}
				}
			}

			// if there are applicable paths in aApplicablePath, then return a comma separated string which contains each applicable path - e.g. ["property1", "property2"] -> "property1, property2"
			if (aApplicablePath.length > 0 ) {
				return aApplicablePath.join();
			}
		},

		// build expression binding for bread crumbs
		buildBreadCrumbExpression: function (oContext, oTitle, oTypeName) {
			var sBinding,
				sBindingTitle = sap.ui.model.odata.AnnotationHelper.format(oContext, oTitle);

			if (oTitle && oTitle.Path && oTypeName && oTypeName.String) {
				sBinding = "{= $" + sBindingTitle + " ? $" + sBindingTitle + " : '" + oTypeName.String + "' }";
				return sBinding;
			} else {
				// in case of a complex binding of the title we do not introduce our default text fallback
				if (!sBindingTitle) {
					return ("no title");
				}
				return sBindingTitle;
			}
		},


		// builds the expression for the Rating Indicator Subtitle
		buildRatingIndicatorSubtitleExpression: function (mSampleSize) {
			if (mSampleSize) {
				return "{parts: [{path: '" + mSampleSize.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorSubTitle'}";
			}
		},

		// returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')
		formatRatingIndicatorSubTitle: function (iSampleSizeValue) {
			if (iSampleSizeValue) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, this.data("Subtitle")]);
				} else {
					var sSubTitleLabel = iSampleSizeValue > 1 ? oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL");
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, sSubTitleLabel]);
				}
			}
		},

		// builds the expression for the Rating Indicator footer
		buildRatingIndicatorFooterExpression: function (mValue, mTargetValue) {
			if (mTargetValue) {
				return "{parts: [{path: '" + mValue.Path + "'}, {path: '" + mTargetValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorFooterText'}";
			}
			return "{parts: [{path: '" + mValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorFooterText'}";
		},

		// returns the text for the Rating Indicator footer (e.g. '2 out of 5')
		// note: the second placeholder (e.g. "5") for the text "RATING_INDICATOR_FOOTER" can come one from the following:
		// i. if the Property TargetValue for the term UI.DataPoint is a Path then the value is resolved by the method buildRatingIndicatorFooterExpression and passed to this method as 'targetValue'
		// ii. if the Property TargetValue is not a Path (i.e. 'Decimal') then we get the value from the control's Custom Data
		// iii. if neither i. or ii. apply then we use the default max value for the sap.m.RatingIndicator control
		formatRatingIndicatorFooterText: function (value, targetValue) {
			if (value) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (targetValue) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, targetValue]);
				} else if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, this.data("Footer")]);
				} else {
					var iRatingIndicatorDefaultMaxValue = sap.m.RatingIndicator.getMetadata().getPropertyDefaults().maxValue;
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, iRatingIndicatorDefaultMaxValue]);
				}
			}
		},

		// builds the expression for the Rating Indicator aggregate Ccunt
		buildRatingIndicatorAggregateCountExpression: function (mValue) {
			return "{parts: [{path: '" + mValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorAggregateCount'}";
		},

		// returns the text for the Rating Indicator aggregated count (e.g. (243))
		formatRatingIndicatorAggregateCount: function (value) {
			var oResBundle = this.getModel("i18n").getResourceBundle();
			var sText;
			if (value) {
				sText = oResBundle.getText("RATING_INDICATOR_AGGREGATE_COUNT", [value]);
			} else if (this.getCustomData().length > 0) {
				sText = oResBundle.getText("RATING_INDICATOR_AGGREGATE_COUNT", [this.data("AggregateCount")]);
			} else {
				sText = "";
			}

			return sText;
		},

		getEditActionButtonVisibility: function (oInterface, mRestrictions, sEntityType, bParameterEdit) {
			//Standard behaviour is that EDIT Button visbility is bound to ui>/editable
			//if an external EDIT has been specified in the manifest with bParameterEdit this can also be restricted by an applicable path
			var	oMetaModel = oInterface.getInterface(0).getModel();

			if (sap.suite.ui.generic.template.js.AnnotationHelper._areUpdateRestrictionsValid(oMetaModel, sEntityType, mRestrictions)) {
				var sUIEditableExpression = "!${ui>/editable}";
				if (mRestrictions) {
					if (mRestrictions.Updatable.Path) {
						sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, mRestrictions.Updatable.Path, sEntityType);
						return "{= ${" + mRestrictions.Updatable.Path + "} ? " + sUIEditableExpression + " : false}";
					} else if (mRestrictions.Updatable.Bool === "false" && !bParameterEdit) {
						return false;
					}
				}
				return "{=" + sUIEditableExpression + "}";
			} else {
				return false;
			}
		},

		getDeleteActionButtonVisibility: function (oInterface, mRestrictions, sEntityType) {
			var	oMetaModel = oInterface.getInterface(0).getModel();

			if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, sEntityType, mRestrictions)) {
				var sUIEditableExpression = "!${ui>/editable}";
				if (mRestrictions) {
					if (mRestrictions.Deletable.Path) {
						sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, mRestrictions.Deletable.Path, sEntityType);
						return "{= ${" + mRestrictions.Deletable.Path + "} ? " + sUIEditableExpression + " : false}";
					} else if (mRestrictions.Deletable.Bool === "false") {
						return false;
					}
				}
				return "{=" + sUIEditableExpression + "}";
			} else {
				return false;
			}
		},

		getIdForMoreBlockContent : function(oFacet){
			if (oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"] && oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
				return "::MoreContent";
			}
		},

		checkMoreBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, false);
		},

		checkBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, true);
		},

		checkFacetContent : function(oFacetContext, bBlock){
			var sPath;
			var oInterface = oFacetContext.getInterface(0);
			var aFacets = oFacetContext.getModel().getProperty("", oFacetContext);

			//for Reference Facets directly under UI-Facets we need to check facets one level higher - by removing the last part of the path
			var aForPathOfFacetOneLevelHigher = oFacetContext.getPath().split("/Facets");
			var sContextOfFacetOneLevelHigher = oInterface.getModel().getContext(aForPathOfFacetOneLevelHigher[0]);
			if (oInterface.getModel().getProperty('', sContextOfFacetOneLevelHigher).RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet"){
				return sContextOfFacetOneLevelHigher.getPath();
			} else {
				if (!aFacets){
					return;
				}

				for (var iFacet = 0; iFacet < aFacets.length; iFacet++) {
					if (!bBlock){
						if (aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] && aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					} else {
						if (aFacets[iFacet].RecordType !== "com.sap.vocabularies.UI.v1.ReferenceFacet" || (!aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] || aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "true")){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					}
				}
			}

			return sPath;
		},

        // Checks whether inline-create feature has been configured for the given facet
		isInlineCreate : function(oFacet, oSections){
			var oSettings = oSections[sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet)];
			return !!(oSettings && oSettings.createMode && oSettings.createMode === "inline");
		},

		isImageUrl : function(oPropertyAnnotations) {
			var oShowImage = oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageURL"] || oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageUrl"];
			if (oShowImage && oShowImage.Bool && oShowImage.Bool === "false") {
				return false;
			} else if (oShowImage) {
				return true;
			}
			return false;
		},

		matchesBreadCrumb: function(oInterface, oCandidate, sPath) {
			if (sPath) {
				var aSections = sPath.split("/");
				var oEntitySet, oEntityType, oAssociationEnd;

				if (aSections.length > 0) {
					// there's at least one section left - crate breadcrumbs
					var oMetaModel = oInterface.getInterface(0).getModel();
					var sEntitySet = aSections[0];

					for (var i = 0; i < aSections.length; i++) {
						if (i > 0) {
							oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
							oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
							oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, aSections[i]);
							sEntitySet = oAssociationEnd.entitySet;
						}

						if ((i + 1) === aSections.length) {
							if (sEntitySet === oCandidate.name) {
								return true;
							} else {
								return false;
							}
						}
					}
				}
			}
		},
		showFullScreenButton : function(oRouteConfig, oFacet) {
			if (oRouteConfig && oFacet) {
				var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				if (oRouteConfig.component
						&& oRouteConfig.component.settings
						&& oRouteConfig.component.settings.sections
						&& oRouteConfig.component.settings.sections[sFacetId]
						&& oRouteConfig.component.settings.sections[sFacetId].tableMode === "FullScreenTable") {
					return true;
				}
			}
			return false;
		},
		getPersistencyKeyForSmartTable : function(oRouteConfig) {
			// ListReport
			return "listReportFloorplanTable";
		},
		getCreateNavigationIntent: function (sListEntitySet, aSubPages, sAnnotationPath) {
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'create');
		},
		getDisplayNavigationIntent: function (sListEntitySet, aSubPages, sAnnotationPath) {
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'display');
		},
		getSubObjectPageIntent: function (sListEntitySet, aSubPages, sAnnotationPath, sMode) {
			var sNavigationProperty;
			if (sAnnotationPath){
				//AnnotationPath is only filled on Object Page which contains facets->annotationPath
				sNavigationProperty = sAnnotationPath.split("/")[0];
			}
			if (sListEntitySet && aSubPages && aSubPages.length > 0) {
				if (sNavigationProperty){
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && sNavigationProperty === aSubPages[i].navigationProperty && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							return aSubPages[i].navigation[sMode].target;
						}
					}
				} else {
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							return aSubPages[i].navigation[sMode].target;
						}
					}
				}
			}
		},
		extensionPointFragmentExists: function (oFacet, sFragmentId) {
			var sId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (sId === sFragmentId) {
				return true;
			} else {
				return false;
			}
		},
		containsFormWithBreakoutAction: function (oFacetCandidate, sIdCriterion) {
			var sCandidateId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacetCandidate);
			if (sCandidateId === sIdCriterion) {
				if (oFacetCandidate.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet" &&
						oFacetCandidate.Target &&
						oFacetCandidate.Target.AnnotationPath &&
						oFacetCandidate.Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") != -1) {
					return true;
				}
			}
			return false;
		},
		formatWithExpandSimple: function (oInterface, oDataField, oEntitySet) {
			var aExpand = [], sExpand, oEntityType;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}

			if (oEntitySet) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				// TODO: check with UI2 if helper to get entity type can be used, avoid using this path
				var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oInterface.getPath());
				if (aMatches && aMatches.length && aMatches[0]) {
					var oEntityTypeContext = oMetaModel.getProperty(aMatches[0]);
					var sNamespace = oMetaModel.getODataEntityContainer().namespace;
					oEntityType = oMetaModel.getODataEntityType(sNamespace + '.' + oEntityTypeContext.name);
				}
			}

			if (oEntityType) {
				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function (oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		formatWithExpand: function (oInterface, oDataField, oEntitySet) {
			sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand(oInterface, oDataField, oEntitySet);

			oInterface = oInterface.getInterface(0);
			sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple(oInterface, oDataField, oEntitySet);
			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		_getNavigationPrefix: function (oMetaModel, oEntityType, sProperty) {
			var sExpand = "";
			var aParts = sProperty.split("/");

			if (aParts.length > 1) {
				for (var i = 0; i < (aParts.length - 1); i++) {
					var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
					if (oAssociationEnd) {
						oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
						if (sExpand) {
							sExpand = sExpand + "/";
						}
						sExpand = sExpand + aParts[i];
					} else {
						return sExpand;
					}
				}
			}

			return sExpand;
		},

		getCurrentPathWithExpand: function (oInterface, oContext, oEntitySetContext, sNavigationProperty ) {
			//oContext is needed to be set for having the correct "context" for oInterface
			oInterface = oInterface.getInterface(0);
			var aExpand = [], sNavigationPath;
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));
			var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);

			aExpand = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetExpand(sResolvedPath, oMetaModel, oEntityType, oEntitySet);

			if (aExpand.length > 0) {
				sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
			} else {
				sNavigationPath = "{ path : '" + sNavigationProperty + "' }";
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getNavigationPathWithExpand: function (oInterface, oContext, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aExpand = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oInterface, oContext);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			} else {
				var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);
			}

			aExpand = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetExpand(sResolvedPath, oMetaModel, oEntityType, oEntitySet);

			if (aExpand.length > 0) {
				if (sNavigationProperty === "") {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}
				} else {
					// add expand to navigation path
					sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
				}
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getFacetExpand: function (sResolvedPath, oMetaModel, oEntityType, oEntitySet){
			var aDependents = [], aExpand = [], oFacetContent, aFacetContent = [];

			if (sResolvedPath) {
				aFacetContent = oMetaModel.getObject(sResolvedPath) || [];
			}

			aFacetContent = aFacetContent.Data || aFacetContent;

			var fnGetDependents = function (sProperty, bIsValue) {
				var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sProperty);
				if (sExpand) {
					// check if already in expand array - if not yet add it
					if (aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
				if (bIsValue) {
					try {
						aDependents = sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths(oMetaModel, oEntitySet, sProperty, true) || [];
					} catch (e) {
						aDependents = [];
					}
					for (var i = 0; i < aDependents.length; i++) {
						if (aExpand.indexOf(aDependents[i]) === -1) {
							aExpand.push(aDependents[i]);
						}
					}
				}
			};

			var fnAnalyzeApplyFunctions = function (oParameter) {
				if (oParameter.Type === "LabeledElement") {
					fnGetDependents(oParameter.Value.Path);
				} else if (oParameter.Type === "Path") {
					fnGetDependents(oParameter.Value);
				}
			};

			for (var i = 0; i < aFacetContent.length; i++) {
				oFacetContent = aFacetContent[i];

				if (oFacetContent.Value && oFacetContent.Value.Path) {
					fnGetDependents(oFacetContent.Value.Path, true);
				}

				if (oFacetContent.Value && oFacetContent.Value.Apply && oFacetContent.Value.Apply.Name === "odata.concat") {
					oFacetContent.Value.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.Action && oFacetContent.Action.Path) {
					fnGetDependents(oFacetContent.Action.Path);
				}

				if (oFacetContent.Target) {
					if (oFacetContent.Target.Path){
						fnGetDependents(oFacetContent.Target.Path);
					}
					if (oFacetContent.Target.AnnotationPath){
						fnGetDependents(oFacetContent.Target.AnnotationPath);
					}
				}

				if (oFacetContent.SemanticObject && oFacetContent.SemanticObject.Path) {
					fnGetDependents(oFacetContent.SemanticObject.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Path) {
					fnGetDependents(oFacetContent.Url.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Apply && oFacetContent.Url.Apply.Parameters) {
					oFacetContent.Url.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}


				if (oFacetContent.UrlContentType && oFacetContent.UrlContentType.Path) {
					fnGetDependents(oFacetContent.UrlContentType.Path);
				}

			}

			if (aFacetContent.name) {
				fnGetDependents(aFacetContent.name, true);
			}

			return aExpand;
		},

		isSelf: function (sPath) {
			if (sPath === undefined || (sPath && sPath.indexOf('@') === 0 && sPath.indexOf('/') === -1)) {
				return true;
			}
			return false;
		},
		// Needed for analytics fragments
		number: function (val) {
			if (!val) {
				return NaN;
			} else if (val.Decimal) {
				return +val.Decimal;
			} else if (val.Path) {
				return '{' + val.Path + '}';
			} else {
				return NaN;
			}
		},
		// Needed for analytics fragments
		formatColor: (function () {
			function formatVal(val) {
				if (!val) {
					return NaN;
				} else if (val.Decimal) {
					return val.Decimal;
				} else if (val.EnumMember) {
					return '\'' + val.EnumMember + '\'';
				} else if (val.Path) {
					return '${' + val.Path + '}';
				} else {
					return NaN;
				}
			}

			function formatCriticality(oDataPoint) {
				var criticality = oDataPoint.Criticality;

				return '{= ' + formatVal(criticality) + ' === \'UI.CriticalityType/Negative\' ? \'Error\' : ' + formatVal(criticality) + '=== \'UI.CriticalityType/Critical\' ? \'Critical\' : \'Good\'}';
			}

			function formatCriticalityCalculation(oDataPoint) {
				var value = formatVal(oDataPoint.Value);
				var oCriticalityCalc = oDataPoint.CriticalityCalculation;

				return '{= (' + value + ' < ' + formatVal(oCriticalityCalc.DeviationRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.DeviationRangeHighValue) + ') ? \'Error\' : (' + value
					+ ' < ' + formatVal(oCriticalityCalc.ToleranceRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.ToleranceRangeHighValue) + ') ? \'Critical\' : \'Good\'}';
			}

			return function (oDataPoint) {
				if (oDataPoint.Criticality) {
					return formatCriticality(oDataPoint);
				} else if (oDataPoint.CriticalityCalculation) {
					return formatCriticalityCalculation(oDataPoint);
				}
			};
		})(),

		_determineColumnIndex: function (oContext) {
			var sColumn = oContext.getPath();
			var iColumnIndex = Number(sColumn.slice(sColumn.lastIndexOf("/") + 1));
			var sLineItem = sColumn.slice(0, sColumn.lastIndexOf("/"));
			var oLineItem = oContext.getModel().getObject(sLineItem);
			for (var iRecord = 0; iRecord < iColumnIndex; iRecord++) {
				if ((oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
						oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
						(!oLineItem[iRecord].Inline || oLineItem[iRecord].Inline.Bool === "false")) {
					iColumnIndex--;
				}
			}
			return iColumnIndex;
		},

		createP13NColumnForAction: function (iContext, oDataField) {
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( iContext );

			var sP13N = '\\{"columnKey":"' + oDataField.Label.String + '", "columnIndex":"' + iColumnIndex + '", "actionButton":"true" \\}';
			return sP13N;
		},

		// For Personalization and ContactPopUp for contact column
		createP13NColumnForContactPopUp: function (oInterface, oContextSet, oDataField, oDataFieldTarget, sAnnotationPath) {
			var sP13N = "";
			var sNavigation = "";
			var aAdditionalProperties = [];
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel){
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}
			// Make the Column Key unique for the contact. Check if Navigation exist then create P13N from Navigation path adding DatafieldTarget else create P13N from DataFieldTarget
			if (sNavigation) {
				sP13N = '\\{"columnKey":"' + sNavigation + '/' + oDataFieldTarget.fn.Path + '", "leadingProperty":"' + sNavigation;
				sNavigation = sNavigation + "/";
			} else if (oDataFieldTarget.fn) {
				sP13N = '\\{"columnKey":"' + oDataFieldTarget.fn.Path;
			}
			// For the expand property of Navigation, add navigation and DataFieldTarget to the AdditionalProperties of P13N
			if (oDataFieldTarget.fn && oDataFieldTarget.fn.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.fn.Path);
			}
			// Form String to add to P13N from AdditionalProperties Array
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			// Determine column index
			var oContext = oInterface.getInterface(1);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( oContext );
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}
			sP13N += '" \\}'; // add terminator string again
			return sP13N;
		},

		createP13NColumnForIndicator: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue, sAnnotationPath) {
			var sP13N = "";
			var sNavigation = "";
			var aAdditionalProperties = [];
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel){
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}
			if (sNavigation){
				sP13N = '\\{"columnKey":"' + sNavigation + '", "leadingProperty":"' + sNavigation;
				sNavigation = sNavigation + "/";
			} else {
				sP13N = '\\{"columnKey":"';
				if (oDataField.Label){
					sP13N += oDataField.Label.String;
				} else if (oDataField.Value) {
					sP13N += oDataField.Value.Path;
				} else {
					sP13N += sAnnotationPath.split('@')[1];
				}
			}
			if (oDataFieldTarget.Value && oDataFieldTarget.Value.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.Value.Path);
			}
			if (oDataFieldTarget.TargetValue && oDataFieldTarget.TargetValue.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.TargetValue.Path);
			}
			if (oDataFieldTarget.Criticality && oDataFieldTarget.Criticality.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.Criticality.Path);
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			// Determine column index
			var oContext = oInterface.getInterface(2);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( oContext );
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}
			sP13N += '" \\}'; // add terminator string again
			return sP13N;
		},

		createP13NColumnForChart: function (oInterface, oContextSet, oDataField, oDataFieldTarget, sAnnotationPath) {
			var sP13N = '\\{"columnKey":"', aAdditionalProperties = [], sNavigation = "";
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel) {
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}

			if (sNavigation !== "") {
				sP13N += sNavigation + '", "leadingProperty":"' + sNavigation;
				sNavigation += "/";
			} else if (oDataField.Label){
				sP13N += oDataField.Label.String;
			} else {
				sP13N += sAnnotationPath.split('@')[1];
			}

			if (oDataFieldTarget.Dimensions) {
				oDataFieldTarget.Dimensions.forEach(function(oDimension){
					aAdditionalProperties.push(sNavigation + oDimension.PropertyPath);
				});
			}
			if (oDataFieldTarget.Measures) {
				oDataFieldTarget.Measures.forEach(function(oMeasure){
					aAdditionalProperties.push(sNavigation + oMeasure.PropertyPath);
				});
			}

			if (aAdditionalProperties.length > 0) {
				sP13N += '", "additionalProperty":"' + aAdditionalProperties.join();
			}

			var oContext = oInterface.getInterface(1);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex(oContext);
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}

			sP13N += '" \\}';

			return sP13N;
		},

		createP13N: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue) {
			var sP13N = "", aAdditionalProperties = [], sNavigation = "";

			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField" || oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" ||
				oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {

			if (oDataField.Value.Path) {

			    var sColumnKey = oDataField.Value.Path;
				if (oDataField.Visualization && oDataField.Visualization.EnumMember){
					sColumnKey = sColumnKey + oDataField.Visualization.EnumMember.slice(oDataField.Visualization.EnumMember.lastIndexOf("/") + 1, oDataField.Visualization.EnumMember.length);
				}
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + oDataField.Value.Path;
				// get Navigation Prefix
				var oMetaModel = oInterface.getInterface(0).getModel();
				if (oMetaModel){
					var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
					if (oEntityType){
						sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Value.Path);
						if (sNavigation){
							sNavigation = sNavigation + "/";
						}
					}
				}
			} else if (oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				oDataField.Value.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "Path") {
						if (!sP13N) {
							sP13N = '\\{"columnKey":"' + oParameter.Value + '", "leadingProperty":"' + oParameter.Value;
						} else {
							aAdditionalProperties.push(oParameter.Value);
						}
					}
				});
			}
			if ((oContextProp.type === "Edm.DateTime") && (oContextProp["sap:display-format"] === "Date")) {
				sP13N += '", "type":"date';
			}
			if (oDataField.Criticality && oDataField.Criticality.Path) {
				aAdditionalProperties.push(oDataField.Criticality.Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.Text"] && oContextProp["com.sap.vocabularies.Common.v1.Text"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.Text"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.ISOCurrency"] && oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.Unit"] && oContextProp["Org.OData.Measures.V1.Unit"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.Unit"].Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.FieldControl"] && oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path);
			}

			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Apply && oDataField.Url.Apply.Parameters) {
				oDataField.Url.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "LabeledElement") {
						aAdditionalProperties.push(oParameter.Value.Path);
					}
				});
			}
			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Path) {
				aAdditionalProperties.push(oDataField.Url.Path);
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			var bNotSortable = false;
			if (oContextSet["Org.OData.Capabilities.V1.SortRestrictions"] && oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties) {
				var aNonSortableProperties = oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties;
				for (var i = aNonSortableProperties.length - 1; i >= 0; i--) {
					if (aNonSortableProperties[i].PropertyPath === oDataField.Value.Path) {
						bNotSortable = true;
						break;
					}
				}
			}
			if (!bNotSortable) {
				if (sNavigation) {
					sP13N += '", "sortProperty":"' + sNavigation + oContextProp.name;
				} else {
					sP13N += '", "sortProperty":"' + oContextProp.name;
				}
			}
			var bNotFilterable = false;
			if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"]) {
				if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].Filterable !== 'false') {
					if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties) {
						var aNonFilterableProperties = oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties;
						for (var j = aNonFilterableProperties.length - 1; j >= 0; j--) {
							if (aNonFilterableProperties[j].PropertyPath === oDataField.Value.Path) {
								bNotFilterable = true;
								break;
							}
						}
					}
				} else {
					bNotFilterable = true;
				}
			}
			if (!bNotFilterable) {
				sP13N += '", "filterProperty":"' + oContextProp.name;
			}
			} else {
				sP13N = '\\{"columnKey":"' + oDataField.Label.String + '", "actionButton":"true';
			}
			return sP13N + '" \\}';
		},
		hasActions: function (Par) {
			for (var i = 0; i < Par.length; i++) {
				if (Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
					return true;
				}
			}
			return false;
		},
		hasCustomActions: function(oRouteConfig, sEntitySet, oManifestExt, oFacet) {
			if (sEntitySet && oManifestExt) {
				if (oFacet) {
					// helper was called from facet (i.e. Object Page table)
					if (oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							// helper was called from fragment (i.e. SmartTable)
							var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
							if (!oManifestExtEntitySet.Sections) {
								return false;
							}
							var oSection = oManifestExtEntitySet.Sections[sFacetId];
							if (oSection && oSection.id === sFacetId && oSection.Actions) {
								for (var i in oSection.Actions) {
									if (oSection.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				} else {
					// helper was called from ListReport or AnalyticalListPage
					if (oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]) {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]["sap.ui.generic.app"];
					} else if (oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]) {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"];
					}
					if (oManifestExt && oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							if (oManifestExtEntitySet.Actions) {
								for (var i in oManifestExtEntitySet.Actions) {
									if (oManifestExtEntitySet.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		},
		// Determine selection mode of grid table
		getSelectionModeGridTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig, bIsDraftEnabled) {
			for ( var i in oRouteConfig.pages) {
				if (oRouteConfig.pages[i].entitySet === sRootEntitySet &&  sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oEntitySet, oRouteConfig.pages[i].pages)) {
					return "Single";
				}
			}
			if ((sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet))){
				return "Single";
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if (oDeleteRestrictions && oDeleteRestrictions.Deletable) {
				if (oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') {
					return "{= ${ui>/editable} ? 'Single' : 'None' }";
				}
				if (oDeleteRestrictions.Deletable.Path) {
					return "{= ${ui>/editable} ? 'Single' : 'None' }";
				}
			}
			//Default mode, only IsDraftEnabled and NO settings in Annotation like sap:deletable="true" or sap:deletable="false"
			if (bIsDraftEnabled) {
				return "{= ${ui>/editable} ? 'Single' : 'None' }";
			}
			return "None";
		},
		// Determine selection mode of responsive table
		getSelectionModeResponsiveTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig, bIsDraftEnabled) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet)) {
					return "SingleSelectLeft";
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if (oDeleteRestrictions && oDeleteRestrictions.Deletable) {
				if (oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') {
					return "{= ${ui>/editable} ? 'SingleSelectLeft' : 'None' }";
				}
				if (oDeleteRestrictions.Deletable.Path) {
					return "{= ${ui>/editable} ? 'SingleSelectLeft' : 'None' }";
				}
			}
			//Default mode, only IsDraftEnabled and NO settings in Annotation like sap:deletable="true" or sap:deletable="false"
			if (bIsDraftEnabled) {
				return "{= ${ui>/editable} ? 'SingleSelectLeft' : 'None' }";
			}
			return "None";
		},
		getSortOrder: function (Par) {
			var str = '';
			for (var i = 0; i < Par.length; i++) {
				if (!str) {
					str = Par[i].Property.PropertyPath;
				} else {
					str = str + ', ' + Par[i].Property.PropertyPath;
				}
				if (Par[i].Descending) {
					str = str + ' ' + Par[i].Descending.Bool;
				}
			}
			return str;
		},
		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		},
		getStableIdPartFromDataField: function (oDataField) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
				if (oDataField.SemanticObject.String) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.String);
				} else if (oDataField.SemanticObject.Path) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.Path);
				}
				if (oDataField.Action && oDataField.Action.String) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
				} else if (oDataField.Action && oDataField.Action.Path) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.Path);
				}
				return sIdPart;
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Target.AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Path);
			} else if (oDataField.Value && oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataField.Value.Apply.Parameters.length; i++) {
					if (oDataField.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		},
		getStableIdPartFromDataPoint: function (oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		},
		getStableIdPartFromFacet: function (oFacet) {
			var sHeaderFacetPrefix = "";
			if (typeof this.getContext === "function" && this.getContext() && this.getContext().getPath() && this.getContext().getPath().indexOf("com.sap.vocabularies.UI.v1.HeaderFacets") >= 0) {
				sHeaderFacetPrefix = "headerEditable::";
			}
			if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					// If the ID is missing a random value is returned because a duplicate ID error will be thrown as soon as there is
					// more than one form on the UI.
					jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. You have to set an ID at all collection facets.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					return sHeaderFacetPrefix + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oFacet.Target.AnnotationPath);
				}
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		},
		extensionPointBeforeFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			if (oManifestExtend){
				var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				return oManifestExtend[sExtensionPointId];
			}
			return false;
		},
		extensionPointAfterFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			if (oManifestExtend){
				var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				return oManifestExtend[sExtensionPointId];
			}
			return false;
		},
		getExtensionPointBeforeFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getExtensionPointAfterFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getRepeatIndex: function (oValue) {
			if (oValue && oValue.getPath()) {
				var sPadding = "0000000000";
				var sPaddedIndex = sPadding + ((parseInt(oValue.getPath().substring(oValue.getPath().lastIndexOf("/") + 1), 10) + 1 ) * 10).toString();
				return sPaddedIndex.substr(sPaddedIndex.length - sPadding.length);
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to get index.");
			}
		},
		getColumnListItemType: function (oListEntitySet, aSubPages) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oListEntitySet, aSubPages)) {
				return "Navigation";
			} else {
				return "Inactive";
			}
		},
		hasSubObjectPage: function (oListEntitySet, aSubPages) {
			var bHasSubObjectPage = false;
			if (oListEntitySet.name && aSubPages && aSubPages.length > 0) {
				aSubPages.forEach(function (oSubPage) {
					if (oListEntitySet.name === oSubPage.entitySet) {
						bHasSubObjectPage = true;
						return bHasSubObjectPage;
					}
				});
			}
			return bHasSubObjectPage;
		},

		// Check for Creatable-Path. Returns either true, false, or creatable-path
		isRelatedEntityCreatable: function (oInterface, oSourceEntitySet, oRelatedEntitySet, aSubPages, oFacet, oSections) {

			var result = false;
			var oModel = oInterface.getInterface(0).getModel();
			var oInsertRestrictions = oSourceEntitySet["Org.OData.Capabilities.V1.InsertRestrictions"];
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);

			if (oAnnotationHelper.hasSubObjectPage(oRelatedEntitySet, aSubPages) || (oSections && oAnnotationHelper.isInlineCreate(oFacet, oSections))) {
				result = "{= ${ui>/editable}}";

				// check if there are Insert Restrictions.
				if (oInsertRestrictions && oInsertRestrictions.NonInsertableNavigationProperties && oInsertRestrictions.NonInsertableNavigationProperties.length > 0) {
					// find the Insert Restriction for the RelatedEntitySet if available
					for (var i = 0; i < oInsertRestrictions.NonInsertableNavigationProperties.length; i++) {
						var oNavigationProperty = oInsertRestrictions.NonInsertableNavigationProperties[i];
						var sNavigationPropertyPath = sap.suite.ui.generic.template.js.AnnotationHelper._getNonInsertableNavigationPropertyPath(oNavigationProperty);

						if (sNavigationPropertyPath) {	// if Navigation Property Path is undefined, skip this iteration
							var oAssociationSetEnd = oModel.getODataAssociationSetEnd(oSourceEntityType, sNavigationPropertyPath); // get the association set end

							//check if entity set of the Navigation Property Path matches to the input parameter RelatedEntitySet.
							if (oAssociationSetEnd && oAssociationSetEnd.entitySet === oRelatedEntitySet.name) {
								if (oNavigationProperty.If && oNavigationProperty.If.length === 2) { // 2 entries: 1st is the condition and the 2nd is the navigation path
									var oIfCondition = oNavigationProperty.If[0]; // 1st entry is the If condition
									var sFullCreatablePath = oIfCondition.Not ? oIfCondition.Not.Path : oIfCondition.Path;

									// Check if the creatable-path is valid
									if (sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, oSourceEntityType.entityType, sFullCreatablePath)) {
										sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sFullCreatablePath, oSourceEntityType.name); // expand the Creatable-Path

										if (oIfCondition.Not) {
											result = "{= ${ui>/editable} ? ${" + sFullCreatablePath + "} : false}";
										} else {
											result = "{= ${ui>/editable} ? !${" + sFullCreatablePath + "} : false}";
										}
									} else {
										result = false; // if the creatable-path is not valid, disable creation; assuming error in the annotations
										jQuery.sap.log.warning("Creatable-Path is not valid. Creation for " + oRelatedEntitySet.name + " is disabled");
									}
								} else {
									result = false; //there is no IF condition therefore the creation for the related entity is disabled
								}
								break; // stop loop
							}
						}
					}
				}
			}
			return result;
		},
		/***************************************************************
			Get the Navigation Property Path from the annotations with IF or not.
		 ***************************************************************/
		_getNonInsertableNavigationPropertyPath: function (oNavigationProperty) {
			var sNavigationPropertyPath;
			if (oNavigationProperty.NavigationPropertyPath) {
				sNavigationPropertyPath = oNavigationProperty.NavigationPropertyPath; // no IF annotation
			} else if (oNavigationProperty.If) {
				sNavigationPropertyPath = oNavigationProperty.If[1].NavigationPropertyPath; // 2nd entry in for the IF is the Navigation Property Path
			}
			return sNavigationPropertyPath;
		},

		areDeleteRestrictionsValid: function (oModel, sEntityType, mRestrictions) {
			// Valid if there is no restrictions,
			var result = !(mRestrictions && mRestrictions.Deletable && mRestrictions.Deletable.Bool && mRestrictions.Deletable.Path) &&
				((!mRestrictions) || (mRestrictions.Deletable && mRestrictions.Deletable.Bool)
					|| (mRestrictions.Deletable && mRestrictions.Deletable.Path && sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, sEntityType, mRestrictions.Deletable.Path)));

			if (!result) {
				jQuery.sap.log.error("Service Broken: Delete Restrictions annotations are invalid. ");
			}
			return result;
		},

		_areUpdateRestrictionsValid: function (oModel, sEntityType, mRestrictions) {
			// Valid if there is no restrictions,
			var result = !(mRestrictions && mRestrictions.Updatable && mRestrictions.Updatable.Bool && mRestrictions.Updatable.Path) &&
				((!mRestrictions) || (mRestrictions.Updatable && mRestrictions.Updatable.Bool)
				|| (mRestrictions.Updatable && mRestrictions.Updatable.Path && sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, sEntityType, mRestrictions.Updatable.Path)));

			if (!result) {
				jQuery.sap.log.error("Service Broken: Delete Restrictions annotations are invalid. ");
			}
			return result;
		},

		_isPropertyPathBoolean: function (oModel, sEntityTypeName, sPropertyPath) {
			var sProperty = sPropertyPath;
			var oPathEntityType = oModel.getODataEntityType(sEntityTypeName);
			if (sProperty.indexOf("/") > -1) { // if it's a navigation path, we have to expand to find the right entity type
				var aPathParts = sProperty.split("/");
				for (var j = 0; j < aPathParts.length - 1; j++) {  // go through the parts finding the last entity type;
					var oAssociationEnd = oModel.getODataAssociationEnd(oPathEntityType, aPathParts[j]);
					oPathEntityType = oModel.getODataEntityType(oAssociationEnd.type);
				}
				sProperty = aPathParts[aPathParts.length - 1]; // last entry in array is a property
			}

			var oODataProperty = oModel.getODataProperty(oPathEntityType, sProperty);
			return (oODataProperty && oODataProperty.type === "Edm.Boolean");
		},
		actionControl: function (oInterface, sActionApplicablePath, sEntityType) {
			sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sActionApplicablePath, sEntityType);
			if (sActionApplicablePath) {
				return "{path: '" + sActionApplicablePath + "'}";
			} else {
				return "true";
			}
		},
		_actionControlExpand: function (oInterface, sPath, sEntityType) {
			var aExpand = [], sExpand;
			oInterface = oInterface.getInterface(0);
			var oMetaModel = oInterface.getModel();
			var oEntityType = oMetaModel.getODataEntityType(sEntityType);
			// check if expand is needed
			if (sPath) {
				sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sPath);
				if (sExpand) {
					aExpand.push(sExpand);
				}
			}
			if (aExpand.length > 0) {
				// we analyze a facet that is part of the root context
				// set expand to expand data bag
				var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
				if (oPreprocessorsData) {
					var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
					for (var j = 0; j < aExpand.length; j++) {
						if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
							aRootContextExpand.push(aExpand[j]);
						}
					}
					oPreprocessorsData.rootContextExpand = aRootContextExpand;
				}
			}
		},
		getEntityTypesForFormPersonalization: function (oInterface, oFacet, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aEntityTypes = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var aFacets = [];
			if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" && oFacet.Facets) {
				aFacets = oFacet.Facets;
			} else if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				aFacets.push(oFacet);
			}
			aFacets.forEach(function (oFacet) {
				var sNavigationProperty;
				if (oFacet.Target && oFacet.Target.AnnotationPath && oFacet.Target.AnnotationPath.indexOf("/") > 0) {
					sNavigationProperty = oFacet.Target.AnnotationPath.split("/")[0];
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
					if (oAssociationEnd && oAssociationEnd.entitySet) {
						oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
						if (aEntityTypes.indexOf(oEntitySet.entityType.split(".")[1]) === -1) {
							aEntityTypes.push(oEntitySet.entityType.split(".")[1]);
						}
					}
				} else {
					if (aEntityTypes.indexOf(oEntitySetContext.entityType.split(".")[1]) === -1) {
						aEntityTypes.push(oEntitySetContext.entityType.split(".")[1]);
					}
				}
			});
			return aEntityTypes.join(", ");
		},

		formatHeaderTitle: function(oInterface, oDataField) {
			// return Expression Binding for DefaultTitle in createMode
			return "{parts: [{path: 'ui>/createMode'}, {path: '" + oDataField.Title.Value.Path + "'}], formatter: '._templateFormatters.formatDefaultObjectTitle'}";
		},

		_mapTextArrangement4smartControl: function(sTextArrangementIn) {
			var sTextArrangement = "descriptionAndId";
			switch (sTextArrangementIn) {
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
					sTextArrangement = "idAndDescription";
					break;
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
					sTextArrangement = "idOnly";
					break;
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
					sTextArrangement = "descriptionOnly";
					break;
				default:
					break;
			}
			return sTextArrangement;
		},

		getTextArrangementForSmartControl: function (oInterface, oField, refEntitySet, oEntitySet) {
			oInterface = oInterface.getInterface(0);
			var oEntityType;
			var oMetaModel = oInterface.getModel();

			if (refEntitySet.name == undefined) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				oEntityType = oMetaModel.getODataEntityType(refEntitySet.entityType);
			}

		    var sTextArrangement = "descriptionAndId";
			if  (oMetaModel.getODataProperty(oEntityType, oField.Value.Path)) {
				var oPropertyTextModel = oMetaModel.getODataProperty(oEntityType, oField.Value.Path)["com.sap.vocabularies.Common.v1.Text"];
				// 1. check TextArrangement definition for property
				if (oPropertyTextModel && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"] && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				  sTextArrangement = sap.suite.ui.generic.template.js.AnnotationHelper._mapTextArrangement4smartControl(
										oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
				}
			}
			// 2. check TextArrangement definition for entity type
			if (oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"] && oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				sTextArrangement = sap.suite.ui.generic.template.js.AnnotationHelper._mapTextArrangement4smartControl(
									oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
			}
			return sTextArrangement;
		},

		isDeepFacetHierarchy: function (oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		},

		doesCollectionFacetOnlyContainForms: function (oFacet) {
			var bReturn = true;
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].Target && oFacet.Facets[i].Target.AnnotationPath) {
						if ((oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Identification") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") < 0)) {
							bReturn = false;
						}
					}
				}
			} else {
				bReturn = false;
			}
			return bReturn;
		},

		doesFieldGroupContainOnlyOneMultiLineDataField: function (oFieldGroup, oFirstDataFieldProperties) {
			if (oFieldGroup.Data.length !== 1) {
				return false;
			}
			if ((oFirstDataFieldProperties['com.sap.vocabularies.UI.v1.MultiLineText'] === undefined)
				|| (oFieldGroup.Data[0].RecordType !== "com.sap.vocabularies.UI.v1.DataField")) {
				return false;
			}
			return true;
		},
		testFormatter: function(value) {
			return "formatted:" + value;
		},
		getFacetID: function(sEntitySet, oFacet) {
			return sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
		},
		formatComponentSettings: function(oInterface, oEntitySet, oReuseComponent, sNavigationProperty)	{
			var oThisInterface = oInterface.getInterface(0),
				oMetaModel = oThisInterface.getModel(),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			sNavigationProperty = sNavigationProperty || oReuseComponent.binding;
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
					// fix the type to the target type
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				}
			}
			var sSemanticObject = sap.ui.model.odata.AnnotationHelper.format(oThisInterface, oEntitySet["com.sap.vocabularies.Common.v1.SemanticObject"]);
			var sObjectKeys = "";
			oEntityType.key.propertyRef.forEach(function (key) {
				sObjectKeys += "{" + key.name + "}::";
			});
			sObjectKeys = sObjectKeys.replace(/::$/, "");
			var	settings = {
			        //Bind the UI mode to the component. Three states are allowed (display,edit,create)
					"uiMode": "{= ${ui>/createMode} ? '" +
					    UIMode.Create +
					    "' : ( ${ui>/editable} ? '" +
					    UIMode.Edit +
					    "' : '" +
					    UIMode.Display +
					    "') }",
                    // The semanti cobject is constant for this context
					"semanticObject": sSemanticObject || ""
				};


			if (oReuseComponent) {
				jQuery.extend(settings, oReuseComponent.settings);
				var sValue = JSON.stringify(settings);
				sValue = sValue.replace(/\}/g, "\\}").replace(/\{/g, "\\{"); // check bindingparser.js escape function
				return sValue;
			}
		},
		isListReportTemplate: function(oRouteConfig) {
			if (oRouteConfig) {
				return oRouteConfig.template === "sap.suite.ui.generic.template.ListReport";
			}
		},
		isAnalyticalListPageOrListReportTemplate: function(oRouteConfig) {
			if (oRouteConfig) {
				return (oRouteConfig.template === "sap.suite.ui.generic.template.AnalyticalListPage" || oRouteConfig.template === "sap.suite.ui.generic.template.ListReport");
			}
		},

		getStableIdPartForDatafieldActionButton: function(oDatafield, oFacet) {
			var sStableId = "";
			var sDatafieldStableId = "";
			var sFacetStableId = "";
			if (oFacet) {
				sFacetStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			}
			if (oDatafield) {
				sDatafieldStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField(oDatafield);
			}
			sStableId = (sFacetStableId !== "" ? sFacetStableId + "::" : "") + "action::" + sDatafieldStableId;
			return sStableId;
		},
		_hasCustomDeterminingActionsInListReport: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Actions) {
					for (var action in oManifestExtEntitySet.Actions) {
						if (oManifestExtEntitySet.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		},
		_hasCustomDeterminingActionsInObjectPage: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Header && oManifestExtEntitySet.Header.Actions) {
					for (var action in oManifestExtEntitySet.Header.Actions) {
						if (oManifestExtEntitySet.Header.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		},
		hasDeterminingActionsRespectingApplicablePath: function(oContext, aTerm, sEntitySet, oManifestExt) {
			var sApplicablePaths = "";
			oContext = oContext.getInterface(0);
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.ObjectPage.view.Details"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInObjectPage(sEntitySet, oManifestExt["sap.suite.ui.generic.template.ObjectPage.view.Details"]["sap.ui.generic.app"])) {
						return "true";
				}
			if (aTerm){
				for (var iRecord = 0; iRecord < aTerm.length; iRecord++) {
					if ((aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") &&
							aTerm[iRecord].Determining && aTerm[iRecord].Determining.Bool === "true") {
						var sFunctionImport = oContext.getModel().getODataFunctionImport(aTerm[iRecord].Action.String, true);
						var oFunctionImport = oContext.getModel().getObject(sFunctionImport);
						if (oFunctionImport["sap:applicable-path"]) {
							if (sApplicablePaths.length > 0) {
								sApplicablePaths += " || ";
							}
							sApplicablePaths += "${path: '" + oFunctionImport["sap:applicable-path"] + "'}";
						} else {
							return "true";
						}
					}
				}
			}
			if (sApplicablePaths.length > 0) {
				return "{= " + sApplicablePaths +  " || ${ui>/editable}}";
			} else {
				return "{ui>/editable}";
			}
		},
		hasDeterminingActions: function(aTerm, sEntitySet, oManifestExt) {
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInListReport(sEntitySet, oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]["sap.ui.generic.app"])) {
				return "true";
			} else if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInListReport(sEntitySet, oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"])) { //Check for AnalyticalListPage
				return "true";
			}
			for (var iRecord = 0; iRecord < aTerm.length; iRecord++) {
				if ((aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
						aTerm[iRecord].Determining && aTerm[iRecord].Determining.Bool === "true") {
						return "true";
					}
			}

			return "false";
		},

		actionControlDetermining: function(oRouteConfig, sActionApplicablePath) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.isListReportTemplate(oRouteConfig) || !sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},
		actionControlInline: function(sActionApplicablePath) {
			if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},
		actionControlBreakout: function(sActionApplicablePath) {
			if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},

		/**
		 * Build a binding expression that will executed at runtime to calculate the percent value for a datapoint, so it can be consumed in the Progress Indicator.
		 * Rules to calculate:
		 * If the UoM is % then use the value as the percent value
		 * If the UoM is not % or is not provided then build the expression to calculate the percent value = data point value / target * 100
		 * The expression will be then resolved at runtime by the view
		 * Responsibility, resolve paths at pre-processing
		 * @function
		 * @private
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @parameter {map} [mUoM] A map containg the unit of measure as per the vocabulary term Org.OData.Measures.V1.Unit or Org.OData.Measures.V1.ISOCurrency
		 * @returns {string} A binding expression containing the formula to calculate the Progress Indicator percent value
		 */
		buildExpressionForProgressIndicatorPercentValue : function(oInterface, dataPoint, mUoM){
			var sPercentValueExpression = "0";

			if (dataPoint.Value && dataPoint.Value.Path){ // Value is mandatory and it must be a path
					var sValue = "$" + sap.ui.model.odata.AnnotationHelper.format(oInterface, dataPoint.Value); // Value is expected to be always a path. ${Property}
					var sTarget, sUoM;

					if (dataPoint.TargetValue){ // Target can be a path or Edm Primitive Type
						sTarget = sap.ui.model.odata.AnnotationHelper.format(oInterface, dataPoint.TargetValue);
						sTarget = dataPoint.TargetValue.Path ? "$" + sTarget : sTarget;
					}

					if (mUoM){ // UoM or Currency can be a path or directly in the annotation
						mUoM = mUoM['Org.OData.Measures.V1.Unit'] || mUoM["Org.OData.Measures.V1.ISOCurrency"];
						if (mUoM){
							sUoM = sap.ui.model.odata.AnnotationHelper.simplePath(oInterface, mUoM);
							sUoM = sUoM && mUoM.Path ?  "$" + sUoM : "'" + sUoM + "'";
						}
					}

					// The expression consists of the following parts:
					// 1) When UoM is '%' then percent = value (target is ignored), and check for boundaries (value > 100 and value < 0).
					// 2) When UoM is not '%' (or is not provided) then percent = value / target * 100, check for division by zero and boundaries:
					// percent > 100 (value > target) and percent < 0 (value < 0)
					// Where 0 is Value, 1 is Target, 2 is UoM
					var sExpressionForUoMPercent = "({0} > 100 ? 100 : {0} < 0 ? 0 : {0})";
					var sExpressionForUoMNotPercent = "(({1} > 0) ? (({0} > {1}) ? 100 : (({0} < 0) ? 0 : ({0} / {1} * 100))) : 0)";
					var sExpressionTemplate = "'{'= ({2} === ''%'') ? " + sExpressionForUoMPercent + " : " + sExpressionForUoMNotPercent + " '}'";
					sPercentValueExpression = jQuery.sap.formatMessage(sExpressionTemplate, [sValue, sTarget, sUoM]);
			}

			return sPercentValueExpression;
		},

		/**
		 * The resposibility of this method is to build an expression and its parts to call the runtime formatter to display value
		 * This formatter is called at pre-processing time
		 * @function
		 * @private
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @parameter {map} [mUoM] A map containg the unit of measure as per the vocabulary term Org.OData.Measures.V1.Unit or Org.OData.Measures.V1.ISOCurrency
		 * @returns {string} A binding expression containing the formatter and parts to compute the Progress Indicator display value
		 */
		buildExpressionForProgressIndicatorDisplayValue : function(oInterface, dataPoint, mUoM){
			var sParts;

			var buildPart = function(oInterface, oProperty){
				var sPropertyPath = sap.suite.ui.generic.template.js.AnnotationHelper.trimCurlyBraces(sap.ui.model.odata.AnnotationHelper.format(oInterface, oProperty));
				var sPart = "{path: '" + sPropertyPath + "'}";
				return sPart;
			};

			sParts = buildPart(oInterface, dataPoint.Value) + ", " + buildPart(oInterface, dataPoint.TargetValue) + ", " + buildPart(oInterface, mUoM);

			var sDisplayValueExpression = "{ parts: [" + sParts + "], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatDisplayValue' }";
			return sDisplayValueExpression;
		},

		/**
		 * This function is meant ro run at runtime, so the control and resource bundle can be available
		 * @function
		 * @private
		 * @parameter {string} sValue A string containing the value
		 * @parameter {string} sTarget A string containing the target value
		 * @parameter {string} sUoM A string containing the unit of measure
		 * @returns {string} A string containing the text that will be used in the display value of the Progress Indicator
		 */
		formatDisplayValue : function(sValue, sTarget, sUoM){
			var sDisplayValue = "";

			if (sValue){
				var oControl = this;
				var oResourceBundle = oControl.getModel("i18n").getResourceBundle();
				var aCustomData = oControl.getCustomData();
				sTarget = sTarget || aCustomData[0].getValue();
				sUoM = sUoM || aCustomData[1].getValue();
				if (sUoM){
					if (sUoM === '%'){ // uom.String && uom.String === '%'
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_PERCENT", [sValue]);
					} else {// (uom.String and not '%') or uom.Path
						if (sTarget){
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT", [sValue, sTarget, sUoM]);
						} else {
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT_NO_TARGET_VALUE", [sValue, sUoM]);
						}
					}
				} else {
					if (sTarget){
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [sValue, sTarget]);
					} else {
						sDisplayValue = sValue;
					}
				}
			} else { // Cannot do anything
				jQuery.sap.log.warning("Value property is mandatory, the default (empty string) will be returned");
			}

			return sDisplayValue;
		},

		/**
		 * Build a binding expression for criticality in the progress indicator data point.
		 * Step 1: Check if datapoint is annotated with CriticalityType or CriticalityCalculationType
		 * Step 2: For CriticalityType build the binding expression to check if the property contains, Name or Value of the enumType (Example: 'UI.CriticalityType/Neutral' or '0')
		 * Other cases are not valid and the default sap.ui.core.ValueState.None will be returned
		 * Step 3: For CriticalityCalculationType build the binding expression to calculate the criticality
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @returns {string} A binding expression for the criticality property of the Progress Indicator
		 */
		buildExpressionForProgressIndicatorCriticality : function(oInterface, dataPoint){
			var sFormatCriticalityExpression = sap.ui.core.ValueState.None;
			var sExpressionTemplate;
			var oCriticalityProperty = dataPoint.Criticality;

			if (oCriticalityProperty) {
				sExpressionTemplate = "'{'= ({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Negative'') || ({0} === ''1'') || ({0} === 1) ? ''" + sap.ui.core.ValueState.Error + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Critical'') || ({0} === ''2'') || ({0} === 2) ? ''" + sap.ui.core.ValueState.Warning + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Positive'') || ({0} === ''3'') || ({0} === 3) ? ''" + sap.ui.core.ValueState.Success + "'' : " +
				"''" + sap.ui.core.ValueState.None + "'' '}'";
				if (oCriticalityProperty.Path){
					var sCriticalitySimplePath = '$' + sap.ui.model.odata.AnnotationHelper.simplePath(oInterface, oCriticalityProperty);
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticalitySimplePath);
				} else if (oCriticalityProperty.EnumMember){
					var sCriticality = "'" + oCriticalityProperty.EnumMember + "'";
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticality);
				} else {
					jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
				}
			} else {
				// Any other cases are not valid, the default value of 'None' will be returned
				jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
			}

			return sFormatCriticalityExpression;
		},

		trimCurlyBraces : function (value){
			return value ? value.replace("{","").replace("}","") : undefined;
		},

		/**
		 * Get entity set name for Smart Chart and Smart Microchart.
		 * Returns the name of the main entity set (current node in the object page) or the referenced entity set (as per the target of the annotation path).
		 * @parameter {object} refEntitySet The referenced entity set
		 * @parameter {object} entitySet The entity set of the current object in the page
		 * @returns {string} sEntitySetName The entity set name for the main object type or the referenced entity set
		 */
		getEntitySetName : function (refEntitySet, entitySet) {
			var sEntitySetName = "";
			try {
				sEntitySetName = refEntitySet.name || entitySet.name;
			} catch (oError) {
				jQuery.sap.log.warning("At least one of the input parameters is undefined. Returning default value for entity set name.");
			}
			return sEntitySetName;
		},

		getBreakoutActionEnabledKey: function (oAction) {
			var sEnabledKey = "{_templPriv>/generic/listCommons/breakoutActionsEnabled/" + oAction.id + "/enabled}";
			return sEnabledKey;
		},

		buildVisibilityExprOfDataFieldForIntentBasedNaviButton: function (oDataField) {
			if (oDataField.Inline.Bool == "false" && oDataField.RequiresContext.Bool == "false") {
				var sSemanticObject = oDataField.SemanticObject.String;
				var sAction =  oDataField.Action.String;
				return "{= !!${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/visible}}"; // maybe we can optimize it later and do one call for all buttons in the toolbar somewhere
			} else {
				return true; // if the button is inline or the button is in the toolbar and has requresContext=true the button is always visible and is enabled/disabled depending on the context
			}
		}
	};
	
	sap.suite.ui.generic.template.js.AnnotationHelper = oAnnotationHelper;
	
	sap.suite.ui.generic.template.js.AnnotationHelper.formatComponentSettings.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getRepeatIndex.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getCurrentPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEntityTypesForFormPersonalization.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.actionControl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatHeaderTitle.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getTextArrangementForSmartControl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.matchesBreadCrumb.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13N.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForIndicator.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForAction.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForContactPopUp.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForChart.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.hasDeterminingActionsRespectingApplicablePath.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorPercentValue.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorDisplayValue.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorCriticality.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEditActionButtonVisibility.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getDeleteActionButtonVisibility.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.isRelatedEntityCreatable.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildBreadCrumbExpression.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getApplicablePathForChartToolbarActions.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildAnnotatedActionButtonEnablementExpression.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterText.requiresIContext = true;
})();
}; // end of sap/suite/ui/generic/template/js/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context",
      "sap/ui/model/odata/AnnotationHelper", "sap/ui/model/json/JSONModel"
    ],
    function (BaseObject, Context, ODataAnnoHelper, JSONModel) {
      "use strict";

    /*eslint camelcase: [2, {properties: "never"}]*/
    var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper");

    AnnotationHelper.TITLE_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/Title/Value",
      "com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value",
      "com.sap.vocabularies.UI.v1.Identification/0/Value"
    ];

    AnnotationHelper.HEADLINE_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/HeadLine/Value",
      "com.sap.vocabularies.Communication.v1.Contact/role",
      "com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value",
      "com.sap.vocabularies.UI.v1.Identification/0/Value",
      "com.sap.vocabularies.UI.v1.Identification/1/Value"
    ];
    AnnotationHelper.IMAGEURL_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/ImageUrl/Value",
      "com.sap.vocabularies.UI.v1.HeaderInfo/ImageUrl/Value"
    ];
    AnnotationHelper.ICONURL_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/TypeImageUrl/Value"
    ];
    AnnotationHelper.TYPENAME_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.HeaderInfo/TypeName/Value",
      "com.sap.vocabularies.Common.v1.SemanticObject/String"
    ];

    AnnotationHelper._getAnnotationItem = function (oContext, sVocabularyName, sFieldName, sFieldValue) {
      if (oContext && sVocabularyName && sFieldName) {
        var oVocabularyItem = oContext.getProperty(sVocabularyName);
        if (sFieldValue && oVocabularyItem && oVocabularyItem[sFieldName]) {
          var oItem = oVocabularyItem[sFieldName];
          return oItem[sFieldValue];
        }
        return oVocabularyItem ? oVocabularyItem[sFieldName] : null;
      }
      return undefined;
    };

    AnnotationHelper.getAnnotationItemForVocabulary = function (oContext, sVocabularyFullName) {
      if (sVocabularyFullName) {
        var aParts = sVocabularyFullName.split("/");
        return AnnotationHelper._getAnnotationItem(oContext, aParts[0], aParts.length > 1 ? aParts[1] : null, aParts.length > 2 ? aParts[2] : null);
      }
      return undefined;
    };

    AnnotationHelper.getAnnotationFirstItemFromVocabularies = function (oContext, aVocabularyList, oSkipObject) {
      var oItem = null;
      if (aVocabularyList && Array.isArray(aVocabularyList)) {
        for (var i = 0; !oItem && i < aVocabularyList.length; ++i) {
          oItem = AnnotationHelper.getAnnotationItemForVocabulary(oContext, aVocabularyList[i]);
          if (oSkipObject && oItem && AnnotationHelper._isEqualValues(oSkipObject, oItem)) {
            oItem = null; // Skip this object
          }
        }
      }
      return oItem;
    };

    AnnotationHelper._resolveBadgeImgUrl = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.IMAGEURL_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeIconUrl = function (oContext) {
      var oImageUrl = AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.ICONURL_ANNO_HEURISTIC);
      if (!oImageUrl) {
        // Default unknown icon
        oImageUrl = "sap-icon://form";
      }
      return oImageUrl;
    };

    AnnotationHelper._resolveBadgeTitle = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.TITLE_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeTypeName = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.TYPENAME_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeHeadline = function (oContext, sTitle) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.HEADLINE_ANNO_HEURISTIC, sTitle);
    };

    // Supports old and new Annotation version (Label/Value)
    AnnotationHelper._getAnnotationObject = function (oItem) {
      if (oItem) {
        var oPathObj = {};
        if (oItem.Label) {
          oPathObj.Path = oItem.Label.Path || oItem.Label;
        } else if (oItem.Value) {
          oPathObj.Path = oItem.Value.Path || oItem.Value;
        } else if (oItem.String) {
          oPathObj.String = oItem.String;
        } else if (oItem.Path) {
          oPathObj.Path = oItem.Path;
        } else {
          oPathObj.String = oItem;
        }
        return oPathObj;
      }
      return undefined;
    };

    AnnotationHelper._isEqualValues = function (oItem1, oItem2) {
      if (oItem1 && oItem2) {
        if (oItem1.String && oItem2.String) {
          return oItem1.String === oItem2.String;
        }
        if (oItem1.Value && oItem2.Value) {
          return oItem1.Value.Path === oItem2.Value.Path;
        }
        if (oItem1.Label && oItem2.Label) {
          return oItem1.Label.Path === oItem2.Label.Path;
        }
      }
      return false;
    };

    AnnotationHelper._createBadgeContext = function (oImageUrl, oTypeIconUrl, oTitle, oTypeName, oSubTitle) {
      var oModel = new JSONModel();

      var oBadgeContext = new Context(oModel, "/");
      var oItem = {};
      var sImgUrl = AnnotationHelper._getAnnotationObject(oImageUrl);
      var sTypeUrl = AnnotationHelper._getAnnotationObject(oTypeIconUrl);

      // If the Image URL is set to a sap icon ignore to avoid broken image
      if (sImgUrl && sImgUrl.String && sImgUrl.String.toLowerCase().indexOf("sap-icon://") < 0) {
        oItem.ImageUrl = sImgUrl;
      } else {
        oItem.TypeImageUrl = sTypeUrl || sImgUrl;
      }

      oItem.Title = AnnotationHelper._getAnnotationObject(oTitle);
      oItem.TypeName = AnnotationHelper._getAnnotationObject(oTypeName);
      oItem.SubTitle = AnnotationHelper._getAnnotationObject(oSubTitle);

      oModel.setData(oItem);

      return oBadgeContext;
    };

    AnnotationHelper.resolveBadgeTarget = function (oContext) {
      if (oContext) {
        var sImageUrl = AnnotationHelper._resolveBadgeImgUrl(oContext);
        var sTypeImageUrl = AnnotationHelper._resolveBadgeIconUrl(oContext);
        var sTitle = AnnotationHelper._resolveBadgeTitle(oContext);
        var sTypeName = AnnotationHelper._resolveBadgeTypeName(oContext);
        var sHeadline = AnnotationHelper._resolveBadgeHeadline(oContext, sTitle);
        return AnnotationHelper._createBadgeContext(sImageUrl, sTypeImageUrl, sTitle, sTypeName, sHeadline);
      }
      return undefined;
    };

    AnnotationHelper.resolveFieldGroupTarget = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
      if (facet) {
        return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
      }
      return null;
    };

    AnnotationHelper.resolveLineItemTarget = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
      if (facet) {
        return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
      }
      return null;
    };

    AnnotationHelper.resolveFieldGroupFacet = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
      if (facet) {
        return oContext.getPath() + "/" + facet.index;
      }
      return undefined;
    };

    AnnotationHelper.resolveLineItemFacet = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
      if (facet) {
        return oContext.getPath() + "/" + facet.index;
      }
      return undefined;
    };

    AnnotationHelper._getFacetOfType = function (oContext, facetType) {
      var facets = oContext.getObject();

      var targetIndex = -1;
      var targetFacet = null;
      if (Array.isArray(facets)) {
        jQuery.each(facets, function (i, facet) {
          if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
            targetIndex = i;
            targetFacet = facet;
          }
        });
      }

      if (targetIndex >= 0) {
        return {
          facet: targetFacet,
          index: targetIndex
        };

      }
      return undefined;
    };

    AnnotationHelper.getAllPropertyPathsFromFacet = function (context, facetType) {
      var oInterface = AnnotationHelper.createFormatterInterface(context);

      var oMetaModel = context.getModel().getMetaModel();
      var oMetaData = AnnotationHelper.getMetaDataForContext(context);
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface,
        oMetaData.entityType.namespace + "." + oMetaData.entityType.name, facetType);

      var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
      var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);

      var array = oResolvedProperty.Data || oResolvedProperty;

      var propertyPaths = [];

      if (array && Array.isArray(array)) {
        jQuery.each(array, function (index, anno) {
          if (anno.RecordType === 'com.sap.vocabularies.UI.v1.DataField' && anno.Value && anno.Value.Path) {
            propertyPaths.push(anno.Value.Path);
          }
        });
      }

      return propertyPaths;
    };

    AnnotationHelper.getMetaModelContextForFacetType = function (oInterface, entityType, facetType) {
      var oMetaModel = oInterface.getModel() || oInterface.getModel(0);

      var oEntityTypeMeta = oMetaModel.getODataEntityType(entityType);

      var aSupportedQuickActions = ["QuickCreate", "QuickView"];

      var sFacetKey = "";
      var oMetaDataContext = null;

      var facets = null;

      for (var i = 0; i < aSupportedQuickActions.length; i++) {
        sFacetKey = "com.sap.vocabularies.UI.v1." + aSupportedQuickActions[i] + "Facets";
        if (oEntityTypeMeta[sFacetKey]) {
          facets = oEntityTypeMeta[sFacetKey];
          break;
        }
      }

      if (facets) {
        var targetIndex = -1;
        if (Array.isArray(facets)) {
          jQuery.each(facets, function (i, facet) {
            if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
              targetIndex = i;
            }
          });
        }

        if (targetIndex >= 0) {
          oMetaDataContext = new Context(oMetaModel, oEntityTypeMeta.$path + "/" + sFacetKey + "/" + targetIndex + "/Target");
        }
      }

      return oMetaDataContext;
    };

    AnnotationHelper.formatExpandBindingPathForHeaderObject = function (oInterface, entityType) {

      var headerPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "FieldGroup");

      return AnnotationHelper.formatExpandPaths(headerPaths);

    };

    AnnotationHelper.getMetaDataForContext = function (oContext) {

      var oMetaModel = oContext.getModel().getMetaModel();

      var oEntityTypeMeta = oMetaModel.getODataEntityType(oContext.getObject().__metadata.type);

      var sEntitySetName = null;
      var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(true)).entitySet;
      jQuery.each(oEntitySets, function (i, eSet) {
        if (eSet.entityType === oContext.getObject().__metadata.type) {
          sEntitySetName = eSet.name;
        }
      });

      var oEntitySetMeta = oMetaModel.getODataEntitySet(sEntitySetName);

      return {
        entityType: oEntityTypeMeta,
        entitySet: oEntitySetMeta
      };
    };

    AnnotationHelper.getNavigationPathsUsingAnnotationHeuristics = function (oObjectContext, entityType) {

      var oMetaData = {};
      var oMetaModel = oObjectContext.getModel().getMetaModel();
      if (oObjectContext && oObjectContext.getObject()) {
        oMetaData = AnnotationHelper.getMetaDataForContext(oObjectContext);
      } else if (entityType) {
        oMetaData.entityType = oMetaModel.getODataEntityType(entityType);
      }

      var oNavPathsMap = {};
      if (oMetaData && oMetaData.entityType) {
        var aTitleAndHeadlineAnnos = AnnotationHelper.TITLE_ANNO_HEURISTIC.concat(
          AnnotationHelper.HEADLINE_ANNO_HEURISTIC);

        // foreach annotation in heuristic
        var i = 0;
        for (; i < aTitleAndHeadlineAnnos.length; i++) {
          var metaContext = new Context(oMetaModel, oMetaData.entityType.$path + "/" + aTitleAndHeadlineAnnos[i]);
          var navPath = ODataAnnoHelper.getNavigationPath(metaContext);
          if (navPath) {
            navPath = navPath.replace(/[{}]/g, '');
            if (navPath) {
              oNavPathsMap[navPath] = "";
            }
          }
        }
      }
      return Object.keys(oNavPathsMap);
    };

    AnnotationHelper.getNavigationPathsFromFacet = function (oInterface, entityType, facetType) {
      var oMetaModel = oInterface.getModel() || oInterface.getModel(0);
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, facetType);

      if (!oMetaDataContext) {
        return [];
      }

      var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
      var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);
      var oNavPaths = {};
      var pathComponent = "/";
      if (oResolvedProperty.Data) {
        pathComponent += "Data/";
      }
      var array = oResolvedProperty.Data || oResolvedProperty;

      if (array && Array.isArray(array)) {
        jQuery.each(array, function (i, dataField) {
          if (dataField.RecordType == 'com.sap.vocabularies.UI.v1.DataField' && dataField.Value && dataField.Value.Path) {
            var metaContext = new Context(oMetaModel, oResolvedPath + pathComponent + i + "/Value");
            var navPath = ODataAnnoHelper.getNavigationPath(metaContext);
            navPath = navPath.replace(/[{}]/g, '');
            if (navPath) {
              oNavPaths[navPath] = "";
            }
          }
        });
      }

      return Object.keys(oNavPaths);

    };

    AnnotationHelper.getLineItemsNavPropertyName = function (oInterface, entityType) {
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, "LineItem");
      if (oMetaDataContext) {
        var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
        sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
        return sChildPropertyPath;
      }
      return undefined;
    };

    AnnotationHelper.formatBindingPathForLineItems = function (oInterface, entityType, bIsDraft) {

      var sLineItemProperty = AnnotationHelper.getLineItemsNavPropertyName(oInterface, entityType);

      if (arguments.length === 2) {
        bIsDraft = false;
      }

      if (bIsDraft) {
        var lineItemNavPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "LineItem");
        if (lineItemNavPaths && lineItemNavPaths.length > 0) {
          return "{path: '" + sLineItemProperty + "', parameters : {expand:'" +
            AnnotationHelper.formatExpandPaths(lineItemNavPaths) +
            "'}}";
        }
      }

      return "{path: '" + sLineItemProperty + "'}";

    };

    AnnotationHelper.formatExpandPaths = function (aExpandPaths) {
      var sExpandParam = "";
      for (var i = 0; i < aExpandPaths.length; i++) {
        sExpandParam += aExpandPaths[i];
        if (i < aExpandPaths.length - 1) {
          sExpandParam += ",";
        }
      }
      return sExpandParam;
    };

    AnnotationHelper.createFormatterInterface = function (oBindingContext) {

      var oMetaContext = oBindingContext.getModel().getMetaModel().getMetaContext(oBindingContext.getPath());

      var oInterface = {
        getModel: function () {
          return oBindingContext.getModel().getMetaModel();
        },

        getContext: function () {
          return oMetaContext;
        },

        getPath: function () {
          return oMetaContext.getPath();
        }
      };

      return oInterface;

    };

    AnnotationHelper.formatBindingPathForLineItems.requiresIContext = true;
    AnnotationHelper.getMetaModelContextForFacetType.requiresIContext = true;
    AnnotationHelper.formatExpandBindingPathForHeaderObject.requiresIContext = true;
    AnnotationHelper.resolveFieldGroupTarget.requiresIContext = true;
    AnnotationHelper.resolveLineItemTarget.requiresIContext = true;
    AnnotationHelper.resolveLineItemFacet.requiresIContext = true;
    AnnotationHelper.resolveFieldGroupFacet.requiresIContext = true;
    AnnotationHelper.resolveBadgeTarget.requiresIContext = true;

    return AnnotationHelper;

  }, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper",["sap/ui/base/Object", "./AnnotationHelper",
		"sap/ui/model/odata/AnnotationHelper", "sap/ui/model/Context"
	],
	function(BaseObject, QCAnnotationHelper, ODataAnnoHelper, Context) {
		"use strict";


		/*eslint camelcase: [2, {properties: "never"}]*/
		var ODataModelHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper");

		ODataModelHelper.createKeyFromPath = function(sSourcePath, oTargetMetaModel, sTargetEntitySet) {

      try {
				var sourceKeyInfo = ODataModelHelper.parseEntityKeysFromContextPath(sSourcePath);
				var targetKeyInfo = ODataModelHelper.getKeyInfoForEntitySet(oTargetMetaModel, sTargetEntitySet);

				if (targetKeyInfo.entitySet === sourceKeyInfo.entitySet && sourceKeyInfo.keys.length === targetKeyInfo.keys.length) {
					if (sSourcePath.startsWith("/")) {
						return sSourcePath.substring(1);
					}

					return sSourcePath;
				}

				var retPath = "" + targetKeyInfo.entitySet + "(";

				jQuery.each(targetKeyInfo.keys, function(i, targetKey) {

					// 1.) try exact name and type mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.property === targetKey.property && sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 2.) try substring of name and exact type mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							var sourceLower = sourceKey.property.toLowerCase();
							var targetLower = targetKey.property.toLowerCase();

							if (targetLower.indexOf(sourceLower) >= 0 && sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 3.) try exact name only
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.property === targetKey.property) {
								if (sourceKey.type === "Edm.String" && targetKey.type !== "Edm.String") {
									targetKey.value = sourceKey.value.substring(1, sourceKey.value.length - 1);
								} else if (sourceKey.type !== "Edm.String" && targetKey.type === "Edm.String") {
									targetKey.value = "'" + sourceKey.value + "'";
								} else {
									targetKey.value = sourceKey.value;
								}
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 4.) try exact type only mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					retPath += targetKey.property + "=" + targetKey.value;

					if (i < targetKeyInfo.keys.length - 1) {
						retPath += ",";
					}


				});

				retPath += ")";

				return retPath;

			} catch (e) {
        if (sSourcePath && sSourcePath.startsWith("/")) {
          return sSourcePath.substring(1);
        }

        return sSourcePath;
			}
		};


		ODataModelHelper.parseEntityKeysFromContextPath = function(sPath) {
			var path = sPath;

			var ret = {
				entitySet: "",
				keys: []
			};

			if (!path) {
				return ret;
			}

			if (path.startsWith("/")) {
				path = path.substring(1);
			}
			var comps = path.split("(");
			if (comps.length > 1) {
				ret.entitySet = comps[0];

				var keyString = comps[1].split(")")[0];
				if (keyString) {
					var keyComps = keyString.split(",");
					jQuery.each(keyComps, function(i, keyComp) {

						if (keyComp) {
							var fieldValue = keyComp.split("=");
							var key = {};
							if (fieldValue.length == 1) {
								key.value = fieldValue[0];
								key.property = "";
							} else if (fieldValue.length == 2) {
								key.property = fieldValue[0];
								key.value = fieldValue[1];
							}

							if (key.value) {
								if (key.value.indexOf("guid") == 0 && key.value.length == 42) {
									key.type = "Edm.Guid";
								} else if (key.value.charAt(0) === "'" && key.value.charAt(key.value.length - 1) === "'") {
									key.type = "Edm.String";
								} else if (key.value == "true" || key.value == "false") {
									key.type = "Edm.Boolean";
								} else if (jQuery.isNumeric(key.value)) {
									key.type = "Edm.Int";
								} else {
									key.type = "";
								}
								ret.keys.push(key);
							}
						}
					});
				}
			}
			return ret;
		};

		ODataModelHelper.getKeyInfoForEntitySet = function(oMetaModel, sEntitySet) {

			var ret = {
				entitySet: "",
				keys: []
			};

			var keyNames = {};

			if (oMetaModel && sEntitySet) {
				var entitySetMeta = oMetaModel.getODataEntitySet(sEntitySet);
				ret.entitySet = entitySetMeta.name;
				var entityTypeMeta = oMetaModel.getODataEntityType(entitySetMeta.entityType);

				jQuery.each(entityTypeMeta.key.propertyRef, function(i, propRef) {
					keyNames[propRef.name] = "1";
				});

				jQuery.each(entityTypeMeta.property, function(i, prop) {
					if (keyNames[prop.name]) {
						var key = {
							property: prop.name,
							value: ODataModelHelper.getDefaultKeyValueForProperty(prop),
							type: (prop.type.indexOf("Edm.Int") >= 0 ? "Edm.Int" : prop.type)
						};

						ret.keys.push(key);
					}
				});

			}

			return ret;
		};

		ODataModelHelper.getDefaultKeyValueForProperty = function(oProperty) {

			if (oProperty.name.indexOf("IsActive") >= 0 && oProperty.type === "Edm.Boolean") {
				return "true";
			} else {
				switch (oProperty.type) {
					case "Edm.String":
						{
							return "''";
						}
					case "Edm.Guid":
						{
							return "guid'00000000-0000-0000-0000-000000000000'";
						}
					case "Edm.Boolean":
						{
							return "false";
						}
					default:
						{
							if (oProperty.type.indexOf("Int") >= 0) {
								return "0";
							}

							return "''";
						}
				}
			}
		};


		ODataModelHelper.initializeObjectProperties = function(oObjectContext, propertyPaths, createParams) {
			var targetObjects = [];
			var key = oObjectContext.getModel().getKey(oObjectContext.getObject());
			var oOrigObject = oObjectContext.getModel().oData[key];
			if (oOrigObject) {
				targetObjects.push(oOrigObject);
			}
			var oChangedObject = oObjectContext.getModel().mChangedEntities[key];
			if (oChangedObject) {
				targetObjects.push(oChangedObject);
			}
			var oContextMetaData = QCAnnotationHelper.getMetaDataForContext(oObjectContext);
			var i = 0;
			if (propertyPaths && Array.isArray(propertyPaths)) {
				jQuery.each(propertyPaths, function(index, path) {
					var pathComps = path.split("/");
					var ownProperty = pathComps[0];
					var childPath = null;
					if (pathComps.length > 1) {
						childPath = pathComps.slice(1).join("/");
					}

					// if path component is a number, assume it is an index....just continue with next component
					if (jQuery.isNumeric(ownProperty) && childPath) {
						ODataModelHelper.initializeObjectProperties(oObjectContext, [childPath], createParams);
						return;
					}

					i = 0;
					var isNavProp = false;
					if (oContextMetaData.entityType.navigationProperty) {
						for (; i < oContextMetaData.entityType.navigationProperty.length; i++) {
							if (oContextMetaData.entityType.navigationProperty[i].name === ownProperty) {
								isNavProp = true;
								break;
							}
						}
					}

					if (!isNavProp) {
						jQuery.each(targetObjects, function(i, targetObject) {
							targetObject[ownProperty] = "";
						});
					} else if (!oOrigObject[ownProperty]) {
						var createdContext = oObjectContext.getModel().createEntry(oObjectContext.getPath() + "/" + ownProperty, createParams);
						oOrigObject[ownProperty] = {
							__deferred: {}
						};
						ODataModelHelper.restoreNavigationPropertyReferences(oObjectContext, ownProperty, createdContext);
						if (childPath) {
							ODataModelHelper.initializeObjectProperties(createdContext, [childPath], createParams);
						}
					}
				});
			}

		};

		ODataModelHelper.restoreLineItemReferences = function(entityType, oContext) {
			var oInterface = QCAnnotationHelper.createFormatterInterface(oContext);

			var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
				entityType, "LineItem");

			if (oMetaDataContext) {
				var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
				sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
				ODataModelHelper.restoreNavigationPropertyReferences(oContext, sChildPropertyPath);
			}
		};

		ODataModelHelper.restoreNavigationPropertyReferences = function(oParentContext, navProp, oChildContext) {
			if (!navProp) {
				return;
			}


			if (!oParentContext.getObject()) {
				return;
			}

			var oMetaModel = oParentContext.getModel().getMetaModel();
			var sObjectKey = oParentContext.getModel().getKey(oParentContext.getObject());
			var oCurrentObject = oParentContext.getModel().oData[sObjectKey];
			var oEntityTypeMeta = oMetaModel.getODataEntityType(oCurrentObject.__metadata.type);


			var oNavPropAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityTypeMeta, navProp);

			var sNavPropEntitySetName = null;
			var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(oNavPropAssociationEnd.type)).entitySet;
			jQuery.each(oEntitySets, function(i, eSet) {
				if (eSet.entityType === oNavPropAssociationEnd.type) {
					sNavPropEntitySetName = eSet.name;
				}
			});

			if (!oCurrentObject[navProp]) {
				oCurrentObject[navProp] = {};
			}
			if (oCurrentObject[navProp].__list) {
				oCurrentObject[navProp].__list = [];
			}


			var addChildEntity = function(key) {
				if (oCurrentObject[navProp].__deferred) {
					delete oCurrentObject[navProp].__deferred;
				}
				if (oNavPropAssociationEnd.multiplicity === "*") {
					if (!oCurrentObject[navProp].__list) {
						oCurrentObject[navProp].__list = [];
					}
					oCurrentObject[navProp].__list.push(key);
				} else {
					oCurrentObject[navProp].__ref = key;
				}
			};

			if (!oChildContext) {
				var modelKeys = Object.keys(oParentContext.getModel().oData);
				jQuery.each(modelKeys, function(i, key) {
					if (key.indexOf(sNavPropEntitySetName) >= 0) {
						addChildEntity(key);
					}
				});
			} else {
				var key = oChildContext.getPath().substring(1);
				addChildEntity(key);
			}

		};

		ODataModelHelper.findObjects = function() {
			var parentObj, obj, params;
			if (arguments.length === 3) {
				parentObj = arguments[0];
				obj = arguments[1];
				params = arguments[2];
			} else if (arguments.length == 2) {
				obj = arguments[0];
				params = arguments[1];
			}

			var key = params.key || undefined,
				fnMatchCallBack = params.matchCallback || undefined,
				fnNonMatchCallback = params.noMatchCallback || undefined,
				maxNestedLevel = params.maxNestedLevel || 3;

			var doRecursion = true;

			if (!maxNestedLevel) {
				maxNestedLevel = 3;
			}

			if (!ODataModelHelper.findObjects._recursionCount) {
				ODataModelHelper.findObjects._recursionCount = 0;
			}
			ODataModelHelper.findObjects._recursionCount++;

			if (ODataModelHelper.findObjects._recursionCount > maxNestedLevel) {
				ODataModelHelper.findObjects._recursionCount--;
				return;
			}

			var isObject = function(o) {
				var s = Object.prototype.toString.call(o);
				return (s === '[object Array]' || s === '[object Object]');
			};
			var hasOwn = Object.prototype.hasOwnProperty.bind(obj);

			if (obj) {
				for (var i in obj) {
					if (hasOwn(i)) {

						var bIsObject = isObject(obj[i]);
						if (obj[i] && bIsObject) {
							obj[i].__nestedKey = i;
						}
						doRecursion = true;
						if (i === key && fnMatchCallBack) {
							doRecursion = fnMatchCallBack(parentObj, obj, obj[i]);
						} else if (fnNonMatchCallback) {
							doRecursion = fnNonMatchCallback(parentObj, obj, obj[i]);
						}
						if (doRecursion && bIsObject) {
							ODataModelHelper.findObjects(obj, obj[i], {
								key: key,
								matchCallback: fnMatchCallBack,
								noMatchCallback: fnNonMatchCallback,
								maxNestedLevel: maxNestedLevel
							});
						}
						if (obj[i] && bIsObject) {
							delete obj[i].__nestedKey;
						}
					}
				}
			}

			ODataModelHelper.findObjects._recursionCount--;
		};

		return ODataModelHelper;

	}, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController",["sap/ui/core/mvc/Controller", "sap/m/MessageBox", "./AnnotationHelper"], function (MVCController, MessageBox, AnnotationHelper) {
    "use strict";

    var BaseController = MVCController.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController", {

            onInit: function() {
                if (!this._bIsInitialized) {
                    this._bIsInitialized = true;
                    this.oComponent = this.getOwnerComponent() || this.getView().getViewData().component;
                    var oView = this.getView();
                    oView.setModel(this.oComponent.getModel());
                    this.sEntitySet = this.oComponent.getEntitySet();

                    this.oDraftController = this.oComponent.getTransactionController().getDraftController();
                    this.bDraftEnabled = this.oDraftController.getDraftContext().isDraftEnabled(this.sEntitySet);

                    var oMetaModel = this.getView().getModel().getMetaModel();

                    this.oEntitySetMeta = oMetaModel.getODataEntitySet(this.sEntitySet);
                    this.oEntityTypeMeta = oMetaModel.getODataEntityType(this.oEntitySetMeta.entityType);

                    this.oSmartFieldEventDelegate = {
                        onAfterRendering: jQuery.proxy(function (oEvent) {
                            this._onSmartFieldAfterRendering(oEvent);
                        }, this)
                    };
                }
            },

            _onMetaModelLoaded: function() {
                // redefine in subclass for initialization logic after meta data is available
            },

            _onSmartFieldAfterRendering: function(oEvent) {
              // redefine if controller needs to react to smart fields being created
            },

            onBeforeRendering: function () {
                if (!this._bMetaDataInit) {
                    this._bMetaDataInit = true;
                    this.getView().getModel().getMetaModel().loaded().then(jQuery.proxy(this._onMetaModelLoaded, this), jQuery.proxy(this.onError, this));
                }
                this.setBusy(false);
            },

            setBusy: function(bBusy) {
                if (this.getView().getModel("ui")) {
                    this.getView().getModel("ui").setProperty("/busy", bBusy);
                    this.getView().getModel("ui").updateBindings();
                }
            },

            bindView: function (oContext) {
                var oInterface = this._getFormatterInterface(oContext);

                var expandParam = AnnotationHelper.formatExpandBindingPathForHeaderObject(oInterface, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name);

                this.oContext = oContext;

                this.getView().bindElement({
                   path: oContext.getPath(),
                   parameters: {
                      expand: expandParam
                   }
                });

            },

            onError: function (oError) {
                this.setBusy(false);
                if (oError.message) {
                    this._showErrorMessage(oError);
                } else if (oError.response) {
                    this._showErrorMessage(oError.response);
                } else {
                    this._showErrorMessage({message: this.formatI18NMessage("QuickAction_Generic_Error")});
                }
            },

            onSmartFieldsCreated: function (oEvent) {
                var control = oEvent.getParameters()[0];
                if (control && typeof control.addEventDelegate === 'function') {
                    control.removeEventDelegate(this.oSmartFieldEventDelegate);
                    control.addEventDelegate(this.oSmartFieldEventDelegate);
                }
            },


            // used by XML views
            formatI18NMessage: function() {
                if (arguments && arguments[0]) {
                    var sI18N = arguments[0];

                    var resBundle = this.getView().getModel("i18n").getResourceBundle();

                    if (arguments.length > 1) {
                        var args = Array.prototype.slice.call(arguments);
                        return resBundle.getText(sI18N, args.splice(1, arguments.length - 1));
                    }
                    return resBundle.getText(sI18N);
                }

                return arguments;
            },

            _getFormatterInterface: function(oContext) {
                var context = oContext ? oContext : this.getView().getBindingContext();
                return AnnotationHelper.createFormatterInterface(context);
            },

            _setBindingContext: function(oContext) {
                this.getView().setBindingContext(oContext);
                this.setBusy(false);
            },

            _showErrorMessage: function (oError) {
                var error = oError.response || oError;
                var sDetails = error.message;
                if (error.statusText) {
                    sDetails = error.statusText;
                }
                if (error && error.responseText) {
                    try {
                        var oErrObj = jQuery.parseJSON(error.responseText);
                        var sErrDetail = this._getErrorDetail(oErrObj);
                        sDetails = (sErrDetail && sErrDetail.length > 0) ? sErrDetail : sDetails;
                    } catch (exc) {
                        // not a valid JSON string
                    }
                }
                //return details;
                MessageBox.show(sDetails, {
                        icon: MessageBox.Icon.ERROR,
                        title: this.formatI18NMessage("QuickAction_Error_Popover"),
                        actions: [MessageBox.Action.OK]
                    }
                );
            },

            _getErrorDetail: function (oErrObj) {
                var sDetails = "";
                if (oErrObj && oErrObj.error && oErrObj.error.message) {
                    if (oErrObj.error.innererror && oErrObj.error.innererror.errordetails && oErrObj.error.innererror.errordetails.length > 0) {
                        jQuery.each(oErrObj.error.innererror.errordetails, jQuery.proxy(function (i, errorDetail) {
                            sDetails += errorDetail.severity + ": " + errorDetail.message + "\n\n";
                        }, this));
                    } else if (oErrObj.error.message.value) {
                        sDetails = oErrObj.error.message.value;
                    }
                }
                return sDetails;
            }


        });


        return BaseController;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.transaction.DraftContext'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI",["sap/ui/base/ManagedObject", "sap/ui/generic/app/transaction/DraftContext", "sap/m/MessageToast"], function (ManagedObject, DraftContext, MessageToast) {
    "use strict";


    var QuickCreateAPI = ManagedObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI", {

        metadata : {
            library : "sap.suite.ui.generic.template",
            properties : {

            },
            events:
            {
                objectCreated:
                {
                    parameters:
                    {
                        context: { type : "sap.ui.model.Context"}
                    }
                },

                destroyed:
                {
                    parameters:
                    {
                        collectionItemGuid: { type : "String"}
                    }
                },

                autofillLineItems:
                {
                    parameters:
                    {
                        numberOfLineItems: { type : "Number" }
                    }
                }

            }
        }
    });

    QuickCreateAPI.EVENT_CONSTANTS = {
        EventChannel : "sap.fiori.cp.quickactions.EventChannel",
        QUICKCREATE_LINE_ITEMS_FOUND : "LineItemsFound",
        QUICKCREATE_VIEW_CREATED: "QuickCreateViewCreated"
    };

    QuickCreateAPI.CopilotModelName = "FioriCopilotODataModel";

    QuickCreateAPI._Instances = {};

    QuickCreateAPI.getInstance = function(oCollItem) {

        if (!oCollItem) {
            return undefined;
        }

        if (oCollItem.copilotEntity) {
            return QuickCreateAPI._Instances[oCollItem.copilotEntity.getODataKey()];
        } else {
            return QuickCreateAPI._Instances[oCollItem];
        }

    };

    QuickCreateAPI.createAPI = function(oComponentContainer, oComponentInstance, oCopilotController) {

        function getCollectionItem() {
            return oCopilotController.getView().getBindingContext().getObject();
        }

        function getQuickCreateItem() {
            return oCopilotController.getQuickCreateItem();
        }


        function getComponentInstance() {
            return oComponentInstance;
        }

        function getComponentContainer() {
            return oComponentContainer;
        }

        function getCopilotModel() {
            return sap.ui.getCore().getModel(QuickCreateAPI.CopilotModelName);
        }

        function updateDraftID(draftid) {
            if (this._bDestroyed) {
                return;
            }
            var qcObject = this.getQuickCreateItem();

            if (qcObject.draftid === draftid) {
                return;
            }
            qcObject.draftid = draftid;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }


        function getRootControl() {
            return oComponentInstance.getAggregation("rootControl");
        }

        function getRootView() {
            return this.oRootView;
        }

        function setRootView(view) {
          this.oRootView = view;
          this.calculateViewHeight(this.oRootView, true);
        }

        function isDraftEnabled() {

            if (this.oRootView && this.oRootView.getController() && this.oRootView.getController().bDraftEnabled !== undefined) {
                return this.oRootView.getController().bDraftEnabled;
            }

            if (!this.oRootView || !this.oRootView.getBindingContext()) {
                return undefined;
            }


            var draftContext = new DraftContext(this.getQuickCreateModel());
            return draftContext.hasDraft(this.oRootView.getBindingContext());
        }

        function getQuickCreateModel() {
            var oModel = this.getComponentInstance().getModel();
            if (!oModel && this.oRootView) {
                oModel = this.oRootView.getModel();
            }

            return oModel;
        }

        function isCurrentUserCreator() {
            return oCopilotController.isCurrentUserCreator();
        }


        function getQuickCreateRootBindingContext() {
            if (!this.oRootView) {
                return undefined;
            }

            return this.oRootView.getBindingContext();
        }


        function getQuickCreateRootEntityType() {
            var context = this.getQuickCreateRootBindingContext();
            if (context && context.getObject()) {
                return context.getObject().__metadata.type;
            }

            return undefined;
        }

        function _onLineItemsFound(sChannel, sEventName, oParameters) {
            var numberLineItems = oParameters.numberOfLineItems;
            if (numberLineItems <= 0) {
                return;
            }

            this.fireAutofillLineItems({numberOfLineItems: numberLineItems});
        }

        function _onComponentContainerAfterRendering () {
            this._attachToModelBindingChanges();
            if (!this.oRootView) {
                var oView = oCopilotController.oViewUtils.findFirstViewFromControlHierarchy(this.getRootControl());
                if (oView) {
                    this.setRootView(oView);
                }
            }
        }

        function _attachToModelBindingChanges() {
          if (!this._bBindingChangeAttached) {
            var oModel = oComponentInstance.getModel();
            if (oModel) {
              var origAddBinding = oModel.addBinding.bind(oModel);
              var that = this;
              oModel.addBinding = function(binding) {
                origAddBinding(binding);
                binding.attachEvent("change", that._onDataBindingChanged);
              };
              this._bBindingChangeAttached = true;
            }
          }
        }

        function loadQuickCreateModelFromJSON() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oDataModel = this.getCopilotModel();

                oDataModel.read("/" + oDataModel.getKey(this.getQuickCreateItem()), {
                    success: jQuery.proxy(function (oData, oResponse) {
                        if (oData.modeljson) {
                            var oModel = this.getQuickCreateModel();
                            this._loadingJSON = true;
                            if (this.isDraftEnabled()) {
                                oModel.oData = JSON.parse(oData.modeljson);
                            } else {
                                var oModelState = JSON.parse(oData.modeljson);
                                oModel.mChangedEntities = oModelState.mChangedEntities;
                                oModel.mChangeHandles = oModelState.mChangeHandles;
                                oModel.mDeferredRequests = oModelState.mDeferredRequests;
                                oModel.oData = oModelState.oData;
                            }
                            oModel.updateBindings();
                        }
                        if (resolve) {
                            resolve();
                        }
                        delete this._loadingJSON;
                    }, this),
                    error: jQuery.proxy(function (oError) {

                        if (reject) {
                            reject(oError);
                        }

                    }, this)
                });

            }, this));
        }



        function _onDataBindingChanged() {
            if (!this._oUpdateModelJSONTimer) {
                this._oUpdateModelJSONTimer = setTimeout(this._updateModelJSON, 2000);
            }
        }



        function _updateModelJSON() {
            if (this._loadingJSON || this._bDestroyed || !this.isCurrentUserCreator()) {
                return;
            }

            this._oUpdateModelJSONTimer = null;

            var qcObject = this.getQuickCreateItem();

            var oModel = this.getQuickCreateModel();

            var newJSON = "";

            if (this.isDraftEnabled()) {
                var oEntities = {};

                var changedKeys = Object.keys(oModel.mChangedEntities);
                var keys = Object.keys(oModel.oData);
                var mergedEntity = {};
                jQuery.each(keys, jQuery.proxy(function(i, key) {

                    if (oModel.mChangedEntities[key]) {
                        mergedEntity = {};
                        jQuery.extend(mergedEntity, oModel.oData[key]);
                        jQuery.extend(mergedEntity, oModel.mChangedEntities[key]);
                        oEntities[key] = mergedEntity;
                    } else {
                        oEntities[key] = oModel.oData[key];
                    }

                }, this));

                jQuery.each(changedKeys, jQuery.proxy(function(i, key) {
                    if (!oEntities[key]) {
                        oEntities[key] = oModel.mChangedEntities[key];
                    }
                }, this));

                newJSON = JSON.stringify(oEntities);
            } else {
                var oModelState = {};

                oModelState.mChangedEntities = oModel.mChangedEntities;
                oModelState.mChangeHandles = oModel.mChangeHandles;
                oModelState.mDeferredRequests = oModel.mDeferredRequests;
                oModelState.oData = oModel.oData;

                newJSON = JSON.stringify(oModelState);
            }

            if (newJSON === qcObject.modeljson) {
                return;
            }


            qcObject.modeljson = newJSON;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }

        function discardQuickCreateDraft() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oModel = this.getQuickCreateModel();

                if (this.oRootView && this.oRootView.getBindingContext()) {

                    if (this.isDraftEnabled()) {

                        oModel.remove(this.oRootView.getBindingContext().getPath(), {

                            success: function () {
                                MessageToast.show("Draft has been discarded");
                                resolve();
                            },

                            error: function (oError) {
                                reject(oError);
                            }

                        });
                    } else {
                        oModel.resetChanges();
                        resolve();
                    }
                } else {
                    resolve();
                }

            }, this));
        }


        function calculateViewHeight(oView, bIncrease) {
            if (oView) {
                oCopilotController.calculateViewHeight(oView, bIncrease);
            }
        }

        function setComponentContainerHeight(height) {
            oCopilotController.setComponentContainerHeight(height);
        }

        function objectCreated(oContext) {
            if (this._bDestroyed) {
                return;
            }
            this.fireObjectCreated({context: oContext});
        }

        function fireQuickCreateViewCreated() {
          // fire embedded view created event
          sap.ui.getCore().getEventBus().publish(
              QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
              QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_VIEW_CREATED,
              {
                  api: this
              }
          );
        }

        function destroy() {
            if (this._bDestroyed) {
                return;
            }
            if (this._oUpdateModelJSONTimer) {
                clearTimeout(this._oUpdateModelJSONTimer);
                this._oUpdateModelJSONTimer = null;
            }
            delete QuickCreateAPI._Instances[this._InstanceKey];
            if (oComponentContainer && !oComponentContainer._bIsBeingDestroyed && !oComponentContainer.bIsDestroyed) {
                oComponentContainer.destroy();
            }

            this.oRootView = undefined;

            // subscribe to line items found on quick create
            sap.ui.getCore().getEventBus().unsubscribe(
                QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
                QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
                this._onLineItemsFound,
                this);

            this.fireDestroyed({collectionItemGuid: this._InstanceKey});

            ManagedObject.prototype.destroy.call(this);

            this._bDestroyed = true;
        }

        var api = new QuickCreateAPI();

        jQuery.extend(api, {

            getCollectionItem: getCollectionItem.bind(api),
            getQuickCreateItem: getQuickCreateItem.bind(api),
            updateDraftID: updateDraftID.bind(api),
            getRootControl: getRootControl.bind(api),
            isDraftEnabled: isDraftEnabled.bind(api),
            isCurrentUserCreator: isCurrentUserCreator.bind(api),
            getQuickCreateRootBindingContext: getQuickCreateRootBindingContext.bind(api),
            getQuickCreateRootEntityType: getQuickCreateRootEntityType.bind(api),
            _onComponentContainerAfterRendering: _onComponentContainerAfterRendering.bind(api),
            calculateViewHeight: calculateViewHeight.bind(api),
            setComponentContainerHeight: setComponentContainerHeight.bind(api),
            getQuickCreateModel: getQuickCreateModel.bind(api),
            objectCreated: objectCreated.bind(api),
            destroy: destroy.bind(api),
            getRootView: getRootView.bind(api),
            setRootView: setRootView.bind(api),
            getComponentInstance: getComponentInstance.bind(api),
            getComponentContainer: getComponentContainer.bind(api),
            _onDataBindingChanged: _onDataBindingChanged.bind(api),
            _attachToModelBindingChanges: _attachToModelBindingChanges.bind(api),
            loadQuickCreateModelFromJSON: loadQuickCreateModelFromJSON.bind(api),
            _updateModelJSON: _updateModelJSON.bind(api),
            getCopilotModel: getCopilotModel.bind(api),
            discardQuickCreateDraft: discardQuickCreateDraft.bind(api),
            _onLineItemsFound: _onLineItemsFound.bind(api),
            fireQuickCreateViewCreated:fireQuickCreateViewCreated.bind(api)

        });

        oComponentContainer.addEventDelegate({
            onAfterRendering: api._onComponentContainerAfterRendering
        });

        api._InstanceKey = api.getCollectionItem().copilotEntity.getODataKey();
        if (QuickCreateAPI._Instances[api._InstanceKey]) {
            QuickCreateAPI._Instances[api._InstanceKey].destroy();
        }
        delete QuickCreateAPI._Instances[api._InstanceKey];
        QuickCreateAPI._Instances[api._InstanceKey] = api;

        // subscribe to line items found on quick create
        sap.ui.getCore().getEventBus().subscribe(
            QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
            QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
            api._onLineItemsFound,
            api);

        oComponentInstance.oQuickCreateAPI = api;

        return oComponentInstance.oQuickCreateAPI;

    };

    return QuickCreateAPI;

}, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory') ) {
/*global Promise */
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.ApplicationController'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickTemplateComponentFactory",[
		"sap/ui/base/Object",
		"sap/ui/core/UIComponent",
		"sap/ui/model/resource/ResourceModel",
		"sap/ui/core/mvc/ViewType",
		"sap/ui/model/json/JSONModel",
		"sap/ui/generic/app/ApplicationController"
	],
	function(BaseObject, UIComponent, ResourceModel, ViewType, JSONModel, ApplicationController) {
		"use strict";


		var factory = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory");

		function fnEnhanceI18nModel(oComponent) {
			var oI18NModel = new ResourceModel({
				bundleName: "sap/suite/ui/generic/template/QuickCreate/i18n/i18n"
			});
			var oQVI18nModel = new ResourceModel({
				bundleName: "sap/suite/ui/generic/template/QuickView/i18n/i18n"
			});
			oI18NModel.enhance(oQVI18nModel.getResourceBundle());

			var oTemplateModel = oComponent.getModel("i18n");
			if (oTemplateModel) {
				oI18NModel.enhance(oTemplateModel.getResourceBundle());
			}
			oComponent.setModel(oI18NModel, "i18n");
		}

		function fnDetermineStableViewID(oComponent) {
			return oComponent.getMetadata().getComponentName() + "::" + oComponent.getViewName() + "::" + oComponent.getEntitySet();
		}

		function fnCreateParameterModel(oComponent, sEntityType) {
			var isDraftEnabled = oComponent.getTransactionController().getDraftController().getDraftContext().isDraftEnabled(oComponent.getEntitySet());
			var oSettings = null;
			var oAllSettings = oComponent.oContainer.getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				entityType: sEntityType,
				"sap-ui-debug": window["sap-ui-debug"],
				isDraftEnabled: isDraftEnabled,
				settings: oSettings,
				manifest: oComponent.getManifest()
			});
		}

		function fnCreateXMLView(oComponent) {

			return new Promise(jQuery.proxy(function(resolve, reject) {
				var oView = null;
				var oMetaModel = this.getModel().getMetaModel();
				oMetaModel.loaded().then(jQuery.proxy(function() {

					var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet());
					if (!oEntitySet || !oEntitySet.entityType) {
						jQuery.sap.log.error("The specified entity set " + this.getEntitySet() + " was not found in loaded metadata of service");
						if (reject) {
							reject();
						}
						return;
					}


					var sStableId = fnDetermineStableViewID(this);

					oView = sap.ui.getCore().byId(sStableId);
					if (oView) {
						jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
						try {
							oView.destroy();
						} catch (ex) {
							jQuery.sap.log.warning("Error destroying view: " + ex);
						}
						oView = null;
					}

					var preprocessorsData = this.getComponentData() ? this.getComponentData().preprocessorsData : null;
					oView = sap.ui.view({
						async: false,
						viewData: {
							component: this
						},
						preprocessors: {
							xml: {
								bindingContexts: {
									meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
									entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(this.getEntitySet(), true))
								},
								models: {
									meta: oMetaModel,
									entitySet: oMetaModel,
									parameter: fnCreateParameterModel(this, oEntitySet.entityType)
								},
								preprocessorsData: preprocessorsData
							}
						},
						id: sStableId,
						type: ViewType.XML,
						viewName: this.getViewName(),
						height: "100%"
					});

					resolve(oView);
				}, this));
			}, oComponent));

		}



		function fnInit() {
			// call super init (will call function "create content")
			UIComponent.prototype.init.apply(this, arguments);
			this._oApplicationController = new ApplicationController(this.getModel());
		}

		function fnExit() {
			if (this._oApplicationController) {
				this._oApplicationController.destroy();
			}
			this._oApplicationController = null;
		}

		factory.createQuickTemplateComponent = function(oComponentName, oComponentDefinition) {
			var genericDefinition = {

				metadata: {
					library: "sap.suite.ui.generic.template",
					properties: {
						/**
						 * Name of template
						 */
						viewName: {
							type: "string",
							defaultValue: null
						},
						/**
						 * Entity Set
						 */
						entitySet: {
							type: "string",
							defaultValue: null
						}
					}
				},

				getAppComponent: function() {
					return this;
				},

				onBeforeRendering: function() {
					var oContainer = this.oContainer;
					var oModel = !this.createViewStarted && this.getModel();
					if (oModel) {
						oModel.getMetaModel().loaded().then(function() { // Do the templating once the metamodel is loaded
							if (!this.createViewStarted) {
								this.createViewStarted = true;
								fnCreateXMLView(this).then(function(oView) {
									this.setAggregation("rootControl", oView);
									if (this.oQuickCreateAPI) { // does not exist in a QuickView
										this.oQuickCreateAPI.fireQuickCreateViewCreated();
									}
									fnEnhanceI18nModel(this);
									var i18n = this.getModel("i18n");
									if (i18n) {
										oView.setModel(i18n, "i18n");
									}
									oContainer.invalidate();
								}.bind(this));
							}
						}.bind(this));
					}
				},



				getTransactionController: function() {
					return this._oApplicationController.getTransactionController();
				},


				getApplicationController: function() {
					return this._oApplicationController;
				}


			};

			var definedInit = oComponentDefinition.init;
			oComponentDefinition.init = function() {
				fnInit.apply(this, arguments);
				if (typeof definedInit === "function") {
					definedInit.apply(this, arguments);
				}

			};

			var definedExit = oComponentDefinition.exit;
			oComponentDefinition.exit = function() {
				fnExit.apply(this, arguments);
				if (typeof definedExit === "function") {
					definedExit.apply(this, arguments);
				}
			};

			jQuery.extend(true, genericDefinition, oComponentDefinition);
			return UIComponent.extend(oComponentName, genericDefinition);
		};

		return factory;

	});

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickTemplateComponentFactory.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ComponentUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ComponentUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ComponentUtils",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";

	function getMethods(oComponent, oComponentRegistryEntry) {

		// This promise if resolved when the element binding for the header data have been read. Note that the promise
		// stored in this variable is replaced each time the function fnRebindHeaderData is called.
		// Thus, the promise allways represents the loading of the currently relevant header data.
		var oHeaderDataAvailablePromise;
		var fnHeaderDataAvailableResolve = null; // function to resolve the promise (or null if it is resolved)

		var fnBusyResolve;
		var bIsDataLoading = false;

		// Registry for the event handling facility (see fnAttach, fnDetach, and fnFire)
		var aEventHandlerRegistry = [];
		
		// Check whether this binding path represents a transient context. In our scenario this means that we
		// are in a create scenario for a non-draft entity.
		function isNonDraftCreate(sBindingPath) {
			var oEntity;
			var oModel = oComponent.getModel();
			if (sBindingPath) {
				if (oModel) {
					oEntity = oModel.getProperty(sBindingPath);
				}
			} else {
				var oContext = oComponent.getBindingContext();
				if (oContext) {
					oEntity = oContext.getObject();
				}
			}

			// workaround until ODataModel provides method
			return !!(oEntity && oEntity.__metadata && oEntity.__metadata.created);
		}
		
		function getTemplatePrivateModel() {
			return oComponent.getModel("_templPriv");
		}
		
		function getViewLevel(){
			return getTemplatePrivateModel().getProperty("/generic/viewLevel");
		}
		
		function getPreprocessorsData(){
			return oComponentRegistryEntry.preprocessorsData;	
		}
		
		function getODataLoadFailedTexts() {
			var oRB = oComponent.getModel("i18n").getResourceBundle();
			return {
				dataLoadFailedTitle: oRB.getText("ST_GENERIC_ERROR_LOAD_DATA_TITLE"),
				dataLoadFailedText: oRB.getText("ST_GENERIC_ERROR_LOAD_DATA_TEXT")
			};
		}

		function fnAttach(sTemplate, sEvent, fnFunction) {
			if (typeof fnFunction !== "function") {
				throw new Error("Event handler must be a function");
			}
			aEventHandlerRegistry.push({
				template: sTemplate,
				event: sEvent,
				handler: fnFunction
			});
		}

		function fnDetach(sTemplate, sEvent, fnFunction) {
			for (var i = aEventHandlerRegistry.length; i--; ) {
				if (aEventHandlerRegistry[i].handler === fnFunction && aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template ===
					sTemplate) {
					aEventHandlerRegistry.splice(i, 1);
				}
			}
		}

		function fnFire(sTemplate, sEvent, oEvent) {
			for (var i = 0; i < aEventHandlerRegistry.length; i++) {
				if (aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template === sTemplate) {
					aEventHandlerRegistry[i].handler(oEvent);
				}
			}
		}

		function getTemplateName(oController) {
			return oController.getMetadata().getName();
		}

		function fnPreparePageDataLoaded(oCurrentDisplay) {
			oHeaderDataAvailablePromise.then(function(oContext) {
				if (oContext && !oCurrentDisplay.outdated) {
					var oNavigationFinishedPromise = oComponentRegistryEntry.oNavigationObserver.getProcessFinished(true);                                 
					oNavigationFinishedPromise.then(function() {
						fnFire(getTemplateName(oComponentRegistryEntry.oController), "PageDataLoaded", {
							context: oContext
						});
					});
				}
			});
		}
		
		function fnStartBusy(){
			oComponentRegistryEntry.oHeaderLoadingObserver.startProcess();
			if (!fnBusyResolve){
				var oBusyPromise = new Promise(function(fnResolve){
					fnBusyResolve = fnResolve();	
				});
				oComponentRegistryEntry.oApplication.getBusyHelper().setBusy(oBusyPromise);
			}			
		}

		function fnDataRequested() {
			bIsDataLoading = true;
			if (!fnHeaderDataAvailableResolve) { // the current HeaderDataAvailablePromise was already resoled -> create a new one
				oHeaderDataAvailablePromise = new Promise(function(fnResolve) {
					fnHeaderDataAvailableResolve = fnResolve;
				});
			}
			if (!oComponent.getComponentContainer().getElementBinding().isSuspended()) {
				fnStartBusy();
			}
		}

		function fnEndBusy(){
			if (fnBusyResolve){
				fnBusyResolve();
				fnBusyResolve = null;
			}
			oComponentRegistryEntry.oHeaderLoadingObserver.stopProcess();
		}
		
		function fnDataReceived(oEvent){
			fnEndBusy();
			if (fnHeaderDataAvailableResolve) {
				var oContext = oEvent.getSource().getBoundContext();
				if (oContext){
					fnHeaderDataAvailableResolve(oContext);
					(oComponentRegistryEntry.methods.updateBindingContext || jQuery.noop)();
				}
			}
			bIsDataLoading = false;
		}

		function fnChange(oEvent) {
			var oContext = oEvent.getSource().getBoundContext();
			if (oContext) {
				if (fnHeaderDataAvailableResolve) {
					fnHeaderDataAvailableResolve(oContext);
				}
				(oComponentRegistryEntry.methods.updateBindingContext || jQuery.noop)();
			} else {
				// When not data parameter is received there is usually an exception
				// TODO: show backend error messages
				var oDataLoadFailedTexts = getODataLoadFailedTexts();
				var oNavigationController = oComponent.getAppComponent().getNavigationController();
				oNavigationController.navigateToMessagePage({
					title: oDataLoadFailedTexts.dataLoadFailedTitle,
					text: oDataLoadFailedTexts.dataLoadFailedText,
					viewLevel: getViewLevel()
				});
			}
			oComponentRegistryEntry.oHeaderLoadingObserver.stopProcess();
			fnHeaderDataAvailableResolve = null;
		}

		function fnRebindHeaderData(sBindingPath) {
			var oParameter = {};
			var oPreprocessorsData = getPreprocessorsData();
			if (oPreprocessorsData.rootContextExpand && oPreprocessorsData.rootContextExpand.length) {
				oParameter.expand = oPreprocessorsData.rootContextExpand.join(",");
			}
			oComponentRegistryEntry.oHeaderLoadingObserver.startProcess();
			oHeaderDataAvailablePromise = new Promise(function(fnResolve) {
				fnHeaderDataAvailableResolve = fnResolve;
				oComponent.getComponentContainer().bindElement({
					path: sBindingPath,
					events: {
						dataRequested: fnDataRequested,
						dataReceived: fnDataReceived,
						change: fnChange
					},
					parameters: oParameter,
					batchGroupId: "Changes", // get navigation controller constant?
					changeSetId: "Changes"
				});
			});
		}

		function fnBindComponent(sBindingPath, bIsComponentCurrentlyActive) {
			if (!sBindingPath){
				return;
			}
			var oComponentContainer = oComponent.getComponentContainer();
			if (!oComponentContainer){
				return;
			}
			if (isNonDraftCreate(sBindingPath)) {
				oComponentContainer.unbindElement();
				oComponentContainer.setBindingContext(oComponentContainer.getModel().getContext(sBindingPath));
			} else {
				var oCurrentDisplay = oComponentRegistryEntry.oApplication.getCurrentDisplayObject();
				var oElementBinding = oComponentContainer.getElementBinding();
				if (oElementBinding){
					if (oElementBinding.getPath() === sBindingPath) {
						/*
						* component is already bound to this object - no rebound to avoid that 1:1, 1:N and expands are read
						* again
						*/
						if (oElementBinding.isSuspended()) {
							oElementBinding.resume();
						}
						if (bIsDataLoading){
							fnStartBusy();	
						}
						if (!bIsComponentCurrentlyActive){
							fnPreparePageDataLoaded(oCurrentDisplay);
						}
						return;
					} else if (!bIsComponentCurrentlyActive){
						oComponentContainer.unbindElement();	
					}
				}
				// set the UI model to not editable / enabled as long as the binding data is read
				var oUIModel = oComponent.getModel("ui");
				oUIModel.setProperty("/enabled", false);
				oUIModel.setProperty("/editable", false);
				// and read the header data if necessary
				fnRebindHeaderData(sBindingPath);

				fnPreparePageDataLoaded(oCurrentDisplay);
			}
		}
		
		function fnSuspendBinding(){
			var oComponentContainer = oComponent.getComponentContainer();
			var oElementBinding = oComponentContainer.getElementBinding();
			if (oElementBinding && !oElementBinding.isSuspended()){ // suspend element bindings of inactive components
				oElementBinding.suspend();
				fnEndBusy();
			}			
		}

		function setBackNavigation(fnBackNavigation) {
			oComponentRegistryEntry.oApplication.setBackNavigation(fnBackNavigation);
		}

		function setTitle(sTitle) {
			oComponentRegistryEntry.oApplication.setTitle(sTitle);
		}

		function registerContext(oContext){
			return oComponentRegistryEntry.oApplication.registerContext(oContext);
		}
		
		function getBreadCrumbInfo(){
			return oComponentRegistryEntry.oApplication.getBreadCrumbInfo(oComponent.getEntitySet());
		}
		
		return {
			setEditableNDC: function(bIsEditable) {
				oComponentRegistryEntry.oApplication.setEditableNDC(bIsEditable);
			},
			getEditableNDC: function() {
				return oComponentRegistryEntry.oApplication.getEditableNDC();
			},

			getBusyHelper: function() {
				return oComponentRegistryEntry.oApplication.getBusyHelper();
			},

			isNonDraftCreate: isNonDraftCreate,

			attach: function(oController, sEvent, fnFunction) {
				fnAttach(getTemplateName(oController), sEvent, fnFunction);
			},
			detach: function(oController, sEvent, fnFunction) {
				fnDetach(getTemplateName(oController), sEvent, fnFunction);
			},
			fire: function(oController, sEvent, oEvent) {
				fnFire(getTemplateName(oController), sEvent, oEvent);
			},

			getCurrentDisplayObject: function() {
				return oComponentRegistryEntry.oApplication.getCurrentDisplayObject();
			},

			rebindHeaderData: fnRebindHeaderData,
			getPreprocessorsData: getPreprocessorsData,
			bindComponent: fnBindComponent,
			suspendBinding: fnSuspendBinding,
			setBackNavigation: setBackNavigation,
			setTitle: setTitle,
			getTemplatePrivateModel: getTemplatePrivateModel,
			registerContext: registerContext,
			getViewLevel: getViewLevel,
			getBreadCrumbInfo: getBreadCrumbInfo
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ComponentUtils.js", {
		constructor: function(oComponent, oComponentRegistryEntry) {
			jQuery.extend(this, getMethods(oComponent, oComponentRegistryEntry));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ComponentUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ContextBookkeeping') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ContextBookkeeping'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ContextBookkeeping",["jquery.sap.global", "sap/ui/base/Object"
	],
	function(jQuery, BaseObject) {
		"use strict";

		function getMethods(oAppComponent) {
			
			var mPath2ContextData = { }; // currently only used for draft scearios

			function fnCreateDraftInfo(oContext){
				var oDraftController = oAppComponent.getTransactionController().getDraftController();
				var oDraftContext = oDraftController.getDraftContext();
				var oActiveEntity = oContext.getObject();
				// check whether we are draft enabled AND the current context represents a draft
				var bIsDraftSupported = oDraftContext.hasDraft(oContext);
				var bIsDraft = bIsDraftSupported && !oActiveEntity.IsActiveEntity;
				var bHasActiveEntity = oActiveEntity.HasActiveEntity;
				var bIsCreate;
				
				if (bIsDraft) {
					if (bHasActiveEntity) {
						bIsCreate = false;
					} else {
						bIsCreate = true;
					}
				} else {
					bIsCreate = false;
				}
				
				return {
					bIsDraft: bIsDraft,
					bIsDraftSupported: bIsDraftSupported,
					bIsCreate: bIsCreate
				};
			}
			
			// Note this is the only method which can also be called in non draft scenarios NDC
			function registerContext(oContext){
				var sPath = oContext.getPath();
				var oContextInfo = fnCreateDraftInfo(oContext);
				mPath2ContextData[sPath] = {
					oContextInfo: oContextInfo,
					oContext: oContext
				};
				return oContextInfo;
			}
			
			function getContextData(oContext){
				var sPath = oContext.getPath();
				var oRet = mPath2ContextData[sPath];
				if (!oRet){
					registerContext(oContext);
					oRet = mPath2ContextData[sPath];
				}
				return oRet;
			}
			
			function createDraftSiblingPromise(oModel, sPath){
				return new Promise(function(fnResolve, fnReject) {
					oModel.read(sPath + "/SiblingEntity", {
						success: function(oResponseData) {
							var oActive = oModel.getContext("/" + oModel.getKey(oResponseData));
							fnResolve(oActive);
						},
						error: function(oError) {
							fnReject(oError);
						}
					});
				});				
			}
			
			function getDraftSiblingPromise(oContext){
				var oContextData = getContextData(oContext);
				if (oContextData.oContextInfo.bIsCreate){
					return Promise.resolve();
				}
				var oSiblingPromise = oContextData.oSiblingPromise;
				if (!oSiblingPromise){
					oSiblingPromise = oContextData.oContextInfo.bIsDraftSupported ? 
						createDraftSiblingPromise(oContext.getModel(), oContext.getPath()) :
						Promise.resolve(oContext);
					if (oContextData.oContextInfo.bIsDraft || !oContextData.oContextInfo.bIsDraftSupported){
						oContextData.oSiblingPromise = oSiblingPromise;
					}
				}
				return oSiblingPromise;
			}
			
			function draftRemovalStarted(oContext, oRemovalPromise){
				var oContextData = getContextData(oContext);
				oContextData.oRemovalPromise = oRemovalPromise;
				oRemovalPromise.then(function(oResponse){ // Removal was successfull -> remove Edit Promise from the active version
					var sDisplayPath = oResponse.context.getPath();
					var oDisplayContextInfo = mPath2ContextData[sDisplayPath];
					if (oDisplayContextInfo){
						delete oDisplayContextInfo.oEditingPromise;	
					}
					oContextData.oContext = null;  // remove deleted context
				},function(){
					delete oContextData.oRemovalPromise;	
				});				
			}
			
			function activationStarted(oContext, oActivationPromise){
				draftRemovalStarted(oContext, oActivationPromise);
			}
			
			function cancellationStarted(oContext, oCancellationPromise){
				draftRemovalStarted(oContext, oCancellationPromise);	
			}
			
			// called when the user has started an editing procedure (of a draft based object)
			// oContext: the context of the object to be edited
			// oEditingPromise: A promise that behaves as the Promise returned by function editEntity of CRUDManager 
			function editingStarted(oContext, oEditingPromise){
				var oContextData = getContextData(oContext);
				oContextData.oEditingPromise = new Promise(function(fnResolve, fnReject){
					var fnNoEdit = function(){
						delete oContextData.oEditingPromise;
						fnReject();
					};
					oEditingPromise.then(function(oEditInfo){
						if (oEditInfo.draftAdministrativeData){
							fnNoEdit();
						} else {
							fnResolve(oEditInfo);	
						}	
					}, fnNoEdit);					
				});
				oContextData.oEditingPromise.catch(jQuery.noop); // avoid ugly console messages
			}
			
			// Check whether navigation to a context should be forwarded to another context.
			// sPath describes the path that is navigated to
			// Returns a Promise that either returns to faulty (no forwarding needed) or to an AlternativeContextInfo
			function getAlternativeContextPromise(sPath){
				var oContextData = mPath2ContextData[sPath];
				if (!oContextData){ // nothing known about this context -> no farwarding needed
					return Promise.resolve();
				}
				return new Promise(function(fnResolve){
					var oAlternativeContextInfo = null; // the object that will be resolved to -> current assumption: no forwarding needed
					var fnResolveToAlternativeContext = function(){ // execute the resolution
						fnResolve(oAlternativeContextInfo);	
					};
					var fnHandleEditingPromise = function(oEditingPromise){ // function to be called when there is an EditingPromise for the object to be displayed
						oEditingPromise.then(function(oEditingInfo){ // oEditingInfo contains the context for the draft that currently replaces the object
							// Currently we have the following problem: A delete operation on the draft does not delete the whole object, but only the draft.
							// However, in this case draftRemovalStarted is not called, but only fnAdaptAfterObjectDeleted.
							// This function does NOT remove the EditingPromise from the active version. Thus, although the EditingPromise is present
							// it still might be correct to show the active object.
							// Therefore, we check for the corresponsing entry of the draft. If this entry exists, but no context is available anymore
							// the draft has meanwhile been deleted.
							var sEditingPath = oEditingInfo.context.getPath();
							var oEditingContextData = mPath2ContextData[sEditingPath];
							if (!oEditingContextData || oEditingContextData.oContext){
								oAlternativeContextInfo = {
									context: oEditingInfo.context,
									iDisplayMode: 2
								};
							}
							fnResolveToAlternativeContext();
						}, fnResolveToAlternativeContext);						
					};
					
					if (oContextData.oRemovalPromise){ // sPath describes a draft for which an activation has been started
						oContextData.oRemovalPromise.then(function(oResponse){ // activation was successfull
							oAlternativeContextInfo = { // forward to active entity
								context: oResponse.context,
								iDisplayMode: 1
							};								
							var sDisplayPath = oResponse.context.getPath();
							var oDisplayData = mPath2ContextData[sDisplayPath];
							var oEditingPromise =  oDisplayData && oDisplayData.oEditingPromise;
							if (oEditingPromise){ // active entity might already be in (another) draft
								fnHandleEditingPromise(oEditingPromise);									
							} else {
								fnResolveToAlternativeContext();
							}
						}, fnResolveToAlternativeContext);
					} else if (oContextData.oEditingPromise){ // sPath describes an active object for which a draft is being created 
						fnHandleEditingPromise(oContextData.oEditingPromise);
					} else {
						fnResolveToAlternativeContext();	
					}
				});
			}
			
			function fnAdaptAfterObjectDeleted(sPath){
				var oContextData = mPath2ContextData[sPath];
				if (oContextData){
					oContextData.oContext = null;
				}
			}
			
			function fnAdaptAfterDeletion(aDeletedPath){
				for (var i = 0; i < aDeletedPath.length; i++){
					fnAdaptAfterObjectDeleted(aDeletedPath[i]);	
				}
			}

			return {
				registerContext: registerContext,
				getDraftSiblingPromise: getDraftSiblingPromise,
				activationStarted: activationStarted,
				cancellationStarted: cancellationStarted,
				editingStarted: editingStarted,
				getAlternativeContextPromise: getAlternativeContextPromise,
				adaptAfterDeletion: fnAdaptAfterDeletion
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.ContextBookkeeping", {
			constructor: function(oAppComponent) {
				jQuery.extend(this, getMethods(oAppComponent));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/ContextBookkeeping.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.FlexEnabler') ) {
jQuery.sap.declare("sap.suite.ui.generic.template.lib.FlexEnabler");

/**
 * Temporary notepad control to enable UI5 flexibility in list report.
 */
sap.ui.core.Control.extend("sap.suite.ui.generic.template.lib.FlexEnabler", {
	metadata: {
		properties: {
			/**
			 * Specifies whether the SAPUI5 flexibility features should be switched on.
			 */
			flexEnabled: {
				type: "boolean",
				group: "Misc",
				defaultValue: true
			}
		}
	},
	renderer: function(oRm, oControl) {
		"use strict";
	}
});

}; // end of sap/suite/ui/generic/template/lib/FlexEnabler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.f.FlexibleColumnLayoutSemanticHelper'); // unlisted dependency retained
jQuery.sap.require('sap.f.LayoutType'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler",["jquery.sap.global", "sap/ui/base/Object", "sap/f/FlexibleColumnLayoutSemanticHelper", "sap/f/LayoutType"],
	function(jQuery, BaseObject, FlexibleColumnLayoutSemanticHelper, LayoutType) {
		"use strict";
		
		// routing helper is not part of sap.ui.define in order to avoid cyclic dependencies
		function onRoutingHelper(fnOnRoutingHelper){
			sap.ui.require(["sap/suite/ui/generic/template/lib/routingHelper"], fnOnRoutingHelper);
		}
		
		var oResolvedPromise = Promise.resolve(); // constant for a trivial resolved Promise
		
		var iDefaultColumn = 2;
		
		var aColumnNames = ["begin", "mid", "end"];
		
		var aMessagePageTargets = ["messagePageBeginColumn", "messagePageMidColumn", "messagePageEndColumn"];
		
		function tVL(iViewLevel){
			return aColumnNames[iViewLevel] ? iViewLevel : iDefaultColumn;
		}
		
		function isInsideFCL(iViewLevel){
			return 	tVL(iViewLevel) === iViewLevel;
		}
		
		function getPagesAggregation(iViewLevel){
			return 	aColumnNames[tVL(iViewLevel)] + "ColumnPages";
		}
		
		// Adapts the route and returns the control aggregation
		function fnAdaptRoutingInfo(oRoute, sTargetName, aPredecessorTargets){
			oRoute.showBeginColumn = oRoute.viewLevel < 3;
			oRoute.showMidColumn = oRoute.viewLevel === 1 || oRoute.viewLevel === 2;
			oRoute.showEndColumn = oRoute.viewLevel > 1;
			oRoute.target = oRoute.showMidColumn ? aPredecessorTargets.concat([sTargetName]) : sTargetName;
			return getPagesAggregation(oRoute.viewLevel);
		}
		
		function createMessagePageTargets(fnCreateAdditionalMessageTarget){
			for (var i = 0; i < aColumnNames.length; i++){
				fnCreateAdditionalMessageTarget(aMessagePageTargets[i], getPagesAggregation(i));	
			}
		}
		
		function getTargetForMessagePage(iViewLevel){
			return aMessagePageTargets[tVL(iViewLevel)];
		}
		
		function getColumnForViewLevel(iViewLevel){
			return 	aColumnNames[tVL(iViewLevel)];
		}

		function getMethods(oFlexibleColumnLayout, oNavigationControllerProxy) {

			var oFlexibleColumnLayoutSemanticHelper = FlexibleColumnLayoutSemanticHelper.getInstanceFor(oFlexibleColumnLayout, {});
			var oDefaultUiLayouts = oFlexibleColumnLayoutSemanticHelper.getDefaultLayouts();
			var oRouteMatchedEventEndColumn; // TODO1: Comment this
			var oLastRoute;
			var oUiState;
			var sCurrentLayout;
			var sStoredTargetLayout;
			var iMessagePageColumn = -1;
			var oExtendedRoutingInfo;
			
			var oTemplateContract =	oNavigationControllerProxy.oTemplateContract,
				oRouter = oNavigationControllerProxy.oRouter;
			
			function isLayoutDefault(sLayout){
				return sLayout === oDefaultUiLayouts.defaultLayoutType || sLayout === oDefaultUiLayouts.defaultTwoColumnLayoutType || sLayout === oDefaultUiLayouts.defaultThreeColumnLayoutType;
			}
			
			function activateView(oActivationInfo, sPath, sRouteName) {
				var oPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRouteName];
				if (oPromise) {
					return oPromise.then(function(oComponent) {
						return oNavigationControllerProxy.activateOneComponent(sPath, oActivationInfo, oComponent);
					});
				}
				return oResolvedPromise;
			}

			function removeQueryInRouteName(sRouteName) {
				// remove query in sRouteName
				var checkForQuery = sRouteName.substring(sRouteName.length - 5, sRouteName.length);
				if (checkForQuery === "query") {
					return sRouteName.substring(0, sRouteName.length - 5);
				}
				return sRouteName;
			}
			
			function fnAfterActivation(aActivationPromises){
				return Promise.all(aActivationPromises).then(oNavigationControllerProxy.afterActivation);
			}
			
			function fnReplaceLayoutInHash(sNewLayout, bReplace) {
				var bIsDefault = isLayoutDefault(sNewLayout);
				// check wether we are in a query route
				if (oLastRoute.name.lastIndexOf("query") === oLastRoute.name.length - "query".length) {
					oLastRoute.arguments.query = oLastRoute.arguments["?query"];
					if (bIsDefault){
						delete oLastRoute.arguments.query.FCLLayout;
						if (jQuery.isEmptyObject(oLastRoute.arguments.query)){
							delete oLastRoute.arguments.query;
							oLastRoute.name = removeQueryInRouteName(oLastRoute.name);
						}
					} else {
						oLastRoute.arguments.query.FCLLayout = sNewLayout;
					}
				} else if (!bIsDefault){
					oLastRoute.name = oLastRoute.name + "query";
					oLastRoute.arguments.query = {
						FCLLayout : sNewLayout
					};
				}

				var sHash = oRouter.getURL(oLastRoute.name, oLastRoute.arguments);
				// router put unwanted / to the end of the route
				sHash = sHash.replace("/?", "?");
				oNavigationControllerProxy.navigate(sHash, bReplace);
			}
			
			function getMidColumnPathPromise(oConfig, oEvent){
				return new Promise(function(fnResolve){
					onRoutingHelper(function(routingHelper) {
						fnResolve(routingHelper.determinePath(oConfig, oEvent, oTemplateContract.routeViewLevel1.pattern));
					});
				});
			}
			
			function fnDetermineRoutesAndPathes(){
				var fnPromise = function(fnResolve){
					var oRet = {};
					var iViewLevel = oLastRoute.event.getParameter("config").viewLevel;
					if (iViewLevel < 3){
						oRet.begin = {
							route: "root",
							path: "",
							isVisible: oUiState.columnsVisibility.beginColumn
						};
						
						if (iViewLevel === 0){
							fnResolve(oRet);
							return;
						}
					}
					var sRouteName = removeQueryInRouteName(oLastRoute.name);
					
					if (iViewLevel > 0){
						var sPar = getColumnForViewLevel(iViewLevel);
						oRet[sPar] = {
							route: sRouteName,
							path: oLastRoute.path,
							isVisible: iViewLevel > 2 || (iViewLevel === 1 && oUiState.columnsVisibility.midColumn) || (iViewLevel === 2 && oUiState.columnsVisibility.endColumn)
						};
					}
					
					if (iViewLevel === 2) { // activate view in midColumn if we show endColumn
						getMidColumnPathPromise(oLastRoute.routeConfig, oLastRoute.event).then(function(sMidColumnPath){
							oRet.mid = {
								route: oTemplateContract.routeViewLevel1.name,
								path: sMidColumnPath,
								isVisible: oUiState.columnsVisibility.midColumn
							};
							fnResolve(oRet);
						});
					} else {
						fnResolve(oRet);
					}
				};
				return new Promise(fnPromise);
			}

			function fnAdaptToVisibilityChange(oVisibilityChanged){
				var oRouesAndPathesPromise = fnDetermineRoutesAndPathes();
				oRouesAndPathesPromise.then(function(oRoutesAndPathes){
					var aActivationPromises = [];
					var aStaysVisible = [oRoutesAndPathes.begin, oRoutesAndPathes.mid, oRoutesAndPathes.end];
					var oActivationInfo = oNavigationControllerProxy.performPseudoHashChange(aStaysVisible);
					for (var sColumn in oVisibilityChanged){
						if (oVisibilityChanged[sColumn]){
							var oColumnInfo = oRoutesAndPathes[sColumn];
							if (oColumnInfo){
								aActivationPromises.push(activateView(oActivationInfo, oColumnInfo.path, oColumnInfo.route));
							}
							// Note: deactivation is handled by the afterActivation
						}
					}
					fnAfterActivation(aActivationPromises);
				});
			}

			function fnAdaptLayout(bChangedRoute){
				var oNewUiState = oFlexibleColumnLayoutSemanticHelper.getCurrentUIState();
				var oVisibilityChanged = {};
				oVisibilityChanged.end = oUiState && (oUiState.columnsVisibility.endColumn !== oNewUiState.columnsVisibility.endColumn);
				oVisibilityChanged.mid = oUiState && (oUiState.columnsVisibility.midColumn !== oNewUiState.columnsVisibility.midColumn);
				oVisibilityChanged.begin = oUiState && (oUiState.columnsVisibility.beginColumn !== oNewUiState.columnsVisibility.beginColumn);
				oUiState = oNewUiState;
				
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/midActionButtons", {
					fullScreen: oUiState.actionButtonsInfo.midColumn.fullScreen !== null,
					exitFullScreen: oUiState.actionButtonsInfo.midColumn.exitFullScreen !== null,
					closeColumn: oUiState.actionButtonsInfo.midColumn.closeColumn !== null
				});
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/endActionButtons", {
					fullScreen: oUiState.actionButtonsInfo.endColumn.fullScreen !== null,
					exitFullScreen: oUiState.actionButtonsInfo.endColumn.exitFullScreen !== null,
					closeColumn: oUiState.actionButtonsInfo.endColumn.closeColumn !== null
				});
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/isLogicallyFullScreen", oUiState.isLogicallyFullScreen);
				var iHighestViewLevel;
				if (oUiState.columnsVisibility.endColumn){
					iHighestViewLevel = iHighestViewLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");	
				} else if (oUiState.columnsVisibility.midColumn) {
					iHighestViewLevel = 1;
				} else {
					iHighestViewLevel = 0;
				}
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/highestViewLevel", iHighestViewLevel);
				
				var iLowestDetailViewLevel;
				if (oUiState.columnsVisibility.midColumn){
					iLowestDetailViewLevel = 1;
				} else {
					iLowestDetailViewLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");
				}
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/lowestDetailViewLevel", iLowestDetailViewLevel);
				
				if (oLastRoute && sCurrentLayout !== oUiState.layout){
					fnReplaceLayoutInHash(oUiState.layout, true);
				} else if ((oVisibilityChanged.begin || oVisibilityChanged.mid || oVisibilityChanged.end)  && !bChangedRoute){
					fnAdaptToVisibilityChange(oVisibilityChanged);	
				}
			}

			// we expect oEvent to be a cloned version of UI5 event
			function fnDetermineAndSetContextPath(oEvent, oRouteConfig, sPath, oActivationInfo) {
				return new Promise(function(fnResolve){
					fnAdaptLayout(true);
					var oRoutesAndPathPromise = fnDetermineRoutesAndPathes();
					oRoutesAndPathPromise.then(function(oRoutesAndPathes){
						oExtendedRoutingInfo = oRoutesAndPathes;
						var aActivationPromises = [];
						for (var sColumn in oRoutesAndPathes){
							var oColumnInfo = oRoutesAndPathes[sColumn];
							if (oColumnInfo.isVisible){
								aActivationPromises.push(activateView(oActivationInfo, oColumnInfo.path, oColumnInfo.route));
							}
						}
						fnAfterActivation(aActivationPromises).then(fnResolve);
					});
				});
			}
			
			function fnHandleBeforeRouteMatched(oEvent){
				var iViewLevel = oEvent.getParameter("config").viewLevel;
				var oQuery = oEvent.getParameter("arguments")["?query"];
				if (isInsideFCL(iViewLevel)){
					sCurrentLayout = (oQuery && oQuery.FCLLayout);
					if (!sCurrentLayout){
						switch (iViewLevel){
							case 0:
								sCurrentLayout = oDefaultUiLayouts.defaultLayoutType;
								break;
							case 1:
								sCurrentLayout = oDefaultUiLayouts.defaultTwoColumnLayoutType;
								break;
							case 2:
								sCurrentLayout = oDefaultUiLayouts.defaultThreeColumnLayoutType;
						}
					}
				} else {
					sCurrentLayout = LayoutType.EndColumnFullScreen;	
				}
				oFlexibleColumnLayout.setLayout(sCurrentLayout);				
			}

			// we expect oEvent to be a cloned version of UI5 event
			function fnHandleRouteMatched(oEvent, oRouteConfig, sPath, oActivationInfo) {
				iMessagePageColumn = -1;
				var iViewLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");
				oRouteMatchedEventEndColumn = iViewLevel === 2 ? oEvent : null;
				
				oLastRoute = {
					name: oEvent.getParameter("name"),
					arguments: oEvent.getParameter("arguments"),
					path: sPath,
					event: oEvent,
					routeConfig: oRouteConfig
				};

				return fnDetermineAndSetContextPath(oEvent, oRouteConfig, sPath, oActivationInfo);
			}

			function getAppStateFromLayout(sLayout){
				return isLayoutDefault(sLayout) ? {}  : {
					FCLLayout: [sLayout]
				};
			}
			
			function isFullscreenLayout(sLayout){
				return sLayout === LayoutType.EndColumnFullScreen || sLayout === LayoutType.MidColumnFullScreen;
			}

			// returns a Promise that resolves to the parameter string for the given target level
			function getAppStateParStringForNavigation(iLevel, oAppStates) {
				if (!isInsideFCL(iLevel)) {
					return oNavigationControllerProxy.getParStringPromise(oAppStates, false);
				}				
				var sNextUiLayout = sStoredTargetLayout || oFlexibleColumnLayoutSemanticHelper.getNextUIState(iLevel).layout;		
				jQuery.extend(oAppStates, getAppStateFromLayout(sNextUiLayout));
				sStoredTargetLayout = null;
				if (isFullscreenLayout(sNextUiLayout)){
					return oNavigationControllerProxy.getParStringPromise(oAppStates, false);	
				}
				var oLevel1Promise = (iLevel === 2) ? oNavigationControllerProxy.addUrlParameterInfoForRoute(oTemplateContract.routeViewLevel1.name, oAppStates) : oResolvedPromise;
				return new Promise(function(fnResolve){
					oLevel1Promise.then(function(){
						oNavigationControllerProxy.getParStringPromise(oAppStates, true).then(fnResolve);	
					});	
				});				
			}

			/******************************************
			 * begin: Event Handlers for common FCL Action Buttons
			 ******************************************/

			function onCloseMidColumnPressed() {
				oNavigationControllerProxy.navigateToRoot(true);
			}

			function onCloseEndColumnPressed() {
				sStoredTargetLayout = oUiState.actionButtonsInfo.endColumn.closeColumn;
				var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
				getMidColumnPathPromise(oRouteConfigEndColumn, oRouteMatchedEventEndColumn).then(function(sMidColumnPath){
					// TODO2: check whether DisplayMode can be determined in advance
					oNavigationControllerProxy.navigateToContext(sMidColumnPath, null, true, 0);
				});		
			}
			
			function fnNavigateByReplacingAppState(oAppStates, bAddLevel0Info){
				var sHash = oNavigationControllerProxy.oHashChanger.getHash() || "";
				sHash = sHash.split("?")[0];			
				var oParStringPromise = oNavigationControllerProxy.getParStringPromise(oAppStates, bAddLevel0Info);
				oNavigationControllerProxy.navigateToParStringPromise(sHash, oParStringPromise, false);					
			}

			function onFullscreenColumnPressed() {
				// we rely on the fact that fullScreen property is not null for exactly one column
				var sTargetLayout = oUiState.actionButtonsInfo.midColumn.fullScreen;
				var sRoute;
				if (sTargetLayout === null){
					sTargetLayout = oUiState.actionButtonsInfo.endColumn.fullScreen;
					var aComponents = oNavigationControllerProxy.getActiveComponents();
					for (var i = 0; i < aComponents.length; i++){
						var oRegistryEntry = oTemplateContract.componentRegistry[aComponents[i]];
						if (oRegistryEntry.viewLevel === 2){
							sRoute = oRegistryEntry.route;
							break;
						}
					}
				} else {
					sRoute = oTemplateContract.routeViewLevel1.name;
				}
				var oAppStates = getAppStateFromLayout(sTargetLayout);
				oNavigationControllerProxy.addUrlParameterInfoForRoute(sRoute, oAppStates).then(function(){
					fnNavigateByReplacingAppState(oAppStates, false);
				});
			}

			function onExitFullscreenColumnPressed() {
				// we rely on the fact that exitFullScreen property is not null for exactly one column
				var sTargetLayout = oUiState.actionButtonsInfo.midColumn.exitFullScreen;
				var oLevel2Promise;
				var oMidColumnPathPromise;
				if (sTargetLayout === null){
					sTargetLayout = oUiState.actionButtonsInfo.endColumn.exitFullScreen;
				}
				var oAppStates = getAppStateFromLayout(sTargetLayout);
				if (sTargetLayout === oUiState.actionButtonsInfo.endColumn.exitFullScreen){
					var aComponents = oNavigationControllerProxy.getActiveComponents();
					var sComponentId = aComponents[0];
					var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
					if (oRegistryEntry){
						oLevel2Promise = oNavigationControllerProxy.addUrlParameterInfoForRoute(oRegistryEntry.route, oAppStates);
						oMidColumnPathPromise = getMidColumnPathPromise(oLastRoute.routeConfig, oLastRoute.event);
					}
				}
				(oLevel2Promise || oResolvedPromise).then(function(){
					(oMidColumnPathPromise || oResolvedPromise).then(function(sMidColumnPath){
						var oLevel1Promise = oNavigationControllerProxy.addUrlParameterInfoForRoute(oTemplateContract.routeViewLevel1.name, oAppStates, sMidColumnPath);
						oLevel1Promise.then(function(){
							fnNavigateByReplacingAppState(oAppStates, true);
						});
					});
				});
			}

			function getActionButtonHandlers(iViewLevel) {
				return isInsideFCL(iViewLevel) && {
					onCloseColumnPressed: iViewLevel === 1 ? onCloseMidColumnPressed : onCloseEndColumnPressed,
					onFullscreenColumnPressed: onFullscreenColumnPressed,
					onExitFullscreenColumnPressed: onExitFullscreenColumnPressed
				};
			}

			/******************************************
			 * end: Event Handlers for common FCL Action Buttons
			 *******************************************/
			 
			function getDraftSibling(oContext) {
				return oTemplateContract.oApplicationProxy.getDraftSiblingPromise(oContext);                         
			}
			
			 function fnNavigateToDraft(oDraftContextRootEntity) {
				// navigate to draft
				if (oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/FCL/highestViewLevel") === 2){
					var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[removeQueryInRouteName(oRouteConfigEndColumn.name)];
					oComponentPromise.then(function(oComponent){
						var oBindingContextEndColumn = oComponent.getBindingContext();
						var oDraftSiblingPromise = getDraftSibling(oBindingContextEndColumn, true);
						oDraftSiblingPromise.then(function(oDraftContext){
							onRoutingHelper(function(routingHelper) {
								var sNavigationProperty = oRouteConfigEndColumn.navigationProperty;
								var sContextPath = oDraftContextRootEntity.getPath() + "/" + routingHelper.determineNavigationPath(oDraftContext, sNavigationProperty).path;
								sStoredTargetLayout = oUiState.layout;
								oNavigationControllerProxy.navigateToContext(sContextPath, null, true, 2);
							});
						});
					});
				} else {
					oNavigationControllerProxy.navigateToContext(oDraftContextRootEntity, null, true, 2);
				}
			 }
			
			function getTargetAfterCancelPromise(oActive){
				if (oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/FCL/highestViewLevel") !== 2){
					return Promise.resolve(oActive);
				}
				return new Promise(function(fnResolve){
					var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[removeQueryInRouteName(oRouteConfigEndColumn.name)];
					oComponentPromise.then(function(oComponent){
						var oBindingContextEndColumn = oComponent.getBindingContext();
						var oDraftSiblingPromise = getDraftSibling(oBindingContextEndColumn, true);
						oDraftSiblingPromise.then(function(oDraftContext){
							if (!oDraftContext){
								fnResolve(oActive);
								return;
							}
							onRoutingHelper(function(routingHelper) {
								var sNavigationProperty = oRouteConfigEndColumn.navigationProperty;
								var sContextPath = oActive.getPath() + "/" + routingHelper.determineNavigationPath(oDraftContext, sNavigationProperty).path;
								fnResolve(sContextPath);
							});
						});
					});
				});
			}
			
			// Asumption: Deleted Objects have level iViewLevel + 1 (deleteEntities)
			function adaptAfterDeletion(aDeletedPath, iViewLevel){
				var bMidColumnClose = oExtendedRoutingInfo.mid && aDeletedPath.indexOf(oExtendedRoutingInfo.mid.path) >= 0;
				var bEndColumnClose = oExtendedRoutingInfo.end && aDeletedPath.indexOf(oExtendedRoutingInfo.end.path) >= 0;
				
				if (bMidColumnClose){
					oNavigationControllerProxy.navigateToRoot(true);
				} else if (bEndColumnClose){
					oNavigationControllerProxy.navigateToContext(oExtendedRoutingInfo.mid.path, null, true);
				}
			}
			
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL", { });
			
			// This function indicates if a new HistoryEntry is required.
			// A new HistoryEntry is only required if the user navigates to an object which will be displayed in a new column.
			// If the object will be displayed in a column which is already visible no HistoryEntry is required
			function isNewHistoryEntryRequired(oTarget){
				var iTargetLevel = oNavigationControllerProxy.getTargetLevel(oTarget);
				
				switch (iTargetLevel){
					case 1:
						return !oUiState.columnsVisibility.midColumn;
					case 2:
						return !oUiState.columnsVisibility.endColumn;
					default:
						return true;
				}
			}
			
			function fnCloseRightColumns(iViewLevel) {
				sCurrentLayout = oFlexibleColumnLayoutSemanticHelper.getNextUIState(iViewLevel).layout;
				oFlexibleColumnLayout.setLayout(sCurrentLayout);
			}
			
			function setTitleForActiveComponent(oTitleProvider, fnSetTitleForComponent){
				fnSetTitleForComponent(oUiState.isLogicallyFullScreen && oTitleProvider);
			}
			
			function fnDisplayMessagePage(mParameters){
				iMessagePageColumn = tVL(mParameters.viewLevel);
				fnCloseRightColumns(mParameters.viewLevel);
				var oTargets = oNavigationControllerProxy.oRouter.getTargets();
				var sTarget = getTargetForMessagePage(mParameters.viewLevel);
				oTargets.display(sTarget);
				var aStaysVisible;
				if (mParameters.viewLevel === iMessagePageColumn){
					aStaysVisible = [];
					for (var i = 0; i < mParameters.viewLevel; i++){
						aStaysVisible.push(true);
					}
				}
				return aStaysVisible;
			}
			
			// Is the view on level iViewLevel displayed and is it not the MessagePage
			function isLevelActive(iViewLevel){
				if (iViewLevel < iMessagePageColumn || iMessagePageColumn < 0){
					return oUiState.columnsVisibility[getColumnForViewLevel(iViewLevel) + "Column"];
				}
				return false;
			}
			
			function fnAdaptBreadCrumbUrl(sHash, iViewLevel){
				if (!isInsideFCL(iViewLevel)){
					return sHash;
				}
				var sLayout = oFlexibleColumnLayoutSemanticHelper.getNextUIState(iViewLevel).layout;
				if (isLayoutDefault(sLayout)){
					return sHash;
				}
				return sHash + "?FCLLayout=" + sLayout;
			}
			
			oFlexibleColumnLayout.attachStateChange(fnAdaptLayout.bind(null, false));
			
			return {
				adaptRoutingInfo: fnAdaptRoutingInfo,
				createMessagePageTargets: createMessagePageTargets,
				displayMessagePage: fnDisplayMessagePage,
				isLevelActive: isLevelActive,
				handleBeforeRouteMatched: fnHandleBeforeRouteMatched,
				handleRouteMatched: fnHandleRouteMatched,
				getAppStateParStringForNavigation: getAppStateParStringForNavigation,
				getActionButtonHandlers: getActionButtonHandlers,
				navigateToDraft: fnNavigateToDraft,
				getTargetAfterCancelPromise: getTargetAfterCancelPromise,
				adaptAfterDeletion: adaptAfterDeletion,
				isNewHistoryEntryRequired: isNewHistoryEntryRequired,
				setTitleForActiveComponent: setTitleForActiveComponent,
				adaptBreadCrumbUrl: fnAdaptBreadCrumbUrl
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler", {
			constructor: function(oFlexibleColumnLayout, oNavigationControllerProxy) {
				jQuery.extend(this, getMethods(oFlexibleColumnLayout, oNavigationControllerProxy));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageUtils') ) {
/* Class containing static methods for message handling. */
jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.MessageUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageUtils",["sap/ui/generic/app/util/ModelUtil", "sap/ui/generic/app/util/MessageUtil", "sap/m/MessageBox"
	],
	function(ModelUtil, GenericMessageUtil, MessageBox) {
		"use strict";

		/**
		 * Logger for this class.
		 *
		 * @type {jQuery.sap.log.Logger}
		 * @static
		 * @private
		 * @ignore
		 */
		var oLogger = new jQuery.sap.log.getLogger("sap.suite.ui.generic.template.lib.MessageUtils");

		/**
		 * Handles errors for all of Smart Templates.
		 *
		 * @param {string} sOperation - String defined by the object sap.ui.generic.app.util.MessageUtil.operations.
		 * @param {sap.ui.core.mvc.Controller} oController - Controller instance of the calling function.
		 * @param {object} oServices - Object containing instances of the calling template's services.
		 * @param {object} oError - Error object fired by a variety of classes.
		 * @param {map} mParameters - Additional parameters that can be of use while handling an error.
		 * @private
		 * @ignore
		 */
		function fnHandleError(sOperation, oController, oServices, oError, mParameters) {
			mParameters = mParameters || {};

			var oErrorResponse = GenericMessageUtil.parseErrorResponse(oError);
			var sMessageText = oErrorResponse.messageText;
			var sMessageDescription;
			var bNavigateToMessagePage = false;

			// This tells this function not to add the
			// transient message at the end. I do this because
			// in the only case where the message popover is shown,
			// the ODataModel has already added the message to the
			// MessageManager's set of messages, and doesn't need to be
			// repeated by calling the GenericMessageUtil.addTransientErrorMessage
			// method at the end of the function.
			var bShowMessagePopover = false;
			var oComponent = oController && oController.getOwnerComponent();
			var oResourceBundle = mParameters.resourceBundle || oComponent.getModel("i18n").getResourceBundle();
			var oNavigationController = mParameters.navigationController || oServices.oNavigationController;
			var oModel = mParameters.model || oComponent.getModel();

			oLogger.debug("handleError has been called with operation " + sOperation + " and HTTP response status code " + oErrorResponse.httpStatusCode);
			switch (oErrorResponse.httpStatusCode) {
				case "400":
					switch (sOperation) {
						case GenericMessageUtil.operations.modifyEntity:
							// if a draft patch failed with a 400 we rely on a meaningful message from the backend
							break;
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_ACTION");
							break;
						case GenericMessageUtil.operations.deleteEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_DELETE");
							break;
						case GenericMessageUtil.operations.editEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_EDIT");
							break;
						case GenericMessageUtil.operations.saveEntity:
						case GenericMessageUtil.operations.activateDraftEntity:
							if (oServices &&
									oServices.oTemplateCapabilities &&
									oServices.oTemplateCapabilities.oMessageButtonHelper &&
									oServices.oTemplateCapabilities.oMessageButtonHelper.showMessagePopover) {
								oServices.oTemplateCapabilities.oMessageButtonHelper.showMessagePopover();
								bShowMessagePopover = true;
							} else {
								oLogger.info("A MessageButtonHelper class instance could not be found as one of the services' template capabilities.");
							}
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST");
							break;
					}
					break;
				case "401":
					bNavigateToMessagePage = true;
					sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_AUTHENTICATED_FAILED");
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_AUTHENTICATED_FAILED_DESC");
					break;
				case "403":
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_ACTION");
							break;
						case GenericMessageUtil.operations.deleteEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_DELETE");
							break;
						case GenericMessageUtil.operations.editEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_EDIT");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED");
							sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_DESC");
							bNavigateToMessagePage = true;
							break;
					}
					break;
				case "404":
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_ACTION");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST");
							break;
					}
					break;
				case "409":
					// Conflict, we show the message returned from the backend in a dialog
					break;
				case "500":
				case "501":
				case "502":
				case "503":
				case "504":
				case "505":
					bNavigateToMessagePage = true;
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_FOR_ACTION");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE");
							break;
					}
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC");
					break;
				case undefined:	
					/*adapted to have a reasonable processing for the Apply-Button - 
					 * workaround to not leave the page in case of apply */
					bNavigateToMessagePage = false;
					bShowMessagePopover = true;
					break;									
				default:
					// Even though the HTTP protocol doesn't specify status codes outside
					// of what is handled in this switch statement, the Checkmarx code scan
					// picks up a missing default case as problematic. This default case
					// is added here for the sake of the Checkmarx scan.
					bNavigateToMessagePage = true;
					sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE");
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC");
					break;
			}

			if (bNavigateToMessagePage) {
				var iViewLevel;
				if (oComponent){
					var oTemplPrivModel = oComponent.getModel("_templPriv");
					iViewLevel = oTemplPrivModel.getProperty("/generic/viewLevel");
				}
				// TODO: we shall remove the transient messages as they might come up later
				oNavigationController.navigateToMessagePage({
					title: oResourceBundle.getText("ST_GENERIC_ERROR_TITLE"),
					text: sMessageText,
					description: sMessageDescription,
					icon: "sap-icon://message-error",
					viewLevel: iViewLevel
				});
			} else {
				// When bShowMessagePopover is true we open the message popover and expect that the service returned either
				// state or transient messages, in case it's false and there's no transient message returned from
				// the backend we add our generic message as transient message
				if (!oErrorResponse.containsTransientMessage && !bShowMessagePopover) {
					GenericMessageUtil.addTransientErrorMessage(sMessageText, sMessageDescription, oModel);
				}
			}
		}

		return {
			operations: GenericMessageUtil.operations,
			handleTransientMessages: GenericMessageUtil.handleTransientMessages,
			handleError: fnHandleError,
			removeTransientMessages: GenericMessageUtil.removeTransientMessages
		};
	});
}; // end of sap/suite/ui/generic/template/lib/MessageUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ProcessObserver') ) {
// This class provides the possibility to observe a process.
// More precisely it provides the possibility to find out whether a process is currently running.
// If this is the case one can register for a point in time when the process has stopped.
// When creating an instance of this class one of two possibilities must be used to define the lifecycle of the process to be observed:
// 1. Single process: A single process is defined by calling startProcess and stopProcess directly
//    For convenience it is also possible to register for events that inform about start resp. stop of this process.
// 2. Compound process: A compound process is built out of several processes. 
//    It is considered to be running when at least one of the contained processes is running.

jQuery.sap.declare('sap.suite.ui.generic.template.lib.ProcessObserver'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ProcessObserver",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		function getMethods(oSettings) {
			var oProcessFinishedPromise;	// If this is truthy, a process is running and oProcessFinishedPromise is a Promise that resolves when the process ends.
											// Moreover, the content of the variable remains unchanged until the process ends.
											// If the variable is faulty:
											// - For single processes the process is running
											// - For compound processes we actually do not know whether the process is running
			var fnProcessFinished; // truthy exactly if oProcessFinishedPromise is truthy. In this case it is the function that resolves that Promise. 
			
			function fnProcessStart(){ // called when it is detected that a process is running.
				if (oSettings.processName){
					jQuery.sap.log.info("Process " + oSettings.processName + " started");
				}
				// If oProcessFinishedPromise is already truthy, we do not have to do anything. Otherwise create oProcessFinishedPromise.  
				oProcessFinishedPromise = oProcessFinishedPromise || new Promise(function(fnResolve){
					fnProcessFinished = fnResolve;	
				});		
			}
			
			function fnProcessStop(){ // called when it is detected when a process is stopped
				if (oSettings.processName){
					jQuery.sap.log.info("Process " + oSettings.processName + " stopped");
				}
				// If oProcessFinishedPromise is already faulty, we do not have to do anything. Otherwise resolve oProcessFinishedPromise and make variable oProcessFinishedPromise faulty.
				if (oProcessFinishedPromise){
					fnProcessFinished(); // resolve oProcessFinishedPromise
					oProcessFinishedPromise = null; // set back variable oProcessFinishedPromise to faulty as the process is not running anymore
					fnProcessFinished = null;
				}
			}
			
			// Register event handlers for single processes
			if (oSettings.eventHandlers){
				oSettings.eventHandlers.attachProcessStart(fnProcessStart);
				oSettings.eventHandlers.attachProcessStop(fnProcessStop);
			}
			
			// This method is only called for compound processes.
			// It ensures that variable oProcessFinishedPromise is truthy exactly when the process is running.
			// Moreover, it ensures that we will not miss the end of the process if it is actually running.
			function fnHandleCompound(){
				// First we check whether any of the contained processes is currently running. Thereby, we stop as soon as we have found one.
				var oPromise = null;
				for (var i = 0; i < oSettings.processObservers.length && !oPromise; i++){
					var oProcessObserver = oSettings.processObservers[i];
					oPromise = oProcessObserver.getProcessFinished();
				}
				if (oPromise){ // At least one process contained in the compound process is running. oPromise will be resolved when this process is stopped.
					fnProcessStart(); // Ensure that oProcessFinishedPromise (and fnProcessFinished) are created if necessary 
					oPromise.then(fnHandleCompound); // Ensure that we will check again at next chance
				} else { // no process is currently running
					fnProcessStop(); // ensure that oProcessFinishedPromise is resolved and set the variable to faulty	
				}
			}
			
			// This is the method provided by this class.
			// It returns a faulty value, if the process is not currently running (resp. a resolved Promise if bAlwysReturnAPromise is true)
			// When the process is currently running it returns a Promise that is resolved as soon as the process is not running anymore.
			function getProcessFinished(bAlwysReturnAPromise){
				if (!oProcessFinishedPromise && oSettings.processObservers){ // this is the only case, in which we do not know whether oProcessFinishedPromise is already correct. 
					fnHandleCompound(); // So we end this uncertainty	
				}
				return oProcessFinishedPromise || (bAlwysReturnAPromise && Promise.resolve());
			}
			
			function addObserver(oObserver){
				oSettings.processObservers.push(oObserver);	
			}
			
			return {
				startProcess: fnProcessStart, // must not be used for compound processes
				stopProcess: fnProcessStop, // must not be used for compound processes
				getProcessFinished: getProcessFinished,
				addObserver: addObserver // must only be called for compound processes
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.ProcessObserver", {
			// Creates an instance of this class.
			// For single processes oSettings must be faulty or an object not not containing a property processObservers.
			// For convenience oSettings might contain a property eventHandlers. In this case this subobject must contain two functions 
			// namely attachProcessStart and attachProcessStop which are used to attach to the start and the stop of the process.
			// For compound processes oSettings must contain a property processObservers which must be an array of ProcessObservers representing
			// the processes contained in the compound process.
			constructor: function(oSettings) {
				jQuery.extend(this, getMethods(oSettings || {}));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/ProcessObserver.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateComponent') ) {
jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained

(function() {
	"use strict";
	// monkey patch the sap.ui.core.CustomizingConfiguration
	// as UI5 doesn't support viewExtensions for nested components we replace the
	// component in vObject
	// with the parent component. The getAppComponent function comes from the
	// component property appComponent
	// in sap.ui.generic.template.TemplateComponent.js
	var fOriginal = sap.ui.core.CustomizingConfiguration.getViewExtension;
	sap.ui.core.CustomizingConfiguration.getViewExtension = function(sViewName, sExtensionPointName, vObject) {
		// check whether a context is given and determine a componentId from it
		// - either it is a string, then this is the pre-processor use case and the
		// string is a component id
		// - or it is a view or fragment and the Id of the owner component should be
		// used
		var sComponentId = vObject && typeof vObject === "string" ? vObject : (vObject && sap.ui.core.Component
				.getOwnerIdFor(vObject));
		// retrieve the component (if an Id is known)
		var oComponent = sComponentId && sap.ui.component(sComponentId);
		// only when it inherits from TemplateComponent, ask for the AppComponent
		// instead
		if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
			vObject = oComponent.getAppComponent().getId();
		}
		var oResultConfig = fOriginal(sViewName, sExtensionPointName, vObject);
		return oResultConfig;
	};

	// monkey patch for controller extension
	var fOriginal2 = sap.ui.core.CustomizingConfiguration.getControllerExtension;

	sap.ui.core.CustomizingConfiguration.getControllerExtension = function(sControllerName, sComponentID) {

		var oComponent = null;
		if (sComponentID) {
			oComponent = sap.ui.component(sComponentID);

			if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
				oComponent = oComponent.getAppComponent();
				if (oComponent) {
					sComponentID = oComponent.getId();
				}
			}
		}
		var oResultConfig = fOriginal2(sControllerName, sComponentID);
		return oResultConfig;
	};

	jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateComponent",["jquery.sap.global", "sap/ui/core/mvc/ViewType", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel", "sap/ui/Device"],
		function(jQuery, ViewType, UIComponent, JSONModel, ResourceModel, Device) {

		// This method enhances the i18n model which has been attached to the template component via the manifest.
		// For this purpose the following enhancement chain is built:
		// Generic Template texts <- Template specific texts <- Application specific texts
		// Note that the i18n model is actually replaced since the generic template texts are used as basis for this enhacement chain.
		function fnEnhanceI18nModel(oComponent) {
			var oI18NModel = new ResourceModel({ bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n" });
			var oTemplateModel = oComponent.getModel("i18n");
			if (oTemplateModel){
				oI18NModel.enhance(oTemplateModel.getResourceBundle())	;
			}
			var oModelApplication = oComponent.getAppComponent().getModel("i18n|" + oComponent.getMetadata().getComponentName() + "|" + oComponent.getEntitySet());
			if (oModelApplication) {
				oI18NModel.enhance(oModelApplication.getResourceBundle());
			}
			oComponent.setModel(oI18NModel, "i18n");
		}

		function fnEnhanceTemplPrivForBreakoutActions(oComponent, oModel) {
			var oManifest = oComponent.getAppComponent().getManifestEntry("sap.ui5");
			var oExtensions = oManifest.extends && oManifest.extends.extensions && oManifest.extends.extensions["sap.ui.controllerExtensions"];
			var sTemplateName = oComponent.getTemplateName();
			var oTemplateExtensions = oExtensions && oExtensions[sTemplateName] && oExtensions[sTemplateName]["sap.ui.generic.app"];
			var oMetaModel = oModel.getMetaModel();
			var sEntitySet = oMetaModel.getODataEntitySet(oComponent.getEntitySet()).name;
			var oBreakoutActions = oTemplateExtensions && oTemplateExtensions[sEntitySet] && oTemplateExtensions[sEntitySet].Actions;
			var oBreakOutActionEnabled = {};
			if (oBreakoutActions) {
				fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions);
			} else {
				var oSections = oTemplateExtensions && oTemplateExtensions[oMetaModel.getODataEntitySet(oComponent.getEntitySet()).name];
					for (var sSection in oSections) {
						oBreakoutActions = oSections[sSection]["Actions"];
						if (oBreakoutActions) {
							fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions);
						}
					}
			}
			oComponent.getModel("_templPriv").setProperty("/generic/listCommons/breakoutActionsEnabled", oBreakOutActionEnabled);
		}
		
		function fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions) {
			var bEnabled;
			for (var sAction in oBreakoutActions) {
				bEnabled = true;
				if (oBreakoutActions[sAction].requiresSelection) {
					bEnabled = false;
				}
				oBreakOutActionEnabled[oBreakoutActions[sAction].id] = {
						enabled: bEnabled
				};
			}
		}

		function fnDetermineStableID(oComponent) {
			if (oComponent.getAppComponent().getMetadata().getComponentName() === "" || oComponent.getTemplateName() === "" || oComponent.getEntitySet() === "") {
				// TODO: Error Handling
			}
			return oComponent.getAppComponent().getMetadata().getComponentName() + "::" + oComponent.getTemplateName() + "::" + oComponent.getEntitySet();
		}

		function createParameterModel(sEntityType, oComponent, oMetaModel, fnTemplateSpecificParameters) {
			var isDraftEnabled = oComponent.getAppComponent().getTransactionController().getDraftController().getDraftContext().isDraftEnabled(oComponent.getEntitySet());
			var oSettings = null;
			var oAllSettings = oComponent.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				entityType: sEntityType,
				"sap-ui-debug": window["sap-ui-debug"],
				isDraftEnabled: isDraftEnabled,
				settings: oSettings,
				manifest: oComponent.getAppComponent().getInternalManifest(),
				//Needed for annotation helper that resolve annotation paths or qualifier from the manifest 
				metaModel: oMetaModel,
				templateSpecific: fnTemplateSpecificParameters && fnTemplateSpecificParameters()
			});
		}

		/*
		 * Creates the XMLView based on some models.
		 * @param {object} oComponent current instance of the template component
		 * @param {string} sCacheKey represents application part of the cache key
		 *
		 * @return {sap.ui.core.mvc.View} A asnyc <code>View</code> object is returned that can be
		 * chained with the <code>Promise</code> returned by the view's loaded() function
		 *
		 * @private
		 */
		function createXMLView( oComponentRegistryEntry, aCacheKeys) {
			var oComponent = oComponentRegistryEntry.oComponent, 
				fnCreateViewController = oComponentRegistryEntry.createViewController, 
				fnTemplateSpecificParameters = oComponentRegistryEntry.methods && oComponentRegistryEntry.methods.getTemplateSpecificParameters;
			var oView = null;
			var oModel = oComponent.getModel();
			var oMetaModel = oComponent.getModel().getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oComponent.getEntitySet());
			if (!oEntitySet || !oEntitySet.entityType) {
				// TODO: Error Handling?
				return null;
			}

			fnEnhanceI18nModel(oComponent);
			fnEnhanceTemplPrivForBreakoutActions(oComponent, oModel);
			
			// TODO: how to get the helpers from a template definition
			jQuery.sap.require("sap.ui.model.odata.AnnotationHelper");

			var sStableId = fnDetermineStableID(oComponent);

			oView = sap.ui.getCore().byId(sStableId);
			if (oView){
				jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
				try {
					oView.destroy();
				} catch (ex) {
					jQuery.sap.log.warning("Error destroying view: " + ex);
				}
				oView = null;
			}

			// device model
			var oDeviceModel = new JSONModel(Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			oComponent.runAsOwner(function() {
				var oPreprocessorsData = oComponentRegistryEntry.preprocessorsData;
				var oViewSettings = {
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
								entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oComponent.getEntitySet(), true))
							},
							models: {
								device: oDeviceModel,
								meta: oMetaModel,
								entitySet: oMetaModel,
								parameter: createParameterModel(oEntitySet.entityType, oComponent, oMetaModel, fnTemplateSpecificParameters)
							},
							preprocessorsData :oPreprocessorsData
						}
					},
					id: sStableId,
					type: ViewType.XML,
					viewName: oComponent.getTemplateName(),
					height: "100%",
					cache: { 
						keys: aCacheKeys,
						additionalData: [oPreprocessorsData]
					}					
				};
				if (fnCreateViewController){
					var ControllerClass = fnCreateViewController();
					oViewSettings.controller = new ControllerClass();	
				}
				oView = sap.ui.view(oViewSettings);
			});
			return oView;
		}

		return UIComponent.extend("sap.suite.ui.generic.template.lib.TemplateComponent", {

			metadata: {
				properties: {
					/**
					 * Name of template
					 */
					templateName: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Entity Set
					 */
					entitySet: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Navigation property of the current component
					 */
					navigationProperty: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Instance of AppComponent
					 */
					appComponent: {
						type: "object",
						defaultValue: null
					},
					/**
					 * Refresh required when the component is activated
					 */
					isRefreshRequired: {
						type: "boolean",
						defaultValue: false
					},
					isLeaf: {
						type: "boolean"
					}
				},
				library: "sap.suite.ui.generic.template"
			},

			init: function() {

				(UIComponent.prototype.init || jQuery.noop).apply(this, arguments);

				var oUIModel = new JSONModel({
					editable: false,
					enabled: false
				});
				this.setModel(oUIModel, "ui");

				var oParsingSerive = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");

				var oTemplatePrivate = new JSONModel({
					generic: {
						crossAppNavSupport: !!oParsingSerive && oParsingSerive.isIntentUrl(document.URL),
						draftIndicatorState: sap.m.DraftIndicatorState.Clear,
						listCommons : {
							functionEnabled: {}
						},
						viewLevel: this.getComponentData().registryEntry.viewLevel,
						controlProperties: {},
						supportedIntents: {}
					}
				});
				oTemplatePrivate.setDefaultBindingMode("TwoWay");
				this.setModel(oTemplatePrivate, "_templPriv");

			},

			// TODO: clarify with Marcel: this.oContainer
			getComponentContainer: function() {
				// TODO: align with UI5 - how to access component container
				return this.oContainer;
			},

			// oComponentRegistryEntry will be provided by TemplateAssembler
			onBeforeRendering: function(oComponentRegistryEntry) {
				// if Component is assembled without TemplateAssembler it could be that oComponentRegistryEntry is undefined
				// e.g. an application has an own implementation of Component
				if (oComponentRegistryEntry){
					var oContainer = oComponentRegistryEntry.oComponent.getComponentContainer();
					var oModel = !oComponentRegistryEntry.createViewStarted && oContainer && oContainer.getModel();
					if (oModel) {
						oModel.getMetaModel().loaded().then(function() { // Do the templating once the metamodel is loaded
							if (!oComponentRegistryEntry.createViewStarted) {
								var aCacheKeys = [];
								var pGetMetadataLastModified = oModel.metadataLoaded().then(function(mParams) {
									var sCacheKey;
									if (mParams && mParams.lastModified) {
										sCacheKey = new Date(mParams.lastModified).getTime() + "";
									} else {
										jQuery.sap.log.error("TemplateComponent: no valid cache key segment last modification date provided by the OData Model");
										sCacheKey = new Date().getTime() + ""; //to keep the application working the current timestamp is used
									}
									return sCacheKey;
								});
								aCacheKeys.push(pGetMetadataLastModified);
								var pGetAnnotationsLastModified = oModel.annotationsLoaded().then(function(mParams) {
									var iCacheKey = 0;
									if (mParams) {
										for (var i = 0; i < mParams.length; i++) {
											if (mParams[i].lastModified) {
												var iLastModified = new Date(mParams[i].lastModified).getTime();
												if (iLastModified > iCacheKey) {
													iCacheKey = iLastModified;
												}
											}
										}
									}
									if (iCacheKey === 0) {
										jQuery.sap.log.error("TemplateComponent: no valid cache key segment last modification date provided by OData annotations");
										iCacheKey = new Date().getTime(); //to keep the application working the current timestamp is used
									}

									return iCacheKey + "";
								});
								aCacheKeys.push(pGetAnnotationsLastModified);								
								oComponentRegistryEntry.createViewStarted = true;
								createXMLView(oComponentRegistryEntry, aCacheKeys).loaded().then(function(oView) {
									oComponentRegistryEntry.oComponent.setAggregation("rootControl", oView);
									oContainer.invalidate();
								});
							}
						});
					}
				}
			},

			setContainer: function() {
				UIComponent.prototype.setContainer.apply(this, arguments);
			},

			// Overwrite method of UIComponent
			getRouter: function() {
				if (this.getAppComponent()) {
					return this.getAppComponent().getRouter();
				}
				return UIComponent.prototype.getRouter.apply(this, arguments);
			}

		});
	});

})();
}; // end of sap/suite/ui/generic/template/lib/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateViewController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateViewController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateViewController",["sap/ui/core/mvc/Controller"], function(mvcController) {
	"use strict";

	return mvcController.extend("sap.suite.ui.generic.template.lib.TemplateViewController", {

		metadata: {
			library: "sap.suite.ui.generic.template"
		}
	});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/lib/TemplateViewController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.testableHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/lib/testableHelper",[], function() {
	"use strict";

/*
 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
 * and methods which have to be called in the test code.
 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
 * other classes.
 * Moreover, it is best practice to write unit tests for public methods.
 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
 * accessible to unit tests.
 * Actually, making a private method accessible to unit tests has two aspects:
 * - Call this method directly in a unit test in order to test it
 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly 
 *   (and prevent the private method from being executed in the context of this test)
 * 
 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
 * 
 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
 *
 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
 * Check method observableConstructor in order to find out, how this can be achieved.
 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];
	
	function createLogAccessFunction(oConstructor){
		return function(oInstance){
			if (iTestMode >= 0){
				return null;
			}						
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++){
				var oLog = aLog[i];
				if (oLog.me === oInstance){
					return oLog.args;
				}
			}
		};		
	}
	
	function removeConstructorObservation(oConstructor){
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log){
			if (oConstructor.isStatic){
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++){
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0){
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0){
					oConstructor.log = aNewLog;	
				} else {
					delete oConstructor.log;	
				}
			} else {
				delete oConstructor.log;	
			}	
		}		
	}
	
	function removeConstructorObservations(){
		aConstructors.forEach(removeConstructorObservation);
	}
	
	function fnObservableConstructor(fnConstructor, bStatic){
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++){
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor){
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function(){
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)){
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace){
					oConstructor.observer(oRet, arguments);	
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
	    // Call this method at the beginning of the setup of your unit test.
	    // This method returns a stub object. This stub possesses all functions prepared via testable as methods.
	    // Thereby, the name of the method is derived from the parameter sName of testable.
	    // Thus, when testing the private method just test the corresponding method of the stub.
	    // When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function() {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = { };
			return oPossessor;
		},

        // Call this method at the end of the teardown of your unit test.
		endTest: function() {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

        // This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
        // startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function() {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = { id: iCount };
			mStartedApps[iCount] = oRet;
			return oRet;
		},

        // End the effect of startApp
		endApp: function(oAppId) {
			if (iTestMode > 0) {
			    var id = oAppId.id;
			    if (oAppId === mStartedApps[id]){
				    iTestMode--;
				    delete mStartedApps[id];
			    }
			}
		},

        // Use this method to define a private instance method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function(fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = fnFunction;
				return function() {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},
		
		// Use this method to define a private static method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function(fnFunction, sName){
		    if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
		        return fnFunction;
		    }
		    oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function() {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},
		
		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function(){
			return iTestMode === -1 && oStaticFunctions;
		},
		
		
		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/lib/testableHelper"], 
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//	
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to syp or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function(fnConstructor, bStatic){
			if (iTestMode > 0){
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},
		
		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function(fnConstructor, fnObserver, bReplace){
			if (iTestMode >= 0){
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer){
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});
}; // end of sap/suite/ui/generic/template/lib/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
 
/**
* @namespace reserved for Smart Temaplates
* @name sap.suite.ui.generic.template
* @public
*/

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.suite.ui.generic.template.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/library",[
	'jquery.sap.global', 'sap/ui/core/library'
], function(jQuery, library1) {
	"use strict";

	/**
	 * Library with generic Suite UI templates.
	 * 
	 * @namespace
	 * @name sap.suite.ui.generic.template
	 * @public
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.suite.ui.generic.template",
		dependencies: [
			"sap.ui.core"
		],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.46.0"
	});

	return sap.suite.ui.generic.template;

}, /* bExport= */false);
}; // end of sap/suite/ui/generic/template/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Fragment'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController",[
    "jquery.sap.global",
    "sap/ui/core/Fragment",
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/ui/thirdparty/d3",
    "sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil"
], function(jQuery, Fragment, Controller, JSONModel, D3, KpiUtil) {
    "use strict";
    jQuery.sap.require("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter");

    var cController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController", {

        onInit: function(evt) {
            this.busyDelegate = {
                onBeforeRendering: function() {
                    this.setBusy(true);
                }
            };

            this.freeDelegate = {
                onAfterRendering: function() {
                    this.setBusy(false);
                }
            };
        },

        onExit: function() {

        },

        /**
        * @private
        * [updateTitle  this function calculates updates the KPI Header]
        * @param  {string} sTitle [Title obtained from Annotation]
        * @param  {integer} iScaleFactor [ScaleFactor obtained from Annotation]
        * @param  {string} sUnitOfMeasure [Unit Of Measure]
        * @param  {string} sId [Id Of Label]
        */
        _updateTitle: function(sTitle, iScaleFactor, sUnitOfMeasure, sId) {
            var oLabel = this.byId(sId);
            oLabel.setBusy(true);
            var oFixedInteger = KpiUtil.getNumberFormatter(true, iScaleFactor, 2);//Third parameter has no impact in this case
            var sFormat = oFixedInteger.oLocaleData.getDecimalFormat("short", iScaleFactor, "other");
            var sScaleValue = "";
            if (sFormat) {
                for (var i = 0; i < sFormat.length; i++) {
                    if (sFormat[i] != "0") {
                        sScaleValue += sFormat[i];
                    }
                }
            }
            if (sUnitOfMeasure === undefined || sUnitOfMeasure === "%") {
                sUnitOfMeasure = "";
            }
            var i18nModel = this.getView().getModel("i18n");
            if (!i18nModel) {
                return "";
            }
            var rb = i18nModel.getResourceBundle();
            /*
            if (sScaleValue && sUnitOfMeasure) {
                oLabel.setText(rb.getText("KPI_CARD_TITLE_SF_UNIT", [sTitle, sScaleValue, sUnitOfMeasure]));
            } else if (sUnitOfMeasure) {
                oLabel.setText(rb.getText("KPI_CARD_TITLE_UNIT", [sTitle, sUnitOfMeasure]));
            } else*/ 
            if (sScaleValue) {
                oLabel.setText(rb.getText("KPI_CARD_TITLE_SF", [sTitle, sScaleValue]));
            } else {
                oLabel.setText(rb.getText("KPI_CARD_TITLE", [sTitle]));
            }
            //oLabel.setText(rb.getText("KPI_CARD_TITLE", [sTitle]));
            oLabel.setBusy(false);
        },

        onBeforeRendering: function() {

            // todo: validate card definitions
            var vizFrame = this._getVizFrameContainer();

            //sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
            if (!vizFrame) {
                jQuery.sap.log.error("no kpi card VIZ container" +
                    ": (" + this.getView().getId() + ")");
            } else {
                vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
                var oSettings = this.getView().data("qualifierSettings");
                //var oModel = this.getView().data("model");
                //var oDataPoint = this.getView().data("dataPoint");
                var oDataPointMeasure = this.getView().data("dataPointMeasure");
                var oChart = this.getView().data("chart");
                var oEntityTypeProperty = this.getView().data("entityTypeProperty");
                //var sTitle = KpiUtil.getPathOrPrimitiveValue(oModel, oDataPoint.Title);
                //var iScaleFactor = KpiUtil.getPathOrPrimitiveValue(oModel, oDataPoint.ValueFormat.ScaleFactor);
                var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model, oEntityTypeProperty);
                var iScaleFactorMeasure = "";
                var sTitleMeasure = KpiUtil.getPathOrPrimitiveValue(oChart.Title);
                if (oDataPointMeasure && oDataPointMeasure.ValueFormat && oDataPointMeasure.ValueFormat.ScaleFactor) {
                    iScaleFactorMeasure = KpiUtil.getPathOrPrimitiveValue(oDataPointMeasure.ValueFormat.ScaleFactor);
                }

                //this._updateTitle(sTitle, iScaleFactor, sUnitOfMeasure, "kpiHeaderTitle");
                this._updateTitle(sTitleMeasure, iScaleFactorMeasure, sUnitOfMeasure, "kpiChartHeaderTitle");

                //Register formatter
                sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.formatChartAxes(iScaleFactorMeasure);

                sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.setupChartAttributes(vizFrame,oSettings);
                var binding = vizFrame.getDataset().getBinding("data");
                if (binding.getPath()) {
                    binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
                } else {
                    // todo: fail safe ..
                }
            }
        },

        onAfterRendering: function() {

        },

        onDataReceived: function(oEvent) {
            var vizFrame = this._getVizFrameContainer();
            vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
        },

        _getVizFrameContainer: function() {
            var me = this;
            if (!me._oChart) {
                me._oChart = me.getView().byId("kpiCardChartVizFrame");
            }
            return me._oChart;
        },

        setActual: function(iActual) {
            var me = this;
            me.getView().byId("kpiCardActual").setValue(iActual);
        },

        handleNavigationPress: function(oEvent) {
            var oEventSource = oEvent.getSource();

            var navService = sap.ushell.Container.getService("CrossApplicationNavigation");

            navService.toExternal({
                target : { semanticObject : oEventSource.data("target"), action : oEvent.getSource().data("action")},
                params : JSON.parse(oEventSource.data("parameters"))
            });
        }
    });


    return cController;

});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController",["sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController",
        "sap/ui/model/json/JSONModel",
        "sap/ui/model/json/JSONModel",
        "sap/ui/core/mvc/ViewType",
        "sap/m/Popover"
    ],
    function(KpiCardController, JSONModel, Filter, ViewType, Popover) {
        "use strict";

        return {
            _kpiCards: [],
            init: function(oState) {
                var me = this;
                me.oState = oState;
                // create JSON model instance
                me.oGenericModel = new JSONModel();

                // JSON sample data

                var mGenericData = {
                    header: "Some Header",
                    title: "Some Title",
                    titleUrl: "",
                    icon: "sap-icon://camera"
                };

                // set the data for the model
                me.oGenericModel.setData(mGenericData);

            },

            openKpiCard: function(oEvent) {
                var me = this;
                var oSource;
                if (typeof oEvent.currentTarget != "undefined") {
                    oSource = sap.ui.getCore().byId(oEvent.currentTarget.id);
                } else {
                    oSource = oEvent.getSource();
                }

                me.createPopover(function() {
                    var me = this;
                    me._openCard(oSource);
                }.bind(me, oSource), oSource);

            },

            _openCard: function(oSource) {
                var me = this;

                // delay because addDependent will do a async rerendering and the actionSheet will immediately close without it.

                jQuery.sap.delayedCall(0, this, function() {
                    me._kpiCards[oSource.getQualifier()].openBy(oSource);
                });

            },

            handleKpiPress: function(oEvent) {
                this.openKpiCard(oEvent);
            },

            createPopover: function(fnOpenOnSucces, oSource) {
                var me = this;
                var sQualifier = oSource.getQualifier();

                var oComponent = me.oState.oController.getOwnerComponent();
                var oSettings = oComponent.getComponentContainer().getSettings();
                var oQualifierSettings = oSettings.keyPerformanceIndicators[sQualifier];
                var outboundTarget = oSettings.appComponent.getManifestEntry("/sap.app/crossNavigation/outbounds/" + oQualifierSettings.detailNavigation);
                var oModel = oComponent.getModel(oQualifierSettings.model);

                oModel.getMetaModel().loaded().then(function() {
                    var me = this;
                    me._oCardController = new KpiCardController();
                    var oComponent = me.oState.oController.getOwnerComponent();

                    var oParamModel = new JSONModel();
                    var oQualifierSettings = arguments[0];

                    var oModel = oComponent.getModel(oQualifierSettings.model);
                    var oMetaModel = oModel.getMetaModel();
                    var oEntitySet = oMetaModel.getODataEntitySet(oQualifierSettings.entitySet);
                    var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
                    var oDataPoint = oEntityType["com.sap.vocabularies.UI.v1.DataPoint#" + sQualifier];
                    var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);

                    var oDataPointMeasure;
                    var oChart = oEntityType["com.sap.vocabularies.UI.v1.Chart#" + sQualifier];
                    if (oChart.MeasureAttributes[0] && oChart.MeasureAttributes[0].DataPoint) {
                        oDataPointMeasure = oEntityType[(oChart.MeasureAttributes[0].DataPoint.AnnotationPath).toString().substring(1)];
                    }

                    oQualifierSettings.metaModel = oMetaModel;
                    oParamModel.setData(oQualifierSettings);

                    // create a new view with template processing
                    var oView = sap.ui.view({
                        async: false,
                        preprocessors: {
                            xml: {
                                bindingContexts: {
                                    entityType: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
                                    entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oQualifierSettings.entitySet, true))
                                },
                                models: {
                                    entitySet: oMetaModel,
                                    entityType: oMetaModel,
                                    parameter: oParamModel

                                },
                                dataModel: oModel,
                                settings: oParamModel,
                                preprocessorsData: oComponent.getComponentData().preprocessorsData
                            }
                        },

                        type: ViewType.XML,
                        viewName: "sap.suite.ui.generic.template.AnalyticalListPage.view.KpiCardSizeM",
                        height: "100%"
                    });


                    oView.data({
                        "qualifierSettings": oQualifierSettings,
                        //"model": oModel,
                        "dataPoint": oDataPoint,
                        "dataPointMeasure": oDataPointMeasure,
                        "chart": oChart,
                        "entityTypeProperty": oEntityTypeProperty
                    });

                    oView.setModel(oComponent.getModel(oQualifierSettings.model));

                    //Set model for detail action
                    var actionModel = new sap.ui.model.json.JSONModel();
                    var actionData = {"visible": oQualifierSettings.detailNavigation ? true : false};
                    if (oQualifierSettings.detailNavigation && outboundTarget) {
                        actionData.target = outboundTarget.semanticObject;
                        actionData.action = outboundTarget.action;
                        actionData.parameters = JSON.stringify(outboundTarget.parameters ? outboundTarget.parameters : {});
                    } else {
                        //Have to hide the button, no where to navigate
                        actionData.visible = false;
                    }
                    actionModel.setData(actionData);
                    oView.setModel(actionModel, "detailNavigation");

                    if (typeof me._kpiCards[sQualifier] != "undefined") {
                        me._kpiCards[sQualifier].destroy();
                    }
                    me._kpiCards[sQualifier] = new Popover();
                    me._kpiCards[sQualifier].setShowHeader(false);
                    me._kpiCards[sQualifier].addContent(oView);
                    me._oKpiCardController = oView.getController();
                    me.oState.oController.getView().addDependent(me._kpiCards[sQualifier]);

                    fnOpenOnSucces();

                }.bind(this, oQualifierSettings));


            },

            onExit: function() {
                if (this._oKpiCard) {
                    this._oKpiCard.destroy();
                }
            },

            _setModel: function(oModel) {
                this._oKpiCard.setModel(oModel);
            }
        };
    });

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI",["jquery.sap.global", "sap/ui/base/Object",
		"sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/NonDraftTransactionController",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"],
		function(jQuery, BaseObject, NonDraftTransactionController, NavigationController) {
	"use strict";
	/**
	 * API to be used in extensions of AnalyticalListPage. Breakout coding can access an instance of this class via
	 * <code>this.extensionAPI</code>. Do not instantiate yourself.
	 * @class
	 * @name sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var oTransactionController;
		var oNavigationController;
		return /** @lends sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI.prototype */ {
			/**
			 * Get the list entries currently selected
			 * @param {string} sUiElementId the id identifying the ui element the selected context is requested for
			 * @return {sap.ui.model.Context[]} contains the entries selected
			 * @public
			 */
			getSelectedContexts: function(sUiElementId) {
				// Incase no ElementId is passed from the function call, we default oControl to smartTable and fetch the context of smartTable
				var oControl = oState.oSmartTable;
				if (sUiElementId) {
					oControl = oController.byId(sUiElementId);
				}
				return oTemplateUtils.oCommonUtils.getSelectedContexts(oControl);
			},
			/**
			 * Get the transaction controller for editing actions on the list Note: Currently implemented for non draft case
			 *
			 * @return {sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.NonDraftTransactionController} the transaction controller
			 * @public
			 */
			getTransactionController: function() {
				if (oTemplateUtils.oCommonUtils.isDraftEnabled()) {
					throw new Error("Transaction support on AnalyticalListPage for draft case not implemented yet");
				}
				oTransactionController = oTransactionController ||
					new NonDraftTransactionController(oTemplateUtils, oController, oState);
				return oTransactionController;
			},
			/**
			 * Refreshes the List from the backend
			 *
			 * @public
			 */
			refreshTable: function() {
				oState.oSmartTable.rebindTable();
			},
			/**
			 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
			 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares for
			 * defining dependency and handling device specific style classes
			 *
			 * @param {sap.ui.core.Control} oControl the control to be attached to the view
			 * @public
			 */
			attachToView: function(oControl){
				oTemplateUtils.oCommonUtils.attachControlToView(oControl);
			},
			/**
			 * Invokes multiple time the action with the given name and submits changes to the back-end.
			 *
			 * @param {string} sFunctionName The name of the function or action
			 * @param {array|sap.ui.model.Context} vContext The given binding contexts
			 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
			 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
			 * @public
			 */
			invokeActions: function(sFunctionName, vContext, mUrlParameters){
				var aContext, mParameters;
				if (!vContext) {
					aContext = [];
				} else if (vContext instanceof sap.ui.model.Context) {
					aContext = [ vContext ];
				} else {
					aContext = vContext;
				}
				if (mUrlParameters) {
					mParameters = {
						urlParameters: mUrlParameters
					};
				}
				return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
			},
			/**
			 * Get the navigation controller for navigation actions
			 *
			 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
			 * @public
			 */
			getNavigationController: function() {
				if (!oNavigationController) {
					oNavigationController = new NavigationController(oTemplateUtils, oController, oState);
				}
				return oNavigationController;
			},
			/**
			 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
			 * are fulfilled
			 *
			 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion
			 * of the execution. If nothing is returned, immediate completion is assumed.
			 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
			 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to
			 * false in case of immediate completion
			 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only
			 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of
			 * another function, that set the application busy
			 * @param {boolean} [mParamters.dataloss.popup=true] Provides a dataloss popup before execution of the function if
			 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
			 * @param {boolean} [mParamters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation,
			 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup
			 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
			 * @public
			 * @experimental
			 */
			securedExecution: function(fnFunction, mParameters) {
				return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper') ) {
(function() {
	"use strict";
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained

	
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained

	sap.ui.require("sap/suite/ui/generic/template/extensionAPI/UIMode");
	jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper");
	sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper = {
		getDetailEntitySet: function(oContext) {
			var o = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(o, true));
		},
		// resolvePresentationVariant: function(oContext) {
		// 	var oParameter = oContext.getObject();
		// 	var oModel = oContext.getModel();
		// 	var oMetaModel = oModel.getProperty("/metaModel");
		// 	var oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet);
		// 	var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		// 	var sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant"
		// 		+ (oParameter.settings && oParameter.settings.presentationVariantQualifier ? "#" + oParameter.settings.presentationVariantQualifier : "");
		// 	return oMetaModel.createBindingContext(sAnnotationPath);
		// },
		resolveMetaModelPath: function(oContext) {
			var sPath = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(sPath);
		},
		/* The context definition for the ALP:
			1. If there is a SelectionPresentationVariant (SVP) qualifier in the app. descriptor (paramter model)
				yes) Select that SVP
				no) Check if there is an SVP without a qualifier and choose it if exists
			2. Was a SVP found in 1.
				yes) Choose the PresentationVariant (PV) specified in the SVP
				no) Check if there is a PV qualifier in the parameter model
					yes) Choose the PV
					no) Check if there is a default PV and choose if it exists
			3. Was a PV found in 2.
				yes) Follow the Visualizations to LineItem and Chart or use default if not found
				no) use LineItem and Chart default annotations
		*/
		createWorkingContext: function(oContext) {
			var oParameter = oContext.getObject(),
				oSettings = oParameter.settings,
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Find SelectionPresentationVariant */
			sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.SelectionPresentationVariant" + (oSettings && oSettings.qualifier ? "#" + oSettings.qualifier : "");
			oWorkingContext.selectionPresentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.selectionPresentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			oWorkingContext.selectionPresentationVariantPath = sAnnotationPath;
			/* Find PresentationVariant */
			if (oWorkingContext.selectionPresentationVariant && oWorkingContext.selectionPresentationVariant.PresentationVariant) {
				sAnnotationPath =
					//Path is specified
					oWorkingContext.selectionPresentationVariant.PresentationVariant.Path ||
					//AnnotationPath is specified (for compatiblity reasons)
					oWorkingContext.selectionPresentationVariant.PresentationVariant.AnnotationPath ||
					//SVP points to PV type directly and NOT via annotation path
					oWorkingContext.selectionPresentationVariantPath + "/PresentationVariant";
			} else {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant" + (oSettings && oSettings.qualifier ? "#" + oSettings.qualifier : "");
			}
			if (typeof sAnnotationPath === "string") {
				/* Referene to PV via annotationPath */
				oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.presentationVariantPath = sAnnotationPath;
				oWorkingContext.presentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			}
			// If a qualifier was specified but no presentation variant exists for that qualifier or indirectly
			// through the SelectionPresentationVaraiant with qualifier it is a wrong qualifier
			if (oSettings.qualifier && !oWorkingContext.presentationVariant) {
				var e = new Error("Error in manifest.json: Not SelectionPresentationVariant or PresentationVariant found for qualifier: "
						+ oSettings.qualifier, "./manifest.json");
				throw e;
			}
			/* Determine LineItem and Chart via PV */
			if (oWorkingContext.presentationVariant && oWorkingContext.presentationVariant.Visualizations) {
				oWorkingContext.presentationVariant.Visualizations.forEach(function(visualization) {
					/* get rid of the @ and put a / in front */
					var sPath = "/" + visualization.AnnotationPath.slice(1);
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.chartPath = sAnnotationPath;
						oWorkingContext.chartQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}
			if (!oWorkingContext.chart) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.Chart";
				oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.chartPath = sAnnotationPath;
				oWorkingContext.chartQualifier = "";
			}

			oModel.setProperty("/workingContext", oWorkingContext);
			return "/workingContext";
		},
		/**
		 * [hasDeterminingActionsForALP To check if determiningActions are defined in manifest or annotations]
		 * @param  {[String]}  aTableTerm   [Records of table actions from annotations]
		 * @param  {[String]}  aChartTerm   [Records of chart actions from annotations]
		 * @param  {[String]}  sEntitySet   [Entity set Records]
		 * @param  {Object}  oManifestExt [Extensions from manifest]
		 * @return {Boolean}              [Returns status of determining actions to the xml]
		 */
		hasDeterminingActionsForALP: function(aTableTerm, aChartTerm, sEntitySet, oManifestExt) {
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"] &&
				sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper._hasCustomDeterminingActionsInALP(sEntitySet, oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"])) { //Check for AnalyticalListPage
				return true;
			}
			//To bring determining buttons of table from annotations
			for (var iRecord = 0; iRecord < aTableTerm.length; iRecord++) {
				if ((aTableTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aTableTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					aTableTerm[iRecord].Determining && aTableTerm[iRecord].Determining.Bool === "true") {
					return true;
				}
			}
			//To bring determining buttons of chart from annotations
			for (var iRecord = 0; iRecord < aChartTerm.length; iRecord++) {
				if ((aChartTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aChartTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					aChartTerm[iRecord].Determining && aChartTerm[iRecord].Determining.Bool === "true") {
					return true;
				}
			}
			return false;
		},
		/**
		 * [_hasCustomDeterminingActionsInALP To check if determiningActions are defined in manifest]
		 * @param  {[String]}  sEntitySet [Entity set Records]
		 * @param  {Object}  oManifestExt [Extensions from manifest]
		 * @return {Boolean}              [Returns status of determining actions to the xml]
		 */
		_hasCustomDeterminingActionsInALP: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Actions) {
					for (var action in oManifestExtEntitySet.Actions) {
						if (oManifestExtEntitySet.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		}
	};

	sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper.getDetailEntitySet.requiresIContext = true;
})();

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",[
	"sap/ui/base/Object",
	"sap/ui/model/Context",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode"
	],	function(BaseObject, Context, OperationCode) {
		"use strict";
		var FilterUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil");
		/**
		 * @private
		 * This function create a title by combining the label and id
		 * @param  {string} sDimValueDisplay the label field
		 * @param  {string} sDimValue the id field
		 * @return {string} the newly created title
		 */
		FilterUtil.createTitle = function (sDimValueDisplay, sDimValue) {
			var sTitle;
			if (!sDimValueDisplay) {
				return sDimValue;
			}
			//for donut chart
			if (sDimValueDisplay.indexOf(':') !== -1 ) {
				sDimValueDisplay = sDimValueDisplay.substring(0, sDimValueDisplay.indexOf(':'));
			}
			//if not already concatenated
			if (sDimValueDisplay.indexOf(sDimValue) === -1) {
				sTitle = sDimValueDisplay + " (" +  sDimValue + ")";
			}
			else {
				sTitle = sDimValueDisplay;
			}
			return sTitle;
		};

		/**
		 * This function access nested object and returns the correct value if it exists, and undefined in all other cases
		 * @param  {object} nested object
		 * @param  {string} sNestedProperty the property string
		 * @return {object} return the required object if exist otherwise return undefined
		 */
		FilterUtil.readProperty = function(oObject, sNestedProperty) {
			var oObj = oObject, i = 0;
			var oProperties = typeof sNestedProperty === 'string' ? sNestedProperty.split(".") : [];
			while (i < oProperties.length) {
				if (!oObj) {
					return undefined;
				}
				oObj = oObj[oProperties[i++]];
			}
			return oObj;
		};
		/**
		 * This function execute a function associated with an object and return the result if the function is exists, and undefined in all other cases
		 * @param  {object}   oObject       nested object
		 * @param  {string}   sFunctionName full name of the function
		 * @param  {[object]} oArgs         array of object as arguments to the function
		 * @return {object}                 return the result after executing the function if the function is exists, otherwise return undefined 
		 */
		FilterUtil.executeFunction = function(oObject, sFunctionName, oArgs){
			var oObj = oObject, i = 0, oParent;
			var oProperties = typeof sFunctionName === 'string' ? sFunctionName.split(".") : [];
			while (i < oProperties.length) {
				if (!oObj) {
					return undefined;
				}
				oParent = oObj;
				oObj    = oObj[oProperties[i++]];
			}
			return typeof oObj === 'function' ? oObj.apply(oParent, oArgs) : undefined;
		};
		/**
		 * This function create a title from the operation code
		 * @param  {object} oFilterValueRange ranges
		 * @return {string} title
		 */
		FilterUtil.createTitleFromCode = function(oFilterValueRange) {
			var sValueA = FilterUtil.readProperty(oFilterValueRange, "value1");
			var sValueB = FilterUtil.readProperty(oFilterValueRange, "value2");
			var sOperation = FilterUtil.readProperty(oFilterValueRange, "operation");
			if ( !sValueA || !sOperation || !OperationCode[sOperation]) {
				return undefined;
			}
			var sResult;
			if (sValueB) {
				sResult = sValueA + OperationCode[sOperation].code + sValueB;
			} else if (OperationCode[sOperation].position === "last") {
				sResult = sValueA + OperationCode[sOperation].code;
			} else if (OperationCode[sOperation].position === "mid") {
				sResult = OperationCode[sOperation].code + sValueA + OperationCode[sOperation].code;
			} else {
				sResult = OperationCode[sOperation].code + sValueA;
			}
			if (oFilterValueRange.exclude) {
				sResult = "!(" + sResult + ")";
			}
			return sResult;
		};

		/**
		 * Formatter to create Filters link text
		 * @param  {Object} oContext FilterData
		 * @return {string} Text for filters link
		 */
		FilterUtil.formatFiltersLink = function(oContext) {
			var i18n = this.getModel("i18n"),
			rb = i18n.getResourceBundle();
			if (oContext) {
				var length = Object.keys(oContext).length;
				if (oContext["_CUSTOM"]) {
					//We store custom app state in _CUSTOM property which shouldnt be counted
					length--;
				}
				if (length) {
					return rb.getText("VISUAL_FILTER_FILTERS_WITH_COUNT", [length]);
				}
			}
			return rb.getText("VISUAL_FILTER_FILTERS");
		};
	return FilterUtil;
}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
* @fileOverview This file contains miscellaneous utility functions.
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationFormatter",[
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper"
	],
	function(KpiUtil, V4Terms, KpiAnnotationHelper) {
		"use strict";

		jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter");

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter = {};
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions = {
			count: 0
		};
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.NumberFormatFunctions = {};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.criticalityConstants = {
			StateValues: {
				None: "None",
				Negative: "Error",
				Critical: "Warning",
				Positive: "Success"
			},
			ColorValues: {
				None: "Neutral",
				Negative: "Error",
				Critical: "Critical",
				Positive: "Good"
			}
		};

		function criticality2state(criticality, oCriticalityConfigValues) {
			var sState;
			if (oCriticalityConfigValues) {
				sState = oCriticalityConfigValues.None;
				if (criticality && criticality.EnumMember) {
					var val = criticality.EnumMember;
					if (endsWith(val, "Negative")) {
						sState = oCriticalityConfigValues.Negative;
					} else if (endsWith(val, "Critical")) {
						sState = oCriticalityConfigValues.Critical;
					} else if (endsWith(val, "Positive")) {
						sState = oCriticalityConfigValues.Positive;
					}
				}
			}
			return sState;
		}

		function endsWith(sString, sSuffix) {
			return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
		}
		/**
		* This function calculates criticality state;
		* @param	{string} sImproveDirection ImprovementDirection value
		* @param	{number} toleranceLow toleranceLow value from annotations
		* @param	{number} toleranceHigh deviationLow value from annotations
		* @param  {number} deviationLow toleranceHigh value from annotations
		* @param  {number} deviationHigh toleranceHigh value from annotations
		* @param 	{number} value Value for comparison
		* @param	{object} oCriticalityConfigValues different criticality values;
		*/
		function calculateCriticalityState(value, sImproveDirection, deviationLow, deviationHigh, toleranceLow, toleranceHigh,
			oCriticalityConfigValues) {

			var oCriticality = {};
			oCriticality.EnumMember = "None";

			// number could be a zero number so check if it is not undefined
			if (value !== undefined) {
				value = Number(value);
				if (endsWith(sImproveDirection, "Minimize") || endsWith(sImproveDirection, "Minimizing")) {
					oCriticality.EnumMember = "None";
					if (toleranceHigh || deviationHigh) {
						if (value <= toleranceHigh) {
							oCriticality.EnumMember = "Positive";
						} else if (value > deviationHigh) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}
				} else if (endsWith(sImproveDirection, "Maximize") || endsWith(sImproveDirection, "Maximizing")) {
					oCriticality.EnumMember = "None";
					if (toleranceLow || deviationLow) {
						if (value >= toleranceLow) {
							oCriticality.EnumMember = "Positive";
						} else if (value < deviationLow) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}

				} else if (endsWith(sImproveDirection, "Target")) {
					oCriticality.EnumMember = "None";
					if (toleranceLow && toleranceHigh) {
						if (value >= toleranceLow && value <= toleranceHigh) {
							oCriticality.EnumMember = "Positive";
						} else if (value < deviationLow || value > deviationHigh) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}
				}
			}

			return criticality2state(oCriticality, oCriticalityConfigValues);
		}

		/* Trend Direction for Header */
		function calculateTrendDirection(aggregateValue, referenceValue, upDifference, downDifference) {
			if (!aggregateValue || !referenceValue) {
				return;
			}

			aggregateValue = Number(aggregateValue);

			if (!upDifference && (aggregateValue - referenceValue >= 0)) {
				return "Up";
			}
			if (!downDifference && (aggregateValue - referenceValue <= 0)) {
				return "Down";
			}

			if (referenceValue && upDifference && (aggregateValue - referenceValue >= upDifference)) {
				return "Up";
			}
			if (referenceValue && downDifference && (aggregateValue - referenceValue <= downDifference)) {
				return "Down";
			}
		}

		/**
		* @private
		* [calculateFieldContentWithScale  this function calculates  KPI value]
		* @param  {object} aggregateValue            [KPI vlaue]
		* @param  {number} nNumberOfFractionalDigits [NumberOfFractionalDigits from the Datapoint value format annotation]
		* @param  {decimal} fScaleFactor 			 [scale factor from the data point annotation]
		* @param {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		* @return {number}                           [returns the formatted KPI Value]
		*/
		function calculateFieldContentWithScale(value, nNumberOfFractionalDigits, fScaleFactor, sUnitOfMeasure) {
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			var sValue = KpiUtil.formatNumberForPresentation(value, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
			return sValue + " " + ( sUnitOfMeasure ? sUnitOfMeasure : "" );
		}

		/**
		* @private
		* [calculateDeviationValue  this function calculates deviation from KPI value and TargetValue ]
		* @param  {object} aggregateValue            [KPI vlaue]
		* @param  {number} nNumberOfFractionalDigits [NumberOfFractionalDigits from the Datapoint value format annotation]
		* @param  {number} targetValue               [TargetValue from datapoint annotation]
		* @param  {decimal} fScaleFactor 			 [scale factor from the data point annotation]
		* @param {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		* @return {number}                           [returns the deviationValue]
		*/
		function calculateDeviationValue(aggregateValue, nNumberOfFractionalDigits, targetValue, fScaleFactor, sUnitOfMeasure)
		{
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			if (!aggregateValue) {
				return ;
			}
			aggregateValue = Number(aggregateValue);
			var iDeviationValue = aggregateValue - targetValue;
			var iDeviationReturnValue = KpiUtil.formatNumberForPresentation(iDeviationValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
			return iDeviationReturnValue + " " +  ( sUnitOfMeasure ? sUnitOfMeasure : "" );
		}

		function calculateReference(value, referenceValue, relative) {
			if (!referenceValue) {
				return;
			}
			referenceValue = Number(referenceValue);
			if (relative) {
				return referenceValue + "%";
			}
			return referenceValue;
		}


		/**
		 * @private
		 * [calculateTarget formats the the targetValue]
		 * @param  {string} value 				[Value to be formatted]
		 * @param  {number} targetValue 			[TargetValue from datapoint annotation]
		 * @param  {number} nNumberOfFractionalDigits   [numberOfFractionalDigits number ]
		 * @param  {decimal} fScaleFactor 				[scale factor from the data point annotation]
		 * @param  {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		 * @return {sap.ui.core.format.NumberFormat}	[returns the float instance of the NumberFormat]
		 */
		function calculateTarget(value, targetValue, nNumberOfFractionalDigits, fScaleFactor, sUnitOfMeasure) {
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			if (!targetValue) {
				return ;
			} else {
				targetValue = Number(targetValue);
				var targetReturnValue = KpiUtil.formatNumberForPresentation(targetValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
				return targetReturnValue + " " + ( sUnitOfMeasure ? sUnitOfMeasure : "" );
			}
		}

		/**
		 * [resolvePathForKpiTargetValue Creates binding path for NumericContent target value]
		 * @param  {object} iContext   [current context]
		 * @param  {object} oDataPoint [datapoint object from the annotation]
		 * @return {*}            		[returns binding path for KPI target value ]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiTargetValue = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.TargetValue  ) {
				return "";
			}
			var oSettings = iContext.getSetting("settings").getData();
			var value =  KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var targetValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TargetValue);
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model, oEntityTypeProperty);
			var bIsTargetValBinding = KpiUtil.isBindingValue(targetValue);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor;
			if ( oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure);
			var bIsPercent = false;
			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");  // parts has to constructed without the value
			sParts += bIsTargetValBinding ? "," + targetValue : "";
			sParts += bIsUoMValBinding ? "," + sUnitOfMeasure : "";
			sParts += "]";
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}

			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) {
				nNumberOfFractionalDigits = 0;
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1;
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;

			var formatFunc = function() {
				var index = 1;
				if (bIsPercent) {
					return calculateTarget( bIsKpiValBinding ? arguments[0] : value,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						nNumberOfFractionalDigits,
						fScaleFactor,
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateTarget( bIsKpiValBinding ? arguments[0] : value,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						nNumberOfFractionalDigits,
						fScaleFactor
					);
				}
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatReferenceValueCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";

		};


		/* Creates binding path for NumericContent referenceValue  */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiReferenceValue = function(iContext, oDataPoint) {
			//var oSettings = iContext.getSetting("settings").getData();
			var value =  KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var referenceValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
			var relative = KpiUtil.isRelative(oDataPoint);
			var bIsRefValBinding = KpiUtil.isBindingValue(referenceValue);
			var sParts = "parts: [" + value;
			sParts += bIsRefValBinding ? "," + referenceValue : "";
			sParts += "]";
			var formatFunc = function() {
				var index = 1;
				return calculateReference(
					arguments[0],
					bIsRefValBinding ? arguments[index++] : referenceValue,
					relative
					);
			};
			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatReferenceValueCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};


		/**
		* [resolvePathForKpiValue Creates binding path for NumericContent KPI value ]
		* @param  {object} iContext  current binding context
		* @param  {object} oDataPoint datapoint object from annotation
		* @return {sap.ui.core.format.NumberFormat} returns binding path to resolve KPI value in number format
		*/
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiValue = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value) {
				return "";
			}

			var oSettings = iContext.getSetting("settings").getData();
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model , oEntityTypeProperty);
			var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);

			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");
			sParts += bIsUoMValBinding ? "," + sUnitOfMeasure : "";
			sParts += "]";

			var bIsPercent = false;
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor;
			if ( oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) { //when numerofFractional Digits not specified in Annotations
				nNumberOfFractionalDigits = 0; // 0 for absolute value
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1; // 1 for percentage based value
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;
			var formatFunc = function() {
				var index = 1;
				if (bIsPercent) {
					return calculateFieldContentWithScale(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						fScaleFactor, 
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateFieldContentWithScale(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						fScaleFactor
					);
				}
			};
			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatFieldWithScaleCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolveKpiHeaderState = function(iContext, oDataPoint) {
			return formatDataPointToValue(iContext, oDataPoint, sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.criticalityConstants.ColorValues);
		};

		/**
		 * [resolvePathForDeviation resolves binding parth for deviation]
		 * @param  {object} iContext   [current binding context]
		 * @param  {object} oDataPoint [datapoint object from the annotaion]
		 * @return {*}            [returns binding path for deviation]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForDeviation = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.TargetValue ) { // removed this check as currently deviation is not from calculated from trend  "!oDataPoint.TrendCalculation"
				return "";
			}
			var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var targetValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TargetValue);
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model, oEntityTypeProperty);
			var bIsTargetValBinding = KpiUtil.isBindingValue(targetValue);
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var bIsPercent = false ;
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor ;
			if (oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");
			sParts += bIsTargetValBinding ? "," + targetValue : "";
			sParts += bIsUoMValBinding ? "," + sUnitOfMeasure : "";
			sParts += "]";
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}
			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) {
				nNumberOfFractionalDigits = 0;
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1;
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;
			var formatFunc = function() {
				var index = 1 ;
				if (bIsPercent) {
					return calculateDeviationValue(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						fScaleFactor,
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateDeviationValue(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						fScaleFactor
					);
				}
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatDeviationCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForTrendIcon = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.Value.Path || !oDataPoint.TrendCalculation) {
				return "";
			}

			//var oSettings = iContext.getSetting("settings").getData();

			if (oDataPoint.Trend) {
				var trend = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Trend);
				return trend;
			}

			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var referenceValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
			var downDifference = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.DownDifference);
			var upDifference = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.UpDifference);

			var bIsRefValBinding = KpiUtil.isBindingValue(referenceValue);
			var bIsDownDiffBinding = KpiUtil.isBindingValue(downDifference);
			var bIsUpDiffBinding = KpiUtil.isBindingValue(upDifference);

			var sParts = "parts: [" + value;
			sParts += bIsRefValBinding ? "," + referenceValue : "";
			sParts += bIsDownDiffBinding ? "," + downDifference : "";
			sParts += bIsUpDiffBinding ? "," + upDifference : "";
			sParts += "]";

			var formatFunc = function() {
				var index = 1;
				return calculateTrendDirection(
					arguments[0],
					bIsRefValBinding ? arguments[index++] : referenceValue,
					bIsDownDiffBinding ? arguments[index++] : downDifference,
					bIsUpDiffBinding ? arguments[index++] : upDifference
					);
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTrendDirection");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		/**
		 * [formatDPTitle formats the KPI Card Title]
		 * @param  {object} iContext   [current binding context]
		 * @param  {object} oDataPoint [datapoint object from the annotaion]
		 * @return {*}            [returns binding path for KPI Card Title]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatDPTitle = function(iContext, oDataPoint) {

			var oSettings = iContext.getSetting("settings").getData();
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sTitle = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Title);
			var result = "", sUnit = "";

			//Add unit using path or string
			if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
				var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
				sUnit = KpiUtil.getPathOrPrimitiveValue(oUnit);
			} else if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) {
				var oCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
				sUnit = KpiUtil.getPathOrPrimitiveValue(oCurrency);
			}

			var formatFunc = function(unit, title) {
				title = title || sTitle;
				unit = unit || sUnit;

				var bIsPercent = (sUnit === "%");

				return !bIsPercent ? this.getModel('i18n').getResourceBundle().getText("KPI_CARD_TITLE_UNIT", [title, unit]) : title;
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTitleForDP");

			var bIsUnitBinding = KpiUtil.isBindingValue(sUnit),
				bIsTitleBinding = KpiUtil.isBindingValue(sTitle);

			var sParts = "[" + (bIsUnitBinding ? sUnit : "{path:'DUMMY'}") + ", " +
				(bIsTitleBinding ? sTitle : "{path: 'DUMMY'}") + "]";

			result = "{parts: " + sParts + ", formatter: '" + sFormatFuncName + "'}";

			return result;
		};

		function formatDataPointToValue(iContext, oDataPoint, oCriticalityConfigValues) {
			var sState = oCriticalityConfigValues.None;
			if (oDataPoint.Criticality) {
				var criticality = oDataPoint.Criticality ? oDataPoint.Criticality.EnumMember.split("/")[1] : undefined;
				var bIsCriticalityBinding = KpiUtil.isBindingValue(criticality);
				if (bIsCriticalityBinding) {
					sState = criticality;
				} else {
					sState = criticality2state(oDataPoint.Criticality, oCriticalityConfigValues);
				}

			} else if (oDataPoint.CriticalityCalculation && oDataPoint.Value && oDataPoint.Value) {
				sState = formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues);
			}

			return sState;
		}


		function formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues) {
			//var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var sImprovementDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;

			var deviationLow = oDataPoint.CriticalityCalculation.DeviationRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue) : undefined;
			var deviationHigh = oDataPoint.CriticalityCalculation.DeviationRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue) : undefined;
			var toleranceLow = oDataPoint.CriticalityCalculation.ToleranceRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue) : undefined;
			var toleranceHigh = oDataPoint.CriticalityCalculation.ToleranceRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue) : undefined;

			var bIsDeviationLowBinding = KpiUtil.isBindingValue(deviationLow);
			var bIsDeviationHighBinding = KpiUtil.isBindingValue(deviationHigh);
			var bIsToleranceLowBinding = KpiUtil.isBindingValue(toleranceLow);
			var bIsToleranceHighBinding = KpiUtil.isBindingValue(toleranceHigh);

			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path:'DUMMY'}");
			sParts += bIsDeviationLowBinding ? "," + deviationLow : "";
			sParts += bIsDeviationHighBinding ? "," + deviationHigh : "";
			sParts += bIsToleranceLowBinding ? "," + toleranceLow : "";
			sParts += bIsToleranceHighBinding ? "," + toleranceHigh : "";
			sParts += "]";

			var formatFunc = function() {
				var index = 1;
				return calculateCriticalityState(
					bIsKpiValBinding ? arguments[0] : value,
					sImprovementDirection,
					bIsDeviationLowBinding ? arguments[index++] : deviationLow,
					bIsDeviationHighBinding ? arguments[index++] : deviationHigh,
					bIsToleranceLowBinding ? arguments[index++] : toleranceLow,
					bIsToleranceHighBinding ? arguments[index++] : toleranceHigh,
					oCriticalityConfigValues
					);
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatCriticalityCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		}

		function setFormatFunctionAndGetFunctionName(func, sNamePrefix) {
			if (!sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix]) {
				sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix] = 0;
			}
			sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix]++;

			var sFuncName = sNamePrefix + sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix];
			sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sFuncName] = func;

			return "sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions." + sFuncName;
		}

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.getAggregateNumber = function(iContext, oEntitySet, oDataPoint, oSelectionVariant, oSettings) {
			var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
			//var oSelectOption, sPropertyPath, oRange;
			var sPropertyPath;

			var filtersString = ",filters:";

			var filtersArray = [];

			if (aSelectOptions) {
				aSelectOptions.forEach(function(oSelectOption) {
					sPropertyPath = oSelectOption.PropertyName.PropertyPath;
					oSelectOption[sPropertyPath].forEach(function(oRange) {
						if (oRange.Sign.EnumMember === V4Terms.SelectionRangeSignType + "/I") {
							var oFilter = {
								path: sPropertyPath,
								operator: oRange.Option.EnumMember.split("/")[1],
								value1: oRange.Low.String,
								value2: oRange.High ? oRange.High.String : ""
							};
							filtersArray.push(oFilter);
						}
					});
				});
			}
			var measure = oDataPoint.Value.Path;
			var ret = "";

			filtersString += JSON.stringify(filtersArray);

			var sPath = KpiAnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting("dataModel"), oEntitySet, oSelectionVariant);
			ret += "{path: '" + sPath + "',length:1";

			var oEntityType = oSettings.metaModel.getODataEntityType(oEntitySet.entityType, false);
			var unitColumn = getUnitColumn(measure, oEntityType);

			var selectArr = [];
			selectArr.push(measure);
			if (unitColumn) {
				selectArr.push(unitColumn);
			}
			if (oDataPoint.TrendCalculation && oDataPoint.TrendCalculation.ReferenceValue && oDataPoint.TrendCalculation.ReferenceValue.Path) {
				selectArr.push(oDataPoint.TrendCalculation.ReferenceValue.Path);
			}

			return ret + ", parameters:{select:'" + selectArr.join(",") + "'}" + filtersString + "}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.getAggregateNumber.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolveKpiHeaderState.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForTrendIcon.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiValue.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForDeviation.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiTargetValue.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatDPTitle.requiresIContext = true;

		function getUnitColumn(measure, oEntityType) {
			var properties = oEntityType.property;
			for (var i = 0, len = properties.length; i < len; i++) {
				if (properties[i].name == measure) {
					if (properties[i].hasOwnProperty("sap:unit")) {
						return properties[i]["sap:unit"];
					}
					break;
				}
			}
			return null;
		}
		return sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter;
	}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationFormatter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiVizAnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context", "sap/ui/model/odata/AnnotationHelper", "sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"],
    function(BaseObject, Context, ODataAnnoHelper, V4Terms) {
        "use strict";

        var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper");

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.constants = {
            LABEL_KEY: "sap:label",
            TEXT_KEY: "sap:text",
            TYPE_KEY: "type"
        };

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.config = {
            "Line": {
                "type": "line",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension",
                    "role": "Category"
                }, {
                    "uid": "color",
                    "type": "dimension",
                    "role": "Series"
                }]
            },
            "Column": {
                "type": "column",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1,
                    "defaultRole": "Axis1"
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "min": 1,
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension"
                }]
            },
            "Donut": {
                "type": "donut",
                "dimensions": {
                    "min": 1
                },
                "measures": {
                    "min": 1,
                    "max": 1
                },
                "feeds": [{
                    "uid": "size",
                    "min": 1,
                    "max": 1,
                    "type": "measure"
                }, {
                    "uid": "color",
                    "min": 1,
                    "type": "dimension"
                }]
            },
            "Bar": {
                "type": "bar",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1,
                    "defaultRole": "Axis1"
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "min": 1,
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension"
                }]
            }
        };

        AnnotationHelper._createSortObject = function(oDimensions, oMeasures, oChartType) {
            var sSortBy = "";
            if (oChartType.EnumMember == "com.sap.vocabularies.UI.v1.ChartType/Line") {
                sSortBy = oDimensions[0].Dimension.PropertyPath;
            } else {
                sSortBy = oMeasures[0].Measure.PropertyPath;
            }
            return sSortBy;
        };

        AnnotationHelper.formatItems = function(iContext, oEntitySet, oSelectionVariant, oPresentationVariant, oDimensions, oMeasures, oChartType, oSettings) {
            var oModel = iContext.getSetting("dataModel");
            var resultString = "{";
            var dimensionsList = [];
            var measuresList = [];
            var sorterList = [];
            var bFilter = oSelectionVariant && oSelectionVariant.SelectOptions;
            var bParams = oSelectionVariant && oSelectionVariant.Parameters;
            var bSorter = oPresentationVariant && oPresentationVariant.SortOrder;
            var maxItemTerm = oPresentationVariant && oPresentationVariant.MaxItems,
                maxItems = null;
            var tmp;
            var entitySet = null;
            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;
            var textKey = "sap:text";

            if (maxItemTerm) {
                maxItems = maxItemTerm.Int32 ? maxItemTerm.Int32 : maxItemTerm.Int;
            }

            if (maxItems) {
                if (maxItems == "0") {
                    jQuery.sap.log.error("maxItems is configured as " +
                        maxItems);
                    resultString += "}";
                    return resultString;
                }
                if (!/^\d+$/.test(maxItems)) {
                    jQuery.sap.log.error("maxItems is Invalid. " +
                        "Please enter an Integer.");
                    resultString += "}";
                    return resultString;
                }
            }

            if (bParams) {
                var path = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper.resolveParameterizedEntitySet(oModel, oEntitySet, oSelectionVariant);
                resultString += "path: '" + path + "'";
            } else {
                resultString += "path: '" + oSettings.model + ">/" + oEntitySet.name + "'";
            }

            var filters = [];
            if (!oSettings) {
                jQuery.sap.log.error("NO KPI card settings in card formmater");
                resultString += "}";
                return resultString;
            }
            entitySet = oSettings.entitySet;
            if (!oModel || !entitySet) {
                return resultString;
            }
            var oMetadata = self.getMetadata(oModel, entitySet);

            if (bFilter) {
                bFilter.forEach(function(oSelectOption) {
                    var sPropertyPath = oSelectOption.PropertyName.PropertyPath;
                    oSelectOption[sPropertyPath].forEach(function(oRange) {
                        if (oRange.Sign.EnumMember === V4Terms.SelectionRangeSignType + "/I") {
                            var oFilter = {
                                path: sPropertyPath,
                                operator: oRange.Option.EnumMember.split("/")[1],
                                value1: oRange.Low.String,
                                value2: oRange.High ? oRange.High.String : ""
                            };
                            filters.push(oFilter);
                        }
                    });
                });
            }

            if (filters.length > 0) {
                resultString += ", filters: " + JSON.stringify(filters);
            }

            if (bSorter) {
                var oSortAnnotationCollection = oPresentationVariant.SortOrder;
                if (oSortAnnotationCollection.length < 1) {
                    jQuery.sap.log.warning("Kpi Card no Sort annotaion defined");
                } else {
                    var sSorterValue = "";
                    var oSortOrder;
                    var sSortOrder;
                    var sSortBy;
                    for (var i = 0; i < oSortAnnotationCollection.length; i++) {
                        oSortOrder = oSortAnnotationCollection[i];
                        sSortBy = oSortOrder.Property.PropertyPath;
                        if (!sSortBy || !oMetadata[sSortBy]) {
                            sSortBy = self._createSortObject(oDimensions, oMeasures, oChartType);
                        }
                        sorterList.push(sSortBy);
                        if (typeof oSortOrder.Descending == "undefined") {
                            sSortOrder = "true";
                        } else {
                            var sCheckFlag = oSortOrder.Descending.Bool;
                            if (!sCheckFlag) {
                                jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.BOOLEAN_ERROR);
                                sSortOrder = "true";
                            } else {
                                sSortOrder = sCheckFlag.toLowerCase() === "true";
                            }
                        }
                        sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
                    }
                    /* trim the last ',' */
                    resultString += ", sorter: [" + sSorterValue.substring(0, sSorterValue.length - 1) + "]";
                }
            }

            jQuery.each(oMeasures, function(i, m) {
                tmp = m.Measure.PropertyPath;
                measuresList.push(tmp);
                if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    measuresList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            });
            jQuery.each(oDimensions, function(i, d) {
                tmp = d.Dimension.PropertyPath;
                dimensionsList.push(tmp);
                if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    dimensionsList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            });
            resultString += ", parameters: {select:'" + [].concat(dimensionsList, measuresList).join(",");
            if (sorterList.length > 0) {
                resultString += "," + sorterList.join(",");
            }
            /* close `parameters` */
            resultString += "'}";

            if (maxItems) {
                resultString += ", length: " + maxItems;
            }
            resultString += "}";
            return resultString;
        };

        /*
         * Formatter for VizFrame type.
         * @param {Object} oChartType - Chart Annotation Object
         * @returns {String} Valid Enum for Vizframe type
         */
        AnnotationHelper.getChartType = function(oChartType) {

            var aChartAnno = [];
            if (!oChartType.EnumMember ||
                !(aChartAnno = oChartType.EnumMember.split("/")) ||
                aChartAnno.length < 2) {
                jQuery.sap.log.error("KPI Card M - wrong or missing chart type");
                return "";
            } else {
                return AnnotationHelper.config[aChartAnno[1]].type;
            }
        };

        /*
         * Construct VizProperties and Feeds for VizFrame
         * @param {Object} VizFrame
         */
        AnnotationHelper.setupChartAttributes = function(vizFrame, oSettings) {
            var oCardsModel, /* oEntityTypeModel, */ entityTypeObject, chartContext;
            var oChartType, chartType, config, aDimensions, aMeasures;
            var oVizProperties;
            var aQueuedProperties, aQueuedDimensions, aQueuedMeasures;
            var aPropertyWithoutRoles, aDimensionWithoutRoles = [],
                aMeasureWithoutRoles = [];

            config = AnnotationHelper.config;

            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;

            if (!(oCardsModel = oSettings)) {
                jQuery.sap.log.error("KPI Card no card settings");
                return;
            }

            var oModel = vizFrame.getModel();
            var oMetaModel = oModel.getMetaModel();
            var entitySet = oCardsModel.entitySet;
            var oEntitySet = oMetaModel.getODataEntitySet(entitySet);

            if (!oModel || !entitySet) {
                return;
            }

            entityTypeObject = oMetaModel.getODataEntityType(oEntitySet.entityType, false);

            if (!entityTypeObject) {
                jQuery.sap.log.error("KPI Card no entityType");
                return;
            }
            var oMetadata = self.getMetadata(oModel, entitySet);
            var chartAnno = "com.sap.vocabularies.UI.v1.Chart#" + oCardsModel.qualifier;
            if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
                jQuery.sap.log.error("KPI Card no chart annotations");
                return;
            }

            if (!(aDimensions = chartContext.DimensionAttributes) ||
                !aDimensions.length) {
                jQuery.sap.log.error("KPI Card no dimension annotations defined");
                return;
            }
            if (!(aMeasures = chartContext.MeasureAttributes) ||
                !aMeasures.length) {
                jQuery.sap.log.error("KPI Card no measure annotations defined");
                return;
            }

            var aChartAnno = [];
            oChartType = chartContext.ChartType;
            if (!oChartType.EnumMember ||
                !(aChartAnno = oChartType.EnumMember.split("/")) ||
                aChartAnno.length < 2) {
                jQuery.sap.log.error("KPI Card M - wrong or missing chart type");
            } else {
                chartType = aChartAnno[1];
            }

            var bHideAxisTitle = true;

            vizFrame.removeAllAggregation();
            /*
             * Default viz properties template
             */
            oVizProperties = {
                legend: {
                    isScrollable: false
                },
                general: {
                    background: {
                        color: "transparent"
                    },
                    layout: {
                        padding: 15
                    },
                    groupData: false
                },
                title: {
                    visible: false
                },
                interaction: {
                    noninteractiveMode: false,
                    selectability: {
                        legendSelection: false,
                        axisLabelSelection: false,
                        mode: "NONE",
                        plotLassoSelection: false,
                        plotStdSelection: true
                    }
                },
                plotArea: {
                    window: {
                        start: "firstDataPoint",
                        end: "lastDataPoint"
                    },
                    background: {
                        color: "transparent"
                    }
                }
            };

            aQueuedDimensions = aDimensions.slice();
            aQueuedMeasures = aMeasures.slice();
            jQuery.each(config[chartType].feeds, function(i, feed) {
                var uid = feed.uid;
                var aFeedProperties = [];
                if (feed.type) {
                    var iPropertiesLength, feedtype, propertyName;
                    if (feed.type === "dimension") {
                        iPropertiesLength = aDimensions.length;
                        feedtype = "Dimension";
                        propertyName = "dimensions";
                        aQueuedProperties = aQueuedDimensions;
                        aPropertyWithoutRoles = aDimensionWithoutRoles;
                    } else {
                        iPropertiesLength = aMeasures.length;
                        feedtype = "Measure";
                        propertyName = "measures";
                        aQueuedProperties = aQueuedMeasures;
                        aPropertyWithoutRoles = aMeasureWithoutRoles;
                    }
                    var min = 0,
                        max = iPropertiesLength;
                    if (feed.min) {
                        min = min > feed.min ? min : feed.min;
                    }
                    if (feed.max) {
                        max = max < feed.max ? max : feed.max;
                    }
                    /* If no roles configured - add the property to feed */
                    if (!feed.role) {
                        var len = aQueuedProperties.length;
                        for (var j = 0; j < len && aFeedProperties.length < max; ++j) {
                            var val = aQueuedProperties[j];
                            aQueuedProperties.splice(j, 1);
                            --len;
                            --j;
                            aFeedProperties.push(val);
                        }
                    } else {
                        var rolesByPrio = feed.role.split("|");
                        jQuery.each(rolesByPrio, function(j, role) {
                            if (aFeedProperties.length == max) {
                                return false;
                            }
                            var len = aQueuedProperties.length;
                            for (var k = 0; k < len && aFeedProperties.length < max; ++k) {
                                var val = aQueuedProperties[k];
                                if (val && val.Role && val.Role.EnumMember &&
                                    val.Role.EnumMember.split("/") && val.Role.EnumMember.split("/")[1]) {
                                    var annotationRole = val.Role.EnumMember.split("/")[1];
                                    if (annotationRole == role) {
                                        aQueuedProperties.splice(k, 1);
                                        --len;
                                        --k;
                                        aFeedProperties.push(val);
                                    }
                                } else if (jQuery.inArray(val, aPropertyWithoutRoles) == -1) {
                                    aPropertyWithoutRoles.push(val);
                                }
                            }
                        });
                        if (aFeedProperties.length < max) {
                            jQuery.each(aPropertyWithoutRoles, function(k, val) {
                                /* defaultRole is the fallback role */
                                var defaultRole;
                                var index;
                                if ((defaultRole = config[propertyName].defaultRole) &&
                                    (jQuery.inArray(defaultRole, rolesByPrio) !== -1) &&
                                    (index = jQuery.inArray(val, aQueuedProperties)) !== -1) {
                                    aQueuedProperties.splice(index, 1);
                                    aFeedProperties.push(val);
                                    if (aFeedProperties.length == max) {
                                        return false;
                                    }
                                }
                            });
                        }
                        if (aFeedProperties.length < min) {
                            jQuery.sap.log.error("KPI card feed propperties < min");
                            return false;
                        }
                    }
                    if (aFeedProperties.length) {
                        var aFeeds = [];
                        var dataset;
                        if (!(dataset = vizFrame.getDataset())) {
                            jQuery.sap.log.error("KPI Card Viz framework no Dataset");
                            return false;
                        }
                        jQuery.each(aFeedProperties, function(i, val) {
                            if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
                                jQuery.sap.log.error("KPI Card invalid chart annotations - propertypath");
                                return false;
                            }
                            var property = val[feedtype].PropertyPath;
                            var feedName = property;
                            var textColumn = property;

                            if (oMetadata && oMetadata[property]) {
                                feedName = oMetadata[property][self.constants.LABEL_KEY] || property;
                                textColumn = oMetadata[property][self.constants.TEXT_KEY] || property;
                            }

                            var displayBindingPath = "{" + textColumn + "}";
                            aFeeds.push(feedName);
                            if (feedtype == "Dimension") {
                                dataset.addDimension(new sap.viz.ui5.data.DimensionDefinition({
                                    name: feedName,
                                    value: "{" + property + "}",
                                    displayValue: displayBindingPath
                                }));
                            } else {
                                dataset.addMeasure(new sap.viz.ui5.data.MeasureDefinition({
                                    name: feedName,
                                    value: "{" + property + "}"
                                }));
                            }

                        });
                        var newFeed = new sap.viz.ui5.controls.common.feeds.FeedItem({
                            "uid": uid,
                            "type": feedtype,
                            "values": aFeeds
                        });
                        vizFrame.addFeed(newFeed);
                        oVizProperties[uid] = {
                            title: {
                                visible: bHideAxisTitle ? false : true,
                                text: aFeeds.join(", ")
                            },
                            label: {
                                formatString: "axisFormatter"
                            }
                        };
                        if (uid == "valueAxis") {
                            oVizProperties[uid].layout = {
                                maxWidth: 0.4
                            };
                        }
                    }
                }
            });


            vizFrame.setVizProperties(oVizProperties);
        };

        AnnotationHelper.formatByType = function(oMetadata, sProp, sVal) {
            var self = sap.ovp.cards.charts.VizAnnotationManager;
            var typeKey = self.constants.TYPE_KEY;
            if (!oMetadata || !oMetadata[sProp] || !oMetadata[sProp][typeKey]) {
                return sVal;
            }
            var aNumberTypes = [
                "Edm.Int",
                "Edmt.Int16",
                "Edm.Int32",
                "Edm.Int64",
                "Edm.Decimal"
            ];
            var currentType = oMetadata[sProp][typeKey];
            if (jQuery.inArray(currentType, aNumberTypes) !== -1) {
                return Number(sVal);
            }
            return sVal;
        };

        /*
         * Get the (cached) OData metadata information.
         */
        AnnotationHelper.getMetadata = function(model, entitySet) {
            var map = this.cacheODataMetadata(model);
            if (!map) {
                return undefined;
            }
            return map[entitySet];
        };


        /*
         * Cache OData metadata information with key as UI5 ODataModel id.
         */
        AnnotationHelper.cacheODataMetadata = function(model) {
            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;
            if (model) {
                if (!jQuery.sap.getObject("sap.suite.ui.generic.template.AnalyticalListPage.kpi.cachedMetaModel")) {
                    self.cachedMetaModel = {};
                }
                var map = self.cachedMetaModel[model.getId()];
                if (!map) {
                    var metaModel = model.getMetaModel();
                    map = {};
                    var container = metaModel.getODataEntityContainer();
                    jQuery.each(container.entitySet, function(anIndex, entitySet) {
                        var entityType = metaModel.getODataEntityType(entitySet.entityType);
                        var entitysetMap = {};
                        jQuery.each(entityType.property, function(propertyIndex, property) {
                            entitysetMap[property.name] = property;
                        });
                        map[entitySet.name] = entitysetMap;
                    });
                    self.cachedMetaModel[model.getId()] = map;
                }
                return map;
            } else {
                jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CACHING_ERROR);
            }
        };


        /*
         * formatChartAxes for setting the numericFormatter in charts of KPI card.
         */
        AnnotationHelper.formatChartAxes = function(iScaleFactorMeasure) {

            jQuery.sap.require("sap.viz.ui5.format.ChartFormatter");
            jQuery.sap.require("sap.ui.core.format.NumberFormat");
            jQuery.sap.require("sap.viz.ui5.api.env.Format");

            var chartFormatter = sap.viz.ui5.format.ChartFormatter.getInstance();
            var bShowScale = true;
            if (!iScaleFactorMeasure) {
                iScaleFactorMeasure = undefined;
            } else {
                bShowScale = false;
            }
            if (chartFormatter != null) {
                chartFormatter.registerCustomFormatter("axisFormatter", function(value) {
                    var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
                        style: "short",
                        minFractionDigits: 0,
                        maxFractionDigits: 1,
                        decimals: 2,
                        showScale: bShowScale,
                        shortRefNumber: iScaleFactorMeasure
                    });
                    return numberFormat.format(Number(value));
                });
                sap.viz.ui5.api.env.Format.numericFormatter(chartFormatter);
            }
        };

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.formatItems.requiresIContext = true;

        return AnnotationHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiVizAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI",["jquery.sap.global", "sap/ui/base/Object",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"	],
	function(jQuery, BaseObject, NonDraftTransactionController, NavigationController) {
		"use strict";
		/**
		 * API to be used in extensions of ListReport. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oState) {
			var oTransactionController;
			var oNavigationController;
			return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the list entries currently selected
				 * 
				 * @return {sap.ui.model.Context[]} contains one entry per line selected
				 * @public
				 */
				getSelectedContexts: function() {
					return oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartTable);
				},
				/**
				 * Get the transaction controller for editing actions on the list. Note: Currently implemented for non draft case
				 * 
				 * @return {sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController} the transaction controller
				 * @public
				 */
				getTransactionController: function() {
					if (oTemplateUtils.oCommonUtils.isDraftEnabled()) {
						throw new Error("Transaction support on ListReport for draft case not implemented yet");
					}
					oTransactionController = oTransactionController ||
						new NonDraftTransactionController(oTemplateUtils, oController, oState);
					return oTransactionController;
				},
				/**
				 * Refreshes the List from the backend
				 * 
				 * @public
				 */
				refreshTable: function() {
					oState.oSmartTable.rebindTable();
				},
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares for
				 * defining dependency and handling device specific style classes
				 * 
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array|sap.ui.model.Context} vContext The given binding contexts
				 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, vContext, mUrlParameters) {
					var aContext, mParameters;
					if (!vContext) {
						aContext = [];
					} else if (vContext instanceof sap.ui.model.Context) {
						aContext = [ vContext ];
					} else {
						aContext = vContext;
					}
					if (mUrlParameters) {
						mParameters = {
							urlParameters: mUrlParameters
						};
					}
					if (oState.oSmartTable) {
						oState.oSmartTable.getTable().attachEventOnce("updateFinished", function () {
							oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oState.oSmartTable);
							oTemplateUtils.oCommonUtils.setEnabledFooterButtons(oState.oSmartTable, oController);
						});
					}
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
				},
				/**
				 * Get the navigation controller for navigation actions
				 *
				 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
				 * @public
				 */
				getNavigationController: function() {
					if (!oNavigationController) {
						oNavigationController = new NavigationController(oTemplateUtils, oController, oState);
					}
					return oNavigationController;
				},
				/**
				 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
				 * are fulfilled.
				 *
				 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion 
				 * of the execution. If nothing is returned, immediate completion is assumed.
				 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
				 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to 
				 * false in case of immediate completion
				 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only 
				 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of 
				 * another function, that set the application busy 
				 * @param {boolean} [mParamters.dataloss.popup=true] Provides a dataloss popup before execution of the function if 
				 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
				 * @param {boolean} [mParamters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation, 
				 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup 
				 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
				 * @public
				 * @experimental 
				 */
				securedExecution: function(fnFunction, mParameters) {
					return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
				}				
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oState) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

			}
		});
	});

}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI",
	["jquery.sap.global", "sap/ui/base/Object", "sap/ui/table/Table", "sap/m/ListBase", "sap/ui/comp/smarttable/SmartTable",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"	],
	function(jQuery, BaseObject, UiTable, ListBase, SmartTable, DraftTransactionController, NonDraftTransactionController, NavigationController) {
		"use strict";
		/**
		 * API to be used in extensions of ObjectPage. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oState) {
			var oTransactionController;
			var oNavigationController;
			return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the entries currently selected in one ui element
				 *
				 * @param {string} sUiElementId the id identifying the ui element the selected context is requested for
				 * @return {sap.ui.model.Context[]} contains one entry per entry selected
				 * @public
				 */
				getSelectedContexts: function(sUiElementId) {
					var oControl = oController.byId(sUiElementId);
					return oTemplateUtils.oCommonUtils.getSelectedContexts(oControl);
				},

				/**
				 * Refreshes the specified control from the backend. Currently only supported for tables.
				 * 
				 * @param {string} sUiElementId the id identifying the table that should be refeshed
				 * @public
				 */
				refresh: function(sUiElementId) {
					var oControl = oController.byId(sUiElementId);
					if (oControl instanceof SmartTable) {
						oControl.rebindTable();
						return;
					}
					var sAggregation;
					if (oControl instanceof ListBase) {
                        sAggregation = "items";
					} else if (oControl instanceof UiTable) {
                        sAggregation = "rows";
					}
					var oBinding = sAggregation && oControl.getBinding(sAggregation);
					if (oBinding){
					    oBinding.refresh();
					}
				},

				/**
				 * Get the transaction controller for editing actions on the page.
				 * Note that the methods provided by this transaction controller depend on whether the object supports drafts or not.
				 * @return {sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController|sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController} 
				 * the transaction controller
				 * @public
				 */
				getTransactionController: function() {
					if (!oTransactionController) {
						var Class = oTemplateUtils.oCommonUtils.isDraftEnabled() ? DraftTransactionController : NonDraftTransactionController;
						oTransactionController = new Class(oTemplateUtils, oController, oState);
					}
					return oTransactionController;
				},
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares
				 * for defining dependency and handling device specific style classes
				 *
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array|sap.ui.model.Context} vContext The given binding contexts
				 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, vContext, mUrlParameters) {
					var aContext, mParameters;
					if (!vContext) {
						aContext = [];
					} else if (vContext instanceof sap.ui.model.Context) {
						aContext = [ vContext ];
					} else {
						aContext = vContext;
					}
					if (mUrlParameters) {
						mParameters = {
							urlParameters: mUrlParameters
						};
					}
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
				},
				/**
				 * Attach a handler to the PageDataLoaded event.
				 * This event is fired each time the object page is navigated to or the object to be displayed is changed
				 * Note, that the event will not be fired before:
				 * <ul compact>
				 * <li>the navigation to the page has been completed
				 * <li>the header data of the object are available
				 * </ul>
				 * @param {function} fnFunction the handler function. Note that the event passed to this function possesses an attribute <code>context</code>
				 * which contains the current header context
				 * @public
				 */
				attachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.attach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Detach a handler from the PageDataLoaded event
				 * 
				 * @param {function} fnFunction the handler function
				 * @public
				 */
				detachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.detach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Registers a filter provider for the the message popover
				 * 
				 * @param {function} fnProviderCallback function which will be called each time a new context
				 * is set for the object page. The function should return an instance of sap.ui.model.Filter,
				 * an array of sap.ui.model.Filter or a Promise which resolves to one of these.
				 * @public
				 */
				registerMessageFilterProvider: function(fnProvider) {
					oState.messageButtonHelper.registerMessageFilterProvider(fnProvider);
				},
				/**
				 * Get the navigation controller for navigation actions
				 *
				 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
				 * @public
				 */
				getNavigationController: function() {
					if (!oNavigationController) {
						oNavigationController = new NavigationController(oTemplateUtils, oController, oState);
					}
					return oNavigationController;
				},
				/**
				 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
				 * are fulfilled
				 *
				 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion 
				 * of the execution. If nothing is returned, immediate completion is assumed.
				 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
				 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to 
				 * false in case of immediate completion
				 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only 
				 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of 
				 * another function, that set the application busy 
				 * @param {boolean} [mParamters.dataloss.popup=true] Provides a dataloss popup before execution of the function if 
				 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
				 * @param {boolean} [mParamters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation, 
				 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup 
				 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
				 * @public
				 * @experimental 
				 */
				securedExecution: function(fnFunction, mParameters) {
					return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oState) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

			}
		});
	});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/Component",["../js/QuickTemplates/QuickTemplateComponentFactory", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper", "sap/ca/ui/utils/Lessifier"], function(QuickTemplateComponentFactory, AnnotationHelper, QCAnnotationHelper, Lessifier) {
    "use strict";

    return QuickTemplateComponentFactory.createQuickTemplateComponent("sap.suite.ui.generic.template.QuickCreate.Component", {

            metadata: {
                library: "sap.suite.ui.generic.template",
                properties: {
                    "viewName": {
                        "type": "string",
                        "defaultValue": "sap.suite.ui.generic.template.QuickCreate.view.QuickCreate"
                    }
                },
                "manifest": "json",
                "includes": ["css/custom.css"]
            },

            init: function() {
              Lessifier.lessifyCSS("sap.suite.ui.generic.template.QuickCreate", "css/custom.css", true);

            }
        });

});

}; // end of sap/suite/ui/generic/template/QuickCreate/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller",["../../js/QuickTemplates/QuickActionBaseController", "../../js/QuickTemplates/QuickCreateAPI", "sap/m/MessageToast",
    "../../js/QuickTemplates/AnnotationHelper", "sap/ui/model/odata/AnnotationHelper", "../../js/QuickTemplates/ODataModelHelper", "sap/ui/model/json/JSONModel", "sap/ui/model/Context"],
    function (BaseController, QuickCreateAPI, MessageToast, QCAnnotationHelper, ModelAnnotationHelper, ODataModelHelper, JSONModel, Context) {
    "use strict";

    var QCController = BaseController.extend("sap.suite.ui.generic.template.QuickCreate.view.QuickCreate", {

        onInit: function () {
            if (!this._bIsInitialized) {
                BaseController.prototype.onInit.apply(this);

                this.oQuickCreateAPI = this.oComponent.oQuickCreateAPI;

                this.oTransactionController = this.oComponent.getTransactionController();

                if (this.oQuickCreateAPI) {
                  this.oQuickCreateAPI.setRootView(this.getView());
                }

                this.sDraftEntityPath = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().draftid : undefined;
                this.bIsCreator = this.oQuickCreateAPI ? this.oQuickCreateAPI.isCurrentUserCreator() : true;
                this.sQuickCreateUserName = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().createdByName : "";

                this.bFormEnabled = !this.bDraftEnabled || this.bIsCreator;
                this._sDeferredGroupId = "QuickCreateChanges";

                var quickCreateModel = new JSONModel({});

                this._sQuickCreateUIModelName = "quickCreate";

                this.getView().setModel(quickCreateModel, this._sQuickCreateUIModelName);

                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/quickCreateUser", this.sQuickCreateUserName);

                if (!this.bDraftEnabled) {
                    this.getView().getModel().setDeferredGroups([this._sDeferredGroupId]);
                }

                // subscribe to line items found on quick create
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.attachAutofillLineItems(this._onLineItemsFound, this);
                }
            }
        },


        onExit: function () {

            if (this._bIsBeingDestroyed || this._bDestroyed) {
                return;
            }

            this._bIsBeingDestroyed = true;

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.destroy();
            }

            if (BaseController.prototype.onExit) {
                BaseController.prototype.onExit.apply(this);
            }

            this._bDestroyed = true;
            delete this._bIsBeingDestroyed;
        },

        onBeforeRendering: function () {
            BaseController.prototype.onBeforeRendering.apply(this);
            if (!this.getView().getModel("ui")) {
              var uiModel = new JSONModel({});
              this.getView().setModel(uiModel, "ui");
            }
            this.getView().getModel("ui").setProperty("/enabled", this.bFormEnabled);
            this.getView().getModel("ui").setProperty("/editable", true);
        },


        _onMetaModelLoaded: function () {
            var that = this;
            this.setBusy(true);

            if (this.sDraftEntityPath) {
                // Open Existing QuickCreate
                var oContext = new Context(this.getView().getModel(), this.sDraftEntityPath);

                if (this.bDraftEnabled && !this.bIsCreator) {
                    oContext._bLocalBinding = true;
                } else if (!this.bDraftEnabled) {
                    oContext._bLocalBinding = true;
                }

                if (oContext._bLocalBinding) {
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.loadQuickCreateModelFromJSON().then(jQuery.proxy(function () {
                            if (oContext.getObject()) {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            } else {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            }
                            this.bindView(oContext);
                        }, this));
                    }
                } else {
                    //check if draft still exists
                    this.getView().getModel().read(this.sDraftEntityPath, {

                        success: jQuery.proxy(function (oData, oResponse) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            this.bindView(oContext);
                        }, this),

                        error: jQuery.proxy(function (oError) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            this.bindView(oContext);
                        }, this)

                    });
                }
            } else if (this.bDraftEnabled) {
                    // create new Draft case
                    this.oDraftController.createNewDraftEntity(this.sEntitySet, "/" + this.sEntitySet).then(function (oResponse) {
                        if (that.oQuickCreateAPI) {
                            that.oQuickCreateAPI.updateDraftID(oResponse.context.getPath());
                        }

                        that.bindView(oResponse.context);

                    }, jQuery.proxy(this.onError, this));

             } else {
                    // create new non-Draft case
                    var context = this.getView().getModel().createEntry("/" + this.sEntitySet, {groupId: this._sDeferredGroupId});
                    context._bLocalBinding = true;
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.updateDraftID(context.getPath());
                    }
                    this._initializeObject(context, "FieldGroup");
                    this.bindView(context);
             }


        },

        onChange: function (oEvent) {
            if (this.bDraftEnabled) {
              var oBinding = this.getView().getElementBinding();
              var modifyPromise = new Promise(jQuery.proxy(function(resolve, reject) {
                var sEntitySet = this.oComponent.getEntitySet();
                var sValue = oEvent.getSource().getBindingPath("value");
                var oControl = oEvent.getSource();
                var oServiceController = null;
                if (oControl) {
                  oServiceController = this.oComponent.getApplicationController();
                } else {
                  oServiceController = this.oComponent.getTransactionController();
                }

                oServiceController.propertyChanged(sEntitySet, sValue, oBinding, oControl).then(
                        function(){
                            if (resolve) {
                              resolve();
                            }
                        },
                        function(){
                            if (reject) {
                              reject();
                            }
                        });
              }, this));

              modifyPromise.then(function(){
                oBinding.refresh();
              });
            }
        },

        onCreatePress: function (evt) {
            var that = this;
            this._createButton = evt.getSource();
            this._createButton.setEnabled(false);
            this.setBusy(true);


            var resolve = function (oResponse) {
                that.setBusy(false);
                var context = null;

                // search for odata entities in response
                var objects = [];

                var params = {
                    key: "__metadata",
                    matchCallback: function (parent, current, match) {
                        objects.push(current);
                        return false;
                    }
                };

                ODataModelHelper.findObjects(oResponse, params);


                var entityType = that.oEntityTypeMeta.namespace + "." + that.oEntityTypeMeta.name;
                jQuery.each(objects, function (i, obj) {
                    if (!context && obj.__metadata && obj.__metadata.type === entityType) {
                        var key = that.getView().getModel().getKey(obj);
                        context = new Context(that.getView().getModel(), "/" + key);
                    }
                });

                if (context) {
                    MessageToast.show(that.formatI18NMessage("QuickCreate_Success_CreateObject"));
                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.objectCreated(context);
                    }
                } else {
                    this._showErrorMessage({message: that.formatI18NMessage("QuickCreate_No_Created_Object")});
                }
            };

            var reject = function (oError) {
                that.setBusy(false);
                if (that._createButton) {
                    that._createButton.setEnabled(true);
                }
                that.onError(oError);
            };

            if (this.bDraftEnabled) {
                this.oDraftController.activateDraftEntity(this.getView().getBindingContext()).then(resolve, reject);
            } else {

                var context = this.getView().getBindingContext();
                var oModelObject = this.getView().getModel().getProperty(context.getPath(), context, /* make sure to expand all nav properties */ true);


                // remove "results" arrays from object by setting the array directly as the navigation property
                var params = {
                    key: "results",
                    matchCallback: function(parent, current, match) {
                        if (current.__nestedKey && Array.isArray(match)) {
                            parent[current.__nestedKey] = match;
                        }
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);


                // delete all "__metadata" properties from objects
                params = {
                    key: "__metadata",
                    matchCallback: function(parent, current, match) {
                        delete current["__metadata"];
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);

                this.getView().getModel().create("/" + this.sEntitySet, oModelObject, {
                    success: resolve,
                    error: reject
                });
            }
        },

        onAddLineItemPress: function (oEvent) {
            this._getLineItemsTableFromEvent(oEvent);
            var that = this;
            this.setBusy(true);
            var context = this.getView().getBindingContext();

            var createLineItem = function(submitChangesResponse) {
                that._createLineItem(context).then(function (oCreateResponse) {
                    that._refreshLineItems();

                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.calculateViewHeight(that.getView(), true);
                    }
                    that.setBusy(false);

                }, jQuery.proxy(that.onError, that));
            };

            if (this.bDraftEnabled) {
                this.oTransactionController.triggerSubmitChanges().then(function (oSubmitResponse) {
                    createLineItem(oSubmitResponse);
                }, jQuery.proxy(this.onError, this));
            } else {
                createLineItem();
            }
        },

        onRemoveLineItemPress: function (oEvent) {
            var that = this;
            this.setBusy(true);
            var context = oEvent.getSource().getBindingContext();

            if (this.bDraftEnabled) {
                this.oTransactionController.triggerSubmitChanges().then(function (oResponse) {
                    that._deleteLineItem(context);
                }, jQuery.proxy(function (oError) {
                    this.setBusy(false);
                    this.onError(oError);

                }, this));
            } else {
                this.getView().getModel().deleteCreatedEntry(context);
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }
                this._refreshLineItems();

            }
        },


        bindView: function (oContext) {
            this.setBusy(false);

            if (this.getView().getModel(this._sQuickCreateUIModelName).getProperty("/draftExists") === false) {
                return;
            }

            if (oContext._bLocalBinding) {
                    this._setBindingContext(oContext);

                    if (!this.bFormEnabled) {
                        // no backend requests in read-only mode
                        if (typeof this.getView().getModel()._submitRequest === 'function') {
                            this.getView().getModel()._submitRequest = function () {};
                        }
                    }

                    this._refreshLineItems();
            } else {
                BaseController.prototype.bindView.apply(this, arguments);
            }

            this._updateFieldControl(oContext);

        },

        hasLineItemAnnotation: function () {
            var oInterface = this._getFormatterInterface();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            return oMetaDataContext !== null;
        },

        _onLineItemsFound: function (oEvent) {
            if (!this.hasLineItemAnnotation()) {
                return;
            }

            var numberLineItems = oEvent.getParameter("numberOfLineItems");
            if (numberLineItems <= 0) {
                return;
            }

            this.setBusy(true);
            var oMainEntityContext = this.getView().getBindingContext();
            var promises = [];
            for (var i = 0; i < numberLineItems; i++) {
                promises.push(this._createLineItem(oMainEntityContext));
            }

            Promise.all(promises).then(jQuery.proxy(function (result) {
                this._refreshLineItems();
                this.setBusy(false);
            }, this));
        },

        _createLineItem: function (oMainEntityContext) {
            var that = this;
            var oInterface = this._getFormatterInterface(oMainEntityContext);

            var oMetaModel = this.getView().getModel().getMetaModel();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            var sChildPropertyPath = ModelAnnotationHelper.getNavigationPath(oMetaDataContext);
            sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
            var oListEntityAssociationEnd = oMetaModel.getODataAssociationEnd(this.oEntityTypeMeta, sChildPropertyPath);
            var oListEntityTypeMeta = oMetaModel.getODataEntityType(oListEntityAssociationEnd.type);


            if (this.bDraftEnabled) {
                return this.oDraftController.createNewDraftEntity(oListEntityTypeMeta.name, oMainEntityContext.sPath + "/" + sChildPropertyPath);
            } else {
                return new Promise(function (resolve, reject) {
                    var context = that.getView().getModel().createEntry(oMainEntityContext.sPath + "/" + sChildPropertyPath, {groupId: that._sDeferredGroupId});
                    that._initializeObject(context, "LineItem");
                    resolve(context);
                });
            }
        },

        _deleteLineItem: function (oContext) {
            this.oTransactionController.deleteEntity(oContext).then(jQuery.proxy(function (oResponse) {
                this._refreshLineItems();
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }

            }, this), jQuery.proxy(function (oError) {
                this.setBusy(false);
                this.onError(oError);

            }, this));
        },


        _onSmartFieldAfterRendering: function (oEvent) {
            if (typeof oEvent.srcControl.setEnabled == 'function') {
                oEvent.srcControl.setEnabled(this.bFormEnabled);
            }

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.calculateViewHeight(this.getView(), true);
            }

            // remove element style so that we can style it via the CSS classes
            jQuery(".copilotQuickCreateContainerBox .sapQuickCreateFieldGroup label").css("text-align", "");

            jQuery(".sapQuickActionCreateButtonContainer > div").addClass("sapUiSmallMarginEnd");
            jQuery(".sapQuickActionCreateButtonContainer .sapMBtnInner").css("padding", "0");
        },

        _refreshLineItems: function() {
          if (this._lineItemsTable) {
            var context = this.getView().getBindingContext();
            if (context && context._bLocalBinding) {
              ODataModelHelper.restoreLineItemReferences(this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, context);
              this._lineItemsTable.getModel().updateBindings();
            } else {
              this._lineItemsTable.getModel().refresh();
            }
          }
        },

        onTableUpdateStarted: function (oEvent) {
            this._getLineItemsTableFromEvent(oEvent);

        },

        _getLineItemsTableFromEvent: function(oEvent) {
            if (!this._lineItemsTable && oEvent && oEvent.getSource) {
              var current = oEvent.getSource();
              while (current) {
                if (current instanceof sap.m.Table) {
                  this._lineItemsTable = current;
                  return;
                }

                if (typeof current.getParent === 'function') {
                  current = current.getParent();
                } else {
                  return;
                }
              }
            }
        },


        onTableUpdateFinished: function (oEvent) {
            // ensure header fields are editable in case Field control is overwriting this
            this._updateFieldControl();

        },

        _initializeObject: function(oContext, facetType) {

            var oMainContext = this.getView().getBindingContext() ? this.getView().getBindingContext() : oContext;

            var propertyPaths = QCAnnotationHelper.getAllPropertyPathsFromFacet(oMainContext, facetType);
            if (propertyPaths && propertyPaths.length > 0) {
                ODataModelHelper.initializeObjectProperties(oContext, propertyPaths, {groupId: this._sDeferredGroupId});
            }

        },

        _updateFieldControl: function (oContext) {
            // Find out more how to handle this, for now make sure header fields are editable!
            var context = oContext ? oContext : this.getView().getBindingContext();
            if (context && this.getView().getModel().getProperty(context.getPath() + "/Update_mc") !== undefined) {
                this.getView().getModel().setProperty(context.getPath() + "/Update_mc", true);
            }
        }

    });

    return QCController;

}, /* bExports */ true);

}; // end of sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickView/Component",["../js/QuickTemplates/QuickTemplateComponentFactory", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper", "sap/ca/ui/utils/Lessifier"], function(QuickTemplateComponentFactory, AnnotationHelper, QCAnnotationHelper, Lessifier) {
    "use strict";

    return QuickTemplateComponentFactory.createQuickTemplateComponent("sap.suite.ui.generic.template.QuickView.Component", {

            metadata: {
                library: "sap.suite.ui.generic.template",
                properties: {
                    "viewName": {
                        "type": "string",
                        "defaultValue": "sap.suite.ui.generic.template.QuickView.view.QuickView"
                    }
                },
                "manifest": "json",
                "includes": ["css/custom.css"]
            },

            init: function() {
              Lessifier.lessifyCSS("sap.suite.ui.generic.template.QuickView", "css/custom.css", true);

            }
        });

});

}; // end of sap/suite/ui/generic/template/QuickView/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.view.QuickView.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.view.QuickView.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickView/view/QuickView.controller",["sap/ui/model/Context", "../../js/QuickTemplates/QuickActionBaseController", "../../js/QuickTemplates/AnnotationHelper", "../../js/QuickTemplates/ODataModelHelper", "sap/ui/model/json/JSONModel"], function(Context, BaseController, AnnotationHelper, ODataModelHelper, JSONModel) {
	"use strict";


	return BaseController.extend("sap.suite.ui.generic.template.QuickView.view.QuickView", {

		onInit: function() {
			if (!this._bIsInitialized) {
				BaseController.prototype.onInit.apply(this);
				this.sEntityPath = decodeURIComponent(this.oComponent.getComponentData().startupParameters["entityPath"]);
				this.sEntityPath = "/" + ODataModelHelper.createKeyFromPath(this.sEntityPath, this.getView().getModel().getMetaModel(), this.sEntitySet);
				var badgeModel = new JSONModel({});
				badgeModel.setProperty("/badgeVisible", false);
				badgeModel.setProperty("/fallbackBadgeVisible", false);
				this._sBadgeModelName = "badge";

				this.getView().setModel(badgeModel, this._sBadgeModelName);
			}
		},

		_onMetaModelLoaded: function() {
			var oContext = new Context(this.getView().getModel(), this.sEntityPath);
			this.bindView(oContext);

			oContext.getModel().attachRequestCompleted(this._resolveBadgeModel, this);
		},

		bindView: function(oContext) {
			var oInterface = this._getFormatterInterface(oContext);

			var facetPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "FieldGroup");
			var heuristicPaths = AnnotationHelper.getNavigationPathsUsingAnnotationHeuristics(oContext, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name);

			var oCombined = {};
			jQuery.each(facetPaths, function(index, path) {
				oCombined[path] = "";
			});

			jQuery.each(heuristicPaths, function(index, path) {
				oCombined[path] = "";
			});

			var expandParam = AnnotationHelper.formatExpandPaths(Object.keys(oCombined));

			this.oContext = oContext;

			this.getView().bindElement({
				path: oContext.getPath(),
				parameters: {
					expand: expandParam
				}
			});

		},

		_resolveBadgeModel: function() {
			if (this._badgeResolved) {
				this.oContext.getModel().detachRequestCompleted(this._resolveBadgeModel, this);
				return;
			}
			var oContext = this.oContext;

			var ContextualManagedObject = this.oComponent.ContextualManagedObject;
			var badgeModel = this.getView().getModel(this._sBadgeModelName);
			if (ContextualManagedObject) {
				var oContextualManagedObject = new ContextualManagedObject({
					serviceUrl: (oContext.getModel().sServiceUrl) ? oContext.getModel().sServiceUrl : null,
					path: oContext.getPath(),
					entitytype: this.oEntitySetMeta.entityType,
					uiGroup: "Main Object",
					priority: "1"
				});

				// need to set model and binding context on managed object
				oContextualManagedObject.setModel(oContext.getModel());
				oContextualManagedObject.setBindingContext(oContext);
				oContextualManagedObject.resolveAnnotations();

				badgeModel.setProperty("/imgUrlDefined", (oContextualManagedObject.getProperty("imgUrl") != undefined && oContextualManagedObject.getProperty("imgUrl").indexOf("sap-icon") < 0));
				badgeModel.setProperty("/imgUrl", oContextualManagedObject.getProperty("imgUrl"));

				badgeModel.setProperty("/typeImgUrlDefined", (oContextualManagedObject.getProperty("typeImgUrl") != undefined && !badgeModel.getProperty("/imgUrlDefined")));
				badgeModel.setProperty("/typeImgUrl", oContextualManagedObject.getProperty("typeImgUrl"));

				if (!badgeModel.getProperty("/imgUrlDefined") && !badgeModel.getProperty("/typeImgUrlDefined")) {
					badgeModel.setProperty("/typeImgUrl", "sap-icon://form");
					badgeModel.setProperty("/typeImgUrlDefined", true);
				}

				badgeModel.setProperty("/title", oContextualManagedObject.getProperty("title"));
				if (oContextualManagedObject.getProperty("typeName")) {
					badgeModel.setProperty("/typeName", oContextualManagedObject.getProperty("typeName"));
				} else if (oContextualManagedObject.getProperty("titleMetadata") && oContextualManagedObject.getProperty("titleMetadata")["sap:label"]) {
					badgeModel.setProperty("/typeName", oContextualManagedObject.getProperty("titleMetadata")["sap:label"]);
				} else {
					badgeModel.setProperty("/typeName", "");
				}
				badgeModel.setProperty("/subtitle", oContextualManagedObject.getProperty("headline"));
				badgeModel.setProperty("/badgeVisible", true);

			} else {
				badgeModel.setProperty("/fallbackBadgeVisible", true);
			}
			this._badgeResolved = true;
		}

	});
}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/QuickView/view/QuickView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.BusyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/BusyHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/suite/ui/generic/template/lib/MessageUtils", "sap/suite/ui/generic/template/lib/testableHelper"],
	function(jQuery, BaseObject, MessageUtils, testableHelper) {
		"use strict";

		// Class for busy handling
		// This class enables the notion of a 'busy session'.
		// More precisely: At each point in time the app is either in a busy session or is not.
		// Reasons for being in a busy session can be set by calling methods setBusy or setBusyReason (see below).
		// Note that each busy reason has a lifetime.
		// A new busy session is started, as soon as the two following two conditions are fulfilled:
		// - The app is currently not in a busy session
		// - There is at least one (living) busy reason
		// A busy session potentially ends when the number of living busy reasons is reduced to zero. However, the end of the busy session is
		// potponed until a navigation which is currently active has finished and the current thread execution has come to an end. When a new
		// busy reason has been set meanwhile (and is still alive) the busy session is prolonged accordingly.
		//
		// The following features are connected to a busy session:
		// - A busy indication is displayed while the app is in a busy session. This busy indication may either be displayed immediately or with the standard
		//   busy delay (can be parametrized when setting the busy reason)
		// - When a busy session starts all transient messages are removed from the Apps message model
		// - When a busy session ends all transient messages being contained in the message model are displayed to the user and removed from the message model
		// Moreover, this class provides the possibility to interact with busy sessions/reasons (see methods isBusy and getUnbusy).
		function getMethods(oTemplateContract) {
			var mBusyReasons = {}; // currently living busy reasons of type string
			var bIsBusy = false; // is the app in a busy session
			var bBusyDirty = false; // is it already ensured that fnApplyBusy will be called
			var iBusyPromiseCount = 0; // number of currently living busy reasons of type Promise
			var iBusyDelay = oTemplateContract.oNavigationHost.getBusyIndicatorDelay(); // standard busy delay of the App
			var oUnbusyPromise = Promise.resolve(); // a Promise which is resolved as soon as no busy session is running
			var fnUnbusyResolve = jQuery.noop; // function to be called when the current busy session ends

			// Returns information whether there is currently a living busy reason
			function isBusy(){
			    return iBusyPromiseCount !== 0 || !jQuery.isEmptyObject(mBusyReasons);    
			}
			
			var fnApplyBusyImmediately; // declare here to avoid use before declaration. Function that calls fnApplyBusy with bImmediate = true.
			// This function has the following tasks:
			// - If a busy session is running but no busy reason is available -> end the busy session (and thus display transient messages)
			// - Is a busy session is running set the app to busy, otherwise set it to unbusy
			// Note that ending the busy session will be postponed if a navugation is currently active and parameter bImmediate is false.
			// In this case the busy session might be prolonged if a new busy reason is set in the meantime
			function fnApplyBusy(bImmediate) {
				var bIsBusyNew = isBusy();
				if (bIsBusyNew || bImmediate) {
					bBusyDirty = false;
					oTemplateContract.oNavigationHost.setBusy(bIsBusyNew);
					jQuery.sap.log.info("Physical busy state has been changed to " + bIsBusyNew);
					if (bIsBusyNew !== bIsBusy) {
						bIsBusy = bIsBusyNew;
						if (!bIsBusy){ // end of a busy session 
							oTemplateContract.oNavigationHost.setBusyIndicatorDelay(iBusyDelay);
							MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment);
							fnUnbusyResolve();
						}
					}
				} else { // postpone removal of busy indicator until navigation visualisation is finished
					var oNavigationFinishedPromise = oTemplateContract.oNavigationObserver.getProcessFinished(true);
					oNavigationFinishedPromise.then(fnApplyBusyImmediately, fnApplyBusyImmediately);
				}
			}
			fnApplyBusyImmediately = fnApplyBusy.bind(null, true);

			// Ensure that method fnApplyBusy is called
			// If bImmediate is true the busy delay is temporarily set to 0 and fnApplyBusy is called synchronously.
			// Otherwise the call of fnApplyBusy is postponed until the current thread is finished.
			function fnEnsureApplyBusy(bImmediate) {
				if (bImmediate) {
					oTemplateContract.oNavigationHost.setBusyIndicatorDelay(0);
					fnApplyBusy();
				} else if (!bBusyDirty) {
					bBusyDirty = true;
					setTimeout(fnApplyBusy, 0);
				}
			}

			// function to be called when any Promise that serves as a busy reason is settled
			function fnBusyPromiseResolved() {
				iBusyPromiseCount--;
				if (!iBusyPromiseCount) {
					fnEnsureApplyBusy(false);
				}
			}
			
			// this method is called when a busy reason is set. It starts a busy session unless the App is already in a busy session.
			function fnMakeBusy(){
				if (bIsBusy){
					return;  // App is already in a busy session
				}
				// Start a new busy session
				bIsBusy = true;
				oUnbusyPromise = new Promise(function(fnResolve){ 
					fnUnbusyResolve = fnResolve; 
				});
				// All transient messages still being contained in the message model belong to previous actions.
				// Therefore, we remove them. If they have not been shown yet, it is anyway to late to show them when this busy session has ended.
				MessageUtils.removeTransientMessages();
			}

			// Sets or resets a busy reason of type string (parameter sReason).
			// Parameter bIsActive determines whether the busy reason is set or reset.
			// Note that resetting a reason applies to all living reasons using the same string (so calling this method with the same reason does not accumulate)
			// bImmediate is only evaluated when bIsActive is true. In this case it determines whether the busy indication should be displayed immediately or with
			// the usual delay.
			// Note that it is preferred to use method setBusy to set a busy reason
			function setBusyReason(sReason, bIsActive, bImmediate) {
				if (bIsActive) {
					fnMakeBusy();
					mBusyReasons[sReason] = true;
				} else {
					delete mBusyReasons[sReason];
				}
				fnEnsureApplyBusy(bImmediate);
			}

			// Sets a Promise (oBusyEndedPromise) as busy reason. This busy reason is alive until the promise is settled.
			// bImmediate determines whether the busy indication should be displayed immediately or with the usual delay.
			// Edge case: oBusyEndedPromise is already settled when this method is called (and the app is currently not in a busy session).
			// In this case, nevertheless a (probably short-living) busy session is started, such that the interaction with the message model is as defined above
			function setBusy(oBusyEndedPromise, bImmediate) {
				iBusyPromiseCount++;
				fnMakeBusy();
				oBusyEndedPromise.then(fnBusyPromiseResolved, fnBusyPromiseResolved);
				fnEnsureApplyBusy(bImmediate);
			}

			return {
				setBusyReason: setBusyReason,
				setBusy: setBusy,
				isBusy: isBusy,
				getUnbusy: function(){ // returns a Promise that is resolved as soon as the App is not in a busy session
				    return oUnbusyPromise;
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.BusyHelper", {
			constructor: function(oTemplateContract) {
				jQuery.extend(this, (testableHelper.testableStatic(getMethods, "BusyHelper"))(oTemplateContract));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/BusyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CRUDHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CRUDHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CRUDHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/model/Context", "sap/suite/ui/generic/template/lib/MessageUtils"],
	function(jQuery, BaseObject, Context, MessageUtils) {
		"use strict";

		function create(oDraftController, sEntitySet, sBindingPath, oModel, setEditableNDC) {
			sBindingPath = sBindingPath || "/" + sEntitySet;
			return new Promise(function(resolve, reject) {
				if (oDraftController.getDraftContext().isDraftEnabled(sEntitySet)) {
					oDraftController.createNewDraftEntity(sEntitySet, sBindingPath).then(function(oResponse) {
						resolve(oResponse.context);
					}, function(oError) {
						reject(oError);
					});
				} else {
					setEditableNDC(true);
					return resolve(oModel.createEntry(sBindingPath, {
						batchGroupId: "Changes",
						changeSetId: "Changes"
					}));
				}
			});
		}

		function fnReadDraftAdminstrativeData(oModel, sBindingPath, oTemplateContract) {
			var oPromise = new Promise(function(resolve, reject) {
				oModel.read(sBindingPath, {
					urlParameters: {
						"$expand": "DraftAdministrativeData"
					},
					success: function(oResponse) {
						resolve(oResponse);
					},
					error: function(oResponse) {
						reject(oResponse);
					}
				});
			});
			// not really needed for navigation (as there is always another promise still running), but maybe for internal
			// edit - and it doesn't hurt anyway
			oTemplateContract.oBusyHelper.setBusy(oPromise, true);
			return oPromise;
		}

		/*
		 * Calls the propertyChanged method in the transaction controller and takes care of error handling
		 *
		 * @param {string} sPath Path to the changed property
		 * @param {sap.ui.model.Context} oContext The given binding context
		 * @param {object} oTemplateContract Reference to TemplateContract
		 * @returns {Promise} A <code>Promise</code> for asynchronous execution
		 * @private
		 */
		function propertyChange(sPath, oContext, oTemplateContract, oAppComponent) {
			var oApplicationController = oAppComponent.getApplicationController();

			if (!oApplicationController.getTransactionController().getDraftController().getDraftContext().hasDraft(oContext)) {
				return Promise.resolve();
			}

			return oApplicationController.propertyChanged(sPath, oContext).catch(
				function(oError) {
					/* TODO: change handleError API
				 we anyway want to modify the API for the handleError method. Until then we use the
				 mParameters to pass the needed resourceBundle and navigation Controller
							 */
							 
					oTemplateContract.oApplicationProxy.getResourceBundleForEditPromise().then(function(oResourceBundle){		 
						var oNavigationController = oAppComponent.getNavigationController();
						var oModel = oAppComponent.getModel();

						MessageUtils.handleError(MessageUtils.operations.modifyEntity, null, null, oError, {
							resourceBundle: oResourceBundle,
							navigationController: oNavigationController,
							model: oModel
						});

						MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment);
					});
				}
			);
		}

		function fnUnsavedChangesDialog(oTemplateContract, oDraftAdministrativeData, fnBeforeDialogCallback) {
			return new Promise(function(resolve, reject) {
				var oUnsavedChangesDialog = oTemplateContract.oApplicationProxy.getDialogFragment(
					// todo: To avoid this undesired call from lib to object page, maybe the fragment should be moved to lib
					"sap.suite.ui.generic.template.ObjectPage.view.fragments.UnsavedChangesDialog", {
						onEdit: function() {
							oUnsavedChangesDialog.close();
							resolve();
						},
						onCancel: function() {
							oUnsavedChangesDialog.close();
							reject();
						}
					}, "Dialog");
				var sUnsavedChangesQuestion = oTemplateContract.getText("DRAFT_LOCK_EXPIRED", [oDraftAdministrativeData.LastChangedByUserDescription ||
					oDraftAdministrativeData.LastChangedByUser
				]);
				oUnsavedChangesDialog.getModel("Dialog").setProperty("/unsavedChangesQuestion", sUnsavedChangesQuestion);
				// promise from navigation controller needs to be resolved, as otherwise busyHelper would block the dialog
				(fnBeforeDialogCallback || jQuery.noop)();
				oTemplateContract.oBusyHelper.getUnbusy().then(function() {
					oUnsavedChangesDialog.open();
				});
			});
		}

		function edit(oTransactionController, sEntitySet, sBindingPath, oModel, oTemplateContract,
			fnBeforeDialogCallback) {
			var oDraftContext = oTransactionController.getDraftController().getDraftContext();
			var oBindingContext = new Context(oModel, sBindingPath);
			if (oDraftContext.isDraftEnabled(sEntitySet)) {
				// todo: enable preserveChanges
				if (true || !oDraftContext.hasPreserveChanges(oBindingContext)) {
					return new Promise(function(resolve, reject) {
						fnReadDraftAdminstrativeData(oModel, sBindingPath, oTemplateContract).then(
							function(oResponse) {
								if (!oResponse.DraftAdministrativeData || oResponse.DraftAdministrativeData.DraftIsCreatedByMe) {
									// no or own draft
									resolve(oTransactionController.editEntity(oBindingContext, false));
								} else if (oResponse.DraftAdministrativeData.InProcessByUser) { // locked
									reject({
										lockedByUser: oResponse.DraftAdministrativeData.InProcessByUserDescription || oResponse.DraftAdministrativeData.InProcessByUser
									});
								} else { // unsaved changes
									fnUnsavedChangesDialog(oTemplateContract, oResponse.DraftAdministrativeData,
										fnBeforeDialogCallback).then(
										function() {
											resolve(oTransactionController.editEntity(oBindingContext, false));
										},
										function() {
											reject({
												lockedByUser: oResponse.DraftAdministrativeData.LastChangedByUserDescription || oResponse.DraftAdministrativeData.LastChangedByUser
											});
										});
								}
							},
							function(oResponse) {
								// DraftAdminData read failed
								reject({
									draftAdminReadResponse: oResponse
								});
							});

					});
				}
			} else {
				oTemplateContract.oApplicationProxy.setEditableNDC(true);
				return Promise.resolve({
					context: oBindingContext
				});
			}
		}

		return {
			create: create,
			edit: edit,
			propertyChange: propertyChange
		};
	}
);
}; // end of sap/suite/ui/generic/template/lib/CRUDHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CRUDManager') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CRUDManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ActionUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CRUDManager",["jquery.sap.global", "sap/ui/base/Object", "sap/m/MessageToast", "sap/ui/generic/app/util/ModelUtil",
		"sap/ui/generic/app/util/ActionUtil",
		"sap/suite/ui/generic/template/lib/MessageUtils", "sap/m/MessageBox", "sap/suite/ui/generic/template/lib/CRUDHelper",
		"sap/suite/ui/generic/template/lib/testableHelper",
		"sap/m/Table", "sap/ui/table/AnalyticalTable"
	],
	function(jQuery, BaseObject, MessageToast, ModelUtil, ActionUtil, MessageUtils, MessageBox, CRUDHelper, testableHelper, Table,
		AnalyticalTable) {
		"use strict";

		var oRejectedPromise = Promise.reject();
		oRejectedPromise.catch(jQuery.noop);

		function getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {

			function handleError(sOperation, reject, oError, mParameters) {
				MessageUtils.handleError(sOperation, oController, oServices, oError, mParameters);
				return (reject || jQuery.noop)(oError);
			}

			function handleSuccess() {
				MessageUtils.handleTransientMessages(oServices.oApplication.getDialogFragmentForView.bind(null, null));
			}

			var fnEditEntityImpl; // declare function already here, to avoid usage before declaration
			// This method is called to check about drafts of other users for the entity to be edited.
			// It returns a promise that is settled when this question has been clarified.
			// Actually there are two scenarios in which this method can be called:
			// - If oError is faulty the method is called at the beginning of the editing process. In this case this method
			//   must find out whether
			//   a) Another user possesses a locking draft for the entity -> promise is rejected
			//   b) Another user possesses a non-locking draft for the entity -> promise is resolved as described for function editEntity (see below)
			//   c) No draft exists for this object -> promise is resolved to an empty object
			// - If oError is truthy the back-end has already been called in order to create an edit draft. Thereby the preserveChange-mode was used (see below).
			//   This backend call returned the information that another user possesses a (locking or non-locking) draft for the entity.
			//   oError is the object that was returned from the backend. In this case this method must find out whether
			//   a) The corresponding draft is locking -> promise is rejected
			//   b) The corresponding draft is non-locking -> promise is resolved as described for function editEntity (see below)
			//   c) The draft has meanwhile disappeared (edge case) -> in this case the promise should also resolve as described for function editEntity. Therefore, the function is called once more.
			// In both scenarios in case a) this method is also responsible for error handling. Note that there is a subtle difference between these scenarios in this case.
			// In the second scenario the error message that should be presented to the user can be taken from oError (and thus comes from the backend)
			// In the first scenario the error message is created locally.
			function checkForForeignUserLock(oError) {
				return new Promise(function(resolve, reject) {
					var oComponent = oController.getOwnerComponent();
					// check whether Draft exists
					var oBindingContext = oComponent.getBindingContext();
					var oModel = oComponent.getModel();
					oModel.read(oBindingContext.getPath(), {
						urlParameters: {
							"$expand": "DraftAdministrativeData"
						},
						success: function(oResponseData) {
							if (!oResponseData.DraftAdministrativeData) { // no draft exists for the object at all
								if (oError) { // It seems that the draft that was responsible for producing oError has meanwhile vanished -> Restart the process (edge case)
									//return fnEditEntityImpl(false).then(resolve);
									return handleError(MessageUtils.operations.editEntity, reject, oError);
								}
								return resolve({});
							}
							if (oResponseData.DraftAdministrativeData.InProcessByUser) { // locked by other user
								var sUserDescription = oResponseData.DraftAdministrativeData.InProcessByUserDescription || oResponseData.DraftAdministrativeData
									.InProcessByUser;
								oError = oError || new Error(oCommonUtils.getText("ST_GENERIC_DRAFT_LOCKED_BY_USER", [" ", sUserDescription]));
								return handleError(MessageUtils.operations.editEntity, reject, oError, oError);
							}
							return resolve({
								draftAdministrativeData: oResponseData.DraftAdministrativeData
							}); // draft for other user exists but is no lock anymore
						},
						error: handleError.bind(null, MessageUtils.operations.editEntity, reject)
					});
				});
			}

			// This method is called in order to call method editEntity on the TransactionController. It returns a promise as described
			// in the description of method editEntity (see below).
			// Parameter oPrereadData is an object that possily contains administrative data which have already been retrieved.
			// More precisely this object is either empty or contains a property draftAdministrativeData.
			// In this second case the promise returned by this method should just resolve to oPrereadData.
			function fnCallEdit(bIsDraftEnabled, bUnconditional, oPrereadData) {
				if (oPrereadData.draftAdministrativeData) {
					return Promise.resolve(oPrereadData);
				}
				return new Promise(
					function(resolve, reject) {
						oServices.oTransactionController.editEntity(oController.getView().getBindingContext(), !bUnconditional)
							.then(
								function(oResponse) { //success
									oComponentUtils.rebindHeaderData(oResponse.context.getPath());
									handleSuccess(oResponse);
									return resolve({
										context: oResponse.context
									});
								},
								function(oResponse) { // error handler
									if (oResponse && oResponse.response && oResponse.response.statusCode === "409" && bIsDraftEnabled && !bUnconditional) { //there might be unsaved changes
										//remove transient message associated with rc 409 in order to prevent message pop-up
										MessageUtils.removeTransientMessages();
										// var oMesssageManager = sap.ui.getCore().getMessageManager();
										// var aMessages =  oMesssageManager.getMessageModel().getData();
										// var aMessagesToBeRemoved = [];
										// for (var i = 0; i < aMessages.length; i++) {
										// 	 if (aMessages[i].getCode() === "SDRAFT_COMMON/000") {
										// 		 aMessagesToBeRemoved.push(aMessages[i]);
										// 	 }
										// }
										// if (aMessagesToBeRemoved.length > 0) {
										// 	oMesssageManager.removeMessages(aMessagesToBeRemoved);
										// }
										return checkForForeignUserLock(oResponse).then(resolve, reject);
									} else {
										handleError(MessageUtils.operations.editEntity, reject, oResponse, oResponse);
									}
								}
							);
					}
				);
			}

			// This method implements main functionality of  editEntity (see below). Only busy handling is not done in this function.
			fnEditEntityImpl = function(bUnconditional) {
				var bIsDraftEnabled = oCommonUtils.isDraftEnabled();
				var oRet;
				var oComponent = oController.getOwnerComponent();
				var oBindingContext = oComponent.getBindingContext();
				if (bIsDraftEnabled && !bUnconditional) {
					// In this case we must ensure that a non-locking draft of another user is not overwritten without notice.
					// There are two strategies for that:
					// - First read the draft administrative data in order to check for this information
					// - Call backend to create draft in a mode where every draft of another user is consideres as a lock
					// The second possibility is preferred. However it is only suitable when the OData Service supports this mode (called preserveChange-mode)
					var oDraftContext = oServices.oDraftController.getDraftContext();
					var bPreserveChanges = oDraftContext.hasPreserveChanges(oBindingContext);
					if (!bPreserveChanges) { // Must use strategy 1 -> first check for Foreign user locks then start editing
						oRet = checkForForeignUserLock().then(fnCallEdit.bind(null, true, true));
					}
				}
				// In non-draft case and in draft cases with strategy 2 call edit functionality directly
				oRet = oRet || fnCallEdit(bIsDraftEnabled, bUnconditional, {});
				if (bIsDraftEnabled) {
					oServices.oApplication.editingStarted(oBindingContext, oRet);
				}
				return oRet;
			};

			// This method is called when a user starts to edit the active entity.
			// This method deals with busy handling and sensing error messages, but not with other dialogs.
			// Parameter bUnconditional specifies whether the user has already confirmed that he is willing to overwrite other users non-locking drafts.
			// The method returns a promise.
			// The promise is rejected when the user must not edit the object (which may be caused by tecnical or semantical problems).
			// In this case error handling has been performed by this method.
			// The promise is resolved to an object with property 'draftAdministrativeData' when there exists a non-locking draft of another user (this can only be the case when bUnconditional is false)
			// In this case this property contains the draft administrative data of the non-locking draft.
			// The promise is resolved to an object with property 'context' when the editing can start.
			// In this case this property contains the context of the entity to be edited.
			function editEntity(bUnconditional) {
				if (oBusyHelper.isBusy()) {
					return oRejectedPromise;
				}
				var oRet = fnEditEntityImpl(bUnconditional);
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			function getDeleteEntityPromise(bIsActiveEntity, bHasActiveEntity, oContext, bDeleteDraftForActiveEntity, bNoMessageToast) {
				var oRet = new Promise(
					function(resolve, reject) {
						var fnError = function(oError) {
							oController.getOwnerComponent().getComponentContainer().bindElement(oContext.getPath());
							return handleError(MessageUtils.operations.deleteEntity, reject, oError);
						};
						if (bIsActiveEntity && bDeleteDraftForActiveEntity) {
							// Current context is the active document. But we have to
							// delete the draft of this active document.
							oServices.oDraftController.getDraftForActiveEntity(oContext).then(
								function(oResponse) {
									oServices.oTransactionController.deleteEntity(oResponse.context).then(
										function() {
											if (!bNoMessageToast) {
												oServices.oApplication.showMessageToast(oCommonUtils.getText("ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED"));
											}
											return resolve();
										});
								}, fnError);
						} else {
							oServices.oTransactionController.deleteEntity(oContext).then(
								function() {
									var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
									var oDraftContext = oServices.oDraftController.getDraftContext();
									var bRoot = oDraftContext.isDraftRoot(sEntitySet);
									var sMessageText = oCommonUtils.getText("ST_GENERIC_OBJECT_DELETED");

									// replace the message only for the root.
									if (!bIsActiveEntity && bRoot) {
										sMessageText = oCommonUtils.getText(bHasActiveEntity ? "ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED" :
											"ST_GENERIC_DRAFT_WITHOUT_ACTIVE_DOCUMENT_DELETED");
									}
									if (!bNoMessageToast) {
										oServices.oApplication.showMessageToast(sMessageText);
									}
									return resolve();
								}, fnError);
						}
					}
				);
				return oRet;
			}

			function deleteEntityImpl(bDeleteDraftForActiveEntity, bNoMessageToast, fnResolve, fnReject) {
				if (oBusyHelper.isBusy()) {
					fnReject();
					return;
				}
				var oContext = oController.getView().getBindingContext();
				var bIsActiveEntity = oServices.oDraftController.isActiveEntity(oContext);
				var bHasActiveEntity = oServices.oDraftController.hasActiveEntity(oContext);

				var oSiblingPromise;
				if (bDeleteDraftForActiveEntity) {
					oSiblingPromise = Promise.resolve(oContext);
				} else if (bHasActiveEntity && !bIsActiveEntity) {
					oSiblingPromise = oServices.oApplication.getDraftSiblingPromise(oContext);
				} else {
					oSiblingPromise = Promise.resolve();
				}
				oSiblingPromise.then(function(oActive){
					var oDeletePromise = getDeleteEntityPromise(bIsActiveEntity, bHasActiveEntity, oContext, bDeleteDraftForActiveEntity, bNoMessageToast);
					oDeletePromise.then(fnResolve, fnReject);
					if (bHasActiveEntity && !bIsActiveEntity) { // cancellation of an edit draft
						var fnTransformActiveContext = function(){
							return  { context: oActive };
						};
						var oCancellationPromise = oDeletePromise.then(fnTransformActiveContext); 
						oServices.oApplication.cancellationStarted(oContext, oCancellationPromise);
					}
				}, fnReject);
			}

			/*
			 * Deletes current OData entity. The entity can either be a
			 * non-draft document or a draft document. *
			 *
			 * @param {boolean}
			 *          bDeleteDraftForActiveEntity Can be set to
			 *          <code>true</code> in order to delete the draft entity,
			 *          although the current binding context belongs to the
			 *          active entity
			 * @returns {Promise} A <code>Promise</code> for asynchronous
			 *          execution
			 * @public
			 */			
			function deleteEntity(bDeleteDraftForActiveEntity, bNoMessageToast){
				var oRet = new Promise(function(fnResolve, fnReject){
					oServices.oApplication.performAfterSideEffectExecution(deleteEntityImpl.bind(null, bDeleteDraftForActiveEntity, bNoMessageToast, fnResolve, fnReject));	
				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			/**
			 * Deletes current OData entity. The entity can either be a non-draft document or a draft document. *
			 *
			 * @param {array} aPath Binding contexts or paths (strings) which identify the entities
			 * @returns {Promise} A <code>Promise</code> that receives an array with the responses of the delete requests
			 * @public
			 */
			function deleteEntities(aPath) {
				var oRet = new Promise(function(resolve, reject) {
					oServices.oTransactionController.deleteEntities(aPath).then(
						function(aDeleteResults) {
							var aFailedPath = []; // Failed paths
							var aODataMessage = sap.ui.getCore().getMessageManager().getMessageModel().getData(); // OData error messages

							// Find the failed entity paths by comparing aPath and the paths from the OData error messages
							for (var i = 0; i < aODataMessage.length; i++) {
								var sMessageObjectPath = aODataMessage[i].getTarget(); // entity path

								for (var j = 0; j < aPath.length; j++) {
									if (sMessageObjectPath.indexOf(aPath[j]) > -1 /*&& aFailedPath.indexOf(sMessageObjectPath) === -1*/ ) { // match entity path
										aFailedPath.push(sMessageObjectPath);
										break;
									}
								}
							}
							return resolve(aFailedPath);
						},
						function(oError) {
							return reject(oError);
						}
					);
				});
				oRet.then(function(aFailedPath){
					var aDeletedPath = [];
					for (var i = 0; i < aPath.length; i++){
						if (aFailedPath.indexOf(aPath[i]) === -1){
							aDeletedPath.push(aPath[i]);
						}
					}
					oServices.oApplication.adaptAfterDeletion(aDeletedPath, oComponentUtils.getViewLevel());
				});
				return oRet;
			}

			function saveEntityImpl(resolve, reject) {
				if (oBusyHelper.isBusy()) {
					reject();
					return;
				}
				oServices.oTransactionController.triggerSubmitChanges().then(function(oResponse) {
					handleSuccess();
					resolve(oResponse.context);
				}, handleError.bind(null, MessageUtils.operations.saveEntity, reject));
			}
			
			/*
			 * Saves current OData entity. Only used in non-draft scenario.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function saveEntity() {
				var oRet = new Promise(function(fnResolve, fnReject) {
					oServices.oApplication.performAfterSideEffectExecution(saveEntityImpl.bind(null, fnResolve, fnReject));	

				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			/*
			 * Activates a draft OData entity. Only the root entity can be activated.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function activateDraftEntity() {
				if (oBusyHelper.isBusy()) {
					return oRejectedPromise;
				}
				var oRet = new Promise(function(resolve, reject) {
					var oContext = oController.getView().getBindingContext();
					var oActivationPromise = oServices.oDraftController.activateDraftEntity(oContext);
					oServices.oApplication.activationStarted(oContext, oActivationPromise);
					oActivationPromise.then(function(oResponse) {
						var oComponent = oController.getOwnerComponent();
						var oComponentContainer = oComponent.getComponentContainer();
						var sPath = oResponse.context.getPath();
						function fnRebind() {
							oComponentContainer.unbindElement();
							oComponentUtils.rebindHeaderData(sPath);
						}
						var aExpand = oComponentUtils.getPreprocessorsData().rootContextExpand;
						if (aExpand) {
							oController.getView().getModel().read( sPath, {
								urlParameters: {
									"$select" : aExpand.join(","),
									"$expand": aExpand.join(",")
								},
								success: fnRebind,
								error: fnRebind
							});
						} else {
							fnRebind();
						}
						handleSuccess();
						return resolve(oResponse);
					}, handleError.bind(null, MessageUtils.operations.activateDraftEntity, reject));
				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			function callActionImpl(mParameters, oState, fnResolve, fnReject) {
				if (oBusyHelper.isBusy()) {
					fnReject();
					return;
				}

				var sFunctionImportPath = mParameters.functionImportPath;
				var aCurrentContexts = mParameters.contexts;
				var oSourceControl = mParameters.sourceControl;
				var sFunctionImportLabel = mParameters.label;
				var sNavigationProperty = mParameters.navigationProperty;
				var sOperationGrouping = mParameters.operationGrouping;

				var oActionProcessor = new ActionUtil({
					controller: oController,
					contexts: aCurrentContexts,
					applicationController: oServices.oApplicationController,
					operationGrouping: sOperationGrouping
				});

				var fnObjectPageExistsForEntitySet = function(oPage, sEntitySet) {
					if (oPage.pages) {
						for (var i in oPage.pages) {
							var oSubPage = oPage.pages[i];
							if (oSubPage.component.list != true && oSubPage.entitySet === sEntitySet) {
								return true;
							} else {
								var bResult = fnObjectPageExistsForEntitySet(oSubPage, sEntitySet);
								if (bResult) {
									return true;
								}
							}
						}
					}
					return false;
				};

				var fnNavigationAllowed = function(oComponent, oResponseContext) {
					var oConfig = oComponent.getAppComponent().getConfig();
					if (oResponseContext && oResponseContext.sPath) {
						var sResponseEntitySet = oResponseContext.sPath.split("(")[0].replace("/", "");
						return fnObjectPageExistsForEntitySet(oConfig.pages[0], sResponseEntitySet);
					}
					return false;
				};

				var fnActionCallResolve = function(aResponses) {
					var oResponse, oResponseContext, oComponent, bNavigationAllowed;

					if (jQuery.isArray(aResponses) && aResponses.length === 1) {
						// only one context, handle as single action call
						oResponse = aResponses[0];
					} else {
						oResponse = {
							response: {
								context: aResponses.context
							}
						};
					}
					oResponseContext = oResponse.response && oResponse.response.context;

					oComponent = oController.getOwnerComponent();

					bNavigationAllowed = fnNavigationAllowed(oComponent, oResponseContext);

					if (bNavigationAllowed && oResponseContext && oResponseContext !== oResponse.actionContext && oResponseContext.getPath() !==
						"/undefined") {
						if (oSourceControl) {
							oCommonUtils.navigateFromListItem(oResponseContext, oSourceControl);
						} else {
							oServices.oNavigationController.navigateToContext(oResponseContext, sNavigationProperty, false);
						}
					}

					// -> part of method onSelectionChange in each controller
					if (aResponses.length > 0) {
						var oTableBinding = oCommonUtils.getTableBinding(oSourceControl);
						var oListBinding = oTableBinding && oTableBinding.binding;
						if (oListBinding && oListBinding.oEntityType) {
							// update the enablement of toolbar buttons
							oCommonUtils.setEnabledToolbarButtons(oSourceControl);

							// update the enablement of footer button if on the List Report
							var oComponentContainer = oComponent.getComponentContainer();
							var oSettings = oComponentContainer && oComponentContainer.getSettings();
							var oRouteConfig = oSettings && oSettings.routeConfig;
							if (oRouteConfig) {
								if (sap.suite.ui.generic.template.js.AnnotationHelper.isListReportTemplate(oRouteConfig)) { // check if on List Report
									oCommonUtils.setEnabledFooterButtons(oSourceControl, oController);
								}
							}
						}
					}

					fnResolve(aResponses);
				};

				var fnActionCallReject = function(oError) {
					if (jQuery.isArray(oError)) {
						if (oError.length === 1) {
							oError = oError[0].error;
						} else {
							oError = null;
						}
					}
					var mErrorParameters = {
						context: aCurrentContexts
					};
					handleError(MessageUtils.operations.callAction, null, oError, mErrorParameters);
					fnReject(oError);
				};

				oActionProcessor.call(sFunctionImportPath, sFunctionImportLabel).then(fnActionCallResolve, fnActionCallReject);
			}

			/*
			 * Calls an OData action (also called OData function import). Afterwards the message handling
			 * is triggered for the returned messages.
			 *
			 * @param {object} mParameters Parameters which are used to identify and fire action
			 * @param {array} mParameters.contexts Contexts relevant for action
			 * @param {string} mParameters.functionImportPath Path to the OData function import
			 * @param {object} [mParameters.sourceControl] Control where a navigation starts (e.g. table)
			 * @param {object} [mParameters.navigationProperty] Property to navigate after action
			 * @param {string} [mParameters.label] Text for the confirmation popup
			 *
			 * @returns {Promise} A Promise that resolves if the action has been executed successfully
			 *
			 * @public
			 */			
			function callAction(mParameters, oState) {
				var oRet = new Promise(function(fnResolve, fnReject){
					oServices.oApplication.performAfterSideEffectExecution(callActionImpl.bind(null, mParameters, oState, fnResolve, fnReject));	
				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			/*
			 * Adds an entry to a table.
			 *
			 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table to which an entry has been added
			 */
			function addEntry(oTable) {

				if (!oTable) {
					throw new Error("Unknown Table");
				}

				var sBindingPath = "";
				var sTableBindingPath = "";
				var sEntitySet = oController.getOwnerComponent().getEntitySet();
				var oEntityType, oEntitySet, oNavigationEnd, oMetaModel;
				var oView = oController.getView();
				var oModel = oView.getModel();

				var oViewContext = oView.getBindingContext();
				if (oViewContext) {
					// Detail screen
					sTableBindingPath = oCommonUtils.getTableBinding(oTable).path;

					// get entityset of navigation property
					oMetaModel = oModel.getMetaModel();
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oNavigationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sTableBindingPath);
					if (oNavigationEnd) {
						sEntitySet = oNavigationEnd.entitySet;
					}

					// create binding path
					sTableBindingPath = "/" + sTableBindingPath;
					sBindingPath = oViewContext.getPath() + sTableBindingPath;
				} else {
					// on list, support only one entityset mapped to the root component
					sBindingPath = "/" + sEntitySet;
				}

				var oCreatePromise = CRUDHelper.create(oServices.oDraftController, sEntitySet, sBindingPath, oModel, oServices.oApplication.setEditableNDC);
				oServices.oApplication.getBusyHelper().setBusy(oCreatePromise);
				
				return oCreatePromise.then(
					function(oContext) {
						return {
							newContext: oContext,
							tableBindingPath: sTableBindingPath
						};
					},
					handleError.bind(null, MessageUtils.operations.addEntry, function(oError){throw oError;})
				);
			}

			/* eslint-disable */
			var handleError = testableHelper.testable(handleError, "handleError");
			/* eslint-enable */

			return {
				editEntity: editEntity,
				deleteEntity: deleteEntity,
				deleteEntities: deleteEntities,
				saveEntity: saveEntity,
				activateDraftEntity: activateDraftEntity,
				callAction: callAction,
				addEntry: addEntry
			};
		}

		return BaseObject.extend(
			"sap.suite.ui.generic.template.lib.CRUDManager.js", {
				constructor: function(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {
					jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper));
				}
			});
	});
}; // end of sap/suite/ui/generic/template/lib/CRUDManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonEventHandlers') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonEventHandlers'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonEventHandlers",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/format/DateFormat", "sap/m/ComboBox", "sap/m/MessageBox", "sap/m/MessageToast", "sap/m/Table",
	"sap/ui/model/Filter", "sap/ui/model/Sorter", "sap/ui/comp/smartfilterbar/SmartFilterBar","sap/ui/table/AnalyticalTable", "sap/ui/table/Table", "sap/ui/model/odata/type/Time",
	"sap/suite/ui/generic/template/lib/testableHelper"
], function(jQuery, BaseObject, DateFormat, ComboBox, MessageBox, MessageToast, Table, Filter, Sorter,
	SmartFilterBar, AnalyticalTable, UiTable, Time, testableHelper) {

	"use strict";

	function fnGroupFunction(sPath) {
		// coding for finding the right key and label for the grouping row of a table
		// hope to replace this by core functionality soon
		var sText = "";
		var mTypeMap = []; // buffer for subsequent calls
		return function(oContext) {
			var sLabel = "";
			var sTextPath = sPath;
			var oTypeMap;
			// check for existing entry in buffer
			for (var h in mTypeMap) {
				if (mTypeMap[h].path === sPath) {
					oTypeMap = mTypeMap[h];
					break;
				}
			}
			if (!oTypeMap) {
				// not in buffer
				var oMetaModel = oContext.getModel("entitySet").getMetaModel();
				// var oMetaEntityType = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath).sPath);
				var oProperty = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath + "/" + sPath).sPath);

				if (oProperty) {
					var sFormat = " ";
					for (var k = 0; k < oProperty.extensions.length; k++) {
						if (oProperty.extensions[k].namespace === "http://www.sap.com/Protocols/SAPData") {
							switch (oProperty.extensions[k].name) {
								case "display-format":
									sFormat = oProperty.extensions[k].value;
									break;
								case "label":
									sLabel = oProperty.extensions[k].value;
									break;
								case "text":
									var sTextProperty = oProperty.extensions[k].value;
									var aSplitPath = sPath.split("/");
									aSplitPath[aSplitPath.length - 1] = sTextProperty;
									sTextPath = aSplitPath.join("/");
									break;
								default:
									break;
							}
						}
					}
					if (sLabel === "") {
						sLabel = sPath;
					}
					// fill buffer
					oTypeMap = {
						path: sPath,
						data: {
							type: oProperty.type,
							displayFormat: sFormat,
							label: sLabel,
							textPath: sTextPath
						}
					};
					mTypeMap.push(oTypeMap);
				}
			}
			// Now it's time to fix the right label
			sLabel = oTypeMap.data.label;
			if (oTypeMap.data.textPath !== "") {
				if (oTypeMap.data.textPath === sPath) { // when there is no text property or text association
					sText = oContext.getProperty(oTypeMap.data.textPath);
				} else { // when there is text property or text association
					sText = oContext.getProperty(oTypeMap.data.textPath) + " (" + oContext.getProperty(sPath) + ")";
				}
				if (sText === null || sText === undefined) {
					sText = "";
				}
			} else if (oContext.getProperty(sPath) !== "") {
				sText = oContext.getProperty(sPath);
			}
			switch (oTypeMap.data.type) {
				case "Edm.DateTime":
					if (oTypeMap.data.displayFormat === "Date") {
						var dateFormat = DateFormat.getDateInstance({style : "medium"}); //better than specifying with a pattern since the language can be considered
						var TZOffsetMs = new Date(0).getTimezoneOffset() * 60 * 1000;
						if (sText && sText !== "" && sText.getTime){
							sText = dateFormat.format(new Date(sText.getTime() + TZOffsetMs));
						}
					}
					break;
				case "Edm.Time":
						if (sText && sText !== ""){
							var oTime = new Time(); 
							sText = oTime.formatValue(sText, "string");
						}
					break;
				case "Edm.Boolean":
					if (sText === true) {
						sText = "{i18n>YES}";
					} else if (sText === false) {
						sText = "{i18n>NO}";
					}
					break;
				default:
					break;
			}
			return {
				key: sText ? sText : sPath,
				text: sLabel ? sLabel + ": " + sText : sText
			};
		};
	}

	function getMethods(oController, oComponentUtils, oServices, oCommonUtils) {

		function fnEvaluateParameters(oParameters){
			var result = {};
			for (var prop in oParameters){
				var oParameterValue = oParameters[prop];

				if (typeof oParameterValue === "string"){
					result[prop] = oParameterValue;
				} else if (typeof oParameterValue === "object"){
					if (oParameterValue.value){
						result[prop] = fnEvaluateParameters(oParameterValue).value;
					} else {
						result[prop] = oParameterValue;
					}
				}
			}
			return result;
		}

		// TODO: Check
		function fnHandleError(oError) {
			if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
				sap.m.MessageBox.show(oError.getErrorCode(), {
					title: oCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
				});
			}
		}

		function getActiveSibling() {
			var oContext = oController.getView().getBindingContext();
			return oServices.oApplication.getDraftSiblingPromise(oContext);
		}
		
		var bIsDiscardDraftPopoverActive; // This variable (and its use) is necessary until BLI 3459 is solved
        var oCurrentActiveSiblingPromise; // Needed to store ActiveSiblingPromise in a global variable
		function getDiscardDraftPopover(oActiveSiblingPromise) {
			bIsDiscardDraftPopoverActive = true;
			oCurrentActiveSiblingPromise = oActiveSiblingPromise; // move variable to more global scope
			var oDraftPopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.DiscardDraftPopover", {
				onDiscardConfirm: function() {
					jQuery.sap.log.info("Draft cancellation confirmed");
					if (!bIsDiscardDraftPopoverActive) {
						jQuery.sap.log.info("Draft popover no longer active -> Ignore.");
						return;
					}
					var oBusyHelper = oServices.oApplication.getBusyHelper();
					if (oBusyHelper.isBusy()) {
						jQuery.sap.log.info("Ignore discarding confirmation as app is already busy");
						return; // avoid firing the AfterCancel-event in this case
					}
					jQuery.sap.log.info("Discarding was confirmed, draft will be discarded");
					oBusyHelper.setBusy(oCurrentActiveSiblingPromise);
					oCurrentActiveSiblingPromise.then(function(oActive) {
						jQuery.sap.log.info("Active information for current draft has been read. Start discarding the draft");
						var oActiveObject = oActive && oActive.getObject();
						var bIsActiveEntity = oActiveObject && oActiveObject.IsActiveEntity;
						var oTargetPromise = bIsActiveEntity ? oServices.oApplication.getTargetAfterCancelPromise(oActive) : Promise.resolve();
						oTargetPromise.then(function(vTarget){ // vTarget will be undefined when create draft is discarded; either a context or context path
							var oDiscardPromise = oServices.oCRUDManager.deleteEntity();
							oDiscardPromise.then(function() {
								jQuery.sap.log.info("Draft was discarded successfully");
								bIsDiscardDraftPopoverActive = false;
								oDraftPopover.close();
								jQuery.sap.log.info("Draft popover closed");
								oServices.oViewDependencyHelper.setRootPageToDirty();
								oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
								if (vTarget) {
									jQuery.sap.log.info("Navigate to active entityy");
									oServices.oNavigationController.navigateToContext(vTarget, null, true, 1);
								} else {
									jQuery.sap.log.info("Deleted draft was create draft. Navigate back");
									// new document discarded, go back to previous page
									var oGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
									var bForceFullscreenCreate = oGlobalModel.getProperty("/generic/forceFullscreenCreate");
									if (bForceFullscreenCreate){
										oServices.oNavigationController.navigateBack(); // this should lead us back to the App where we have come from
									} else {
										oServices.oNavigationController.navigateToRoot(true);	
									}
								}
							});
							var oEvent = {
								discardPromise: oDiscardPromise
							};
							oComponentUtils.fire(oController, "AfterCancel", oEvent);
						});
					}, function(oError) {
						// open: error handling
						oDraftPopover.close();
					});
				}
			}, "discard");
			return oDraftPopover;
		}

		var bIsDiscardSubItemPopoverActive; // This variable (and its use) is necessary until BLI 3459 is solved
        function getDiscardSubItemPopover() {
			bIsDiscardSubItemPopoverActive = true;
			var oPopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.DiscardSubItemPopover", {
				onDiscardConfirm: function() {
					jQuery.sap.log.info("Sub item cancellation confirmed");
					if (!bIsDiscardSubItemPopoverActive) {
						jQuery.sap.log.info("Sub item popover no longer active -> Ignore.");
						return;
					}
					var oDeleteEntityPromise = oServices.oCRUDManager.deleteEntity(false, true); //no message toast here
					oDeleteEntityPromise.then(function() {
						var oComponent = oController.getOwnerComponent();
						oServices.oViewDependencyHelper.setParentToDirty(oComponent, oComponent.getNavigationProperty());
						oServices.oViewDependencyHelper.unbindChildren(oComponent, true);
						oPopover.close();
						bIsDiscardSubItemPopoverActive = false;
						// document was deleted, go back to previous page
						oServices.oNavigationController.navigateBack();
					});
					var oEvent = {
						deleteEntityPromise: oDeleteEntityPromise
					};
					oComponentUtils.fire(oController, "AfterDelete", oEvent);
				}
			}, "discard");
			return oPopover;
		}

        function storeObjectPageNavigationRelatedInformation(oEventSource) {
			var oRow = oEventSource;
			var iIdx = -1, iMaxIdx = -1;
			var oTable = oCommonUtils.getOwnerControl(oEventSource);


			if (oTable.getTable) {
				oTable = oTable.getTable();
			}

			var bIsAnalyticalTbl = oTable instanceof AnalyticalTable;

			if (!bIsAnalyticalTbl) { // up/down navigation is not enabled in the analytical table scenario

				// get the table list binding now
				var oTableBinding = oCommonUtils.getTableBinding(oTable);
				var oListBinding = oTableBinding && oTableBinding.binding;
				var aCurrContexts = null;

				if (oListBinding) {
					if (oTable instanceof UiTable) {
						// possibly a bug in the UI5 framework itself .. getCurrentContexts() only returns the contexts of selected rows in the table
						aCurrContexts = oListBinding.getContexts();
					} else if (oTable instanceof Table) {
						aCurrContexts = oListBinding.getCurrentContexts();
					}
				}

				var oContext = null;
				var aSelectedContexts = oCommonUtils.getSelectedContexts(oTable);
				var sSelectedBindingPath = null;

				if (aSelectedContexts && aSelectedContexts.length > 0) {
					sSelectedBindingPath = aSelectedContexts[0].getPath();
				} else if (oRow) {
					if (oTable instanceof Table) {
						// could be a list tab navigation - rows are not selected explicitly - can only be possible with a list/m.table navigation (by default)
						sSelectedBindingPath = oRow.getBindingContext() ? oRow.getBindingContext().sPath : null;
					}
				}

				// get index of selected item
				if (oListBinding && oListBinding.getContexts && sSelectedBindingPath) {
					for (var i = 0; i < aCurrContexts.length; i++) {
						oContext = aCurrContexts[i];
						if (oContext.getPath() === sSelectedBindingPath) {
							iIdx = i;
							break;
						}
					}
				}

				if (oTable && iIdx !== -1) {
					iMaxIdx = oListBinding.getLength();
					var iThreshold = Math.floor(iMaxIdx / 5); // default

					if (oTable instanceof Table) {
						iThreshold = oTable.getGrowingThreshold();
					} else if (oTable instanceof UiTable) {
						iThreshold = oTable.getThreshold();
					}

					// Populate the data to be passed to the next screen
					var aNewListBindingContexts = null;

					if (oListBinding && oTable instanceof UiTable) {
						// possibly a bug in the UI5 framework itself .. getCurrentContexts() only returns the contexts of selected rows in the table
						aNewListBindingContexts = oListBinding.getContexts();
					} else if (oListBinding && oTable instanceof Table) {
						aNewListBindingContexts = oListBinding.getCurrentContexts();
					}

					var oPaginatorInformation = aNewListBindingContexts && {
						listBinding: oListBinding,
						tableMaxItems: iMaxIdx,
						growingThreshold: iThreshold,
						selectedRelativeIndex: iIdx,
						objectPageNavigationContexts: aNewListBindingContexts,
						tableNavFrom: oTable,
						endIndex: aNewListBindingContexts.length - 1
					};

					var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
					var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
					var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
					oTemplatePrivateGlobalModel.setProperty("/generic/paginatorInfo/" + iViewLevel, oPaginatorInformation);
				}
			}
		}

		// injection of $select for smart table - only subset of fields is requested (line items) but technical fields
		// are; required as well: semantic
		// key, technical key + IsDraft / HasTwin
		function getTableQueryParameters(sEntitySet, oExistingQueryParameters) { // #ListController
			var oMetaModel = oController.getView().getModel().getMetaModel();
			var oBindingParams = oExistingQueryParameters;
			var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet, false);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
			var aMandatoryFields = oEntityType.key.propertyRef;
			var i;

			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet)) {
				aMandatoryFields = aMandatoryFields.concat(oDraftContext.getSemanticKey(sEntitySet));
				aMandatoryFields.push({
					name: "IsActiveEntity"
				}, {
					name: "HasDraftEntity"
				}, {
					name: "HasActiveEntity"
				});
			}

			if (oBindingParams.parameters.select && oBindingParams.parameters.select.length > 0) {
				// at least one select parameter
				var aSelects = oBindingParams.parameters.select.split(",");
				for (i = 0; i < aMandatoryFields.length; i++) {
					if (jQuery.inArray(aMandatoryFields[i].name, aSelects) === -1) {
						oBindingParams.parameters.select += "," + aMandatoryFields[i].name;
					}
				}
			}
			return oBindingParams;
		}

		function onSmartFieldUrlPressed(oEvent, oState) {
			var sUrl = oEvent.getSource().getUrl();
			oEvent.preventDefault();
			//determination if Url is pointing externally, and only then open in a new window - not yet implemented
			//only then the data loss popup is needed when replacing the existing page
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				sap.m.URLHelper.redirect(sUrl, false);
				}, jQuery.noop, oState);
		}

		function onBreadCrumbUrlPressed(oEvent, oState) {
			oEvent.preventDefault();
			/*Lokal - oEvent.getSource().getHref() returns #/STTA_C_SO_SalesOrder_ND('500000011')
			  HCP   - oEvent.getSource().getHref() returns #EPMSalesOrderND-manage_sttasond&//STTA_C_SO_SalesOrder_ND('500000011')
			  Techn - oEvent.getSource().getHref() returns #EPMProduct-manage_stta&/STTA_C_MP_Product(ProductDraftUUID=guid'00000000-0000-0000-0000-000000000000',ActiveProduct='HT-1001')/to_ProductText(ProductTextDraftUUID=guid'00000000-0000-0000-0000-000000000000',ActiveProduct='HT-1001',ActiveLanguage='ZH')*/
			var sHref = oEvent.getSource().getHref(); //return the hash that has been set during fnBindBreadcrumbs in OP controller
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				window.location.hash = sHref; //also updates the browser history
				}, jQuery.noop, oState);
		}

		/**
		 * Return an instance of the DeleteConfirmation fragment
		 *
		 * @param {sap.m.Table} table
		 * @return {sap.m.Dialog} - returns the Delete Confirmation Dialog
		 * @private
		 */
		function getDeleteDialog(smartTable) {
			return oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.ListReport.view.fragments.DeleteConfirmation", {
				onCancel: function(oEvent) {
					var oDialog = oEvent.getSource().getParent();
					oDialog.close();
				},
				onDelete: function(oEvent) {
					var oDialog = oEvent.getSource().getParent();
					var oDialogModel = oDialog.getModel("delete");
					var aSelectedItems = oDialogModel.getProperty("/items");
					var aPathsToBeDeleted = [];
					// determine which items to delete
					for (var i = 0; i < aSelectedItems.length; i++) {
						if (!aSelectedItems[i].draftStatus.locked && aSelectedItems[i].deletable) {
							if (aSelectedItems.length === oDialogModel.getProperty("/unsavedChangesItemsCount") || !aSelectedItems[i].draftStatus.unsavedChanges ||
								oDialogModel.getProperty("/checkboxSelected")) {
								aPathsToBeDeleted.push(aSelectedItems[i].context.getPath());
							}
						}
					}
					// delete
					oServices.oCRUDManager.deleteEntities(aPathsToBeDeleted).then(
						function(aFailedPath) {
							// remove selections from the table and set the delete button to disabled
							var oTable = smartTable.getTable();
							oTable.getModel("_templPriv").setProperty("/listReport/deleteEnabled", false);

							var iSuccessfullyDeleted = aPathsToBeDeleted.length - aFailedPath.length;
							if (aFailedPath.length > 0) {
								var sErrorMessage = "";
								if (iSuccessfullyDeleted > 0) {

									// successful delete
									sErrorMessage += (iSuccessfullyDeleted > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL_WITH_COUNT", [iSuccessfullyDeleted]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_WITH_COUNT", [iSuccessfullyDeleted]);

									// failed deletes
									sErrorMessage += "\n";
									sErrorMessage += (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL_WITH_COUNT", [aFailedPath.length]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_WITH_COUNT", [aFailedPath.length]);

								} else {
									sErrorMessage = (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL") :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR");
								}

								MessageBox.error(sErrorMessage);

							} else {
								var sSuccessMessage = "";
								sSuccessMessage = (iSuccessfullyDeleted > 1) ?
									oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL") :
									oCommonUtils.getText("ST_GENERIC_OBJECT_DELETED");

								MessageToast.show(sSuccessMessage);
							}
							
							// after rebindTable is complete we need to update the enablement of the toolbar buttons (selected contexts have changed) - we attach (once) a handler to the table's event "updateFinished"
							smartTable.getTable().attachEventOnce("updateFinished", function () {
								oCommonUtils.setEnabledToolbarButtons(smartTable);
							});
							smartTable.rebindTable();
						},
						function(oError) {
							// this could be a different message b/c the batch request has failed here
							MessageBox.error(oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL", [aPathsToBeDeleted.length]), {
								styleClass: oCommonUtils.getContentDensityClass()
							});
						}
					);
					oDialog.close();
				}
			}, "delete");
		}
		/**
		 * Return the data necessary for the Delete Confirmation Dialog
		 *
		 * @param [sap.m.ListItemBase] selectedItems
		 * @return {map} JSON map containing the data for the Delete Confirmation Dialog
		 * @private
		 */
		function getDataForDeleteDialog(selectedItems) {
			var oModel = oController.getView().getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable &&  oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";

			var mJSONData = {
				items: undefined,
				itemsCount: selectedItems.length,
				text: {
					title: undefined,
					shortText: undefined,
					unsavedChanges: undefined,
					longText: undefined,
					undeletableText: undefined
				},
				lockedItemsCount: 0,
				unsavedChangesItemsCount: 0,
				undeletableCount: 0,
				checkboxSelected: true
			};

			// Enhance the items with their context and draft status. Also keep track of the number of locked and unsaved items
			// + Enhance with undeletable status and track number of undeletable items
			var aItems = [];
			for (var i = 0; i < selectedItems.length; i++) {
				var oEntity = oModel.getObject(selectedItems[i].getPath());
				var mDraftStatus = {};
				var bDeletable = true;

				if (!oEntity.IsActiveEntity) { // if the entity is not an active entity, we can assume it is a draft
					mDraftStatus.draft = true;

				} else if (oEntity.HasDraftEntity) { // if the entity is an active entity AND has a draft entity, we can assume someone else has a draft of the entity
					var sLockedBy = oModel.getProperty("DraftAdministrativeData/InProcessByUser", selectedItems[i]);
					if (sLockedBy) { // if there is a user processing the entity, it is locked
						mDraftStatus.locked = true;
						mDraftStatus.user = sLockedBy;
						mJSONData.lockedItemsCount++;
					} else { // else the entity has unsaved changes
						mDraftStatus.unsavedChanges = true;
						mDraftStatus.user = oModel.getProperty("DraftAdministrativeData/LastChangedByUser", selectedItems[i]);
						mJSONData.unsavedChangesItemsCount++;
					}
				}

				if (sDeletablePath && sDeletablePath !== "") {
					if (oModel.getProperty(sDeletablePath, selectedItems[i]) === false) {
						bDeletable = false;
						mJSONData.undeletableCount++;
					}
				}

				aItems.push({
					context: selectedItems[i],
					draftStatus: mDraftStatus,
					deletable: bDeletable
				});
			}
			mJSONData.items = aItems;

			// determine Dialog title
			if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
				mJSONData.text.title = oCommonUtils.getText("ST_GENERIC_ERROR_TITLE");
			} else {
				mJSONData.text.title = (mJSONData.itemsCount > 1) ?
					oCommonUtils.getText("ST_GENERIC_DELETE_TITLE_WITH_COUNT", [mJSONData.itemsCount]) :
					oCommonUtils.getText("ST_GENERIC_DELETE_TITLE");
			}

			// determine unsavedChanges Checkbox text
			mJSONData.text.unsavedChanges = oCommonUtils.getText("ST_GENERIC_UNSAVED_CHANGES_CHECKBOX");

			// determine short text
			if (mJSONData.itemsCount > 1) {
				if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED_PLURAL");
				} else if (mJSONData.unsavedChangesItemsCount === mJSONData.itemsCount) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES_PLURAL");
				} else if (mJSONData.lockedItemsCount > 0) {
					var iRemainingItems = mJSONData.itemsCount - mJSONData.lockedItemsCount;
					// 1st part of message
					mJSONData.text.shortText = (mJSONData.lockedItemsCount > 1) ?
						oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED_PLURAL", [mJSONData.lockedItemsCount, mJSONData.itemsCount]) :
						oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED", [mJSONData.itemsCount]);

					mJSONData.text.shortText += "\n";
					// 2nd part of message
					if (iRemainingItems === mJSONData.unsavedChangesItemsCount) {
						mJSONData.text.shortText += (iRemainingItems > 1) ?
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES_PLURAL") :
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES");
					} else {
						mJSONData.text.shortText += (iRemainingItems > 1) ?
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_PLURAL", [iRemainingItems]) :
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING");
					}
				} else {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED_PLURAL");
				}

				if (mJSONData.undeletableCount > 0) {
					mJSONData.text.undeletableText = oCommonUtils.getText("ST_GENERIC_DELETE_UNDELETABLE", [mJSONData.undeletableCount, mJSONData.itemsCount]);
				}
			} else {
				if (mJSONData.lockedItemsCount > 0) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED", [" ", mJSONData.items[0].draftStatus.user]);
				} else if (mJSONData.unsavedChangesItemsCount > 0) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES", [" ", mJSONData.items[0].draftStatus.user]);
				} else {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED");
				}
			}

			return mJSONData;
		}

		function fnShowError(sErrorMessageKey) {
			MessageBox.error(oCommonUtils.getText(sErrorMessageKey), {
				styleClass: oCommonUtils.getContentDensityClass()
			});
		}

		function fnBuildSelectionVariantForNavigation(oOutbound, oLineContext, oPageContext, sFilterBarSelectionVariant){
			var oNavigationHandler = oCommonUtils.getNavigationHandler();
			var oOutboundParametersEmpty = {};
			var oOutboundParameters = {};
			for (var prop in oOutbound.parameters){
				if (jQuery.isEmptyObject(oOutbound.parameters[prop])){
					oOutboundParametersEmpty[prop] = oOutbound.parameters[prop];
				} else {
					oOutboundParameters[prop] = oOutbound.parameters[prop];
				}
			}
			oOutboundParameters = fnEvaluateParameters(oOutboundParameters);
			oNavigationHandler.mixAttributesAndSelectionVariant({}, sFilterBarSelectionVariant).getParameterNames().forEach(
					function(prop) {delete oOutboundParametersEmpty[prop];});
			var oPageContextObject = oPageContext && oPageContext.getObject();
			var oLineContextObject = oLineContext && oLineContext.getObject();
			var oMixedContextObject = jQuery.extend({}, oOutboundParametersEmpty, oPageContextObject, oLineContextObject, oOutboundParameters);
			return oNavigationHandler.mixAttributesAndSelectionVariant(oMixedContextObject, sFilterBarSelectionVariant);
		}

		function fnNavigateIntent(oOutbound, oContext, oSmartFilterBar, oSmartTable) {
			var oNavigationHandler = oCommonUtils.getNavigationHandler();

			var sSelectionVariant;
			if (oSmartFilterBar) {
				sSelectionVariant = oSmartFilterBar.getDataSuiteFormat();
			}
			var oSelectionVariant = fnBuildSelectionVariantForNavigation(oOutbound, oContext, oController.getView().getBindingContext(), sSelectionVariant);

			oNavigationHandler.navigate(oOutbound.semanticObject, oOutbound.action, oSelectionVariant.toJSONString(),
					null, fnHandleError);
			//null object has to be passed to the NavigationHandler as an
			//indicator that the state should not be overwritten
		}

		function fnNavigateIntentManifest(oEventSource, oContext, oSmartFilterBar) {
			var oManifestEntry = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app");
			var oOutbound = oManifestEntry.crossNavigation.outbounds[oEventSource.data("CrossNavigation")];
			var oSmartTable;
			if (oSmartFilterBar) {
				oSmartTable = oCommonUtils.getOwnerControl(oEventSource).getParent();
			}
			fnNavigateIntent(oOutbound, oContext, oSmartFilterBar, oSmartTable);
		}

		function fnExpandOnNavigationProperty (aPath, aExpands) {
			// check if any expand is neccessary
			for (var i = 0; i < aPath.length; i++) {
				// check if expand is neccessary
				if (aPath[i].indexOf("/") !== -1) {
					var aParts = aPath[i].split("/");
					// remove property from path
					aParts.pop();
					var sNavigation = aParts.join("/");
					if (aExpands.indexOf(sNavigation) === -1) {
						aExpands.push(sNavigation);
					}
				}
			}
		}

		function fnSemanticObjectLinkPopoverLinkPressed (oEvent, oState){
			//TODO: check if we need it ??? my Answer is NO.
			/*oEvent.preventDefault();
			var oTempEvent = jQuery.extend(true, {}, oEvent);
			oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
				//retrigger the navigation, but how?
			}, jQuery.noop, oState, jQuery.noop, true);
			*/
		}
		
		// TABLE TAB POC ONLY
		function fnBuildSelectionVariantFilters(oEntityType) {
			var oManifest = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.ui.generic.app");
			var oManifestTabs = {};
			if (oManifest && oManifest.pages[0] && oManifest.pages[0].component && oManifest.pages[0].component.settings) {
				oManifestTabs = oManifest.pages[0].component.settings.tableTabs;
			}
			var aSelectionVariantFilters = []; // a[x][y] = y-th filter of x-th filter tab
			
			for (var iTab in oManifestTabs) {
				var sQualifier = oManifestTabs[iTab].qualifier;
				if (sQualifier) {
					aSelectionVariantFilters[iTab] = []; 
					var oVariant = oEntityType[sQualifier];
					for (var i in oVariant.SelectOptions) {
						if (oVariant.SelectOptions[i].PropertyName) {
							var sPath = oVariant.SelectOptions[i].PropertyName.PropertyPath;
							for (var j in oVariant.SelectOptions[i].Ranges) {
								var oOperator = oVariant.SelectOptions[i].Ranges[j].Option;
								oOperator.EnumMember = oOperator.EnumMember.replace("com.sap.vocabularies.UI.v1.SelectionRangeOptionType/", "");
								var oValueLow = oVariant.SelectOptions[i].Ranges[j].Low;
								var oValueHigh = oVariant.SelectOptions[i].Ranges[j].High;
								if (oValueHigh) {
									aSelectionVariantFilters[iTab].push(new Filter(sPath, oOperator.EnumMember, oValueLow.String, oValueHigh.String));
								} else {
									aSelectionVariantFilters[iTab].push(new Filter(sPath, oOperator.EnumMember, oValueLow.String));
								}
							}
						}
					}
				}
			}
			return aSelectionVariantFilters;
		}
		
		// TABLE TAB POC ONLY
		function fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oSmartTable, oBindingParams) {
			var oManifest = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.ui.generic.app");
			if (oController.getMetadata().getName() === 'sap.suite.ui.generic.template.ListReport.view.ListReport'
					&& oManifest && oManifest.pages[0] && oManifest.pages[0].component && oManifest.pages[0].component.settings && oManifest.pages[0].component.settings.tableTabs) {
				// apply filters from smart filter bar
				var aFilters = oSmartFilterBar.getFilters();
				if (aFilters[0] && aFilters[0]._bMultiFilter) {
					// multiple filters seem to be stored in inner array (TODO check with smart controls!)
					aFilters = aFilters[0].aFilters;
				}
				if (aFilters) {
					for (var i in aFilters) {
						oBindingParams.filters.push(aFilters[i]);
					}
				}
			}
		}
		
		function onBeforeRebindTable(oEvent) {
			// For line item actions, popin display must not have a label
			var oSmartTable = oEvent.getSource();
			var oTable = oSmartTable.getTable();
			if (oTable instanceof Table) {
				var oColumns = oTable.getColumns();
				for (var iColumn = 0; iColumn < oColumns.length; iColumn++) {
					if (oColumns[iColumn].getCustomData()[0].getValue() && oColumns[iColumn].getCustomData()[0].getValue()["actionButton"] === "true") {
						oColumns[iColumn].setPopinDisplay("WithoutHeader");
					}
				}
			}
			// still open
			var oBindingParams = oEvent.getParameter("bindingParams");
			oBindingParams.parameters = oBindingParams.parameters || {};

			var oSmartFilterBar = oController.byId(oSmartTable.getSmartFilterId());

			// TABLE TAB POC ONLY
			if (!oSmartFilterBar) {
				oSmartFilterBar = oController.byId("listReportFilter");
				fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oSmartTable, oBindingParams);
			}
			// (END) TABLE TAB POC ONLY

			if (oSmartFilterBar instanceof SmartFilterBar) {
				var oCustomControl = oSmartFilterBar.getControlByKey("EditState");
				if (oCustomControl instanceof ComboBox) {
					var vDraftState = oCustomControl.getSelectedKey();
					switch (vDraftState) {
						case "1": // Unchanged
							// IsActiveDocument and siblingEntity eq null
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("HasDraftEntity", "EQ", false));
							break;
						case "2": // Draft
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", false));
							break;
						case "3": // Locked
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "NE", ""));
							break;
						case "4": // Unsaved changes
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "EQ", ""));
							break;
						default: // All ==> Special handling for multiple multi-filters
							var oOwnMultiFilter = new Filter({
								filters: [new Filter("IsActiveEntity", "EQ", false),
								          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)
								],
								and: false
							});
						if (oBindingParams.filters[0] && oBindingParams.filters[0].aFilters) {
							var oSmartTableMultiFilter = oBindingParams.filters[0];
							oBindingParams.filters[0] = new Filter([oSmartTableMultiFilter, oOwnMultiFilter], true);
						} else {
							oBindingParams.filters.push(oOwnMultiFilter);
						}
						break;
					}
				}
			}
			//--- begin: expand binding --------------------------------------------------------------------------------------
			getTableQueryParameters(oSmartTable.getEntitySet(), oBindingParams);
			var aSelect = oBindingParams.parameters.select && oBindingParams.parameters.select.split(",") || [];
			var aExpands = oBindingParams.parameters && oBindingParams.parameters.expand && oBindingParams.parameters.expand.split(",") || [];
			var sEntitySet = oSmartTable.getEntitySet();

			if (aSelect && aSelect.length > 0) {
				var oMetaModel = oSmartTable.getModel().getMetaModel();
				var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);

				//needed for activating field control for DataField Annotation & when using the setting to add new columns
				var oProperty = {};
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				for (var index = 0; index < aSelect.length; index++) {
					var sSelect = aSelect[index];
					if (sSelect){
						var oProperty = oMetaModel.getODataProperty(oEntityType, sSelect);
						if (oProperty && oProperty["com.sap.vocabularies.Common.v1.FieldControl"] && oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path){
							var sPropertyFieldControl = oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path;
							if (sPropertyFieldControl !== " " && oBindingParams.parameters.select.search(sPropertyFieldControl) === -1) {
								oBindingParams.parameters.select += "," + sPropertyFieldControl;
								aSelect.push(sPropertyFieldControl);
							}
						}
					}
				}

				// Make sure sorter text property in select and expand list for grouping selection where column is not visible
				if (oTable instanceof Table) {
					var oSorter = oBindingParams.sorter[0];
					// Check if sorter is for Grouping
					if (oSorter && oSorter.vGroup) {
						var oSorterObject = oMetaModel.getODataProperty(oEntityType, oSorter.sPath);
						var sSorterText = oSorterObject["sap:text"] || (oSorterObject["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
						if (sSorterText) {
							if (jQuery.inArray(sSorterText, aSelect) === -1) {
								oBindingParams.parameters.select += "," + sSorterText;
								aSelect.push(sSorterText);
							}
						}
					}
				}

				// add deletable-path properties
				var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
				if (oDeleteRestrictions && oDeleteRestrictions.Deletable &&  oDeleteRestrictions.Deletable.Path &&
					oBindingParams.parameters.select.search(oDeleteRestrictions.Deletable.Path) === -1) {
						oBindingParams.parameters.select += "," + oDeleteRestrictions.Deletable.Path;
						aSelect.push(oDeleteRestrictions.Deletable.Path);
				}
				// add applicable-path properties for annotated actions
				var sFunctionImport,
					oFunctionImport;
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oLineItem = oEntityType["com.sap.vocabularies.UI.v1.LineItem"] || [];
				for (var index = 0; index < oLineItem.length; index++) {
					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
						sFunctionImport = oMetaModel.getODataFunctionImport(oLineItem[index].Action.String, true);
						if (sFunctionImport) {   //else: break-out action, no backend data needed
							oFunctionImport = oMetaModel.getObject(sFunctionImport);
							if (oFunctionImport["sap:action-for"] !== " " && oFunctionImport["sap:applicable-path"] !== " " &&
									oBindingParams.parameters.select.search(oFunctionImport["sap:applicable-path"]) === -1) {
								oBindingParams.parameters.select += "," + oFunctionImport["sap:applicable-path"];
								aSelect.push(oFunctionImport["sap:applicable-path"]);
							}
						}
					}
				}
				// add applicablePath properties for breakout actions
				var aButtons = oCommonUtils.getBreakoutActionsForTable(oSmartTable, oController);
				var oBreakoutActions = oCommonUtils.getBreakoutActionsFromManifest(oTable.getModel());
				for (var sAction in oBreakoutActions) {
					if (jQuery.inArray(oBreakoutActions[sAction].id, aButtons) !== -1) {
						if (oBreakoutActions[sAction].requiresSelection && oBreakoutActions[sAction].applicablePath) {
							if (oBindingParams.parameters.select.search(oBreakoutActions[sAction].applicablePath) === -1) {
								oBindingParams.parameters.select += "," + oBreakoutActions[sAction].applicablePath;
								aSelect.push(oBreakoutActions[sAction].applicablePath);
							}
						}
					}
				}
			}
			fnExpandOnNavigationProperty(aSelect, aExpands);

			// add Draft Admin Data to expand if entity is Draft and Draft Root and has Draft Admin Data
			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet) && oDraftContext.isDraftRoot(sEntitySet)) {
				if (oDraftContext.hasDraftAdministrativeData(sEntitySet)) {

					if (aSelect && aSelect.length > 0) {
						if (aSelect.indexOf("DraftAdministrativeData") === -1) {
							oBindingParams.parameters.select = oBindingParams.parameters.select + ",DraftAdministrativeData";
						}
					}

					if (aExpands.indexOf("DraftAdministrativeData") === -1) {
						aExpands.push("DraftAdministrativeData");
					}
				}
			}

			if (aExpands.length > 0) {
				oBindingParams.parameters.expand = aExpands.join(",");
			}

			// sortOrder Annotation of presentation variant - only relevant for sap.m.Table
			var aCustomData = oSmartTable.getCustomData();
			var oCustomData = {};
			for (var k = 0; k < aCustomData.length; k++) {
				oCustomData[aCustomData[k].getKey()] = aCustomData[k].getValue();
			}
			var oVariant = oSmartTable.fetchVariant();
			if ((!oVariant || !oVariant.sort) && oTable instanceof Table && oCustomData.TemplateSortOrder) {
				var aSortOrder = oCustomData.TemplateSortOrder.split(", ");
				for (var j = 0; j < aSortOrder.length; j++) {
					var aSort = aSortOrder[j].split(" ");
					if (aSort.length > 1) {
						oBindingParams.sorter.push(new Sorter(aSort[0], aSort[1] === "true"));
					} else {
						oBindingParams.sorter.push(new Sorter(aSort[0]));
					}
				}
			}

			if (oTable instanceof Table) {
				// Define grouping (wiki: SmartTable FAQs)
				var oSorter = oBindingParams.sorter[0];
				// Check if sorter is for Grouping
				if (oSorter && oSorter.vGroup) {
					// Replace the Group function
					oSorter.fnGroup = fnGroupFunction(oSorter.sPath);
				}
			}

			oSmartTable.getTable().attachEventOnce("updateFinished", function () {
				oCommonUtils.setEnabledToolbarButtons(oSmartTable);
				oCommonUtils.setEnabledFooterButtons(oSmartTable, oController);
			});
		}
		
		// TABLE TAB POC ONLY
		function fnSetCount(aFilterTabs, index, oData) {
			// based on the assumption that the $count responses 
			aFilterTabs[index].setCount(oData); 
		}
		
		// TABLE TAB POC ONLY
		function onBeforeRebindTableFinally(oEvent) {
			// Table Tab POC: update tab counts
			// TODO initialize aFilter ONE time (at the beginning)
			// for productization, analyze annotations one time and store all filter/tab/table information centrally in one robust and convenient-to-handle data structure (map?)
			var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui.generic.app");
			if (oManifest && oManifest.pages[0] && oManifest.pages[0].component && oManifest.pages[0].component.settings && oManifest.pages[0].component.settings.tableTabs) {
				var oBindingParams = oEvent.getParameter("bindingParams");
				oBindingParams.parameters = oBindingParams.parameters || {};

				var oSmartTable = oEvent.getSource();
				var oModel = oSmartTable.getModel();
				var oMetaModel = oModel.getMetaModel();
				var sEntitySet = oSmartTable.getEntitySet();
				var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var aSelectionVariantFilters = fnBuildSelectionVariantFilters(oEntityType);
				
				var oIconTabBar = oController.byId("iconTabBar");
				var sTabKey = oIconTabBar.getSelectedKey();
				var aFilterTabs = oIconTabBar.getItems();

				for (var iTabIdx in aFilterTabs) {
					var aFilters = [];
					for (var i in oBindingParams.filters) {
						aFilters.push(oBindingParams.filters[i]); // copy array content to prevent call by reference
					}
					for (var i in aSelectionVariantFilters[iTabIdx]) {
						aFilters.push(aSelectionVariantFilters[iTabIdx][i]);
					}
					
					var oThisTable = oController.byId("listReport-" + iTabIdx);
					var sEntitySet = oThisTable.getEntitySet();
					oModel.read("/" + sEntitySet + "/$count", {
						urlParameters: oBindingParams.parameters, // not needed, but for improving performance?
						filters: aFilters,
						groupId: "updateTabs",
						success: fnSetCount.bind(null, aFilterTabs, iTabIdx),
						error: function(oData, oResponse) {
							// clarify: how to indicate/handle errors?
						}
					});
				}
				
				// Table Tab POC: add filters of selected tab to oBindingParams.filters
				for (var i in aSelectionVariantFilters[sTabKey]) {
					oBindingParams.filters.push(aSelectionVariantFilters[sTabKey][i]);
				}
			}
		}

		/**
		 * Navigation from table
		 * @param {sap.ui.base.EventProvider} oEventSource - The source of the triggered event
		 * @param {object} oState
		 */
		function onListNavigate(oEventSource, oState) {
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				if (oEventSource.data("CrossNavigation")) {
					// intent based navigation
					fnNavigateIntentManifest(oEventSource, oEventSource.getBindingContext(), oState.oSmartFilterbar);
					return;
				}
				// Get parent table from the event source
				var oTable = oCommonUtils.getOwnerControl(oEventSource);
				storeObjectPageNavigationRelatedInformation(oEventSource);
				oCommonUtils.navigateFromListItem(oEventSource.getBindingContext(), oTable);
			}, jQuery.noop, oState);
		}

		function onShowDetails(oEventSource, oState) {
			var oTable = oEventSource.getParent().getParent().getTable();
			var aContexts = oCommonUtils.getSelectedContexts(oTable);
			switch (aContexts.length) {
				case 0:
					fnShowError("ST_GENERIC_NO_ITEM_SELECTED");
					return;
				case 1:
					oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
						//processing allowed
						if (oEventSource.data("CrossNavigation")){
							// intent based navigation
							fnNavigateIntentManifest(oEventSource, aContexts[0], oState.oSmartFilterbar);
							return;
						}
						// internal navigation
						storeObjectPageNavigationRelatedInformation(oEventSource);
						oCommonUtils.navigateFromListItem(aContexts[0], oTable);
					}, jQuery.noop, oState);
					return;
				default:
					fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
				return;
			}
		}

		function onDataFieldForIntentBasedNavigation(oEvent, oState) {
			var oEventSource = oEvent.getSource();
			var oControl = oCommonUtils.getOwnerControl(oEventSource);
			var aContexts = oCommonUtils.getSelectedContexts(oControl);
			switch (aContexts.length) {
				case 0:
				case 1:
					oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
						var oOutbound = {
								action: oEventSource.data('Action'),
								semanticObject:	oEventSource.data('SemanticObject')
						};
						fnNavigateIntent(oOutbound, aContexts[0], oState.oSmartFilterbar || undefined, oState.oSmartTable || undefined);
					}, jQuery.noop, oState);
					return;
				default:
					fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
				return;
			}
		}

		function onDataFieldWithIntentBasedNavigation(oEvent, oState) {
			var oEventSource = oEvent.getSource();
			var oContext = oEventSource.getParent().getBindingContext();
			var sSemanticObject = oEventSource.data('SemanticObject');
			var sAction = oEventSource.data('Action');

			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						action: sAction,
						semanticObject:	sSemanticObject
				};
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar || undefined, oState.oSmartTable || undefined);
			}, jQuery.noop, oState);
		}

		function onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState) {
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						action: oCustomData.Action,
						semanticObject:	oCustomData.SemanticObject
				};
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar, oState.oSmartTable);
			}, jQuery.noop, oState);
		}

		function onInlineDataFieldForIntentBasedNavigation(oEventSource, oState){
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						semanticObject: oEventSource.data("SemanticObject"),
						action: oEventSource.data("Action")
				};
				var oContext = oEventSource.getParent().getBindingContext();
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar, oState.oSmartTable);
			}, jQuery.noop, oState);
		}

		/**
		 * Action triggered from Control's toolbar
		 * @param {sap.ui.base.Event} oEvent - the triggered event (most likely a 'click')
		 * @param {object} oState
		 */
		function onCallActionFromToolBar(oEvent, oState) {
			var oSourceControl, sBindingPath = "";
			var oControl = oCommonUtils.getOwnerControl(oEvent.getSource());
			var oCustomData = oEvent.getSource().data();
			var aContexts = oCommonUtils.getSelectedContexts(oControl);
			var sControlName = oControl.getMetadata().getName();

			if (sControlName === "sap.ui.comp.smarttable.SmartTable") {
				oSourceControl = oControl.getTable();
				sBindingPath = oControl.getTableBindingPath();

			} else if (sControlName === "sap.ui.comp.smartchart.SmartChart") {
				oSourceControl = oControl.getChart();
				sBindingPath = oControl.getChartBindingPath();
			}

			CRUDManagerCallAction({
				functionImportPath: oCustomData.Action,
				contexts: aContexts,
				sourceControl: oSourceControl,
				label: oCustomData.Label,
				operationGrouping: oCustomData.InvocationGrouping,
				navigationProperty: ""
			}, oState, sBindingPath);
		}

		/**
		 * Call the CRUDManager callAction method
		 * @param {map} mParams - a map containing the parameters for the CRUDManager callAction method
		 * @param {object} oState
		 * @param {string} sBindingPath - the control's binding path
		 * @private
		 */
		function CRUDManagerCallAction(mParams, oState, sBindingPath) {
			var oResponse;

			// only for oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction"
			// DataFieldForIntentBasedNavigation separated within ToolbarButton.fragment, uses other event handler
			// NO ITEM SELECTED: supported - if selection is required then button will be disabled via applicable-path otherwise the button will always be enabled
			// ONE ITEM SELECTED: supported
			// MULTIPLE ITEMS SELECTED: supported
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				//processing allowed
				// TODO check Denver implementation
				oServices.oCRUDManager.callAction({
					functionImportPath: mParams.functionImportPath,
					contexts: mParams.contexts,
					sourceControl: mParams.sourceControl,
					label: mParams.label,
					operationGrouping: mParams.operationGrouping,
					navigationProperty: mParams.navigationProperty
				}, oState).then(function(aResponses) {
					if (aResponses && aResponses.length && aResponses.length === 1) {
						oResponse = aResponses[0];

						if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response
								.context.getPath() !== oResponse.actionContext.getPath())) {
							oServices.oViewDependencyHelper.setMeToDirty(oController.getOwnerComponent(), sBindingPath);
						}
					}
				});
			}, jQuery.noop, oState, "Proceed");
		}

		function onDiscardDraft(oEvent) {
			var oSource = oEvent.getSource();
			var oActiveSiblingPromise = getActiveSibling();
			var oDiscardPopover = getDiscardDraftPopover(oActiveSiblingPromise);
			var oDiscardModel = oDiscardPopover.getModel("discard");
			oDiscardModel.setProperty("/placement", sap.m.PlacementType.Top);
			var oContext = oController.getView().getBindingContext();
			var oEntity = oContext.getObject();
			var bIsCreateDraft = oEntity.hasOwnProperty("HasActiveEntity") && !oContext.getProperty("IsActiveEntity") && !oContext.getProperty(
			"HasActiveEntity");
			oDiscardModel.setProperty("/isCreateDraft", bIsCreateDraft);
			oDiscardPopover.openBy(oSource);
		}

		function onDiscardSubItem(oEvent) {
			var oSource = oEvent.getSource();
			var aCustomData = oSource.getCustomData();
			var oDiscardPopover = getDiscardSubItemPopover();
			var oDiscardModel = oDiscardPopover.getModel("discard");
			var sPlacement = aCustomData && aCustomData[0] ? aCustomData[0].getValue() : sap.m.PlacementType.Top;
			oDiscardModel.setProperty("/placement", sPlacement);
			oDiscardPopover.openBy(oSource);
		}

		function addEntry(oEventSource, bSuppressNavigation, oSmartFilterBar) {
			if (oEventSource.data("CrossNavigation")) {
				// intent based navigation
				fnNavigateIntentManifest(oEventSource, oEventSource.getBindingContext(), oSmartFilterBar);
				return new Promise(function(resolve) {
					resolve();
				});
			}

			var oTable = oCommonUtils.getOwnerControl(oEventSource);
			var sTablePath = oTable.getTableBindingPath();
			var oComponent = oController.getOwnerComponent();

			var oReturn = oServices.oCRUDManager.addEntry(oTable).then(
					function(oTargetInfo) {
						if (!bSuppressNavigation) {
							oServices.oNavigationController.navigateToContext(oTargetInfo.newContext,
									oTargetInfo.tableBindingPath, false, 4);
							oServices.oViewDependencyHelper.setMeToDirty(oComponent, sTablePath);
						} else {
							oTable.rebindTable();
						}
					});
			
			oReturn.catch(jQuery.noop);
			return oReturn;
		}
		/**
		 * Event handler for Delete on the List Report
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		function deleteEntries(oEvent) {
			var oSmartTable = oCommonUtils.getOwnerControl(oEvent.getSource());
			var aSelectedItems = oCommonUtils.getSelectedContexts(oSmartTable);

			if (aSelectedItems && aSelectedItems.length > 0) {
				var mJSONData = getDataForDeleteDialog(aSelectedItems);
				var oDeleteDialog = getDeleteDialog(oSmartTable);
				var oDeleteDialogModel = oDeleteDialog.getModel("delete");

				oDeleteDialogModel.setData(mJSONData);
				oDeleteDialog.open();
			} else {
				MessageBox.error(oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
					styleClass: oCommonUtils.getContentDensityClass()
				});
			}
		}

		function onContactDetails(oEvent) {
			var oPopover;
			if (oEvent.getSource().data("Location") === "Header") {
				oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
			} else if (oEvent.getSource().data("Location") === "Section") {		//ContactPopUpover in Section 
				oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
			} else if (oEvent.getSource().data("Location") === "SmartTable") {	//ContactPopUpOver in SmartTable
				oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
			} else {
				oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation(
						"items")[1];
			}
			oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
			oPopover.openBy(oEvent.getSource());
		}

		/* eslint-disable */
		var fnBuildSelectionVariantForNavigation = testableHelper.testable(fnBuildSelectionVariantForNavigation, "fnBuildSelectionVariantForNavigation");
		var fnEvaluateParameters = testableHelper.testable(fnEvaluateParameters, "fnEvaluateParameters");
		/* eslint-enable */

		return {
			onBeforeRebindTable: onBeforeRebindTable,
			onBeforeRebindTableFinally: onBeforeRebindTableFinally,
			onListNavigate: onListNavigate,
			onShowDetails: onShowDetails,
			onEditNavigateIntent: fnNavigateIntentManifest,
			onSemanticObjectLinkPopoverLinkPressed: fnSemanticObjectLinkPopoverLinkPressed,
			onDataFieldForIntentBasedNavigation: onDataFieldForIntentBasedNavigation,
			onDataFieldForIntentBasedNavigationSelectedContext: onDataFieldForIntentBasedNavigationSelectedContext,
			onInlineDataFieldForIntentBasedNavigation: onInlineDataFieldForIntentBasedNavigation,
			onDataFieldWithIntentBasedNavigation: onDataFieldWithIntentBasedNavigation,
			onSmartFieldUrlPressed: onSmartFieldUrlPressed,
			onBreadCrumbUrlPressed: onBreadCrumbUrlPressed,
			onCallActionFromToolBar: onCallActionFromToolBar,
			onDiscardDraft: onDiscardDraft,
			onDiscardSubItem: onDiscardSubItem,
			addEntry: addEntry,
			deleteEntries: deleteEntries,
			onContactDetails: onContactDetails
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonEventHandlers", {
		constructor: function(oController, oComponentUtils, oServices, oCommonUtils) {
			jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/CommonEventHandlers.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListBase'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavError'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonUtils",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/Device", "sap/ui/model/json/JSONModel",
		"sap/ui/comp/smarttable/SmartTable", "sap/ui/table/Table", "sap/m/Table", "sap/m/ListBase", "sap/m/MessageBox",
		"sap/ui/generic/app/navigation/service/NavigationHandler", "sap/ui/generic/app/navigation/service/NavError", 
		"sap/suite/ui/generic/template/lib/testableHelper"], 
		function(jQuery, BaseObject, Device, JSONModel, SmartTable, UiTable, ResponsiveTable, ListBase, MessageBox, 
				NavigationHandler, NavError, testableHelper) {
	"use strict";

	function getNavigationProperty(oPageEntries, sEntitySet) {
		for (var i in oPageEntries) {
			var oEntry = oPageEntries[i];
			if (oEntry.entitySet === sEntitySet && oEntry.component.list && oEntry.navigationProperty) {
				return oEntry.navigationProperty;
			} else if (oEntry.pages) {
				var result = getNavigationProperty(oEntry.pages, sEntitySet);
				if (result) {
					return result;
				}
			}
		}
	}

	function getMethods(oController, oServices, oComponentUtils) {

		var oNavigationHandler; // initialized on demand

		// defines a dependency from oControl to the view
		function fnAttachControlToView(oControl) {
		    oServices.oApplication.attachControlToParent(oControl, oController.getView());
		}

		// See documentation of
		// sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment below
		function getDialogFragment(sName, oFragmentController, sModel, fnOnFragmentCreated) {
		    return oServices.oApplication.getDialogFragmentForView(oController.getView(), sName, oFragmentController, sModel, fnOnFragmentCreated);
		}

		var oResourceBundle; // initialized on first use
		function getText() {
			oResourceBundle = oResourceBundle || oController.getOwnerComponent().getModel("i18n").getResourceBundle();
			return oResourceBundle.getText.apply(oResourceBundle, arguments);
		}

		function isDraftEnabled() {
			var oDraftContext = oServices.oDraftController.getDraftContext();
			return oDraftContext.isDraftEnabled(oController.getOwnerComponent().getEntitySet());
		}

		function getSelectedContexts(oControl) {
			var aSelectedContexts = [];
			if (oControl instanceof SmartTable) {
				oControl = oControl.getTable();
			} else if (oControl instanceof sap.ui.comp.smartchart.SmartChart) {
				oControl = oControl.getChart();
				if (oControl && oControl.getMetadata().getName() === "sap.chart.Chart") {
					var mDataPoints = oControl.getSelectedDataPoints();
					if (mDataPoints.count > 0) {
						var aDataPoints = mDataPoints.dataPoints;
						for (var i = 0; i < aDataPoints.length; i++) {
							aSelectedContexts.push(aDataPoints[i].context);
						}
					}
				}
			}
			if (oControl instanceof ListBase) {
				aSelectedContexts = oControl.getSelectedContexts();
			} else if (oControl instanceof UiTable) {
				var aIndex = oControl.getSelectedIndices();
				for (var i = 0; i < aIndex.length; i++) {
					aSelectedContexts.push(oControl.getContextByIndex(aIndex[i]));
				}
			}
			return aSelectedContexts;
		}
		
		/*
		 * Sets the enabled value for Toolbar buttons
		 * @param {object} oSubControl
		 */
		function fnSetEnabledToolbarButtons (oSubControl) {
			var aToolbarControls, aButtons, oToolbarControl, sLocalButtonId, bEnabled, mCustomData;
			var oControl = this.getOwnerControl(oSubControl);  // look for parent table or chart
			var sControlName = oControl.getMetadata().getName();
			if (sControlName !==  "sap.ui.comp.smarttable.SmartTable" && sControlName !== "sap.ui.comp.smartchart.SmartChart") {
				oControl = oControl.getParent();
				sControlName = oControl.getMetadata().getName();
			}
			var aContexts = this.getSelectedContexts(oControl);
			var oModel = oControl.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oView = oController.getView();
			
			if (sControlName === "sap.ui.comp.smarttable.SmartTable") {
				aToolbarControls = oControl.getCustomToolbar() && oControl.getCustomToolbar().getContent();
				
				// Breakout Action buttons
				// for now the breakout actions is only for SmartTable and use a different approach to update the private model
				aButtons = this.getBreakoutActionsForTable(oControl);
				this.fillEnabledMapForBreakoutActions(aButtons, aContexts, oModel);
			} else if (sControlName === "sap.ui.comp.smartchart.SmartChart") {
				aToolbarControls = oControl.getToolbar() && oControl.getToolbar().getContent();
			}
			
			// loop through the array of controls inside the toolbar
			if (aToolbarControls && aToolbarControls.length > 0) {
				for (var i = 0; i < aToolbarControls.length; i++) {
					bEnabled = undefined;
					oToolbarControl = aToolbarControls[i];
					
					if (oToolbarControl.getMetadata().getName() === "sap.m.Button" && oToolbarControl.getVisible()) {
						// we determine the type of button (e.g. Delete button, Annotated Action button etc...) via the CustomData "Type"
						mCustomData = this.getElementCustomData(oToolbarControl);
						if (mCustomData && mCustomData.Type) {
							// get the partial id, instead of the full id generated by ui5
							// partial id is used when initially building the expression - see method buildAnnotatedActionButtonEnablementExpression in AnnotationHelper.js
							sLocalButtonId = oView.getLocalId(oToolbarControl.getId());
							
							// 1. Type = "CRUDActionDelete" -> Delete button
							// 2. Type = "com.sap.vocabularies.UI.v1.DataFieldForAction" or "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" -> Annotated Action button
							if (mCustomData.Type === "CRUDActionDelete") {
								bEnabled = fnShouldDeleteButtonGetEnabled(oModel, oMetaModel, aContexts, oControl);
							} else if (mCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || mCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
								bEnabled = fnShouldAnnotatedActionButtonGetEnabled(oModel, oMetaModel, aContexts, mCustomData.Type, mCustomData.Action);
							}							
						}
						
						// check if "enabled" is bound to the path '/generic/controlProperties/' in the model - otherwise it's bound to another path or has a hard coded true/false
						if (/generic\/controlProperties/.test(oToolbarControl.getBindingPath("enabled")) && bEnabled !== undefined) {
							fnSetPrivateModelControlProperty(sLocalButtonId, "enabled", bEnabled);
						}
					}
				}
			}
			// TODO: do we still need to check the table binding? or can we remove it?
			// var oTableBinding =  getTableBinding(oTable);
			// var oListBinding = oTableBinding && oTableBinding.binding;
			// if (oListBinding && oListBinding.oEntityType) {
			//	var oEntityType = oModel.getMetaModel().getODataEntityType(oListBinding.oEntityType.entityType);
			//	fillFunctionEnabledMap(aContexts, oModel, oEntityType);
			// }
		}
		
		function fnSetEnabledFooterButtons (oTable, oController) {
			var aButtons = this.getBreakoutActionsForFooter(oController);
			var aContexts = this.getSelectedContexts(oTable);
			var oModel = oTable.getModel();
			this.fillEnabledMapForBreakoutActions(aButtons, aContexts, oModel);
		}
		
		/*
		 * Updates the private model control property
		 * @param {string} sId - the id of the button in the private model
		 * @param {string} sProperty - the name of the property in the private model
		 * @param {string} sValue - the value of the property
		 */
		function fnSetPrivateModelControlProperty (sId, sProperty, sValue) {
			var oTemplatePrivateModel = oController.getView().getModel("_templPriv");
			var mModelProperty = oTemplatePrivateModel.getProperty("/generic/controlProperties/" + sId);
			// check if the id exists in the model
			if (!mModelProperty) {
				mModelProperty = {};
				mModelProperty[sProperty] = sValue;
				oTemplatePrivateModel.setProperty("/generic/controlProperties/" + sId, mModelProperty);
			} else {
				oTemplatePrivateModel.setProperty("/generic/controlProperties/" + sId + "/" + sProperty, sValue);
			}
		}
		
		/*
		 * Determines whether an Annotated Action should be enabled or disabled
		 * @private
		 */
		function fnShouldAnnotatedActionButtonGetEnabled (oModel, oMetaModel, aContexts, sType, sAction) {
			var mFunctionImport, mData, sActionFor, sApplicablePath;
			var bEnabled = false;
			
			if (sType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				mFunctionImport = oMetaModel.getODataFunctionImport(sAction);
				sActionFor = mFunctionImport && mFunctionImport["sap:action-for"];
				// check if 'sap:action-for' is defined
				if (sActionFor && sActionFor !== "" && sActionFor !== " ") {
					if (aContexts.length > 0) {
						sApplicablePath = mFunctionImport["sap:applicable-path"];
						// check if 'sap:applicable-path' is defined
						if (sApplicablePath && sApplicablePath !== "" && sApplicablePath !== " ") {
							for (var j = 0; j < aContexts.length; j++) {
								mData = oModel.getObject(aContexts[j].getPath()); // get the data
								if (mData && mData[sApplicablePath] === true) {
									bEnabled = true;  //  'sap:action-for' defined, 'sap:applicable-path' defined, 'sap-applicable-path' value is true, more than 1 selection -> enable button
									break;
								}
							}
						} else {
							bEnabled = true; // 'sap:action-for' defined, 'sap:applicable-path' not defined, more than 1 selection -> enable button
						}						
					}
				} else {
					bEnabled = true; // 'sap:action-for' not defined, no selection required -> enable button
				}
			} else if (sType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && aContexts.length > 0) { // to enable UI.DataFieldForIntentBasedNavigation action button at least one selection is required
				bEnabled = true;
			}
			
			return bEnabled;
		}
		
		/*
		 * Determines whether the Delete button should be enabled or disabled
		 * @private
		 */
		function fnShouldDeleteButtonGetEnabled (oModel, oMetaModel, aContexts, oControl) {
			// Get the DeleteRestrictions for the entity set
			var mDeleteRestrictions = fnGetDeleteRestrictions(oControl);

			// 1- Make Delete button disabled and assume all items are NOT deletable
			// 2- Check if the DeleteRestrictions are valid. if not-> Delete button disabled
			// 3- Check if the Deletable-path is defined. if not-> Delete button enabled.
			// if there is no DeleteRestrictions, this means the entities are deletable
			var bEnabled = false;
			var mRelatedEntitySet = oMetaModel.getODataEntitySet(oControl.getEntitySet());
			if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, mRelatedEntitySet.entityType, mDeleteRestrictions)) {
				if (aContexts.length > 0) {
					var sDeletablePath = mDeleteRestrictions && mDeleteRestrictions.Deletable && mDeleteRestrictions.Deletable.Path;
					if (sDeletablePath) {
						for (var i = 0; i < aContexts.length; i++) {
							if (oModel.getProperty(sDeletablePath, aContexts[i])) {
								bEnabled = true;
								break;
							}
						}
					} else {
						bEnabled = true;
					}
				}
			}
			
			return bEnabled;
		}
		
		/*
		 * Returns the Deletable Restrictions
		 * @param {object} oControl - must be of a Smart Control (e.g. SmartTable, SmartChart)
		 */
		function fnGetDeleteRestrictions(oControl) {
			var oMetaModel = oControl.getModel() && oControl.getModel().getMetaModel();
			var mEntitySet = oMetaModel && oMetaModel.getODataEntitySet(oControl.getEntitySet());
			var mDeleteRestrictions = mEntitySet && mEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			return mDeleteRestrictions;
		}
		
		/*
		* Update map /generic/listCommons/functionEnabled from selected context,
		* considering the applicable path and action-for
		*/
		function fillEnabledMapForBreakoutActions(aButtons, aContexts, oModel) {
			var oBreakoutActions = fnGetBreakoutActionsFromManifest(oModel);
			var oTemplatePrivateModel = oController.getView().getModel("_templPriv");
			var oBreakOutActionEnabled = oTemplatePrivateModel.getProperty("/generic/listCommons/breakoutActionsEnabled");
			if (oBreakoutActions) {
				fnUpdateBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions, aButtons, aContexts, oModel);
			}
			oTemplatePrivateModel.setProperty("/generic/listCommons/breakoutActionsEnabled", oBreakOutActionEnabled);
		}
		
		function fnUpdateBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions, aButtons, aContexts, oModel) {
			var bEnabled;
			for (var sAction in oBreakoutActions) {
				if (jQuery.inArray(oBreakoutActions[sAction].id, aButtons) !== -1) {
					bEnabled = true;
					if (oBreakoutActions[sAction].requiresSelection) {
						if (aContexts.length > 0) { // context selected
							if (oBreakoutActions[sAction].applicablePath !== undefined && oBreakoutActions[sAction].applicablePath !== "") {
								// loop on all selected contexts: at least one must be selected with applicablePath = true
								bEnabled = false;
								for (var iContext = 0; iContext < aContexts.length; iContext++) {
									// check if applicablePath is true
									var sNavigationPath = "";
									var aPaths = oBreakoutActions[sAction].applicablePath.split("/");
									if (aPaths.length > 1) {
										for (var iPathIndex = 0; iPathIndex < aPaths.length - 1; iPathIndex++) {
											sNavigationPath +=  "/" + aPaths[iPathIndex];
										}
									}
									var oObject = oModel.getObject(aContexts[iContext].getPath() + sNavigationPath);
									var sApplicablePath = aPaths[aPaths.length - 1];
									if (oObject[sApplicablePath] === true) {
										bEnabled = true;
										break;
									}	
								} 
							} 
						} else {
							// requiresSelection is defined, but no row is selected
							bEnabled = false;
						}
					}
					oBreakOutActionEnabled[oBreakoutActions[sAction].id] = {
							enabled: bEnabled
					};
				}
			}
		}

		function fnGetBreakoutActionsForTable(oTable) {
			var aButtons = [];
			var aTableToolbarContent = jQuery.grep(oTable.getCustomToolbar().getContent(), function(oControl) {
				return oControl.getMetadata().getName() === "sap.m.Button";
			});
			for (var iTableToolbarContent = 0; iTableToolbarContent < aTableToolbarContent.length; iTableToolbarContent++) {
				var aSplitId = aTableToolbarContent[iTableToolbarContent].getId().split("--");
				aButtons.push(aSplitId[aSplitId.length - 1]);
			}
			return aButtons;
		}

		function fnGetBreakoutActionsForFooter(oController) {
			var aButtons = [];
			var aFooterToolbarContent = [];
			var oPage = oController.getView().byId("page");
			if (oPage && oPage.getFooter()) {
				aFooterToolbarContent = jQuery.grep(oPage.getFooter().getContent(), function(oControl) {
					return oControl.getMetadata().getName() === "sap.m.Button";
				});
			}
			for (var iFooterToolbarContent = 0; iFooterToolbarContent < aFooterToolbarContent.length; iFooterToolbarContent++) {
				var aSplitId = aFooterToolbarContent[iFooterToolbarContent].getId().split("--");
				aButtons.push(aSplitId[aSplitId.length - 1]);
			}
			return aButtons;
		}

		function fnGetBreakoutActionsFromManifest(oModel) {
			// Loop on manifest for breakout actions
			var oManifest = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.ui5");
			var oExtensions = oManifest.extends && oManifest.extends.extensions && oManifest.extends.extensions["sap.ui.controllerExtensions"];
			if (oExtensions) {
				var	oTemplateExtensions = (oExtensions[oController.getOwnerComponent().getTemplateName()] || {})["sap.ui.generic.app"] || {};
				var oMetaModel = oModel.getMetaModel();
				var oBreakoutActions = (oTemplateExtensions[oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet()).name] || {})["Actions"];
				if (!oBreakoutActions) {
					oBreakoutActions = {};
					var oSections = (oTemplateExtensions[oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet()).name] || {})["Sections"];
					if (oSections) {
						for (var sSection in oSections) {
							oBreakoutActions = jQuery.extend(oBreakoutActions, oSections[sSection]["Actions"]);
						}
					}
				}
				return oBreakoutActions;
			}
		}

		/*
		 * Returns a parental table of the given element or null
		 *
		 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a parental table
		 * @returns {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} The parent table or null
		 * @public
		 */
		function getOwnerControl(oSourceControl){
			var oCurrentControl = oSourceControl;
			while (oCurrentControl) {
					if (oCurrentControl instanceof ResponsiveTable || oCurrentControl instanceof UiTable || oCurrentControl instanceof SmartTable || oCurrentControl instanceof sap.ui.comp.smartchart.SmartChart) {
						return oCurrentControl;
					}

					if (oCurrentControl.getParent){
						oCurrentControl = oCurrentControl.getParent();
					} else {
						return null;
					}

				}
			return null;
		}

		/*
		 * Returns the binding of the given table
		 *
		 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table which's binding is to returned
		 * @returns {object} The found binding or null
		 * @public
		 */
		function getTableBinding(oTable) {
			if (oTable instanceof SmartTable) {
				oTable = oTable.getTable(); // get SmartTable's inner table first
			}

			if (oTable instanceof UiTable) {
				return oTable.getBindingInfo("rows");
			} else if (oTable instanceof ResponsiveTable) {
				return oTable.getBindingInfo("items");
			}

			return null;
		}

		/*
		 * Triggers navigation from a given list item.
		 *
		 * @param {sap.ui.model.context} selected context for navigation
		 * @param {object} oTable The table from which navigation was triggered
		 *        control in the table
		 * @public
		 */
		function fnNavigateFromListItem(oContext, oTable) {
			var sSelectedPath = oContext.getPath();
			var oComponent = oController.getOwnerComponent();

			// binding path of component - either binding path of list (list screen e.g. /SalesOrder) or binding path of details screen (e.g.
			// /SalesOrder(123) )
			// var sPath = oComponent.getBindingContext().getPath();
			var sPath = "";
			if (oComponent.getComponentContainer().getElementBinding()) {
				sPath = oComponent.getComponentContainer().getElementBinding().getPath();
			}

			// check whether it is a navigation property binding or just a collection
			var sNavigationProperty = null;

			if (sSelectedPath.indexOf(sPath) !== 0) {
				// relative binding - table bound to navigation property e.g. Item - get binding of embedded table in details screen
				sNavigationProperty = getTableBinding(oTable).path;
			}
			
			var bReplace = !oServices.oApplication.isNewHistoryEntryRequired(oContext, sNavigationProperty);
			var iDisplayMode;
			if (isDraftEnabled()){
				iDisplayMode = oServices.oDraftController.isActiveEntity(oContext) ? 1 : 6;
			} else {
				iDisplayMode = oController.getOwnerComponent().getModel("ui").getProperty("/editable") ? 6 : 1;
			}
			oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, bReplace, iDisplayMode);
		}

		/*
		 * Triggers navigation to the specified context.
		 *
		 * @param {sap.ui.model.Context} context for navigation
		 * @param {object} [oNavigationData] object containing navigation data
		 */
		function fnNavigateToContext(oContext, oNavigationData) {
			var sNavigationProperty;
			if (oNavigationData && oNavigationData.navigationProperty) {
				sNavigationProperty = oNavigationData.navigationProperty;
			}
			oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, false);
		}

		function fnHandleError(oError) {
			if (oError instanceof NavError) {
				MessageBox.show(oError.getErrorCode(), {
					title: getText("ST_GENERIC_ERROR_TITLE")
				});
			}
		}

		function fnNavigateExternal(oOutbound, oState) {
			fnProcessDataLossConfirmationIfNonDraft(function() {
				oNavigationHandler = getNavigationHandler();
				oNavigationHandler.navigate(oOutbound.semanticObject, oOutbound.action, oNavigationHandler
						.mixAttributesAndSelectionVariant(oOutbound.parameters).toJSONString(), oState.getCurrentAppState
						&& oState.getCurrentAppState() || {}, fnHandleError);
			}, jQuery.noop, oState, "LeavePage");
		}
		
		function formatDraftLockText(IsActiveEntity, HasDraftEntity, LockedBy) {
			if (!IsActiveEntity) {
				// current assumption: is my Draft as I don't see other's draft -> TODO: to be checked
				return getText("DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				return getText(LockedBy ? "LOCKED_OBJECT" : "UNSAVED_CHANGES");
			} else {
				return ""; // not visible
			}
		}

		function getDraftPopover() {
			var oDraftPopover = getDialogFragment("sap.suite.ui.generic.template.fragments.DraftAdminDataPopover", {
				formatText: function() {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					var sKey = arguments[0];
					if (!sKey) {
						return "";
					}
					if (aArgs.length > 0 && (aArgs[0] === null || aArgs[0] === undefined || aArgs[0] === "")) {
						if (aArgs.length > 3 && (aArgs[3] === null || aArgs[3] === undefined || aArgs[3] === "")) {
							return (aArgs.length > 2 && (aArgs[1] === null || aArgs[1] === undefined || aArgs[1] === ""))
									? ""
									: aArgs[2];
						} else {
							return getText(sKey, aArgs[3]);
						}
					} else {
						return getText(sKey, aArgs[0]);
					}
				},
				closeDraftAdminPopover: function() {
					oDraftPopover.close();
				},
				formatDraftLockText: formatDraftLockText
			}, "admin");
			return oDraftPopover;
		}
		
		function fnProcessDataLossConfirmationIfNonDraftImpl(fnProcessFunction, fnCancelFunction, oState, sMode, bNoBusyCheck) {
			var oBusyHelper = oServices.oApplication.getBusyHelper();
			if (!bNoBusyCheck && oBusyHelper.isBusy()) {
				return; // do not navigate away from a page that is currently busy 
			}
			// DataLost Popup only for Non-Draft
			if ( !isDraftEnabled() ) {
				//Test all registered UnsavedDataCheckFunctions
				var bHasExternalChanges = false;
				if (oState && oState.aUnsavedDataCheckFunctions){
					bHasExternalChanges = oState.aUnsavedDataCheckFunctions.some(function(fnUnsavedCheck) {
						return fnUnsavedCheck();
					});
				}
				if ( bHasExternalChanges || oController.getView().getModel().hasPendingChanges() ) { 
					var oExecutionPromise;
					fnDataLossConfirmation(
							function() { 
								oController.getView().getModel().resetChanges();
								//Notification for reuse components and extensions
								oComponentUtils.fire(oController, "AfterCancel", {});
								oExecutionPromise = fnProcessFunction();
							}, 
							function(){
								oExecutionPromise = fnCancelFunction();
							}, 
							sMode );
					return oExecutionPromise;
				}
			}
			return fnProcessFunction();
		}
		
		function fnProcessDataLossTechnicalErrorConfirmation(fnProcessFunction, fnCancelFunction, oState) {		
			//Test all registered UnsavedDataCheckFunctions
			var bHasExternalChanges = false;
			if (oState && oState.aUnsavedDataCheckFunctions){
				bHasExternalChanges = oState.aUnsavedDataCheckFunctions.some(function(fnUnsavedCheck) {
					return fnUnsavedCheck();
				});
			}
			if ( bHasExternalChanges || oController.getView().getModel().hasPendingChanges() ) { 
				var oExecutionPromise;
				fnDataLossTechnicalErrorConfirmation(
						function() { 
							oController.getView().getModel().resetChanges();
							//Notification for reuse components and extensions
							oComponentUtils.fire(oController, "AfterCancel", {});
							oExecutionPromise = fnProcessFunction();
						}, 
						function(){
							oExecutionPromise = fnCancelFunction();
						} );
				return oExecutionPromise;
			}
			return fnProcessFunction();
		}
		
		function fnProcessDataLossConfirmationIfNonDraft(fnProcessFunction, fnCancelFunction, oState, sMode, bNoBusyCheck){
			if (bNoBusyCheck){
				return fnProcessDataLossConfirmationIfNonDraftImpl(fnProcessFunction, fnCancelFunction, oState, sMode, true);	
			}
			oServices.oApplication.performAfterSideEffectExecution(fnProcessDataLossConfirmationIfNonDraftImpl.bind(null, fnProcessFunction, fnCancelFunction, oState, sMode, false));
		}
		
		var fnOnDataLossConfirmed; // the current handler for data loss confirmation
		function fnDataLossConfirmation(onDataLossConfirmed, onDataLossCancel, sMode) {
			// note that we must pass the event handler to a global variable, since always the version of onDataLossOK will be
			// executed which was created, when fnDataLossConfirmation was called for the first time 
			// (see documentation of getDialogFragment).
			fnOnDataLossConfirmed = onDataLossConfirmed;
			if (!sMode){
				sMode = "LeavePage";
			}
			var oDataLossPopup = getDialogFragment("sap.suite.ui.generic.template.fragments.DataLoss", {
				onDataLossOK: function() {
					oDataLossPopup.close();
					fnOnDataLossConfirmed(); // call the version of onDataLossConfirmed which is currently valid
				},
				onDataLossCancel: function() {
					oDataLossPopup.close();
					onDataLossCancel();
				}
			}, "dataLoss");
			
			var oDataLossModel = oDataLossPopup.getModel("dataLoss");
			oDataLossModel.setProperty("/mode", sMode);
			oDataLossPopup.open();
		}
		
		var fnOnDataTechnicalErrorLossConfirmed; // the current handler for data loss confirmation
		function fnDataLossTechnicalErrorConfirmation(onDataTechnicalErrorLossConfirmed, onDataLossCancel) {

			fnOnDataTechnicalErrorLossConfirmed = onDataTechnicalErrorLossConfirmed;
			var oDataLossPopup = getDialogFragment("sap.suite.ui.generic.template.fragments.DataLossTechnicalError", {
				onDataLossOK: function() {
					oDataLossPopup.close();
					fnOnDataTechnicalErrorLossConfirmed(); // call the version of onDataLossConfirmed which is currently valid
				},
				onDataLossCancel: function() {
					oDataLossPopup.close();
					onDataLossCancel();
				}
			});
			
			oDataLossPopup.open();
		}

		function fnSecuredExecutionImpl(fnFunction, mParameters, oState, oBusyHelper, resolve, reject) {

			if (mParameters.busy.check && oBusyHelper.isBusy()) {
				reject(); 
				return;
			}
			var oPromise = (mParameters.dataloss.popup ? fnProcessDataLossConfirmationIfNonDraft(fnFunction, reject,
				oState, (mParameters.dataloss.navigation ? "LeavePage" : "Proceed"), true) : fnFunction());
				
			if (oPromise instanceof Promise) {
				oPromise.then(resolve, reject);
			} else {
				resolve();
			}
		}
		
		function fnSecuredExecution(fnFunction, mParameters, oState) {
			mParameters = jQuery.extend(true, {
				busy: {set: true, check: true},
				dataloss: {popup: true, navigation: false}
			}, mParameters);
			var oBusyHelper = oServices.oApplication.getBusyHelper();
			var oResultPromise = new Promise(function(resolve, reject) {
				oServices.oApplication.performAfterSideEffectExecution(fnSecuredExecutionImpl.bind(null, fnFunction, mParameters, oState, oBusyHelper, resolve, reject));
			});
			if (mParameters.busy.set) {
				oBusyHelper.setBusy(oResultPromise);
			}
			return oResultPromise;
		}
		
		function getNavigationHandler() {
			oNavigationHandler = oNavigationHandler || new NavigationHandler(oController);
			return oNavigationHandler;
		}

		function fnCheckToolbarIntentsSupported(oSmartTable, oPrivModel) {
			var oAppComponent, oXApplNavigation, oSupportedIntents, aToolbarContent, iButtonsNumber, aLinksToCheck = [], aInternalLinks = [], i, oCustomData, sSemObj, sAction, oLink, oInternalLink, oDeferredLinks;
			var iLinksNumber, oSemObjProp;
			oAppComponent = oController.getOwnerComponent().getAppComponent();
			oXApplNavigation = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService && sap.ushell.Container.getService("CrossApplicationNavigation");
			oSupportedIntents = oPrivModel.getProperty("/generic/supportedIntents/");
			//handle toolbar buttons
			aToolbarContent = oSmartTable.getCustomToolbar().getContent();
			iButtonsNumber = aToolbarContent.length;
			for (i = 0; i < iButtonsNumber; i++) {
				oCustomData = this.getElementCustomData(aToolbarContent[i]);
				if (oCustomData.hasOwnProperty("SemanticObject") && oCustomData.hasOwnProperty("Action")) {
					sSemObj = oCustomData.SemanticObject;
					sAction = oCustomData.Action;
					oLink = {
						semanticObject: sSemObj,
						action: sAction,
						ui5Component: oAppComponent
					};
					aLinksToCheck.push([oLink]);
					oInternalLink = jQuery.extend({}, oLink);
					oInternalLink.bLinkIsSupported = false;
					aInternalLinks.push(oInternalLink);
				}
			}

			if (aLinksToCheck.length > 0 && !!oXApplNavigation) {
			oDeferredLinks = oXApplNavigation.getLinks(aLinksToCheck);
			oDeferredLinks
				.done(function(aLinks) {
					oSupportedIntents = oPrivModel.getProperty("/generic/supportedIntents/");
					iLinksNumber = aLinks.length;
					//entries in aLinks should correspond to aInternalLinks: if a link is not supported an empty object is returned by the method getLinks
					for (i = 0; i < iLinksNumber; i++) {
						if (aLinks[i][0].length > 0) {
							aInternalLinks[i].bLinkIsSupported = true;
						}
						// add the value to the model
						sSemObj = aInternalLinks[i].semanticObject;
						sAction = aInternalLinks[i].action;

						oSemObjProp = oPrivModel.getProperty("/generic/supportedIntents/" + sSemObj);
						if (!oSemObjProp) {  // no semantic object in the model yet
							oSupportedIntents[sSemObj] = {};
							oSupportedIntents[sSemObj][sAction] = 
							{
								"visible" :aInternalLinks[i].bLinkIsSupported
							};
						} else if (!oSemObjProp[sAction]) {  // no action in the model yet
							oSemObjProp[sAction] =
							{
								"visible" :aInternalLinks[i].bLinkIsSupported
							};
						} else {
							oSemObjProp[sAction]["visible"] = aInternalLinks[i].bLinkIsSupported;
						}
					}
				});
			}
		}

		/* eslint-disable */
		var getNavigationHandler = testableHelper.testable(getNavigationHandler, "getNavigationHandler");
		var isDraftEnabled = testableHelper.testable(isDraftEnabled, "isDraftEnabled");
		/* eslint-enable */

		return {
			getNavigationProperty: getNavigationProperty,
			getText: getText,
			isDraftEnabled: isDraftEnabled,
			getNavigationHandler: getNavigationHandler,

			executeGlobalSideEffect: function() {
				if (isDraftEnabled()) {
					var oView = oController.getView();
					oView.attachBrowserEvent(
							"keyup",
							function(oBrowswerEvent) {
								if (oBrowswerEvent.keyCode === 13 && oView.getModel("ui").getProperty("/editable")) {
									//Getting the value of bForceGlobalRefresh from Manifest
									
									var oManifest = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.ui.generic.app");
									var bForceGlobalRefresh = oManifest.settings && oManifest.settings.forceGlobalRefresh;
									oServices.oApplicationController.executeSideEffects(oView.getBindingContext(),null,null,bForceGlobalRefresh);
								}
							});
				}
			},
			setEnabledToolbarButtons: fnSetEnabledToolbarButtons,
			setEnabledFooterButtons: fnSetEnabledFooterButtons,
			fillEnabledMapForBreakoutActions: fillEnabledMapForBreakoutActions,
			getBreakoutActionsForTable: fnGetBreakoutActionsForTable,
			getBreakoutActionsForFooter: fnGetBreakoutActionsForFooter,
			getBreakoutActionsFromManifest: fnGetBreakoutActionsFromManifest,
			getSelectedContexts: getSelectedContexts,
			getDeleteRestrictions: fnGetDeleteRestrictions,
			
			setPrivateModelControlProperty: fnSetPrivateModelControlProperty,
			
			navigateFromListItem: fnNavigateFromListItem,
			navigateToContext: fnNavigateToContext,
			navigateExternal: fnNavigateExternal,

			getCustomData: function(oEvent) {
				var aCustomData = oEvent.getSource().getCustomData();
				var oCustomData = {};
				for (var i = 0; i < aCustomData.length; i++) {
					oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
				}
				return oCustomData;
			},

			formatDraftLockText: formatDraftLockText,

			showDraftPopover: function(oBindingContext, oTarget) {
				var oPopover = getDraftPopover();
				var oAdminModel = oPopover.getModel("admin");
				oAdminModel.setProperty("/IsActiveEntity", oBindingContext.getProperty("IsActiveEntity"));
				oAdminModel.setProperty("/HasDraftEntity", oBindingContext.getProperty("HasDraftEntity"));
				oPopover.bindElement({
					path: oBindingContext.getPath() + "/DraftAdministrativeData"
				});
				if (oPopover.getBindingContext()) {
					oPopover.openBy(oTarget);
				} else {
					oPopover.getObjectBinding().attachDataReceived(function() {
						oPopover.openBy(oTarget);
					});
					// Todo: Error handling
				}
			},

			// provide the density class that should be used according to the environment (may be "")
			getContentDensityClass: function() {
				return oServices.oApplication.getContentDensityClass();
			},

			// defines a dependency from oControl to the view
			attachControlToView: fnAttachControlToView,

			/**
			 *
			 * @function
			 * @name sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment(sName,
			 *       oFragmentController, sModel)
			 * @param sName name of a fragment defining a dialog for the current view
			 * @param oFragmentController controller for the fragment containing event handlers and formatters used by the
			 *          fragment
			 * @param sModel optional, name of a model. If this parameter is truthy a JSON model with the given name will be
			 *          attached to the dialog
			 * @return an instance of the specififed fragment which is already attached to the current view. Note that each
			 *         fragment will only be instantiated once. Hence, when the method is called several times for the same
			 *         name the same fragment will be returned in each case. <b>Attention:</b> The parameters
			 *         <code>oFragmentController</code> and <code>sModel</code> are only evaluated when the method is
			 *         called for the first time for the specified fragment. Therefore, it is essential that the functions in
			 *         <code>oFragmentController</code> do not contain 'local state'.
			 */
			getDialogFragment: getDialogFragment,
			processDataLossConfirmationIfNonDraft: fnProcessDataLossConfirmationIfNonDraft,
			processDataLossTechnicalErrorConfirmation: fnProcessDataLossTechnicalErrorConfirmation,
			securedExecution: fnSecuredExecution,
			getOwnerControl: getOwnerControl,
			getTableBinding: getTableBinding,
			getElementCustomData: function(oElement) {
				var oCustomData = {};
				if (oElement instanceof sap.ui.core.Element) {
					oElement.getCustomData().forEach(function(oCustomDataElement) {
						oCustomData[oCustomDataElement.getKey()] = oCustomDataElement.getValue();
					});
				}
				return oCustomData;
			},
			triggerAction: function(aContexts, sBindingPath, oCustomData, oControl, oState) {
				// Assuming that this action is triggered from an action inside a table row.
				// Also this action is intended for triggering an OData operation.
				// i.e: Action, ActionImport, Function, FunctionImport
				// We require some properties to be defined in the Button's customData:
				//   Action: Fully qualified name of an Action, ActionImport, Function or FunctionImport to be called
				//   Label: Used to display in error messages
				// Once the CRUDManager callAction promise is resolved, if we received a context back from the OData call
				// we check to see if the context that was sent (actionContext) and the context that is returned (oResponse.reponse.context).
				// If they are the same we do nothing. If they are different we trigger any required navigations and set the newly navigated
				// page to dirty using the setMeToDirty function of the NavigationController so as to enter into edit mode and set the page
				// to edit mode.
				fnProcessDataLossConfirmationIfNonDraft(function() {
					oServices.oCRUDManager.callAction({
						functionImportPath: oCustomData.Action,
						contexts: aContexts,
						sourceControl: oControl,
						label: oCustomData.Label,
						operationGrouping: "",
						navigationProperty: ""
					}).then(function(aResponses) {
						if (aResponses && aResponses.length > 0) {
							var oResponse = aResponses[0];
	
							if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())) {
								oServices.oViewDependencyHelper.setMeToDirty(oController.getOwnerComponent(), sBindingPath);
							}
						}
					});
				}, jQuery.noop, oState, "Proceed");
			},
			checkToolbarIntentsSupported: fnCheckToolbarIntentsSupported
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonUtils", {
		constructor: function(oController, oServices, oComponentUtils) {

			jQuery.extend(this, getMethods(oController, oServices, oComponentUtils));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageButtonHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageButtonHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopoverItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageButtonHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/m/MessagePopover", "sap/m/MessagePopoverItem", "sap/ui/model/Filter",
	"sap/ui/model/FilterOperator", "sap/suite/ui/generic/template/lib/testableHelper"
], function(jQuery, BaseObject, MessagePopover, MessagePopoverItem, Filter, FilterOperator, testableHelper) {
	"use strict";
	
	Filter = testableHelper.observableConstructor(Filter, true);                        
	
	var oPersistentFilter = new Filter({
								path: "persistent",
								operator: FilterOperator.EQ,
								value1: false
							}); // exclude all messages that are persistent for frontend (i.e. transient for backend)
	var oValidationFilter = new Filter({
								path: "validation",
								operator: FilterOperator.EQ,
								value1: true
							}); // include all validation messages (i.e. frontend-messages)
							
	var oImpossibleFilter = new Filter({
								path: "validation",
								operator: FilterOperator.EQ,
								value1: "bla"
							});

	function getMethods(oCommonUtils, oController) {

		var oMaster;
		var aSlaves;
		
		var oMessageButton = oController.byId("showMessages");
		var oMessagePopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.MessagePopover");
		// Add message model as an own model with name msg
		oMessagePopover.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "msg");
		var oItemBinding;
		var oEntityFilter; // fixed filter for the entity set of the component this instance belongs to. Will be ORed with a filter for the current binding path, oValidationFilter, and external filters
		(function(){
		    var oComponent = oController.getOwnerComponent();
		    oEntityFilter = new Filter({
				path: "target",
				operator: FilterOperator.EQ,
				value1: "/" + oComponent.getEntitySet()
			});		    
		    // Add message model as an own model with name msg
		    oItemBinding = oMessagePopover.getBinding("items");
			var oTemplatePrivate = oComponent.getModel("_templPriv");
			oTemplatePrivate.setProperty("/generic/messageCount", 0);
			var sMessageButtonTooltip = oCommonUtils.getText("MESSAGE_BUTTON_TOOLTIP_P", 0);
			oTemplatePrivate.setProperty("/generic/messageButtonTooltip", sMessageButtonTooltip);
			oItemBinding.attachChange(function() {
				var iCount = oItemBinding.getLength();
				oTemplatePrivate.setProperty("/generic/messageCount", iCount);
				sMessageButtonTooltip = oCommonUtils.getText(iCount === 1 ? "MESSAGE_BUTTON_TOOLTIP_S" : "MESSAGE_BUTTON_TOOLTIP_P", iCount);
				oTemplatePrivate.setProperty("/generic/messageButtonTooltip", sMessageButtonTooltip);
			});
		})();

		var aFilterProvider = []; //Callback functions registered by reuse components (or break-outs) that want to add their message filters
		var sCurrentBindingPath; // the binding path currently valid for the page this instance is responsible for
		var iCurrentCallCount = 0; // a counter which is increased each time sCurrentBinding path is changed
		var fnNewFilter; // function fnResolved (see below) with first parameter bound to iCurrentCallCount. Registered at Promises provided by external filter providers.
		var aCurrentFilters; // a list of filters currently set. They are combined by OR. The resulting filter will afterwards be ANDed with oPersistentFilter.
							// The result of this is used to filter the messages.

		// Adds an external filter definition
		// Returns whether filters have been changed synchronously
		function addAnExternalFilterDefinition(vFilterDefinition){
			if (jQuery.isArray(vFilterDefinition)) {
				var bRet = false;
				for (var i = 0; i < vFilterDefinition.length; i++){
					bRet = addAnExternalFilterDefinition(vFilterDefinition[i]) || bRet;
				}
				return bRet;
			}
			if (vFilterDefinition instanceof Promise){
				vFilterDefinition.then(fnNewFilter);
				return false;
			}
			// vFilterDefinition must in fact be a filter
			aCurrentFilters.push(vFilterDefinition);
			return true;
		}
		
		function getAllCurrentFilters(){
			var aMyFilters = aCurrentFilters;
			if (aSlaves){
				for (var i = 0; i < aSlaves.length; i++){
					aMyFilters = aMyFilters.concat(aSlaves[i].filters);	
				}	
			}
			return aMyFilters;
		}
		
		// Adapts the binding for the messages according to the current state of aCurrentFilters
		function fnAdaptBinding(){
			var aMyFilters = getAllCurrentFilters();
			if (oMaster){
				oMaster.propagateFilters(aMyFilters);	
			} else if (aSlaves){ // not suspended
				var oContextFilter = new Filter(aMyFilters.concat(oValidationFilter), false /* filter conjunction OR instead of AND */ );
				var aFilters = [oContextFilter, oPersistentFilter];
				oItemBinding.filter(aFilters);
			}
		}
		
		// This method is called when a Promise that has been provided by a filter provider is resolved.
		// iCallCount is the value of iCurrentCallCount that was valid when the Promise was provided by the filter provider.
		// Note that the function does nothing when the iCurrentCallCount meanwhile has a different value (i.e. sCurrentBindingPath has meanwhile changed)
		// vFilterDefinition is the FilterDefinition the filter resolves to.
		function fnResolved(iCallCount, vFilterDefinition){
			if (iCallCount === iCurrentCallCount && addAnExternalFilterDefinition(vFilterDefinition)){
				fnAdaptBinding(); // adapt the binding after the set of filters has been adapted
			}
		}
		
		// fnProvider is a filter provider which has been registered via registerMessageFilterProvider.
		// At each time registerMessageFilterProvider must be able to provide a FilterDefinition.
		// A FilterDefinition is either
		// - a filter or
		// - an array of FilterDefinitions or
		// - or a Promise that resolves to a FilterDefinition
		// This function calls fnProvider and ensures that the filter(s) provided by this call are added to aCurrentFilters.
		// In case the filters are provided asynchronously, it is also ensured that the changed filters will be applied afterwards.
		// Returns whether the filters have been changed (synchronously) 
		function addFilterFromProviderToCurrentFilter(fnProvider){
			var oFilterDefinition = fnProvider();
			return addAnExternalFilterDefinition(oFilterDefinition);	
		}
		
		// Ensure that addFilterFromProviderToCurrentFilter is called for all registered filter providers
		function addExternalFiltersToCurrentFilter() {
			aFilterProvider.forEach(addFilterFromProviderToCurrentFilter);
		}

		// adapt the filters to a new binding path
		function adaptToContext(sBindingPath) {
			sCurrentBindingPath = sBindingPath;
			iCurrentCallCount++;
			fnNewFilter = fnResolved.bind(null, iCurrentCallCount);

			// Show messages for current context including all "property children" AND for
			// messages given for the entire entity set
			aCurrentFilters = [
				new Filter({
					path: "target",
					operator: FilterOperator.StartsWith,
					value1: sCurrentBindingPath
				}),
				oEntityFilter
			];
			addExternalFiltersToCurrentFilter(); //Check/add external filters
			fnAdaptBinding();
		}

		// register a new filter provider. In case a binding path alrerady has been set, the new provider is called immediately
		function registerMessageFilterProvider(fnProvider) {
			aFilterProvider.push(fnProvider);
			if (sCurrentBindingPath !== undefined && addFilterFromProviderToCurrentFilter(fnProvider)){
				fnAdaptBinding();
			}
		}
		
		var fnShowMessagePopoverImpl;
		function fnShowMessagePopover(){
			if (oMaster){
				oMaster.showMessagePopover();
				return;
			}
			if (aSlaves){ // not resumed
				fnShowMessagePopoverImpl = fnShowMessagePopoverImpl || oMessagePopover.openBy.bind(oMessagePopover, oMessageButton);
				// workaround to ensure that oMessageButton is rendered when openBy is called
				setTimeout(fnShowMessagePopoverImpl, 0);
			}
		}
		
		function fnSuspend(){
			oMaster = null;
			if (aSlaves){
				for (var i = 0; i < aSlaves.length; i++){
					aSlaves[i].free();
				}
				aSlaves = null;
				aCurrentFilters = null;
				oItemBinding.filter(oImpossibleFilter);				
			}
		}
		
		function fnPropagateFilters(iPosition, aPropagatedFilters){
			if (aSlaves){
				aSlaves[iPosition].filters = aPropagatedFilters;
				if (aCurrentFilters){ // adaptToContext has already been called
					fnAdaptBinding();
				}
			}
		}
		
		function fnResume(aSlaveButtonHelpers){
			aSlaves = [];
			for (var i = 0; i < aSlaveButtonHelpers.length; i++){
				var oMeAsMaster = {
					showMessagePopover: fnShowMessagePopover,
					propagateFilters: fnPropagateFilters.bind(null, i)
				};
				var oSlave = aSlaveButtonHelpers[i].serve(oMeAsMaster);
				aSlaves.push(oSlave);
				
			}
			if (aCurrentFilters){ // adaptToContext has already been called
				fnAdaptBinding();
			}
		}
		
		function fnFree(){
			oMaster = null;	
		}
		
		function fnServe(oMasterProxy){
			oMaster = oMasterProxy;
			oItemBinding.filter(oImpossibleFilter);
			return { 
				filters: aCurrentFilters ? getAllCurrentFilters() : [],
				free: fnFree
			};
		}

		return {
			adaptToContext: adaptToContext,
			toggleMessagePopover: oMessagePopover.toggle.bind(oMessagePopover, oMessageButton),
			showMessagePopover: fnShowMessagePopover,
			registerMessageFilterProvider: registerMessageFilterProvider,
			suspend: fnSuspend,
			resume: fnResume,
			serve: fnServe
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.MessageButtonHelper", {
		constructor: function(oCommonUtils, oController) {
			jQuery.extend(this, (testableHelper.testableStatic(getMethods, "MessageButtonHelper"))(oCommonUtils, oController));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/MessageButtonHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ViewDependencyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ViewDependencyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ViewDependencyHelper",["sap/ui/base/Object", "sap/suite/ui/generic/template/js/AnnotationHelper", "sap/suite/ui/generic/template/lib/testableHelper"], 
		function(BaseObject, AnnotationHelper, testableHelper) {
	"use strict";

	// Class for busy handling
	function getMethods(oTemplateContract) {

		function setAllPagesDirty(aExcludeComponentIds){
			aExcludeComponentIds = aExcludeComponentIds || []; 
			for (var sId in oTemplateContract.componentRegistry){
				if (aExcludeComponentIds.indexOf(sId) === -1){
					var oComponentRegistryEntry = oTemplateContract.componentRegistry[sId];
					oComponentRegistryEntry.oComponent.setIsRefreshRequired(true);
				}
			}
		}
		
		/*
		 * Sets parent page to dirty
		 * @param {Object} oComponent - the component which parent shall be set to dirty
		 * @param {String} sNavigationProperty - only this navigation property is set to dirty
		 */
		function setParentToDirty(oComponent, sNavigationProperty, bNoRecursive) {
			var oSettings, oParentSettings, oParent, mRefreshInfos, mComponentRegistry = oTemplateContract.componentRegistry;

			// find current view and search its parent
			var sMyId = oComponent.getId();
			oSettings = oComponent.getComponentContainer().getSettings();
			var oRouteConfig = oSettings && oSettings.routeConfig;
			if (oRouteConfig){
				if (oRouteConfig.viewLevel === 0) {
					return false;
				} else {
					for (var sComponentId in mComponentRegistry){
						if (sComponentId !== sMyId){
							oParentSettings = mComponentRegistry[sComponentId].oComponent.getComponentContainer().getSettings();
							if (oParentSettings && oParentSettings.routeConfig && oParentSettings.routeConfig.viewLevel === (oRouteConfig.viewLevel - 1) && (oRouteConfig.viewLevel === 1 || oParentSettings.routeConfig.entitySet === oRouteConfig.parentEntitySet)) {
								oParent = mComponentRegistry[sComponentId].oComponent;
								if (sNavigationProperty) {
									mRefreshInfos = mComponentRegistry[sComponentId].oGenericData.mRefreshInfos;
									mRefreshInfos[sNavigationProperty] = true;
								} else {
									if (typeof oParent.setIsRefreshRequired === "function") {
										oParent.setIsRefreshRequired(true);
									}
								}

								// there could be more components with the same entity set on the parent level - not yet supported due to unique ID concept but will be replaced once we have the component hierarchy/
								break;
							}
						}
					}
				}
			}
		}


		/*
		 * Sets parent page to dirty
		 * @param {Object} oComponent - the component that shall be set to dirty
		 * @param {String} sNavigationProperty - only this navigation property is set to dirty
		 */
		function setMeToDirty(oComponent, sNavigationProperty) {
			if (sNavigationProperty) {
				var mRefreshInfos = oTemplateContract.componentRegistry[oComponent.getId()].oGenericData.mRefreshInfos;
				mRefreshInfos[sNavigationProperty] = true;
			} else {
				if (typeof oComponent.setIsRefreshRequired === "function"){
					oComponent.setIsRefreshRequired(true);
				}
			}
		}

		
		/*
		 * get children - temporarily added, to be refactored
		 *
		 */
		function getChildren(oComponent) {
			var aChildren = [];
			var oSettings = oComponent.getComponentContainer().getSettings();
			for (var sOtherComponentID in oTemplateContract.componentRegistry) {
				var oOtherComponent = oTemplateContract.componentRegistry[sOtherComponentID];
				var oOtherSettings = oOtherComponent.oComponent.getComponentContainer().getSettings();
				if (oSettings.routeConfig.viewLevel + 1 === oOtherSettings.routeConfig.viewLevel
					&& oSettings.routeConfig.entitySet === oOtherSettings.routeConfig.parentEntitySet) {
					aChildren.push(oOtherComponent.oComponent);
				}
			}
			return aChildren;
		}
		
		/*
		 * get successors - temporarily added, to be refactored
		 *
		 */
		function getSuccessors(oComponent) {
			var aSuccessors = [];
			var aChildren = getChildren(oComponent);
			for (var i = 0; i < aChildren.length; i++){
				aSuccessors = aSuccessors.concat(getSuccessors(aChildren[i]));
			}
			return aSuccessors.concat(aChildren);
		}
		
		/*
		 * Unbind all children components
		 * @param {Object} oComponent - the component which children should be unbinded
		 * @param {boolean} bAndMe - information whether the provided component itself is also affected
		 */
		function unbindChildren(oComponent, bAndMe) {
			var aSuccessors = getSuccessors(oComponent);
			for (var i = 0; i < aSuccessors.length; i++) {
				oTemplateContract.componentRegistry[aSuccessors[i].getId()].oComponent.getComponentContainer().unbindElement();
			}
			if (bAndMe){
				oComponent.getComponentContainer().unbindElement();	
			}
		}
		
		/*
		 * Sets the root page to dirty
		 *
		 */
		function setRootPageToDirty() {
			if (oTemplateContract.rootContainer){
				var oInstance = oTemplateContract.rootContainer.getComponentInstance();
				if (oInstance && typeof oInstance.setIsRefreshRequired === "function") {
						oInstance.setIsRefreshRequired(true);
				}
			}
		}
		
		// Expose selected private functions to unit tests
		/* eslint-disable */
		var setParentToDirty = testableHelper.testable(setParentToDirty, "setParentToDirty");
		/* eslint-enable */
		
		return {
			setAllPagesDirty: setAllPagesDirty,
			setParentToDirty: setParentToDirty,
			setMeToDirty: setMeToDirty,
			unbindChildren: unbindChildren,
			setRootPageToDirty: setRootPageToDirty
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ViewDependencyHelper", {
		constructor: function(oTemplateContract) {
			jQuery.extend(this, getMethods(oTemplateContract));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ViewDependencyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.routingHelper') ) {
/* Static helper class of NavigationController used to initialize the routing of the app during startup
 * More precisely the following tasks are performed:
 * - Create routes from the pages-section of the manifest
 * - Process startup parameters
 * - Finally, initialize router
 * Note that all methods of this class use a parameter oNavigationControllerProxy. This is a copy of the public NavigationController
 * enhanced by attributes oAppComponent, oRouter, oTemplateContract, and oHashChanger and a method fnInitializationResolve (which is to be called, when everything is done).
 */

jQuery.sap.declare('sap.suite.ui.generic.template.lib.routingHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.f.FlexibleColumnLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.routing.Targets'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/routingHelper",["sap/f/FlexibleColumnLayout", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/generic/app/util/ModelUtil",
		"sap/suite/ui/generic/template/lib/CRUDHelper", "sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler",
		"sap/suite/ui/generic/template/lib/testableHelper", "sap/m/routing/Targets"
	],
	function(FlexibleColumnLayout, Filter, FilterOperator, ModelUtil, CRUDHelper, FlexibleColumnLayoutHandler, testableHelper, Targets) {
		"use strict";
		
		function createTarget(oRouter, sControlId, sViewName, sTargetName, sControlAggregation) {
			var oTarget = {};
			oTarget = {
				viewName: sViewName,
				controlId: sControlId,
				controlAggregation: sControlAggregation
			};

			var oTargets = oRouter.getTargets();
			oTargets.addTarget(sTargetName, oTarget);
		}
		
		function createMessagePageTargets(oNavigationControllerProxy, sTargetControlId){
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.createMessagePageTargets(createTarget.bind(null, oNavigationControllerProxy.oRouter, sTargetControlId, "sap.suite.ui.generic.template.fragments.MessagePage"));
			} else {
				createTarget(oNavigationControllerProxy.oRouter, sTargetControlId, "sap.suite.ui.generic.template.fragments.MessagePage", "messagePage", "pages");	
			}
		}
		
		/**
		 * Creates necessary routing metadata from configuration and adds it to the Router
		 *
		 * @public
		 * @param {String} sNavigationTargetId - the navigation target ID
		 * @returns {String} sEntitySet - the root EntitySet
		 */
		function generateRoutingMetadataAndGetRootEntitySet(oNavigationControllerProxy) {
			var sTargetControlId = oNavigationControllerProxy.oTemplateContract.oNavigationHost.getId();
			var oConfig = oNavigationControllerProxy.oAppComponent.getConfig(),
				oTopRouteConfig, oTopRoute;
			if (!oConfig.pages || !oConfig.pages.length) {
				throw new Error("Route Configuration missing");
			}
			if (oConfig.pages.length > 1) {
				throw new Error("Currently only one Top route supported");
			}

			// create Top-Route
			// currently only one top route supported
			oTopRouteConfig = oConfig.pages[0];

			oNavigationControllerProxy.oTemplateContract.mEntityTree = {};

			oTopRoute = createRoute([], oTopRouteConfig, "root", 0, null, oNavigationControllerProxy, sTargetControlId);
			oNavigationControllerProxy.oRouter.addRoute(oTopRoute);

			createQueryRoute(oTopRoute, oNavigationControllerProxy);

			createChildRoutes(oTopRoute.target, oTopRouteConfig, 0, null, oNavigationControllerProxy, sTargetControlId);
			
			createMessagePageTargets(oNavigationControllerProxy, sTargetControlId);
			
			return oTopRouteConfig.entitySet;
		}

		/**
		 * Creates child route from the specified route configuration
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {Number} iLevel - the level
		 * @param {Object} oParent - the parent route (if any)
		 * @param {Array} aNodes - optional: Add the names of entity sets for the created roots to this array
		 */
		function createChildRoutes(vPredecessorTargets, oRoute, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes) {
			var i, iLen;
			if (oRoute.pages) {
				iLen = oRoute.pages.length;
				for (i = 0; i < iLen; i++) {
					createRoutes(vPredecessorTargets, oRoute.pages[i], (iLevel + 1), oParent, oNavigationControllerProxy, sTargetControlId, aNodes);
				}
			}
		}

		/**
		 * Creates all necessary route(s) metadata from configuration and adds it to the Router instance
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {Number} iLevel - the level
		 * @param {Object} oParent - the parent route (if any)
		 * @param {Array} aNodes - optional: Add the names of entity sets for the created roots to this array
		 */
		function createRoutes(vPredecessorTargets, oRoute, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes) {
			if (oRoute.component) { //in case of intent there is no internal route to be created
				var oTreeNode = {
					parent: oParent && oParent.entitySet,
					navigationProperty: oRoute.navigationProperty,
					level: iLevel,
					children: []
				};
				var oNewRoute = createRoute(vPredecessorTargets, oRoute, oRoute.component.list ? "aggregation" : "detail", iLevel, oParent,
					oNavigationControllerProxy, sTargetControlId);
				oTreeNode.sRouteName = oNewRoute.name;
				oTreeNode.entitySet = oNewRoute.entitySet;
				if (aNodes){
					aNodes.push(oNewRoute.entitySet);
				}
				var oExistingTreeNode = oNavigationControllerProxy.oTemplateContract.mEntityTree[oNewRoute.entitySet];
				// Expected: oExistingTreeNode is faulty. However, there are scenarios with circular page structures.
				if (!oExistingTreeNode || oExistingTreeNode.level > oTreeNode.level){
					oNavigationControllerProxy.oTemplateContract.mEntityTree[oNewRoute.entitySet] = oTreeNode;
				}
				oNavigationControllerProxy.oRouter.addRoute(oNewRoute);
				createQueryRoute(oNewRoute, oNavigationControllerProxy);
				createChildRoutes(oNewRoute.target, oRoute, iLevel, oNewRoute, oNavigationControllerProxy, sTargetControlId, oTreeNode.children);
			}
		}

		/**
		 * Creates a Query route from the specified route and adds it to the router
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 */
		function createQueryRoute(oRoute, oNavigationControllerProxy) {
			var oQueryRoute = jQuery.extend({}, oRoute);
			oQueryRoute.name = oRoute.name + "query";
			oQueryRoute.pattern = oRoute.pattern + "{?query}";
			oNavigationControllerProxy.oRouter.addRoute(oQueryRoute);
		}

		/**
		 * Creates and returns a route metadata from configuration
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {string} sOperation - the operation for which the route has to be created
		 * @param {Number} iLevel - the level
		 * @param {Object} oParentRoute - the parent route (if any)
		 * @returns {Object} the created route metadata
		 */
		function createRoute(vPredecessorTargets, oRoute, sOperation, iLevel, oParentRoute, oNavigationControllerProxy, sTargetControlId) {
			var aPredecessorTargets = jQuery.isArray(vPredecessorTargets) ? vPredecessorTargets : [vPredecessorTargets];
			var sPathPattern, oNewRoute;
			sPathPattern = oRoute.navigationProperty || oRoute.entitySet;

			oNewRoute = jQuery.extend({}, oRoute);
			oNewRoute.path = "/" + oRoute.entitySet;
			oNewRoute.operation = sOperation;
			oNewRoute.viewLevel = iLevel;
			// TODO: use only component name here?
			oNewRoute.template = oRoute.component ? (oRoute.component.name || oRoute.component) : oRoute.template;

			switch (sOperation) {
				case "root":
					oNewRoute.name = "root";
					oNewRoute.pattern = "";
					break;
				case "aggregation":
					oNewRoute.name = sPathPattern + "~aggregation";
					oNewRoute.pattern = sPathPattern;
					break;
				default:
					oNewRoute.name = sPathPattern;
					oNewRoute.pattern = sPathPattern + "({keys" + iLevel + "})";
					break;
			}

			if (oParentRoute) {
				oNewRoute.name = oParentRoute.name + "/" + oNewRoute.name;
				oNewRoute.pattern = oParentRoute.pattern + "/" + oNewRoute.pattern;
				oNewRoute.parentEntitySet = oParentRoute.entitySet;
			}
			// Store information about root of entity set tree
			if (oNewRoute.viewLevel === 1){
				oNavigationControllerProxy.oTemplateContract.routeViewLevel1 = {
					pattern: oNewRoute.pattern,
					name: oNewRoute.name
				};
			}
			var sControlAggregation;
			var sTargetName = oNewRoute.name;
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler) { // In this case the view is hosted by the FCL
				sControlAggregation =  oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.adaptRoutingInfo(oNewRoute, sTargetName, aPredecessorTargets);
			} else { // In this case the view is hosted by the NavContainer
				sControlAggregation = "pages";
				oNewRoute.target = sTargetName;
			}
			createTarget(oNavigationControllerProxy.oRouter, sTargetControlId, oNewRoute.name, sTargetName, sControlAggregation);

			var oPromise = new Promise(function(fnResolve){
				oNavigationControllerProxy.mRouteToComponentResolve[oNewRoute.name] = fnResolve;
			});
			oNavigationControllerProxy.oTemplateContract.mRouteToTemplateComponentPromise[oNewRoute.name] = oPromise;

			return oNewRoute;
		}

		// - End methods for creating the routes

		/*
		 * Creates necessary routing info and initialises the Router
		 */
		function fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters) {
			var sHash;
			if (!oNavigationControllerProxy.oHashChanger.getHash()) {
				sHash = "";
				// no route is set yet, check if start entity was passed via parameter
				if (oStartupParameters && oStartupParameters.route && oStartupParameters.route.length === 1) {
					sHash = oStartupParameters.route[0];
					oNavigationControllerProxy.navigate(sHash, true);
				}
			}
			oNavigationControllerProxy.oRouter.initialize();
			oNavigationControllerProxy.fnInitializationResolve();
		}

		// - Start methods for processing the startup parameters

		/*
		 * perform a read with the specified data and trigger further initialisation of router
		 *
		 * @param {Array} aKeys - the keys used to create the filter
		 * @param {Object} oStartupParameters - object containing parameters
		 * @param {Object} oModel- the odata model instance
		 */
		function fnReadObject(oNavigationControllerProxy, sEntitySet, aKeys, oStartupParameters, oModel) {
			var i, iLen, sProperty, sValue, aFilters = [];
			if (aKeys && oStartupParameters && oModel) {
				iLen = aKeys.length;
				for (i = 0; i < iLen; i++) {
					// get property from property path
					sProperty = aKeys[i].PropertyPath;
					// get value from parameter array (should have only 1)
					sValue = oStartupParameters[sProperty][0];
					aFilters.push(new Filter(sProperty, FilterOperator.EQ, sValue));
				}
				if (oNavigationControllerProxy.oAppComponent.getTransactionController().getDraftController()
						.getDraftContext().isDraftEnabled(sEntitySet)) {
					var oDraftFilter = new Filter({
						filters: [new Filter("IsActiveEntity", "EQ", false),
						          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
						          and: false
					});
					aFilters.push(oDraftFilter);
				}
				var oCompleteFilter = new Filter(aFilters, true);
				oModel.read("/" + sEntitySet, {
					filters: [oCompleteFilter],
					success: function(oResult) {
						var oRow, i, iLength, sKey;
						if (oResult && oResult.results) {
							iLength = oResult.results.length;
							for (i = 0; i < iLength; i++) {
								oRow = oResult.results[i];
								if (oRow && oRow.IsActiveEntity) {
									break;
								}
								oRow = null;
							}
							if (!oRow) {
								oRow = oResult.results[0];
							}
						}
						if (oRow) {
							sKey = oModel.getKey(oRow);
						}
						if (sKey) {
							oNavigationControllerProxy.navigate(sKey, true);
						}
						fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
					},
					error: function(oError) {
						// just continue with initialisation in case of errors
						fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
					}
				});
			}
		}

		function fnCombineMode(sPreferredMode, sMode) {
			// in case of not allowed combinations of mode navigate to the List Report
			if ((sPreferredMode && sMode) || (sMode === "display"))	{ 
				return { 
					mode: "unsupported"
				}; 
			}

			var oResult = {
					mode: "display",
					force: "false"
			}; // historic default behavior

			oResult.mode = sMode || sPreferredMode || oResult.mode;
			oResult.force = !!sMode;

			return oResult;
		}

		function fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode) {
			var oNavigationPossible = fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode);
			var sHash;
			if (oNavigationPossible.bNavigationWithTechnicalKeyPossible) {
				// created
				sHash = oModel.createKey(sEntitySet, oStartupParameters);
				if (sHash) {
					oNavigationControllerProxy.navigate(sHash, true);
				}
			} else if (oNavigationPossible.bNavigationWithSemanticKeyPossible) {
				fnReadObject(oNavigationControllerProxy, sEntitySet, oNavigationPossible.aSemanticKey, oStartupParameters, oModel);
				// read will trigger the initialisation as needed
				return;
			}
			fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
		}

		function fnCheckKeys(aKeys, mParams) {
			var i, iLength, bSuccess = false, oKey, sKeyProperty;
			if (mParams && aKeys) {
				iLength = aKeys.length;
				for (i = 0; i < iLength; i++) {
					// assume key handling shall be successful
					bSuccess = true;
					oKey = aKeys[i];
					// Keys are located either at name (resource/entity key) or PropertyPath (SemanticKey annotation)
					sKeyProperty = oKey.name || oKey.PropertyPath;
					if (!mParams[sKeyProperty] || mParams[sKeyProperty].length > 1) {
						// if no key params or multiple key params are present set unsuccessful and break
						bSuccess = false;
						break;
					}
				}
			}
			return bSuccess;
		}

		function fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode) {
			//check: only if the page exists a navigation is allowed
			if (!oNavigationControllerProxy.oRouter.getRoute(sEntitySet)) {return {};}

			// if page exists, but for the current mode is replaced by external navigation, internal navigation is not allowed
			if (oNavigationControllerProxy.oAppComponent.getManifestEntry("sap.ui.generic.app").pages[0].pages[0].navigation &&
					oNavigationControllerProxy.oAppComponent.getManifestEntry("sap.ui.generic.app").pages[0].pages[0].navigation[oMode.mode]){return {};}
			
			// if entitySet does not exist in metaModel, navigation is not allowed
			var oEntitySet = oModel.getMetaModel().getODataEntitySet(sEntitySet);
			if (!oEntitySet) {return {};}
			
			var oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
			
			if (fnCheckKeys(oEntityType.key.propertyRef, oStartupParameters)) {
				// full technical key provided
				return {
					bNavigationWithTechnicalKeyPossible: true
				};
			}
			
			var aSemanticKey = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
			if (fnCheckKeys(aSemanticKey, oStartupParameters)) {
				// complete semantic key provided
				return {
					bNavigationWithSemanticKeyPossible: true,
					aSemanticKey: aSemanticKey
				};
			}
			return {};
		}
		
		function fnPrepareCreate(oNavigationControllerProxy){
			var oGlobalModel = oNavigationControllerProxy.oAppComponent.getModel("_templPrivGlobal");
			oGlobalModel.setProperty("/generic/forceFullscreenCreate", true);
		}

		/* checks the startup parameters for triggering navigation
		 * Note: this function is only called when sEntitySet and oStartupParameters are truthy
		 */
		function fnProcessStartupParameters(oNavigationControllerProxy, sEntitySet, oStartupParameters) {
			var oModel;
			// wait for the ODataMetaModel to be loaded
			oModel = oNavigationControllerProxy.oAppComponent.getModel();
			oModel.attachMetadataFailed(oNavigationControllerProxy.fnInitializationResolve);
			oModel.getMetaModel().loaded().then(function() {
				var oEntitySet;

				var sPreferredMode = oStartupParameters.preferredMode && oStartupParameters.preferredMode[0];
				var sMode = oStartupParameters.mode && oStartupParameters.mode[0];
				var oMode = fnCombineMode(sPreferredMode, sMode);

				// if startup parameters contain draft keys, they should be completely ignored - navigation should only specify the target object, not its state
				// (basically that's the idea of semantic URL)
				// just change them (if present) to the ones of the active entity 
				if (oStartupParameters.DraftUUID) { oStartupParameters.DraftUUID = ["00000000-0000-0000-0000-000000000000"]; }
				if (oStartupParameters.IsActiveEntity) { oStartupParameters.IsActiveEntity = ["true"]; }

				switch (oMode.mode) {
					case "create":
						fnPrepareCreate(oNavigationControllerProxy);

						var oCreatePromise = CRUDHelper.create(oNavigationControllerProxy.oAppComponent
								.getTransactionController().getDraftController(), sEntitySet, "/" + sEntitySet, oModel, oNavigationControllerProxy.oTemplateContract.oApplicationProxy.setEditableNDC);

						oCreatePromise.then(function(oContext) {
							fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
							oNavigationControllerProxy.navigateToContext(oContext, "", true, 4);
						}, function(oError) {
							oNavigationControllerProxy.navigateToMessagePage({
								title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
								text: oError.messageText,
								description: "",
								icon: "sap-icon://message-error",
								replaceURL: true
							});
						});
						oNavigationControllerProxy.oTemplateContract.oBusyHelper.setBusy(oCreatePromise, true);
						break;

						//Create with context
					case "createWithContext":
						fnPrepareCreate(oNavigationControllerProxy);
						oEntitySet = oModel.getMetaModel().getODataEntitySet(sEntitySet);
						var oDraftRoot = oEntitySet["com.sap.vocabularies.Common.v1.DraftRoot"];
						if (oDraftRoot && oDraftRoot.NewAction) {
							var oFunctionImport = oModel.getMetaModel().getODataFunctionImport(oDraftRoot.NewAction.String.split("/")[1]);
							var oUrlParameters = {};

							if (oFunctionImport && oFunctionImport.parameter) {
								for (var i = 0; i < oFunctionImport.parameter.length; i++) {
									if (oFunctionImport.parameter[i].mode === "In" && oStartupParameters[oFunctionImport.parameter[i].name][0]) {
										oUrlParameters[oFunctionImport.parameter[i].name] = oStartupParameters[oFunctionImport.parameter[i].name][0];
									}
								}

								// TODO: use Smart Templates busy indicator
								sap.ui.core.BusyIndicator.show();

								oModel.callFunction("/" + oFunctionImport.name, {
									success: function(oData, oResponse) {
										fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
										sap.ui.core.BusyIndicator.hide();
										var oModelUtil = new ModelUtil(oModel);
										var oContext = oModelUtil.getContextFromResponse(oData);
										if (oContext) {
											oNavigationControllerProxy.navigateToContext(oContext, null, true, 4);
										} else {
											oNavigationControllerProxy.navigateToMessagePage({
												title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
												replaceURL: true
											});
										}
									},
									error: function(oError) {
										sap.ui.core.BusyIndicator.hide();
										oNavigationControllerProxy.navigateToMessagePage({
											title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
											replaceURL: true
										});
									},
									method: "POST",
									urlParameters: oUrlParameters
								});
							} else {
								oNavigationControllerProxy.navigateToMessagePage({
									title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
									replaceURL: true
								});
							}
						}
						break;

					case "edit":
						// App opens with an edit view, if there is a draft...if not, creates a draft
						var oNavigationPossible = fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet,
								oStartupParameters, oMode);
						if (oNavigationPossible.bNavigationWithTechnicalKeyPossible || oNavigationPossible.bNavigationWithSemanticKeyPossible) {
							var oEditPromise = CRUDHelper.edit(
									oNavigationControllerProxy.oAppComponent.getTransactionController(), sEntitySet,
									"/" + oModel.createKey(sEntitySet, oStartupParameters), oModel,
									oNavigationControllerProxy.oTemplateContract,
									oNavigationControllerProxy.fnInitializationResolve);

							oEditPromise.then(function(oResult) {
								oNavigationControllerProxy.navigate(oResult.context.getPath(), true);
								fnInitialiseRouting(oNavigationControllerProxy);
							}, function(oError) {
								if (oError.lockedByUser) {
									if (!oMode.force) {
										fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet,
												oStartupParameters, oMode);
									} else {
										oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator
										// before
										oNavigationControllerProxy.navigateToMessagePage({
											title: oNavigationControllerProxy.oTemplateContract
											.getText("LOCKED_OBJECT_POPOVER_TITLE"),
											text: oNavigationControllerProxy.oTemplateContract
											.getText("LOCKED_OBJECT_POPOVER_TITLE"),
											description: oNavigationControllerProxy.oTemplateContract.getText(
													"ST_GENERIC_LOCKED_OBJECT_POPOVER_TEXT", [oError.lockedByUser]),
													icon: "sap-icon://message-error",
													replaceURL: true
										});
									}
								} else if (oError.draftAdminReadResponse) {
									oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator before
									oNavigationControllerProxy
									.navigateToMessagePage({
										title: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_TITLE"),
										text: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE"),
										description: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC"),
										icon: "sap-icon://message-error",
										replaceURL: true
									});
								}
							});
						} else {
							fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
						}
						break;

					case "display":
						fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode);
						break;

					default: // including case "unsupported"
						oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator before showing error page
					oNavigationControllerProxy.navigateToMessagePage({
						title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
						text: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
						description: oNavigationControllerProxy.oTemplateContract.getText("PARAMETER_COMBINATION_NOT_SUPPORTED", [sMode, sPreferredMode]),
						icon: "sap-icon://message-error",
						replaceURL: true
					});
				}
			});
		}
		// - End methods for processing the startup parameters

		// The function exposed by this class: Startup the router
		function fnStartupRouter(oNavigationControllerProxy) {
			var oManifestEntryGenricApp = oNavigationControllerProxy.oAppComponent.getManifestEntry("sap.ui.generic.app");
			// check the manifest.json for the flexibleColumnLayout flag
			if (oManifestEntryGenricApp.settings && oManifestEntryGenricApp.settings.flexibleColumnLayout) {
				oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler = new FlexibleColumnLayoutHandler(
					oNavigationControllerProxy.oTemplateContract.oNavigationHost, oNavigationControllerProxy
				);
			}

			var sEntitySet = generateRoutingMetadataAndGetRootEntitySet(oNavigationControllerProxy);
			var oData = oNavigationControllerProxy.oAppComponent.getComponentData();
			var oStartupParameters = oData && oData.startupParameters;
			// check if there entitySet and startup parameters are present and no hash exists!
			if (sEntitySet && oStartupParameters && !oNavigationControllerProxy.oHashChanger.getHash()) {
				fnProcessStartupParameters(oNavigationControllerProxy, sEntitySet, oStartupParameters);
			} else {
				fnInitialiseRouting(oNavigationControllerProxy);
			}
		}

		/*
		 * get the context path from navigation path/pattern
		 * @param {Object} oRouteConfig - the route configuration
		 * @returns {String} the context path
		 */
		function fnDetermineContextPath(oRouteConfig) {
			var sPath, sPathPattern, iIndex;
			if (oRouteConfig) {
				// get the pattern from route configuration
				sPath = oRouteConfig.pattern;
				// get the current path pattern from either navigation property or the entitySet
				sPathPattern = oRouteConfig.navigationProperty || oRouteConfig.entitySet;
				if (sPath && sPathPattern) {
					iIndex = sPath.indexOf("{?query}");
					// if the query is not at the beginning there is a query suffix
					if (iIndex > 0) {
						// get the current path by ignoring the query suffix
						sPath = sPath.substring(0, iIndex);
					}
					// reset the index
					iIndex = -1;
					// Look for path pattern with ({key
					sPathPattern += "({keys";
					iIndex = sPath.indexOf(sPathPattern);
					// if the pattern is not at the beginning there is a parent path prefix
					if (iIndex > 0) {
						// get the current path by ignoring the parent prefix
						sPath = sPath.substring(iIndex);
					}
					// replace the navigation property with entity set to form the binding context path
					if (oRouteConfig.navigationProperty) {
						sPath = sPath.replace(oRouteConfig.navigationProperty, oRouteConfig.entitySet);
					}
					// context always needs to start with a "/"
					sPath = "/" + sPath;
				}
			}
			return sPath;
		}

		// Determine path the component has to be bound to according to the event obtained from the router
		function fnDeterminePath(oRouteConfig, oEvent, sPattern){
			var sPath, oKeys, sKey;
			if (oRouteConfig.operation === "root") { // check for operation
				return null;
			}

			if (oRouteConfig.operation === "aggregation") {
				sPath = oRouteConfig.pattern;
			} else {
				if (sPattern){
					sPath = sPattern;
				} else {
					// The view is for an instance
					sPath = fnDetermineContextPath(oRouteConfig);
				}
			}
			if (sPath.indexOf("/") !== 0){
				sPath = "/" + sPath;
			}
			oKeys = oEvent.getParameter("arguments");
			if (oKeys) {
				for (sKey in oKeys) {
					// replace each key in pattern with corresponding key in argument
					if (sKey !== "?query"){
						sPath = sPath.replace("{" + sKey + "}", oKeys[sKey]);
					}
				}
				return sPath;
			}
		}
		
		/*
		 * get the navigation path from binding context
		 * @param {Object} oTargetContext - the binding context
		 * @param {string} sNavigationProperty - the navigation property that should replace the entity
		 * @returns {string} the resolved path
		 */
		function fnDetermineNavigationPath(oTargetContext, sNavigationProperty) {
			var sPath, aPath, sEntitySet;
			// Get the path from binding context without "/"
			sPath = oTargetContext.getPath().substring(1);
			// Get the entityset from path
			aPath = sPath.split("(");
			if (aPath[0]) {
				sEntitySet = aPath[0];
			}
			// Replace the entitySet with navigationProperty in the path, if it is specified
			if (sNavigationProperty) {
				sPath = sPath.replace(sEntitySet, sNavigationProperty);
				if (sPath.indexOf("/") === 0) {
					sPath = sPath.substring(1);
				}
			}
			return { 
				entitySet: sEntitySet,
				path: sPath
			};
		}

		// Expose selected private functions to unit tests
		//
		/* eslint-disable */
		var generateRoutingMetadataAndGetRootEntitySet = testableHelper.testableStatic(generateRoutingMetadataAndGetRootEntitySet,
			"routingHelpergenerateRoutingMetadataAndGetRootEntitySet");
		var fnInitialiseRouting = testableHelper.testableStatic(fnInitialiseRouting, "routingHelper_initialiseRouting");
		var fnReadObject = testableHelper.testableStatic(fnReadObject, "routingHelper_readObject");
		var fnProcessStartupParameters = testableHelper.testableStatic(fnProcessStartupParameters, "routingHelper_processStartupParameters");
		/* eslint-enable */

		return {
			startupRouter: fnStartupRouter,
			determinePath: fnDeterminePath,
			determineNavigationPath: fnDetermineNavigationPath
		};
	});
}; // end of sap/suite/ui/generic/template/lib/routingHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.NumericContent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/KpiTag",[
	"sap/ui/core/Control",
	"sap/m/Label",
	"sap/m/NumericContent",
	"sap/ui/model/json/JSONModel",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper"

], function(Control, Label, NumericContent, JSONModel, KpiTagController, KpiUtil, KpiAnnotationHelper) {
	"use strict";
	/**
	* oCriticalityChecker is dictionary of functions to extend the Criticality Calculation usablility
	* it can be used to call specific function to calculate Criticality with respect to annotations; ie Maximize,Minimize and Target
	* Internal functions are named according to defined annotations values.
	*/
	var oCriticalityChecker = {
		toleranceLow:null,
		toleranceHigh:null,
		deviationLow:null,
		deviationHigh:null,
		_value:null,
		state:sap.m.ValueColor.Neutral,
		/**
		* This function set values for all the keys
		* @param  {number} vToleranceLow toleranceLow value from annotations
		* @param  {number} vToleranceHigh deviationLow value from annotations
		* @param  {number} vDeviationLow toleranceHigh value from annotations
		* @param  {number} vDeviationHigh toleranceHigh value from annotations
		* @param {number} vValue Value for comparison
		*/
		setVals : function(vToleranceLow, vToleranceHigh, vDeviationLow, vDeviationHigh, vValue) {
			this.toleranceLow = vToleranceLow;
			this.toleranceHigh = vToleranceHigh;
			this.deviationLow = vDeviationLow;
			this.deviationHigh = vDeviationHigh;
			this._value = vValue;
			this.state = sap.m.ValueColor.Neutral;
		},
		/**
		* This calculate the Criticality color for Maximizing KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		Maximize : function() {
			if (this.toleranceLow || this.deviationLow) {
				if (this._value >= this.toleranceLow) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value < this.deviationLow) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		},
		Maximizing : function(){
			this.Maximize();
		},
		/**
		* This function calculate the the criticality color for Minimizing KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		Minimize: function(){
			if (this.toleranceHigh || this.deviationHigh) {
				if (this._value <= this.toleranceHigh) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value > this.deviationHigh) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		},
		Minimizing: function(){
			this.Minimize();
		},
		/**
		* This function calculate the Criticality color for Target KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		Target :function(){
			if (this.toleranceLow && this.toleranceHigh) {
				if (this._value >= this.toleranceLow && this._value <= this.toleranceHigh) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value < this.deviationLow || this._value > this.deviationHigh) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		}
	};

	var oCriticalitySet = {
		Critical: sap.m.ValueColor.Critical,
		Negative:sap.m.ValueColor.Error,
		Positive:sap.m.ValueColor.Good
	};

	return Control.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag", {
		metadata: {
			properties: {
				value: {
					type: "string",
					defaultValue: "",
					bindable: true
				},
				name: {
					type: "string",
					defaultValue: "",
					bindable: true
				},
				scale: {
					type: "string",
					defaultValue: undefined,
					bindable: true
				},
				indicator: {
					type: "sap.m.ValueColor",
					defaultValue: "Neutral"
				},
				entitySet: {
					type: "string",
					defaultValue: "",
					bindable: false
				},
				qualifier: {
					type: "string",
					defaultValue: "",
					bindable: false
				},
				modelName: {
					type: "string",
					defaultValue: undefined,
					bindable: false
				}
			},
			aggregations: {
				_name: {
					type: "sap.m.Label",
					multiple: false,
					visibility: "visible"
				},
				_value: {
					type: "sap.m.Label",
					multiple: false,
					visibility: "visible"
				},
				_content: {
					type: "sap.m.NumericContent",
					multiple: false,
					visibility: "visible"
				}
			},
			events: {
				press: {}
			}
		},
		_firstTime: true,
		_dataModel: undefined,
		_controller: undefined,
		_isRelative: false,
		_isPercent: false,
		_sUnitofMeasure: "",
		_relativeToProperties: [],
		_getDataModel: function() {
			if (!this._dataModel) {
				this._dataModel = new JSONModel();
			}
			return this._dataModel;
		},
		_getController: function() {
			if (!this._controller) {
				this._controller = new KpiTagController();
			}
			return this._controller;
		},
		onBeforeRendering: function() {
			if (this._firstTime) {
				this.setBusy(true);
				this._firstTime = false;
				var oModel = this.getModel(this.getModelName());
				oModel.getMetaModel().loaded().then(function() {
					var oMetaModel = oModel.getMetaModel();
					var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet());
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

					var selectionPresentationVariantPath = "com.sap.vocabularies.UI.v1.SelectionPresentationVariant#" + this.getQualifier();
					var oSelectionPresentationVariant = oEntityType[selectionPresentationVariantPath];
					if (!oSelectionPresentationVariant) {
						return;
					}

					// CDS Annotation gives Path instead of AnnotationPath
					var oSelectionVariantPath = oSelectionPresentationVariant.SelectionVariant && (oSelectionPresentationVariant.SelectionVariant.AnnotationPath || oSelectionPresentationVariant.SelectionVariant.Path);
					if (!oSelectionVariantPath) {
						return;
					}
					if (/^@/.test(oSelectionVariantPath)) {
						oSelectionVariantPath = oSelectionVariantPath.slice(1);
					}
					var oSelectionVariant = oEntityType[oSelectionVariantPath];
					var aFilters = [];
					var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
					var oSelectOption, sPropertyPath, oRange;

					if (aSelectOptions) {
						for (var i = 0; i < aSelectOptions.length; i++) {
							oSelectOption = aSelectOptions[i];
							sPropertyPath = oSelectOption.PropertyName.PropertyPath;
							for (var j = 0; j < oSelectOption[sPropertyPath].length; j++) {
								oRange = oSelectOption[sPropertyPath][j];
								if (oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
									var oFilter = {
										path: sPropertyPath,
										operator: oRange.Option.EnumMember.split("/")[1],
										value1: oRange.Low.String,
										value2: oRange.High ? oRange.High.String : ""
									};
									aFilters.push(new sap.ui.model.Filter(oFilter));
								}
							}
						}
					}

					// CDS Annotation gives Path instead of AnnotationPath
					var oPresentationVariantPath = oSelectionPresentationVariant.PresentationVariant && (oSelectionPresentationVariant.PresentationVariant.AnnotationPath || oSelectionPresentationVariant.PresentationVariant.Path);
					if (!oPresentationVariantPath) {
						return;
					}
					if (/^@/.test(oPresentationVariantPath)) {
						oPresentationVariantPath = oPresentationVariantPath.slice(1);
					}

					var datapointPath = "com.sap.vocabularies.UI.v1.DataPoint#" + this.getQualifier();
					var oDatapoint = oEntityType[datapointPath];

					this.dataPointAnnotation = oDatapoint;
					var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDatapoint.Value.Path);

					this._checkForPercent(oModel, oEntityTypeProperty);
					//this._checkIfRelative(oDatapoint);
					this._getCriticalityRefProperties(oDatapoint);

					this.setModel(this._getDataModel());

					var sPath = KpiAnnotationHelper.resolveParameterizedEntitySet(oModel, oEntitySet, oSelectionVariant);

					if (oDatapoint.Value) {
						if (oDatapoint.Value.Path) {
							//TODO:Understand why binding path is set like "/0/<properties>" ?
							this.bindValue("/0/" + oDatapoint.Value.Path);
						} else {
							this.setProperty("value", oDatapoint.Value.String);
						}
					}

					oModel.read(sPath ,{
						async: true,
						filters: aFilters,
						urlParameters: {
							"$select": [oDatapoint.Value.Path].concat(this._relativeToProperties).join(","),
							"$top": 1
						},
						success: function(data, response) {
							this._getDataModel().setData(data.results);
							this._calculateKPICriticality(this.dataPointAnnotation);
							this._setNameInformation(this.dataPointAnnotation);
							this._setScaleInformation(this.dataPointAnnotation);
							this.setBusy(false);
						}.bind(this),
						error: function(error) {
							jQuery.sap.log.error("Error reading URL:" + error);
						}
					});

				}.bind(this));
			}
		},
		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init.call(this);
			}
		},
		_onMouseClick: function(oEvent) {
			KpiTagController.openKpiCard(oEvent);
		},


		/**
		 * @private 
		 * this Methods checks if the returned unit of Measure is a percent
		 * @param  oModel              [model from the annotation]
		 * @param  oEntityTypeProperty [Entity property which has the UoM]
		 * @return                     [returns true/false ]
		 */
		_checkForPercent: function(oModel, oEntityTypeProperty)
		{
			this._sUnitofMeasure = KpiUtil.getUnitofMeasure(oModel, oEntityTypeProperty);
			if (this._sUnitofMeasure == "%") // this hardcoded checks needs to be relooked.
				this._isPercent = true;

		},
		
		_checkIfRelative: function(oDataPoint) {

			var trendCalc = oDataPoint.TrendCalculation;
			this._isRelative = KpiUtil.isRelative(oDataPoint);
			if (this._isRelative) {
				if (trendCalc.ReferenceValue.Path) {
					this._relativeToProperties.push(trendCalc.ReferenceValue.Path);
				}
			}
		},
		_setNameInformation: function(oDataPoint) {
			var titlePath = oDataPoint.Title;
			//var nameFromPath = this._getPathOrPrimitive(titlePath);
			//var nameFromPath = KpiUtil.getPathOrPrimitiveValue(this._getDataModel(),titlePath);
			var nameFromPath = KpiUtil.getPathOrPrimitiveValue(titlePath);
			//Handle cases where DataPoint.title may not be present
			if ( nameFromPath === undefined ) {
				nameFromPath = "";
			}
			this.setProperty("name", this._getNameFromHeuristic(nameFromPath), false);
			this.setTooltip(nameFromPath);
		},
		_setScaleInformation: function(oDataPoint) {
			if ( oDataPoint.ValueFormat ) {
				if ( oDataPoint.ValueFormat.ScaleFactor ) {
					this.setProperty("scale", KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor));
				}
			}
		},
		_getCriticalityRefProperties: function(oDataPoint) {
			var cCalc = oDataPoint.CriticalityCalculation;
			var crit = oDataPoint.Criticality;
			if (cCalc.DeviationRangeLowValue && cCalc.DeviationRangeLowValue.Path) {
				this._relativeToProperties.push(cCalc.DeviationRangeLowValue.Path);
			}
			if (cCalc.DeviationRangeHighValue && cCalc.DeviationRangeHighValue.Path) {
				this._relativeToProperties.push(cCalc.DeviationRangeHighValue.Path);
			}
			if (cCalc.ToleranceRangeLowValue && cCalc.ToleranceRangeLowValue.Path) {
				this._relativeToProperties.push(cCalc.ToleranceRangeLowValue.Path);
			}
			if (cCalc.ToleranceRangeHighValue && cCalc.ToleranceRangeHighValue.Path) {
				this._relativeToProperties.push(cCalc.ToleranceRangeHighValue.Path);
			}
			if (crit && crit.Path) {
				this._relativeToProperties.push(crit.Path);
			}
		},
		_getTitleRefProperty: function(oDataPoint) {
			var titlePath = oDataPoint.Title;
			if (titlePath && titlePath.Path) {
				this._relativeToProperties.push(titlePath.Path);
			}
		},
		_getNameFromHeuristic: function(sentence) {
			var parts = sentence.split(/\s/);
			return parts.length === 1 ? this._getNameFromSingleWordHeuristic(sentence) : this._getNameFromMultiWordHeuristic(parts);
		},
		/**
		* [_getNameFromSingleWordHeuristic Extract logic for single word]
		* @param  {String} word which needs to be changed to short title
		* @return {String} KPI Short title
		*/
		_getNameFromSingleWordHeuristic: function(word) {
			return word.substr(0,3).toUpperCase();
		},
		_getNameFromMultiWordHeuristic: function(words) {
			var parts = [];
			parts.push(words[0].charAt(0));
			parts.push(words[1].charAt(0));
			if (words.length >= 3) {
				parts.push(words[2].charAt(0));
			}
			return parts.join("").toUpperCase();
		},
		_calculateKPICriticality: function(oDataPoint) {
			var sImproveDirection = oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.ImprovementDirection ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ImprovementDirection) : undefined;
			var criticality = oDataPoint.Criticality ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.Criticality) : undefined;
			var state = sap.m.ValueColor.Neutral;

			if (criticality) {
				state = oCriticalitySet[criticality];
				if (!state) {
					state = sap.m.ValueColor.Neutral;
				}
				this.setIndicator(state);
				return;
			}



			var deviationLow = oDataPoint.CriticalityCalculation.DeviationRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue) : undefined;
			var deviationHigh = oDataPoint.CriticalityCalculation.DeviationRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue) : undefined;
			var toleranceLow = oDataPoint.CriticalityCalculation.ToleranceRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue) : undefined;
			var toleranceHigh = oDataPoint.CriticalityCalculation.ToleranceRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue) : undefined;


			var value = Number(this.getValue());
			oCriticalityChecker.setVals(toleranceLow, toleranceHigh, deviationLow, deviationHigh, value);
			this.setIndicator(oCriticalityChecker[sImproveDirection]());
		},
		renderer: function(oRM, oControl) {
			oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("alrKpiTag sapUiSmallMarginEnd");
			oControl._addColorClasses(oRM);
			oRM.writeClasses();
			oRM.writeAttributeEscaped("title", oControl.getTooltip());
			oRM.write(">");
			oRM.write("<div");
			oRM.addClass("alrKpiTagName");
			oRM.writeClasses();
			oRM.write(">");
			oRM.writeEscaped(oControl.getName());
			oRM.write("</div>");
			oRM.write("<div");
			oRM.addClass("alrKpiTagValue");
			oRM.writeClasses();
			oRM.write(">");
			oRM.writeEscaped(oControl._isPercent ? KpiUtil.formatNumberForPresentation(oControl.getValue(), true, 1, oControl.getProperty("scale")) + oControl._sUnitofMeasure : KpiUtil.formatNumberForPresentation(oControl.getValue(), true, 0, oControl.getProperty("scale")));
			oRM.write("</div>");
			oRM.write("</div>");
		},
		_addColorClasses: function(rm) {
			switch (this.getIndicator()) {
				case sap.m.ValueColor.Neutral:
				rm.addClass("alrKPINeutral");
				break;
				case sap.m.ValueColor.Error:
				rm.addClass("alrKPINegative");
				break;
				case sap.m.ValueColor.Good:
				rm.addClass("alrKPIPositive");
				break;
				case sap.m.ValueColor.Critical:
				rm.addClass("alrKPICritical");
				break;
				default:
				break;
			}
		},

		onAfterRendering: function() {
			setTimeout(function() {
				//this.$().off("click").on("click", this._onMouseClick);
				this.detachBrowserEvent("click", this._onMouseClick).attachBrowserEvent("click", this._onMouseClick);
			}.bind(this), 1);
		},

		handleClick: function(oEvent) {
			this.fireEvent("press", {});
		},

		exit: function() {
			this._relativeToProperties = [];
		}
	});
}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/KpiTag.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.VisualFilterProvider') ) {
// -----------------------------------------------------------------------------
// Generates the data-model required for SmartFilter using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.VisualFilterProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider",[
	"sap/ui/comp/odata/MetadataAnalyser",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"
], function(MetadataAnalyser, FilterUtil, V4Terms) {
	"use strict";
	var VisualFilterProvider = function(filter) {
		this._filter = filter;
		this._oMetadataAnalyser = new MetadataAnalyser(filter.getModel());

		this._groupList = [];
		this._groupListByName = {};
		this._groupMap = {};
		this._measureList = [];
		this._measureMap = {};
		this._dimensionMap = {};
		this._selectionFieldsLength = 0;
		this._selectionFieldsParsed = 0;
		this._annotationData = {Filters: []};
		this._allSelectionFields;

		this._initMetadata();
	};

	VisualFilterProvider.prototype._initMetadata = function() {
		var entitySet = this._filter.getEntitySet();
		var entityNameFull = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);

		this._getFieldAnnotations(entitySet, entityNameFull);

		this._getVisualFilterAnnotation(entityNameFull);
	};

	VisualFilterProvider.prototype.getVisualFilterConfig = function() {
		return this._filterConfig;
	};

	// Group Related
	VisualFilterProvider.prototype._getFieldAnnotations = function(entitySet, entityNameFull) {
		if (!entitySet)
			return;

		var entityType = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);
		if (!entityType)
			return;

		var model = this._filter.getModel();
		var metaModel = model.getMetaModel();
		if (!entityNameFull || !metaModel)
			return;

		// Go through the field group list and build up the group map
		var groupMapByField = {};
		var groupByName = {};

		var fieldGroupList = this._oMetadataAnalyser.getFieldGroupAnnotation(entityType);
		for (var i = 0; i < fieldGroupList.length; i++) {
			var fieldGroup = fieldGroupList[i];

			var group = {
				name: fieldGroup.groupName,
				label: fieldGroup.groupLabel,
				fieldList: fieldGroup.fields
			};

			groupByName[group.name] = group;

			for (var j = 0; j < fieldGroup.fields.length; j++)
				groupMapByField[fieldGroup.fields[j]] = group;
		}


		// Get all the selection fields, if selected and not part of a group, then in the _BASIC group
		var entityDef = metaModel.getODataEntityType(entityNameFull);
		var selFieldList = entityDef[V4Terms.SelectionFields];
		var selFieldMap = {};
		if (selFieldList) {
			for (var i = 0; i < selFieldList.length; i++) {
				var selField = selFieldList[i];
				selFieldMap[selField.PropertyPath] = selField;
			}
		}

		// Go through all the fields, check if they are dimensions or measures and add them to the groups for later sorting
		var usedGroupsByName = {};
		//var entityTypeName = this._oMetadataAnalyser.removeNamespace(entityType);
		var fieldList = this._oMetadataAnalyser.getFieldsByEntityTypeName(entityType);
		for (var i = 0; i < fieldList.length; i++) {
			var field = fieldList[i];
			var name = field.name;

			var prop = metaModel.getODataProperty(entityDef, name);
			var role = prop["sap:aggregation-role"];

			if (role == "dimension") { // only add dimensions to the possible groups
				var dim = { // Dimension definition
					name: name,
					fieldInfo: field,
					propInfo: prop
				};

				// Add to group for ordering purposes, e.g. in the dialog and display order in the filterbar
				var group = groupMapByField[name];

				if (group) {
					// if the field is stored as a string, replace it with the dim structure
					for (var j = 0; j < group.fieldList.length; j++) {
						if (group.fieldList[j] == name) {
							group.fieldList[j] = dim;
							break;
						}
					}
				} else {
					var sLabel = entityDef[V4Terms.Label] ? entityDef[V4Terms.Label].String : undefined;
					var groupName = selFieldMap[name] ? "_BASIC" : (entityDef[sLabel] || entityDef.name); // _BASIC is the standard used by the smart filter bar

					var group = groupByName[groupName];
					if (!group) { // if no group, then either use the _BASIC (if field in the selection list) or fallback EntityType.
						group = {
							name: groupName,
							label: groupName == "_BASIC" ? this._filter.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE") : groupName,
							fieldList: []
						};

						groupByName[groupName] = group;
					}

					group.fieldList.push(dim);
					groupMapByField[name] = group;
				}

				usedGroupsByName[group.name] = true;
			}
		}

		// Reorder the fields by the group list
		var groupList = [];
		if (usedGroupsByName["_BASIC"]) { // Make sure _BASIC is always first
			groupList.push(groupByName["_BASIC"]);
			delete groupByName["_BASIC"];
		}

		// Preferred order based on group list  Will need to check once getting group information from annotation
		for (var i = 0; i < fieldGroupList.length; i++) {
			var groupName = fieldGroupList[i].groupName;

			if (groupName == "_BASIC") // already accounted for
				continue;

			if (usedGroupsByName[groupName])
				groupList.push(groupByName[groupName]);

			delete groupByName[groupName];
		}

		// Now add the remaining, e.g. the entity type
		for (var groupName in groupByName) {
			if (usedGroupsByName[groupName])
				groupList.push(groupByName[groupName]);

			delete groupByName[groupName];
		}

		// Rebuild the group by name based on the used groupNames
		groupByName = {};
		for (var i = 0; i < groupList.length; i++) {
			var group = groupList[i];
			groupByName[group.name] = group;
		}
	};

	VisualFilterProvider.prototype.getGroupList = function() {
		return this._groupList ? this._groupList : [];
	};

	VisualFilterProvider.prototype.getGroupMap = function() {
		return this._groupMap ? this._groupMap : {};
	};

	VisualFilterProvider.prototype.getMeasureMap = function() {
		return this._measureMap;
	};

	VisualFilterProvider.prototype.getDimensionMap = function() {
		return this._dimensionMap;
	};

	VisualFilterProvider.prototype.getEntityType = function(entitySet) {
		return this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);
	};

	VisualFilterProvider.prototype._updateGroupList = function(entityFullName, entityTypePath, parentProperty, dimension) {
		var isPartOfSelectionFields = function (element) {
			return element.PropertyPath === parentProperty;
		};
		var isPartOfSelectionField = this._allSelectionFields.filter(isPartOfSelectionFields);
		isPartOfSelectionField = (isPartOfSelectionField.length > 0) ? true : false;

		var metaModel = this._filter.getModel().getMetaModel();
		var mainEntityType = metaModel.getODataEntityType(entityFullName);
		mainEntityType = mainEntityType[V4Terms.Label] ? mainEntityType[V4Terms.Label].String : mainEntityType.name;

		var updateGroup = function (groupName, context) {
			for (var key in context._groupList) {
				var group = context._groupList[key],
					dimExistsInGroup = false;

				if (group.name === groupName) {
					var fieldList = group.fieldList;
					for (var fieldKey in fieldList) {
						if (fieldList[fieldKey].name === dimension) {
							dimExistsInGroup = true;
						} else {
							continue;
						}
					}

					if (!dimExistsInGroup) {

						var entityType = metaModel.getODataEntityType(entityTypePath);
						var allProps = context._oMetadataAnalyser.getFieldsByEntityTypeName(entityTypePath);

						for (var key in allProps) {

							if (allProps[key].name === dimension) {
								var prop = metaModel.getODataProperty(entityType, allProps[key].name);

								fieldList.push({ // Dimension definition
									name: allProps[key].name,
									fieldInfo: allProps[key],
									propInfo: prop
								});
								//dimMap[allProps[key].name] = dim;
								//dimMap[allProps[key].name] = dim;
							}
						}

						/*fieldList.push({
							name: dimension
						});*/
					}
				} else {
					continue;
				}
			}
		};

		// TODO: need to take care of field group
		if (isPartOfSelectionField) {
			updateGroup('_BASIC', this);
		} else {
			updateGroup(mainEntityType, this);
		}

	};

	VisualFilterProvider.prototype._createDimensionMap = function(entitySet, entityTypePath) {
		//if (!this._dimensionMap[entitySet]) {
			var allProps,
				model = this._filter.getModel(),
				metaModel = model.getMetaModel(),
				entityType,
				dimMap = {},
				prop,
				dim,
				measure,
				measureMap = {};

			if (!metaModel)
				return false;

			entityType = metaModel.getODataEntityType(entityTypePath);
			allProps = this._oMetadataAnalyser.getFieldsByEntityTypeName(entityTypePath);

			for (var key in allProps) {

				prop = metaModel.getODataProperty(entityType, allProps[key].name);
				if (allProps[key]['aggregationRole'] === 'dimension') {

					dim = { // Dimension definition
						name: allProps[key].name,
						fieldInfo: allProps[key],
						propInfo: prop
					};
					dimMap[allProps[key].name] = dim;
					//dimMap[allProps[key].name] = dim;
				} else if (allProps[key]['aggregationRole'] === 'measure') {
					measure = {
						name: allProps[key].name,
						label: allProps[key].fieldLabel,
						fieldInfo: allProps[key],
						propInfo: prop
					};
					measureMap[allProps[key].name] = measure;
				}
			}



			if (Object.keys(dimMap).length > 0) {
				this._dimensionMap[entitySet] = dimMap;
			}

			if (Object.keys(measureMap).length > 0) {
				this._measureMap[entitySet] = measureMap;
			}
		/*} else {
			return false;
		}*/
	};

	VisualFilterProvider.prototype._createGroupList = function(fieldInfo, propInfo, isBasic, entityGroupName) {

		var groupLabel;
		// if property is part of seelction fields then it should be in BASIC group
		if (isBasic) {
			groupLabel = this._filter.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE");
			this._addToGroupListByName('_BASIC', groupLabel, fieldInfo, propInfo);
		} else {
			// TODO: Take care of Field Group as well. Field Group has to be added to the group
			groupLabel = entityGroupName;
			this._addToGroupListByName(entityGroupName, groupLabel, fieldInfo, propInfo);
		}

	};

	VisualFilterProvider.prototype._addToGroupListByName = function (groupName, groupLabel, fieldInfo, propInfo) {
		if (this._groupListByName[groupName] === undefined) {
			this._groupListByName[groupName] = [];
			this._groupListByName[groupName].push({
				name: groupName,
				label: groupLabel,//
				fieldList: []
			});

			this._groupListByName[groupName][0].fieldList.push({
				name: fieldInfo.name,
				fieldInfo: fieldInfo,
				propInfo: propInfo
			});
		} else {
			this._groupListByName[groupName][0].fieldList.push({
				name: fieldInfo.name,
				fieldInfo: fieldInfo,
				propInfo: propInfo
			});
		}
	};

	/**
	 * @private
	 * This function sets the field groups to be displayed in the visual filter dialog
	 * @param  {string} sEntityGroupName - entity type name
	 * @return {void}
	 */
	VisualFilterProvider.prototype._setGroupListForDialog = function() {
		// check if any groups exists or not
		//removed the check for BASIC as the order of groups is maintained in the
		//array returned by getFilterBarViewMetadata()
		if (Object.keys(this._groupListByName).length > 0) {
			for (var key in this._groupListByName) {
				this._groupList.push(this._groupListByName[key][0]);
			}
		}
		var groupByName = {};
		for (var i = 0; i < this._groupList.length; i++) {
			var group = this._groupList[i];
			groupByName[group.name] = group;
		}
		this._groupMap = groupByName;
	};
	/**
	* @private
	* This function changes the order of visual filter to the order specified in the SelectionFields.
	* The mandatory filter field that is not specified in the SelectionFields will show up first.
	* @param {object} allSelectionFields - list of the SelectionFields in the annotation
	* @param {object} config - list of the visual filters in the metadata definition
	* @return {object} config - the sorted object if selectionfields are present.
	**/
	VisualFilterProvider.prototype._sortVisualFilter = function(allSelectionFields, config) {
		if (config.filterList) {
			// Sort the visual filters taking 2 consecutive elements at a time (default sort function of array)
			config.filterList.sort(function(a, b) {
				var aIndex, bIndex;
				if (allSelectionFields) {
					// Get the index (occurance) of each element in the SelectionFields
					for (var i = 0; i < allSelectionFields.length; i++) {
						// Check if the Property Path is present in SelectionFields
						if (allSelectionFields[i].PropertyPath === a.parentProperty) {
							aIndex = i;
						}
						if (allSelectionFields[i].PropertyPath === b.parentProperty) {
							bIndex = i;
						}
						if (aIndex && bIndex) {
							break;
						}
					}
				}
				// Arrange the elements based on the order of indexes (ascending). Smaller indexes follwed by bigger ones.
				// If a mandatory property that is not present in SelectionFields comes before the SelectionFiled filters.
				if ((aIndex < bIndex) || (!aIndex && a.isMandatory)) {
					return -1;
				}
				if ((aIndex > bIndex) || (!bIndex && b.isMandatory)) {
					return 1;
				}
				// Return 0 when a non-mandatory field that is not matching with SelectionFields is found.
				return 0;
			});
		}
		return config;
	};

	/**@private
	 *This function is to obtain scale factor from annotations
	 *@param  {object} oEntityType  entity object
	 *@param  {string} sAnnotationPath  Annotation path containing scale factor
	 *@return {string} [scale factor value]
	 */

	VisualFilterProvider.prototype._getScaleFactor = function(oEntityType,sAnnotationPath){
		//check if property has a Data point defined in annotation
		if (sAnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") > -1) {
			sAnnotationPath =  sAnnotationPath.toString();
			if (sAnnotationPath.charAt(0) === "@"){
				sAnnotationPath = sAnnotationPath.slice(1);
			}
			var oElem = oEntityType[sAnnotationPath];
			return oElem.ValueFormat.ScaleFactor.Decimal;
		}
	};
	/**
	 * @private
	 * This function read the filter annotation for visual filter and set the filter configuration
	 * @param  {string} sEntityNameFull full name of the entity
	 * @return {void}
	 */
	VisualFilterProvider.prototype._getVisualFilterAnnotation = function(sEntityNameFull) {
		var model = this._filter.getModel();
		var metaModel = model.getMetaModel();
		if (!sEntityNameFull || !metaModel)
			return null;
		var entityType = metaModel.getODataEntityType(sEntityNameFull);
		if (!entityType)
			return null;
		this._allSelectionFields = entityType[V4Terms.SelectionFields];
		////USING getFilterBarViewMetadata() to read the filter annotation for visual filter and set the filter configuration
		var allGroups = this._filter._smartFilterContext.getFilterBarViewMetadata(),
			isFilterable, filterRestriction, isMandatory, sGroupName, isRequired, valueList, currentPropName, isSelected, aFields = [],
			fieldInfo,propInfo;
		for (var oGroup in allGroups) {
			aFields = allGroups[oGroup].fields;
			sGroupName = allGroups[oGroup].groupName;
			for (var oProperty in aFields) {
				isFilterable = aFields[oProperty].filterable;
				filterRestriction = aFields[oProperty].filterRestriction;
				//sap:filter-restriction : undefined (default = "multi-value"), filterRestriction = "auto"
				//sap:filter-restriction : "multi-value", filterRestriction = "multiple"
				//sap:filter-restriction: "single-value", filterRestriction = "single"
				//sap:filter-restriction: "interval", filterRestriction = "interval"
				if (filterRestriction === "auto") {
					filterRestriction = "multiple";
				}
				if (filterRestriction !== "interval" && isFilterable !== "false") {
					fieldInfo = aFields[oProperty];
					currentPropName = aFields[oProperty].fieldName;
					isMandatory = aFields[oProperty].isMandatory;
					isRequired = aFields[oProperty].requiredFilterField;
					for (var propertyFields in aFields[oProperty]) {
						//checking if property has valuelist annotation defined along with a PV
						if (propertyFields.indexOf(V4Terms.ValueList) > -1 && aFields[oProperty][propertyFields].PresentationVariantQualifier) {
							isSelected = (sGroupName === "_BASIC") || isMandatory || isRequired;
							propInfo = metaModel.getODataProperty(entityType, currentPropName);
							valueList = aFields[oProperty][propertyFields];
							this._createGroupList(fieldInfo, propInfo, isSelected, sGroupName);
							this._getAnnotationFromValueList(sEntityNameFull, isSelected, valueList, currentPropName, filterRestriction, isMandatory);
						}
					}
				}
			}
		}
		this._setGroupListForDialog();
		this._filterConfig = this._getConfig(this._annotationData);
	};
	/* 	Success Callback for valueList promise
		Checks if valueList and presentationVariantQaulifier exists
		then and only then add chart to the config
	*/
	VisualFilterProvider.prototype._getAnnotationFromValueList = function (entityFullName, isSelected, valueListProperties, parentProperty, filterRestriction, bIsMandatoryProp, entityType) {
		var sPath = entityFullName;
		if (valueListProperties !== undefined) {
			//valueListProperties = valueListProperties[""] ? valueListProperties[""] : undefined;

			var annotationData = {Filters: []},
				presentationVariantQualifierString = FilterUtil.readProperty(valueListProperties,"PresentationVariantQualifier.String"),
				collectionPath = FilterUtil.readProperty(valueListProperties,"CollectionPath"),
				parameters = FilterUtil.readProperty(valueListProperties,"Parameters"),
				collectionPathString = FilterUtil.readProperty(collectionPath,"String"),
				sPath = this.getEntityType(collectionPathString);

			if (presentationVariantQualifierString) {
				var sQualifier = presentationVariantQualifierString,
					presentationVariantAnnotation = this._oMetadataAnalyser.getPresentationVariantAnnotation(sPath, sQualifier),
					annotationObject = {},
					dimension = FilterUtil.readProperty(presentationVariantAnnotation, "chartAnnotation.annotation.Dimensions.0.PropertyPath");
				if (dimension) {
					this._createDimensionMap(collectionPath.String, sPath);
					this._updateGroupList(entityFullName, sPath, parentProperty, dimension);

					// TODO: Saurabh, below function acts as a parser bewteen here and  _getConfig()
					// maybe change logic in _getConfig() to parse presentationVariant Object and form config
					// Needs to be done
					annotationObject = this._createConsumeableObjectFromAnnotation(presentationVariantAnnotation, collectionPath, isSelected, parameters, parentProperty, filterRestriction, bIsMandatoryProp, entityType);
					annotationData.Filters.push(annotationObject);
					this._annotationData.Filters.push(annotationObject);
				}
				// only update filter bar if annotation data is set
				/*if (annotationData.Filters.length > 0 ) {
					this._filterConfig = this._getConfig(annotationData);
					this._filter.bIsInitialised = true;
					this._filter._updateFilterBar();
				}*/
			}
		}
		// check if all selection fields have been parsed
		// and the annotation data is stored
		/*if (this._selectionFieldsParsed === this._selectionFieldsLength && this._annotationData.Filters.length > 0) {
			this._filterConfig = this._getConfig(this._annotationData);
			this._filter.bIsInitialised = true;
			this._filter._updateFilterBar();
		}*/
	};
	/**
	*Function returns the order of sorting, ie. whether ascending (descending = false) or descending (descending = true)
	*params {aSortOrderFields} the SortOrder Property object from presentationVariantAnnotation
	*params {aSortOrderType} PropertyPath of the SortOrder Property
	*return {bSortOrder} Boolean value to denote either descending / ascending sort order.
	*/
	VisualFilterProvider.prototype._getDescendingFromSortOrder = function(aSortOrderFields, sSortOrderType) {
		var bSortOrder;
		aSortOrderFields.filter(function(element, index, array) {
			if (element.Property.PropertyPath == sSortOrderType) {
				// default sort order is descending true
				bSortOrder = !(element.Descending.Bool === "false");
			}
		});
		return bSortOrder;
	};
	/**
	 * @private
	 * This function check whether the field name is valid or not
	 * @param  {string} sEntityFullName full name of the entity
	 * @param  {string} sFieldName field name
	 * @return {boolean} return true if the field is valid
	 */
	VisualFilterProvider.prototype._fieldExist = function(sEntityFullName, sFieldName) {
		var fieldList = this._oMetadataAnalyser.getFieldsByEntityTypeName(sEntityFullName);
		for ( var i = 0; i < fieldList.length;i++ ) {
			if (fieldList[i].name === sFieldName) {
				return true;
			}
		}
		return false;
	};
	/**
	 * @private
	 * This function create a SortOrderObject
	 * @param  {object} oPresentationVariantAnnotation PresentationVariantAnnotation from annotation
	 * @return {object} SortOrder object with property Field and Descending
	 */
	VisualFilterProvider.prototype._createSortObject = function(oPresentationVariantAnnotation) {
		var sSortOrderType, oSortObject = {};
		if (oPresentationVariantAnnotation.chartAnnotation.chartType === "com.sap.vocabularies.UI.v1.ChartType/Line") {
			sSortOrderType = oPresentationVariantAnnotation.chartAnnotation.annotation.Dimensions[0].PropertyPath;
		}
		else {
			sSortOrderType = oPresentationVariantAnnotation.chartAnnotation.annotation.Measures[0].PropertyPath;
		}
		//To include Field and Descending  Property to sortOrder
		oSortObject.Field = {
			"String" : sSortOrderType
		};
		oSortObject.Descending = {
			"Boolean" : true
		};
		return oSortObject;
	};
	/**
	 * @private
	 * This function returns annotationObject with a new property SortOrder
	 * @param  {object} oPresentationVariantAnnotation  PresentationVariantAnnotation from annotation
	 * @param  {string} sEntityFullName  full name of entity set
	 * @return {object} returns annotationObject with property SortOrder
	*/
	VisualFilterProvider.prototype._createSortOrderFromAnnotation = function(oPresentationVariantAnnotation, sEntityFullName) {
		var oAnnotationObject = {};
		oAnnotationObject.SortOrder = [];
		var aSortOrderFields = oPresentationVariantAnnotation.annotation.SortOrder;
		//Assuming there will be multiple sortOrders
		if (aSortOrderFields !== undefined && aSortOrderFields.length > 0) {
			for (var i = 0; i < aSortOrderFields.length; i++) {
				var sSortOrderType = aSortOrderFields[i].Property.PropertyPath;
				if (sSortOrderType) {
					var oSortObject = {};
					//To include Field and Descending  Property to sortOrder
					if (this._fieldExist(sEntityFullName, sSortOrderType)) {
						oSortObject.Field = {
							"String" : sSortOrderType
						};
						oSortObject.Descending = {
							"Boolean" : this._getDescendingFromSortOrder(aSortOrderFields, sSortOrderType)
						};
					}
					else {
						oSortObject = this._createSortObject(oPresentationVariantAnnotation);
					}
					oAnnotationObject.SortOrder.push(oSortObject);
				}
			}
		}
		else {
			oAnnotationObject.SortOrder.push(this._createSortObject(oPresentationVariantAnnotation));
		}
		return oAnnotationObject;
	};
	/*
		Function to parse new annotation format
		and create object similar to experimental annotation so that it can be consumed here.
		TODO: Saurabh, It would be good to change logic in _getConfig() to parse the presentationVariantAnnotation object
		and form the config.
	*/
	VisualFilterProvider.prototype._createConsumeableObjectFromAnnotation = function (presentationVariantAnnotation, collectionPath, isSelected, parameters, parentProperty, filterRestriction, bIsMandatoryProp, entityType) {
		//commenting the unused variables due to the eslint issue
		//	var annotationData = {Filters: []};
		//	var allMeasureFields = presentationVariantAnnotation.chartAnnotation.mesaureFields;
		//	var allDimensionFields = presentationVariantAnnotation.chartAnnotation.dimensionFields;
		var annotationObject = {};

		var sortOrderFields = presentationVariantAnnotation.sortOrderFields;
		//To add the new propert SortOrder in annotationObject
		annotationObject = this._createSortOrderFromAnnotation(presentationVariantAnnotation, this.getEntityType(collectionPath.String));
		// TODO: Saurabh check if there is a chart then proceed
		var parts = presentationVariantAnnotation.chartAnnotation.annotation.ChartType.EnumMember.split("/");
		var chartType = parts[parts.length - 1];

		if (chartType) {
			annotationObject.Type = {
				"String": chartType
			};
		}

		var sDataPoint = presentationVariantAnnotation.chartAnnotation.annotation.DataPoint;
		//adding scaleFactor property to annotationObject
		if (sDataPoint){
			var annotationPath = sDataPoint[0].AnnotationPath;
			var scaleFactor = this._getScaleFactor(entityType,annotationPath);
			annotationObject.scaleFactor = {
				"String": scaleFactor
			};
		} else {
			annotationObject.scaleFactor = {
				"String": undefined
			};
		}
		//adding filterRestiction property to annotationObject
		if (filterRestriction){
			annotationObject.filterRestriction = {
			"String" : filterRestriction
			};
		} else {
			annotationObject.filterRestriction = {
			"String" : undefined
			};
		}

		// assuming there will be only one dimension
		var dimension = presentationVariantAnnotation.chartAnnotation.annotation.Dimensions[0].PropertyPath;

		if (dimension) {
			annotationObject.Dimensions = [];
			var dimObject = {};

			dimObject.Field = {
				"String": dimension
			};

			sortOrderFields.filter(function(element, index, array) {
				if (element.name == dimension) {
					dimObject.Descending = {
						"Boolean": element.descending
					};
				}
			});

			annotationObject.Dimensions.push(dimObject);
		}

		// assuming there will be only one measure
		var measure = presentationVariantAnnotation.chartAnnotation.annotation.Measures[0].PropertyPath;

		if (measure) {
			annotationObject.Measures = [];
			var measureObject = {};

			measureObject.Field = {
				"String": measure
			};

			var measureSortOrder = (presentationVariantAnnotation.annotation.SortOrder
				&& presentationVariantAnnotation.annotation.SortOrder.length > 0) ? presentationVariantAnnotation.annotation.SortOrder[0] : undefined;

			if (measureSortOrder) {

				measureSortOrder = ((measureSortOrder.Descending) && (measureSortOrder.Descending.Boolean)) ? measureSortOrder.Descending.Boolean : undefined;

			}

			if (measureSortOrder) {
				measureObject.Descending = {
					"Boolean": measureSortOrder
				};
			} else {
				measureObject.Descending = {
					"Boolean": "true"
				};
			}
			/*sortOrderFields.find(function(element, index, array) {
				if (element.name == measure) {
					measureObject.Descending = {
						"Boolean": element.descending
					};
				}
			});*/

			annotationObject.Measures.push(measureObject);
		}

		if (isSelected) {
			annotationObject.Selected = {
				"Boolean" : "true"
			};
		} else {
			annotationObject.Selected = {
				"Boolean" : "false"
			};
		}

		if (collectionPath) {
			annotationObject.CollectionPath = collectionPath;
		}

		if (parameters && parameters.length > 0) {
			annotationObject.InParameters = [];

			for (var key in parameters) {
				var param = parameters[key] ? parameters[key] : undefined,
					recordType = (param && param.RecordType) ? param.RecordType : undefined,
					valueListProperty = (param.ValueListProperty && param.ValueListProperty.String) ? param.ValueListProperty.String : undefined,
					localDataProperty = (param.LocalDataProperty && param.LocalDataProperty.PropertyPath) ? param.LocalDataProperty.PropertyPath : undefined;

				if (param && recordType && valueListProperty && localDataProperty) {
					// take the parameter where valueListproperty matches the dimension
					if (annotationObject.OutParameter === undefined && (recordType === V4Terms.ValueListParameterOut || recordType === V4Terms.ValueListParameterInOut) && valueListProperty === dimension && localDataProperty === parentProperty) {
						annotationObject.OutParameter = localDataProperty;
						//break;
					}

					if (recordType === V4Terms.ValueListParameterIn || recordType === V4Terms.ValueListParameterInOut) {
						var metaModel 		= this._filter.getModel().getMetaModel(),
							entityFullName 	= this.getEntityType(collectionPath.String),
							entityDef 		= metaModel.getODataEntityType(entityFullName),
							entityProperty 	= metaModel.getODataProperty(entityDef, valueListProperty);

						if (entityProperty['sap:filterable'] === undefined || entityProperty['sap:filterable'] == "true") {
							annotationObject.InParameters.push({
								localDataProperty: localDataProperty,
								valueListProperty: valueListProperty
							});
						} else {
							jQuery.sap.log.error('IN Parameter valueListProperty: ' + valueListProperty + ' is not sap:filterable');
						}
					}
				}
			}

			if (annotationObject.InParameters.length === 0) {
				annotationObject.InParameters = undefined;
			}
		}

		if (parentProperty) {
			annotationObject.ParentProperty = parentProperty;
		}

		annotationObject.isMandatoryProperty = bIsMandatoryProp;

		return annotationObject;
	};
	VisualFilterProvider.prototype._getConfig = function(annotationData) {
		var config = {filterList: []};
		if (!annotationData)
			return config;

		// Convert into the configuration format for the Visual Filter Bar
		var filterByDimName = {};
		var filterByParentPropName = {};
		var filterList = annotationData.Filters;
		for (var i = 0; i < filterList.length; i++) {
			var filter = filterList[i];

			var parentProperty = filter.ParentProperty;

			var dimField = filter.Dimensions[0].Field.String;
			var entitySet = filter.CollectionPath.String;
			var dim = this._dimensionMap[entitySet][dimField];
			if (!dim) {
				jQuery.sap.log.error("Unknown Dimension :" + dimField);
				continue;
			}

			var measureField = filter.Measures[0].Field.String;
			var measure = this._measureMap[entitySet][measureField];
			if (!measure) {
				jQuery.sap.log.error("Unknown Measure :" + measureField);
				continue;
			}

			var dispField = dim.fieldInfo.description; // Use the description/sap:text annotation to determine the display value for the field.  E.g. Want to display "Sales Northern Region", not "100-00010"
			if (!dispField)
				dispField = dimField; // if no display field, just use the technical field as a fallback


			if (!filterByDimName[dimField])
				filterByDimName[dimField] = [];

			if (!filterByParentPropName[parentProperty])
				filterByParentPropName[parentProperty] = [];

			var configObject = {
				type: filter.Type.String,
				selected: filter.Selected.Boolean == "true",
				dimension: { // for now only supporting a single dimension (although the annotations allow for a collection)
					field: dimField,
					fieldDisplay: dispField
				},
				measure: { // for now only supporting a single measure (although the annotations allow for a collection)
					field: filter.Measures[0].Field.String,
					descending: filter.Measures[0].Descending.Boolean == "true"
				},
				sortOrder : filter.SortOrder,
				scaleFactor : filter.scaleFactor.String

			};

			configObject.collectionPath = filter.CollectionPath.String;
			configObject.outParameter = filter.OutParameter;
			configObject.inParameters = filter.InParameters;
			configObject.parentProperty = filter.ParentProperty;

			//adding filterRestriction property to configObject
			configObject.filterRestriction = filter.filterRestriction.String;

			//adding required-in-field property to configObject
			configObject.isMandatory = filter.isMandatoryProperty;

			filterByParentPropName[parentProperty].push(configObject);
			filterByDimName[dimField].push(configObject);
		}
		// Now add the filter to the config's filterList
		// Special note: groups determine the 1st level order of the filters.
		// E.g. If ordered in the VisualFilterSet as A B C, and B is part of the 1st group, then the order will show like: B A C
		// The second level ordering is based on the order within the VisualFilterSet
		var usedGroupsByName = {};
		for (var i = 0; i < this._groupList.length; i++) {
			var group = this._groupList[i];
			for (var j = 0; j < group.fieldList.length; j++) {
				var field = group.fieldList[j];
				var filterList = filterByParentPropName[field.name]; // One dimension can have multiple filters

				if (!filterList) // Then no visual filters defined for that dimension
					continue;

				usedGroupsByName[group.name] = true;
				for (var k = 0; k < filterList.length; k++)
					config.filterList.push(filterList[k]);
			}
		}

		// Remove unused groups
		for (var i = this._groupList.length - 1; i >= 0; i--) {
			var group = this._groupList[i];
			if (usedGroupsByName[group.name])
				continue;

			// Unused
			this._groupList.splice(i, 1);
			delete this._groupMap[group.name];
		}
		config = this._sortVisualFilter(this._allSelectionFields, config);
		return config;
	};

	return VisualFilterProvider;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListSeparators'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",[
		"sap/m/Button", "sap/m/ButtonType", "sap/m/Label", "sap/m/Dialog", "sap/m/Bar", "sap/m/SearchField",
		"sap/m/Toolbar", "sap/m/ToolbarSpacer", "sap/m/Title", "sap/m/VBox", "sap/m/HBox", "sap/m/CheckBox",
		"sap/m/Link", "sap/m/List", "sap/m/TextArea","sap/m/Text", "sap/m/StandardListItem", "sap/m/ListSeparators", "sap/m/Popover",
		"sap/ui/layout/form/SimpleForm", "sap/ui/layout/GridData",
		"sap/ui/core/mvc/Controller", "sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
		"sap/m/SegmentedButton","sap/m/SegmentedButtonItem"
	], function(Button, ButtonType, Label, Dialog, Bar, SearchField, Toolbar, ToolbarSpacer, Title,
			VBox, HBox, CheckBox, Link, List, TextArea, Text, StandardListItem, ListSeparators, Popover, SimpleForm,
			GridData, Controller, FilterUtil, SegmentedButton, SegmentedButtonItem) {
	"use strict";

	var BASIC_GROUP = "_BASIC";
	var oClearButton, oRestoreButton, oGoButton, oCancelButton;

	// Chart Default Settings
	var chartWidth = "100%";
	var labelWidthPercent = 0.33;
	var labelWidthPercentDonut = 0.5; //Donut should cover half the area

	var vfdController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController", {
		/**
		 * Initialize the control
		 *
		 * @public
		 * @param {oState} oState - state of the application
		 */
		init: function(oState) {
			this.oState = oState;
			this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		},

		/**
		 * Launches the Graphical Filter Dialog
		 *
		 * @public
		 */
		launchDialog: function () {
			var that = this;
			this.oConfig = this.oState.alr_visualFilterBar.getConfig();
			this._filterModified = false;
			this.filterCompList = [];
			this.filterChartList = [];
			this._buildFiltersFromConfig();
			this.oVFDialog = new sap.m.Dialog({
				title: this.oRb.getText("FILTER_BAR_ADV_FILTERS_DIALOG"),
				afterClose: function() {
					that.oVFDialog.destroy();
				}
			});
			this.oVFDialog.setModel(this.oState.oController.getView().getModel("_templPriv"), "_templPriv");
			this.oVFDialog.setModel(this.oState.oController.getView().getModel());
			this.oVFDialog.setModel(this.oState.oController.getView().getModel("i18n"), "i18n");
			this.oVFDialog.setVerticalScrolling(true);
			this._addDialogButtons();

			this.oVFDialog.addStyleClass("sapUiPopupWithPadding");
			this.oVFDialog.addStyleClass("sapUiSizeCompact");
			this.oVFDialog.addStyleClass("sapUiCompFilterBarDialog");

			// Search Field
			var oSubHeader = new Bar();
			var oFiltersSearchField = new SearchField({
				placeholder: this.oRb.getText("FILTER_BAR_SEARCH")
			});
			oFiltersSearchField.attachLiveChange(function(oEvent) {
				if (that.oVFDialog) {
					that._triggerSearchInFilterDialog(oEvent);
				}
			});

			oSubHeader.addContentRight(oFiltersSearchField);
			this.oVFDialog.setSubHeader(oSubHeader);
			this.oVerticalBox = new VBox();
			//this.oVerticalBox.addStyleClass("sapUiCompFilterBarDialogForm");
			this.oVerticalBox.addStyleClass("sapUiNoContentPadding");
			this.oVFDialog.addContent(this.oVerticalBox);
			this._addFilterSwitch();
			this._addGroupsAndFilters();
			this.oVFDialog.open();
		},

		_addFilterSwitch: function() {
			var filterSwitchItems = [
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:"compact", tooltip:"{i18n>FILTER_COMPACT}"}),
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:"visual", tooltip:"{i18n>FILTER_VISUAL}"})
			];

			var filterSwitch = new SegmentedButton({
				width:"inherit",
				selectedKey:"visual",
				items: filterSwitchItems
			});

			filterSwitch.attachSelect(function(){
				//Save the changes of VFD and close.
				this.oState.alr_visualFilterBar._setVariantModified();
				this.oState.alr_visualFilterBar.setConfig(this._rebuildConfig(), true);
				this.oState.filterBarController.onGoFilter();
				this.oVFDialog.close();
				//Open SmartFilter Dialog
				this.oState.oSmartFilterbar.showFilterDialog();
			}.bind(this));

			var oToolbar = new sap.m.OverflowToolbar({
				design: sap.m.ToolbarDesign.Transparent,
				content: [
					new sap.m.ToolbarSpacer(),
					filterSwitch
				]
			}).addStyleClass("alpFilterDialogToolbar");

			this.oVerticalBox.addItem(oToolbar);
		},

		_addDialogButtons: function () {
			var that = this;
			oGoButton = new Button({
				text: this.oRb.getText("FILTER_BAR_GO"),
				type: ButtonType.Emphasized,
				press: function(oEvent) {
					that.oState.alr_visualFilterBar._setVariantModified();
					//firing filter search to apply changes
					that.oState.alr_visualFilterBar.setConfig(that._rebuildConfig(), true);
					that.oState.filterBarController.onGoFilter();
					that.oVFDialog.close();
				}
			});

			// clear button
			oClearButton = new Button({
				text: this.oRb.getText("FILTER_BAR_CLEAR"),
				press: function(oEvent) {
					that._clearFilters();
				}
			});

			// restore button
			oRestoreButton = new Button({
				text: this.oRb.getText("FILTER_BAR_RESTORE"),
				press: function(oEvent) {
					that.oState.alr_visualFilterBar.fireFilterChange({
						bRestoreCompactFilter: true
					});
					that._buildFiltersFromConfig();
					that.oVerticalBox.removeAllItems();
					//Restoring SegmentedButtons
					that._addFilterSwitch();
					that._addGroupsAndFilters();
				}
			});

			// cancel button
			oCancelButton = new Button({
				text: this.oRb.getText("FILTER_BAR_CANCEL"),
				press: function(oEvent) {
					that.oState.alr_visualFilterBar.fireFilterChange({
						bRestoreCompactFilter: true
					});
					// only close, no need to do any other processing since dialog has to close
					that.oVFDialog.close();
				}
			});

			this.oVFDialog.addButton(oGoButton);
			this.oVFDialog.addButton(oClearButton);
			this.oVFDialog.addButton(oRestoreButton);
			this.oVFDialog.addButton(oCancelButton);
			this.oVFDialog.attachAfterClose(function() {
				that.oVFDialog.destroy();
				that.oVFDialog = null;
			});
		},
		_buildFiltersFromConfig: function() {
			var i;
			this.filterCompList = [];
			this.filterChartList = [];
			for (i = 0; i < this.oConfig.filterCompList.length; i++) {
				this.filterCompList.push({
					obj: {
						shownInFilterBar: this.oConfig.filterCompList[i].shownInFilterBar,
						shownInFilterDialog: this.oConfig.filterCompList[i].shownInFilterDialog,
						cellHeight: this.oConfig.filterCompList[i].cellHeight,
						component: {
							type: this.oConfig.filterCompList[i].component.type,
							cellHeight: this.oConfig.filterCompList[i].component.cellHeight
						},
						group: {
							label: this.oConfig.filterCompList[i].group.label,
							name: this.oConfig.filterCompList[i].group.name
						}
					},
					searchVisible: true,
					toolbar: this._addChartCustomToolbar(this.oConfig.filterCompList[i], i)
				});
				this.filterChartList.push(
					this._addChart(this.oConfig.filterCompList[i].component.type, this.oConfig.filterCompList[i].component.properties, i)
				);
			}

			this._applyFilterSelections();
		},

		_rebuildConfig: function() {
			var i;
			var config = {
					filterCompList: []
				};
			for (i = 0; i < this.filterCompList.length; i++) {
				config.filterCompList.push({
					shownInFilterBar: this.filterCompList[i].obj.shownInFilterBar && this.filterCompList[i].obj.shownInFilterDialog,
					shownInFilterDialog: this.filterCompList[i].obj.shownInFilterDialog,
					cellHeight: this.filterCompList[i].obj.cellHeight,
					group: {
						label: this.filterCompList[i].obj.group.label,
						name: this.filterCompList[i].obj.group.name
					},
					component: {
						type: this.filterCompList[i].obj.component.type,
						cellHeight: this.filterCompList[i].obj.component.cellHeight,
						properties: {
							scaleFactor: this.filterChartList[i].getScaleFactor(),
							sortOrder: this.filterChartList[i].getSortOrder(),
							filterRestriction: this.oConfig.filterCompList[i].component.properties.filterRestriction,
							entitySet: this.filterChartList[i].getEntitySet(),
							width: this.oConfig.filterCompList[i].component.properties.width,
							height: this.oConfig.filterCompList[i].component.properties.height,
							dimensionField: this.filterChartList[i].getDimensionField(),
							dimensionFieldDisplay: this.filterChartList[i].getDimensionFieldDisplay(),
							dimensionFieldIsDateTime: this.filterChartList[i].getDimensionFieldIsDateTime(),
							dimensionFilter: this.filterChartList[i].getDimensionFilter(),
							unitField: this.filterChartList[i].getUnitField(),
							isCurrency: this.filterChartList[i].getIsCurrency(),
							isMandatory: this.oConfig.filterCompList[i].component.properties.isMandatory,
							measureField: this.filterChartList[i].getMeasureField(),
							measureSortDescending: this.filterChartList[i].getMeasureSortDescending(),
							outParameter: this.oConfig.filterCompList[i].component.properties.outParameter,
							inParameters: this.oConfig.filterCompList[i].component.properties.inParameters,
							parentProperty: this.oConfig.filterCompList[i].component.properties.parentProperty
						}
					}
				});
			}
			return config;
		},
	
		/*
		* @private
		* adds group containers and filters based on visual filters and hidden filters that exists
		*/
		_addGroupsAndFilters: function() {
			var i;
			var groupName;
			var groupContainer;
			var filtersGroupCount = 0;
			//this._mergeFilters();
			for (i = 0; i < this.filterCompList.length; i++) {
				if (!Array.isArray(this.filterCompList[i])) {
					if (this.filterCompList[i].searchVisible === false) {
						continue;
					}
					//get the group name of the filter and add it to appropriate group container
					if (!groupName || (groupName != this.filterCompList[i].obj.group.name)) {
						if (groupContainer) {
							this.oVerticalBox.addItem(groupContainer);
						}
						groupName = this.filterCompList[i].obj.group.name;
						groupContainer = new VBox();
						groupContainer.setWidth("100%");
						groupContainer.setLayoutData(new GridData({
							span: "L12 M12 S12"
						}));
						filtersGroupCount++;
						this._addGroupToolbar(groupContainer,  this.filterCompList[i].obj.group.label, this.filterCompList[i].obj.group.name);
					}
					if (this.filterCompList[i].obj.shownInFilterDialog) {
						var chartBox = new VBox();
						chartBox.addStyleClass("alp_graphicalFilterDialogChartViewContainer");
						chartBox.addStyleClass("sapSuiteVisualFilterBar");
						chartBox.addItem(this.filterCompList[i].toolbar);
						//(i-count) -> this is used to get apt index of the chart after the induction of hidden filters in the same array
						//as that of compact filters
						chartBox.addItem(this.filterChartList[i]);
						this._updateFilterCount(i);
						groupContainer.addItem(chartBox);
					}
				}
				//add to dialog
				if (groupContainer) {
					this.oVerticalBox.addItem(groupContainer);
				}
			}
			if (filtersGroupCount <= 1){
				FilterUtil.executeFunction(groupContainer, "mAggregations.items.0.setVisible", [false]);
			}
		},
		/*
		* @private
		* adds a group container for the group to which visual filter belongs
		* @param {object} groupContainer - box containing all visual filters under a group
		* @param {string} groupTitle - title for the groupContainer
		* @param {string} groupName - name of the group
		*/
		_addGroupToolbar: function(groupContainer, groupTitle, groupName) {
			var groupToolbar = new Toolbar({
				content: [
					new Title({text: groupTitle}),
					new ToolbarSpacer()
				]
			});
			if (groupName != BASIC_GROUP) {
				groupToolbar.addContent(this._createMoreFiltersLink(groupName));
			}
			groupContainer.addItem(groupToolbar);
		},
		_addChartCustomToolbar: function(obj, idx) {
			var that = this;
			//This var would be needed to distinguish option button on line chart
			//var isItLineChart = (obj.component.type === "Line");
			var sortDescending = obj.component.properties.sortOrder[0].Descending.Boolean; //Inorder to consider the sort Order of only the first property
			var chartTypeIcon = this._getChartTypeIconLink(obj.component.type);
			var customToolbar = new HBox({
				items: [
					new CheckBox({
						text: "",
						selected: obj.shownInFilterBar,
						select: function(oEvent) {
							var idx = oEvent.getSource().data("idx");
							that.filterCompList[idx].obj.shownInFilterBar = this.getSelected();
						}
					}).data("idx", idx)
				]
			});
			var iconBox = new HBox({
				items: [
					new Button({
						type: "Transparent",
						text: "",
						enabled: "{= !${_templPriv>/alp/visualFilter/" + obj.component.properties.parentProperty + "/hasMultiUnit} }",
						press: function(oEvent) {
							sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController.launchAllFiltersPopup(oEvent.getSource(), that.filterChartList[oEvent.getSource().data("idx")], oEvent.getSource().getModel('i18n'));
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: "sap-icon://line-chart-time-axis",
						visible: false, //isItLineChart To drop support for this button in Wave 15
						press: function(oEvent) {
							that._showLineChartTimeAxisPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: (sortDescending ? "sap-icon://sort-descending" : "sap-icon://sort-ascending"),
						visible: true,//!isItLineChart,
						tooltip:"{i18n>VISUAL_FILTER_SORT_ORDER}",
						press: function(oEvent) {
							that._showChartSortPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: chartTypeIcon,
						tooltip:"{i18n>VISUAL_FILTER_CHART_TYPE}",
						press: function(oEvent) {
							that._showChartTypesPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: "sap-icon://measure",
						tooltip:"{i18n>VISUAL_FILTER_MEASURE}",
						press: function(oEvent) {
							that._showChartMeasuresPopup(oEvent);
						}
					}).data("idx", idx)
				]
			});

			iconBox.setWidth("100%");
			iconBox.setJustifyContent(sap.m.FlexJustifyContent.End);
			customToolbar.setWidth("100%");
			customToolbar.addItem(iconBox);

			return customToolbar;
		},
		_addChart: function (chartType, prop, idx) {
			var chart;
			var that = this;

			var oProp = {
					scaleFactor : prop.scaleFactor,
					sortOrder: prop.sortOrder,
					filterRestriction: prop.filterRestriction,
					width: chartWidth,
					height: prop.height,
					labelWidthPercent: labelWidthPercent,
					entitySet: prop.entitySet,
					dimensionField: prop.dimensionField,
					dimensionFieldDisplay: prop.dimensionFieldDisplay,
					dimensionFieldIsDateTime: prop.dimensionFieldIsDateTime,
					unitField: prop.unitField,
					isCurrency: prop.isCurrency,
					isMandatory: prop.isMandatory,
					measureField: prop.measureField,
					dimensionFilter: prop.dimensionFilter,
					measureSortDescending: prop.measureSortDescending,
					outParameter: prop.outParameter,
					inParameters: prop.inParameters,
					parentProperty: prop.parentProperty
			};

			if (chartType === "Donut") {
				oProp.labelWidthPercent = labelWidthPercentDonut;
			}
			var chart = this.oState.alr_visualFilterBar._createFilterItemOfType(chartType, oProp);
			chart.data("idx", idx);

			//chart click handler
			chart.attachFilterChange(function(oEvent) {
				var idx = oEvent.getSource().data("idx");
				that._filterModified = true;
				that._updateFilterCount(idx);

				// fire visual filter change event to get compact filter data for in params
				// so that other visual filter items can react
				that.oState.alr_visualFilterBar.fireFilterChange({
					filterList: oEvent.getParameter('filterList'),
					property: oEvent.getParameter('property'),
					filterRestriction: oEvent.getParameter('filterRestriction')
				});
				that._applyFilterSelections();
			});

			chart.attachTitleChange(function(oEvent) {
				var idx = oEvent.getSource().data("idx");
				// If Mandatory property then add an (*)
				if (oProp.isMandatory) {
					that.filterCompList[idx].toolbar.getItems()[0]._oLabel.addStyleClass("sapMLabelRequired");
				}
				that.filterCompList[idx].toolbar.getItems()[0].setText(that._getChartTitle(that.filterCompList[idx].obj, idx));
			});

			return chart;
		},
		_createMoreFiltersLink: function(groupName) {
			var that = this;
			var count = 0;
			var i;
			var oLink = new Link();

			for (i = 0; i < this.filterCompList.length; i++) {
				if (this.filterCompList[i].searchVisible &&
						this.filterCompList[i].obj.group.name === groupName &&
						!this.filterCompList[i].obj.shownInFilterDialog) {
					count++;
				}
			}
			if (count > 0) {
				oLink.setText(this.oRb.getText("FILTER_BAR_SHOW_MORE_FILTERS", [count]));
			} else {
				oLink.setText(this.oRb.getText("FILTER_BAR_SHOW_CHANGE_FILTERS"));
			}

			oLink.attachPress(function(evnt) {
				that._createAddRemoveFiltersDialog(groupName, oLink);
			});

			return oLink;
		},
		_showChartMeasuresPopup: function(oEvent) {
			var that = this;
			var idx = oEvent.getSource().data("idx");
			var collectionPath = this.filterChartList[idx].getProperty("entitySet");
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_MEASURES");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft
			});
			oList.data("idx", idx);
			oDialog.addContent(oList);
			var measures = this.oState.alr_visualFilterBar._getMeasureMap()[collectionPath];
			oList.addStyleClass("sapUiSizeCompact");
			//measures will be undefined if collectionPath does not exist in measures.
			if (measures) {
				for (var item in measures) {
					var oListItem = new StandardListItem({
						title: measures[item].label
					}).data("measureName", measures[item].name);
					oList.addItem(oListItem);
					if (this.filterChartList[idx].getMeasureField() === measures[item].name) {
						oList.setSelectedItem(oListItem);
					}
				}
			}

			oList.attachSelectionChange(function (oEvent) {
				var idx = oEvent.getSource().data("idx");
				that.filterChartList[idx].setMeasureField(oEvent.getSource().getSelectedItem().data("measureName"));
				that.filterCompList[idx].toolbar.getItems()[0].setText(that._getChartTitle(that.filterCompList[idx].obj, idx));
				oDialog.close();
			});

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());

		},

		_showChartTypesPopup: function(oEvent) {
			var that = this;
			var button = oEvent.getSource();
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_CHART_TYPES");
			var compList = this.oState.alr_visualFilterBar._getSupportedFilterItemList();
			var listItems = [];
			for (var i = 0; i < compList.length; i++) {
				var comp = compList[i];
				var listItem = new StandardListItem({
						title: "{i18n>" + comp.textKey + "}",
						icon: comp.iconLink,
						selected: button.getIcon() === comp.iconLink
					}).data("type", comp.type);
				listItems.push(listItem);
			}
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectMaster,
				items: listItems
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				var idx = oEvent.getSource().data("button").data("idx");
				var chartType = oEvent.getSource().getSelectedItem().data("type");
				var prop = that.filterChartList[idx].getP13NConfig();
				that.filterCompList[idx].obj.component.type = chartType;
				oEvent.getSource().data("button").setIcon(that._getChartTypeIconLink(chartType));
				that.filterChartList[idx] = that._addChart(chartType, prop, idx);
				//Commenting out adjustment of toolbar button in Wave 15 till we support proper sorting in Line Chart
				//that._adjustToolbarIcons(idx);
				that._applyFilterSelections();
				oDialog.close();
			});
			oDialog.attachBeforeClose(function() {
				that.oVerticalBox.removeAllItems();
				that._addFilterSwitch();
				that._addGroupsAndFilters();
			});
			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		_showLineChartTimeAxisPopup: function(oEvent) {
			var idx = oEvent.getSource().data("idx");
			var button = oEvent.getSource();
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_LINE_CHART_TIME_LINE");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft,
				items: [
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_DAYS}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_MONTH}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_QUARTERS}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_YEARS}"
					}).data("idx", idx)
				]
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				// add logic
				oDialog.close();
			});

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		_showChartSortPopup: function(oEvent) {
			var that = this;
			var idx = oEvent.getSource().data("idx");
			var button = oEvent.getSource();
			var i18n = oEvent.getSource().getModel('i18n');
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(i18n, "VISUAL_FILTER_SORTING");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft,
				items: [
					new StandardListItem({
						title: i18n.getResourceBundle().getText("VISUAL_FILTER_SORTING_ASCENDING")
					}).data("idx", idx),
					new StandardListItem({
						title: i18n.getResourceBundle().getText("VISUAL_FILTER_SORTING_DESCENDING")
					}).data("idx", idx)
				]
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			if (this.filterChartList[idx].getSortOrder()[0].Descending.Boolean) {
				oList.setSelectedItem(oList.getItems()[1], true);
			} else {
				oList.setSelectedItem(oList.getItems()[0], true);
			}
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				var button = oEvent.getSource().data("button");
				var idx = button.data("idx");
				var aSortProperty = jQuery.extend(true, [], that.filterChartList[idx].getSortOrder());
				//We consider only first sortProperty, hence 0 index is used
				aSortProperty[0].Descending.Boolean = oEvent.getSource().getItems()[1].isSelected();
				that.filterChartList[idx].setSortOrder(aSortProperty);
				if (that.filterChartList[idx].getSortOrder()[0].Descending.Boolean) {
					button.setIcon("sap-icon://sort-descending");
				} else {
					button.setIcon("sap-icon://sort-ascending");
				}
				oDialog.close();
			});
			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		/**
		 * Creates the 'Add/Remove Filters' - dialog.
		 *
		 * @private
		 * @param {string} groupName filter group name
		 * @param {sap.m.Link} oLink more/clear filters link
		 */

		_createAddRemoveFiltersDialog: function(groupName, oLink) {
			var i; //, oDialog,
			var that = this;

			var oDialog = new sap.m.Dialog();
			oDialog.setTitle(this.oRb.getText("SELECT_FILTER_FIELDS"));
			oDialog.addStyleClass("sapUiPopupWithPadding");
			oDialog.addStyleClass("sapUiCompAddRemoveFilterDialog");
			oDialog.addStyleClass("sapUiSizeCompact");
			oDialog.setVerticalScrolling(true);

			var oSubHeader = new Bar();
			var oSearchField = new SearchField({
				placeholder: this.oRb.getText("FILTER_BAR_SEARCH")
			});

			this._oSearchField = oSearchField;
			oSearchField.attachLiveChange(function(oEvent) {
				that._onAddRemoveFiltersSearch(oEvent);
			});

			oSubHeader.addContentRight(oSearchField);
			oDialog.setSubHeader(oSubHeader);

			this.addRemoveList = new List({
				mode: sap.m.ListMode.MultiSelect
			});
			this.addRemoveList.setShowSeparators(ListSeparators.None);
			oDialog.addContent(this.addRemoveList);

			for (i = 0; i < this.filterCompList.length; i++) {
				if (this.filterCompList[i].obj.group.name === groupName && this.filterCompList[i].searchVisible) {
					var oListItem = new StandardListItem({
						title: this._getChartTitle(this.filterCompList[i].obj, i, true)
					}).data("idx", i);
					this.addRemoveList.addItem(oListItem);
					if (this.filterCompList[i].obj.shownInFilterDialog) {
						this.addRemoveList.setSelectedItem(oListItem, true);
					}
				}
			}

			// OK button
			var oOKButton = new Button({
				text: this.oRb.getText("FORM_PERS_DIALOG_OK")
			});
			oOKButton.attachPress(function() {
				var i;
				var items = that.addRemoveList.getItems();
				for (i = 0; i < items.length; i++) {
					var idx = items[i].data("idx");
					that.filterCompList[idx].obj.shownInFilterDialog = items[i].isSelected();
				}
				that.oVerticalBox.removeAllItems();
				//Restore SegmentedButtons
				that._addFilterSwitch();
				that._addGroupsAndFilters();
				oDialog.close();
			});
			oDialog.addAggregation("buttons", oOKButton);
			oDialog.setInitialFocus(this._oSearchField);
			oDialog.setContentHeight("23.25rem"); // 30.25 - 2*2.5rem - 2rem

			// Cancel button
			var oCancelButton = new Button({
				text: this.oRb.getText("FORM_PERS_DIALOG_CANCEL"),
				press: function() {
					oDialog.close();
				}
			});
			oDialog.addAggregation("buttons", oCancelButton);

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.open();
		},
		_onAddRemoveFiltersSearch : function (oEvent) {
			var i;

			if (!oEvent) {
				return;
			}

			var parameters = oEvent.getParameters();
			if (!parameters) {
				return;
			}

			var sValue = (parameters.newValue ? parameters.newValue : "").toLowerCase();
			var items = this.addRemoveList.getItems();
			for (i = 0; i < items.length; i++) {
				var sText = (items[i].getTitle()).toLowerCase();
				items[i].setVisible(sText.indexOf(sValue) >= 0);
			}
		},
		_getChartTypeIconLink: function(icon) {
			var compMap = this.oState.alr_visualFilterBar._getSupportedFilterItemMap();
			var comp = compMap[icon];
			return !comp ? "" : comp.iconLink;
		},
		_getChartTitle: function (obj, idx, useConfig) {
			var title = "";
			if (this.filterChartList[idx]) {
				if (useConfig) {
					obj.component.properties = this.filterChartList[idx].getP13NConfig();
					title = this.oState.alr_visualFilterBar.getTitleByFilterItemConfig(obj);
				} else {
					title = this.filterChartList[idx].getTitle();
				}
			} else {
				title = this.oState.alr_visualFilterBar.getTitleByFilterItemConfig(obj);
			}
			return title;
		},
		_adjustToolbarIcons: function(idx) {
			if (this.filterCompList[idx].obj.component.type === "Line") {
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[1].setVisible(true);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[2].setVisible(false);
			} else {
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[1].setVisible(false);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[2].setVisible(true);
			}
		},
		_applyFilterSelections: function() {
			this.oState.alr_visualFilterBar._updateFilterItemList(this.filterChartList);
		},

		_clearFilters: function() {
			for (var i = 0; i < this.filterCompList.length; i++) {
				this.filterChartList[i].setDimensionFilter([]);
				this.filterChartList[i].setDimensionFilterExternal([]);
				this._updateFilterCount(i);
			}

			this.oState.alr_visualFilterBar.fireFilterChange({
				filterItemList: this.filterChartList
			});
			this._applyFilterSelections();
		},
		_updateFilterCount: function(idx) {
			if (this.filterChartList[idx].getDimensionFilter() && this.filterChartList[idx].getDimensionFilter().length > 0) {
				var sText = this.oRb.getText("VALUEHELPDLG_SELECTEDITEMS_SHORT", [this.filterChartList[idx].getDimensionFilter().length]);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[0].setVisible(true);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[0].setText(sText);
			} else {
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[0].setVisible(false);
			}
		},
		/**
		 * Reacts to search from 'Filters'- dialog.
		 *
		 * @private
		 * @param {object} oEvent containing the search string
		 */
		_triggerSearchInFilterDialog: function (oEvent) {
			var i;

			if (!oEvent) {
				return;
			}

			var parameters = oEvent.getParameters();
			if (!parameters) {
				return;
			}

			var sValue = (parameters.newValue ? parameters.newValue : "").toLowerCase();
			for (i = 0; i < this.filterCompList.length; i++) {
				var sText = (this.filterCompList[i].toolbar.getItems()[0].getText()).toLowerCase();
				this.filterCompList[i].searchVisible = sText.indexOf(sValue) >= 0;
			}
			this.oVerticalBox.removeAllItems();
			//Restore SegmentedButtons
			this._addFilterSwitch();
			this._addGroupsAndFilters();
		}
	});

	/**
	 * @private
	 * [_createPopoverDialog description]
	 * @param  {object} i18n object
	 * @param  {object} title string to display in dialog
	 * @return {object} oDialog object
	 */
	sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog = function(i18n, title) {
		var oDialog = new sap.m.Popover();
		oDialog.setTitle(i18n.getResourceBundle().getText(title));
		oDialog.setPlacement(sap.m.PlacementType.PreferredBottomOrFlip);
		oDialog.addStyleClass("sapUiPopupWithPadding");
		return oDialog;
	};

	/**
	 * Launches the All Filters Popup
	 *
	 * @public
	 * @param {Control}  oControl the control requesting the popup
	 * @param {Chart}    oChart the selected chart
	 */
	sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController.launchAllFiltersPopup = function(oControl, oChart, i18n) {
		var i;
		var filters = oChart.getDimensionFilter();
		var filterRestriction = oChart.getFilterRestriction();
		var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(i18n, "VISUAL_FILTER_ALL_SELECTED_FILTERS");
		var oList = new List({
			mode: sap.m.ListMode.Delete
		});
		oList.data("chart", oChart);
		oDialog.addContent(oList);
		oDialog.addStyleClass("sapUiSizeCompact");
		oDialog.addStyleClass("alpSelectedLinkDialog");
		//Adding a footer bar with a clear all button
		var oFooter = new sap.m.Bar();
		var oClearButton = new Button({
			text: i18n.getResourceBundle().getText("CLEAR_FILTERS_ALL"),
			press: function(oEvent) {
				var chart = oList.data("chart");
				filters.length = 0;
				oDialog.removeContent(oList);
				chart.setDimensionFilter(filters);
				chart.fireFilterChange({
					filterList: filters,
					property: chart.getParentProperty(),
					filterRestriction: chart.getFilterRestriction()
				});

				// setting the focus to dialog keeps the dialog open
				oDialog.close();
			}
		});
		oFooter.addContentRight(oClearButton);
		oDialog.setFooter(oFooter);

		if (filterRestriction !== "single") {
			for (i = 0; i < filters.length; i++) {
				var oListItem = new StandardListItem({
					title: FilterUtil.createTitle(filters[i].dimValueDisplay, filters[i].dimValue)
				});
				oList.addItem(oListItem);
			}
		} else {
			oList.addItem( new StandardListItem({ title: filters[0].dimValue }));
		}

		oList.attachDelete(function (oEvent) {
			var oItem = oEvent.getParameter("listItem");
			var chart = oList.data("chart");
			var idx = oList.indexOfItem(oItem);
			filters.splice(idx, 1);
			oList.removeItem(oItem);
			chart.setDimensionFilter(filters);
			chart.fireFilterChange({
				filterList: filters,
				property: chart.getParentProperty(),
				filterRestriction: chart.getFilterRestriction()
			});

			// setting the focus to dialog keeps the dialog open
			oDialog.focus();
		});

		oDialog.attachAfterClose(function() {
			oDialog.destroy();
			oDialog = null;
		});

		oDialog.openBy(oControl);
	};

	return vfdController;
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation') ) {
/* global hasher */
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/model/json/JSONModel", "sap/m/ObjectIdentifier", "sap/m/Table",
		"sap/m/Text", "sap/ui/comp/smartfield/SmartField", "sap/ui/generic/app/navigation/service/SelectionVariant",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI", "sap/m/MessageBox", "sap/suite/ui/generic/template/js/AnnotationHelper",
		"sap/suite/ui/generic/template/lib/MessageUtils", "sap/suite/ui/generic/template/ListReport/controller/IappStateHandler", "sap/ui/table/Table", "sap/ui/table/AnalyticalTable", "sap/ui/model/Filter"],
	function(jQuery, BaseObject, JSONModel, ObjectIdentifier, Table, Text, SmartField, SelectionVariant, ExtensionAPI, MessageBox, AnnotationHelper, MessageUtils, IappStateHandler, UiTable, AnalyticalTable, Filter) {
		"use strict";

		return {
			getMethods: function(oViewProxy, oTemplateUtils, oController) {
				var oState = {}; // contains attributes oSmartFilterbar, oSmartTable and (from oIappStateHandler) function getCurrentAppState. Initialized in onInit.
				var oIappStateHandler;
				var bIsStartingUp = true;

				// -- Begin of methods that are used in onInit only
				function fnSetIsLeaf() {
					var oComponent = oController.getOwnerComponent();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/isLeaf", oComponent.getIsLeaf());
				}

				function fnSetShareModel() {
					var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
					var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";
					// share Model: holds all the sharing relevant texts and info used in the XML view
					var oShareInfo = {
						// BOOKMARK
						bookmarkIcon: sBookmarkIcon,
						bookmarkCustomUrl: function() {
							var sHash = hasher.getHash();
							return sHash ? ("#" + sHash) : window.location.href;
						},
						bookmarkServiceUrl: function() {
							var oTable = oState.oSmartTable.getTable();
							var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
							return oBinding ? oBinding.getDownloadUrl() + "&$top=0&$inlinecount=allpages" : "";
						},
						// JAM
						isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
					};
					var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
				}
				// -- End of used in onInit only

				function onSmartFilterBarInitialise(oEvent){
					oController.onInitSmartFilterBarExtension(oEvent);
					oIappStateHandler.onSmartFilterBarInitialise();
				}

				function onSmartFilterBarInitialized(){
					var oAppStatePromise = oIappStateHandler.parseUrlAndApplyAppState();
					oAppStatePromise.then(function(){
						bIsStartingUp = false;	
					}, function(oError){ // improve?
						if (oError instanceof Error) {
							oError.showMessageBox(); // improve?
							bIsStartingUp = false;
						}						
					});
				}
				
				function onFilterChange(){
					if (!bIsStartingUp){
						oIappStateHandler.changeIappState(true, false);
					}
				}
				
				// TABLE TAB POC ONLY
				function fnPrepareForTableTabs() {
					// get all table instances
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui.generic.app");
					if (oManifest && oManifest.pages[0] && oManifest.pages[0].component && oManifest.pages[0].component.settings && oManifest.pages[0].component.settings.tableTabs) {
						var oTmpTable;
						oState.aSmartTables = [];
						for (var i in oManifest.pages[0].component.settings.tableTabs) {
							var sKey = oManifest.pages[0].component.settings.tableTabs[i].key;
							oTmpTable = oController.byId("listReport-" + sKey);
							oState.aSmartTables.push(oTmpTable);
							
						}
						oState.oSmartTable = oState.aSmartTables[0];
						for (i = 1; i < oState.aSmartTables.length; i++) {
							oState.aSmartTables[i].setVisible(false);
						}
					}
					
					// Attach to “Search” event on SmartFilterBar (in init of the view controller)
					oState.oSmartFilterbar.attachSearch(function(oEvent){
						oState.oSmartTable._reBindTable(oEvent);
					});
				}

				// Generation of Event Handlers
				return {
					onInit: function() {
						oState.oSmartFilterbar = oController.byId("listReportFilter");
						oState.oSmartTable = oController.byId("listReport");

						// TABLE TAB POC ONLY
						fnPrepareForTableTabs();
						// (END) TABLE TAB POC ONLY
						
						oIappStateHandler = new IappStateHandler(oState, oController, oTemplateUtils.oCommonUtils.getNavigationHandler());
						oTemplateUtils.oServices.oApplication.registerStateChanger({
							isStateChange: oIappStateHandler.isStateChange	
						});
						// Give component access to some methods
						oViewProxy.getUrlParameterInfo = oIappStateHandler.getUrlParameterInfo;
						oViewProxy.onComponentActivate = function(){
							if (!bIsStartingUp){
								oIappStateHandler.parseUrlAndApplyAppState();
							}
						};
						oViewProxy.refreshBinding = function(){
							// refresh list, but only if the list is currently showing data
							if (oIappStateHandler.areDataShownInTable()){
								oState.oSmartTable.rebindTable();
							}
						};

						fnSetIsLeaf();
						fnSetShareModel();
						var oComponent = oController.getOwnerComponent();
						oController.byId("template::FilterText").attachBrowserEvent("click", function () {
							oController.byId("page").setHeaderExpanded(true);
						});
						var oTemplatePrivateModel = oComponent.getModel("_templPriv");
						oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", true);
						
						// set property for enable/disable of the Delete button
						oTemplatePrivateModel.setProperty("/listReport/deleteEnabled", false);
						
						//the following layout definition should only be executed for the List Report (Object Page will use here the new complex table concept)
						//condensed shouldn't be the default, only if the manifest specifies it
						//compare the following logic with Application.js->getContentDensityClass:
						//compact and condensed needs to be set together
						var oTable = oState.oSmartTable.getTable();
						var sCozyClass = "sapUiSizeCozy", sCompactClass = "sapUiSizeCompact", sCondensedClass = "sapUiSizeCondensed";
						if ( oTable instanceof UiTable || oTable instanceof AnalyticalTable) {
							var oView = oController.getView();
							var oBody = jQuery(document.body);
							if (oBody.hasClass(sCozyClass) || oView.hasStyleClass(sCozyClass)){
								oState.oSmartTable.addStyleClass(sCozyClass);
							} else if (oBody.hasClass(sCompactClass) || oView.hasStyleClass(sCompactClass)){
								var bCondensedTableLayout = oComponent.getComponentContainer().getSettings().condensedTableLayout;
								if (bCondensedTableLayout === true){
									//https://openui5.hana.ondemand.com/#docs/guide/13e6f3bfc54c4bd7952403e20ff447e7.html
									//setting sapUiSizeCompact AND sapUiSizeCondensed might mix up the required css
									//oState.oSmartTable.addStyleClass(sCompactClass);
									oState.oSmartTable.addStyleClass(sCondensedClass);
								} else {
									oState.oSmartTable.addStyleClass(sCompactClass);
								}
							}
						}
					},

					handlers: {
						onBack: function() {
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
								oTemplateUtils.oServices.oNavigationController.navigateBack();
							}, jQuery.noop, oState);
						},
						addEntry: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false, oState.oSmartFilterbar);
							}, jQuery.noop, oState);
						},
						deleteEntries: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.deleteEntries(oEvent);
						},
						onSelectionChange: function(oEvent) {
							var oTable = oEvent.getSource(),
								oModel = oTable.getModel(),
								oPrivModel = oTable.getModel("_templPriv");

							var oMetaModel = oModel.getMetaModel(),
								oEntitySet = oMetaModel.getODataEntitySet(this.getOwnerComponent().getEntitySet()),
								oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];

							var bDeleteEnabled = false;

							if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, oEntitySet.entityType, oDeleteRestrictions)) {

								var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";
								var bAllLocked = true;
								var bAllNotDeletable = (sDeletablePath && sDeletablePath !== ""); // if Deletable-Path is undefined, then the items are deletable.

								var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
								if (aContexts.length > 0) {
									for (var i = 0; i < aContexts.length; i++) {
										var oObject = oModel.getObject(aContexts[i].getPath());

										// check if item is locked
										if (!(oObject.IsActiveEntity && oObject.HasDraftEntity && oObject.DraftAdministrativeData && oObject.DraftAdministrativeData.InProcessByUser)) {
											bAllLocked = false;
										}
										// check if item is deletable
										if (bAllNotDeletable) {
											if (oModel.getProperty(sDeletablePath, aContexts[i])) {
												bAllNotDeletable = false;
											}
										}
										if (!bAllLocked && !bAllNotDeletable) {
											bDeleteEnabled = true;
											break;
										}
									}
								}
							}
							oPrivModel.setProperty("/listReport/deleteEnabled", bDeleteEnabled);
							
							oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oTable);
							oTemplateUtils.oCommonUtils.setEnabledFooterButtons(oTable, this);
						},
						onChange: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
						},
						onSmartFieldUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oState);
						},
						onBreadCrumbUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBreadCrumbUrlPressed(oEvent, oState);
						},
						onContactDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
						},
						onSmartFilterBarInitialise: onSmartFilterBarInitialise,
						onSmartFilterBarInitialized: onSmartFilterBarInitialized,

						onBeforeSFBVariantSave: function() {
							oIappStateHandler.onBeforeSFBVariantSave();
						},
						
						onAfterSFBVariantSave: function(){
							oIappStateHandler.onAfterSFBVariantSave();	
						},
						
						onAfterSFBVariantLoad: function(oEvent) {
							oIappStateHandler.onAfterSFBVariantLoad(oEvent);
						},
						onBeforeRebindTable: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
							oController.onBeforeRebindTableExtension(oEvent);
							// TABLE TAB POC ONLY
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTableFinally(oEvent);
							// (END) TABLE TAB POC ONLY
						},
						onShowDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oState);
						},
						onListNavigate: function(oEvent) {
							if (!oController.onListNavigationExtension(oEvent)) {
								oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oState);
							}
						},
						onCallActionFromToolBar: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oState);
						},
						onDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent, oState);
						},
						onDataFieldWithIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldWithIntentBasedNavigation(oEvent, oState);
						},
						onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {
							
							var oEventParameters = oEvent.getParameters();
							
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
							  //Success function
								var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
								if (oNavigationHandler) {
									var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
									oNavigationHandler.processBeforeSmartLinkPopoverOpens(oEventParameters, sSelectionVariant);
								} else {
									oEventParameters.open();
								}
							}, jQuery.noop, oState, jQuery.noop);
						},
						onDraftLinkPressed: function(oEvent) {
							var oButton = oEvent.getSource();
							var oBindingContext = oButton.getBindingContext();
							oTemplateUtils.oCommonUtils.showDraftPopover(oBindingContext, oButton);
						},
						onAssignedFiltersChanged: function(oEvent) {
							if (oEvent.getSource()) {
								oController.byId("template::FilterText").setText(oEvent.getSource().retrieveFiltersWithValuesAsText());
							}
						},
						onFilterChange: onFilterChange,
						onToggleFiltersPressed: function() {
							var oComponent = oController.getOwnerComponent();
							var oTemplatePrivateModel = oComponent.getModel("_templPriv");
							oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", !oTemplatePrivateModel.getProperty("/listReport/isHeaderExpanded"));
						},
						// ---------------------------------------------
						// store navigation context
						// note: function itself is handled by the corresponding control
						// ---------------------------------------------
						onSearchButtonPressed: function() {
							var oModel = oController.getOwnerComponent().getModel();
							var fnRequestFailed = function(oEvent) {
								MessageUtils.handleError("getCollection", oController, oTemplateUtils.oServices, oEvent.getParameters());
								oState.oSmartTable.getTable().setBusy(false);
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, oController.getView()));
							};
							oIappStateHandler.changeIappState(false, true);
							oModel.attachEvent('requestFailed', fnRequestFailed);
							oModel.attachEventOnce('requestCompleted', function() {
								oModel.detachEvent('requestFailed', fnRequestFailed);
							});
						},
						onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oState);
						},
						onAfterTableVariantSave: function() {
							oIappStateHandler.onAfterTableVariantSave();
						},
						onAfterApplyTableVariant: function() {
							oIappStateHandler.onAfterApplyTableVariant();
						},
						
						// ---------------------------------------------
						// END store navigation context
						// ---------------------------------------------

						onShareListReportActionButtonPress: function (oEvent) {
							var oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
								"sap.suite.ui.generic.template.ListReport.view.fragments.ShareSheet", {
									shareEmailPressed: function() {
										sap.m.URLHelper.triggerEmail(null, oTemplateUtils.oCommonUtils.getText("EMAIL_HEADER", [oTemplateUtils.oCommonUtils.getText(
											"PAGEHEADER")]), document.URL);
									},
									shareJamPressed: function() {
										var oShareDialog = sap.ui.getCore().createComponent({
											name: "sap.collaboration.components.fiori.sharing.dialog",
											settings: {
												object: {
													id: document.URL,
													share: oTemplateUtils.oCommonUtils.getText("PAGEHEADER")
												}
											}
										});
										oShareDialog.open();
									}

								}, "share", function(oFragment, oShareModel) {
									var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
									oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
									oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
									oShareModel.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
									var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
									oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
								});
							oShareActionSheet.openBy(oEvent.getSource());

							// workaround for focus loss issue for AddBookmarkButton ("save as tile" button)
							var oShareButton = this.getView().byId("template::Share");
							var oBookmarkButton = this.getView().byId("bookmarkButton");
							oBookmarkButton.setBeforePressHandler(function() {
								// set the focus to share button
								oShareButton.focus();
							});
						},
						onInlineDataFieldForAction: function(oEvent) {
							var oEventSource = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oEventSource);
							var oTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
							var sTableBindingPath = oTable.getParent().getTableBindingPath();
							var aContexts = [oEventSource.getBindingContext()];
							oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable, oState);
						},
						onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onInlineDataFieldForIntentBasedNavigation(oEvent.getSource(), oState);
						},
						onDeterminingDataFieldForAction: function(oEvent) {
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sTableBindingPath = oState.oSmartTable.getTableBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable);
							}
						},
						onDeterminingDataFieldForIntentBasedNavigation: function(oEvent) {
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							var bRequiresContext = !(oCustomData.RequiresContext && oCustomData.RequiresContext === "false");
							if (bRequiresContext && aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else if (bRequiresContext && aContexts.length > 1) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_MULTIPLE_ITEMS_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oContext = bRequiresContext ? aContexts[0] : null;
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState);
							}
						},
						// TABLE TAB POC ONLY
						onIconTabBarSelect: function(oEvent) {
							var sKey = oEvent.getSource().getSelectedKey();
							var oSmartTableOld, oSmartTableNew;
							oSmartTableOld = oState.oSmartTable;
							oSmartTableNew = oController.byId("listReport-" + sKey);
							if (oSmartTableNew) {
								oState.oSmartTable = oSmartTableNew;
								oSmartTableOld.setVisible(false);
								oState.oSmartTable.setVisible(true);
								oState.oSmartTable.rebindTable();
							}
						},

						onTableInit: function(oEvent) {
							var oSmartTable = oEvent.getSource();
							var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
							oTemplateUtils.oCommonUtils.checkToolbarIntentsSupported(oSmartTable, oTemplatePrivateModel);
						}
					},
					formatters: {
						formatDraftType: function(oDraftAdministrativeData, bIsActiveEntity, bHasDraftEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								if (!bIsActiveEntity) {
									return sap.m.ObjectMarkerType.Draft;
								} else if (bHasDraftEntity) {
									return oDraftAdministrativeData.InProcessByUser ? sap.m.ObjectMarkerType.Locked : sap.m.ObjectMarkerType.Unsaved;
								}
							}
							return sap.m.ObjectMarkerType.Flagged;
						},

						formatDraftVisibility: function(oDraftAdministrativeData, bIsActiveEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								if (!bIsActiveEntity) {
									return sap.m.ObjectMarkerVisibility.TextOnly; //for Draft mode only the text will be shown 
								}
							}
							return sap.m.ObjectMarkerVisibility.IconAndText; //Default text and icon
						},

						formatDraftLineItemVisible: function(oDraftAdministrativeData) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								return true;
							}
							return false;
						},
						
						// Returns full user name or ID of owner of a draft with status "unsaved changes" or "locked" in the format "by full name" or "by UserId"
						// If the user names and IDs are not maintained we display for example "locked by another user"
						formatDraftOwner: function(oDraftAdministrativeData, bHasDraftEntity) {
							var sDraftOwnerDescription = "";
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID && bHasDraftEntity) {
								var sUserDescription = oDraftAdministrativeData.InProcessByUserDescription || oDraftAdministrativeData.InProcessByUser || oDraftAdministrativeData.LastChangedByUserDescription || oDraftAdministrativeData.LastChangedByUser;
								if (sUserDescription){
									sDraftOwnerDescription = oTemplateUtils.oCommonUtils.getText("ST_DRAFT_OWNER", [sUserDescription]);
								} else {
									sDraftOwnerDescription = oTemplateUtils.oCommonUtils.getText("ST_DRAFT_ANOTHER_USER");
								}
							}
							return sDraftOwnerDescription;
						}
					},

					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
				};
			}
		};

	});
}; // end of sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation",
		["jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/format/DateFormat", "sap/ui/core/routing/HashChanger",
			"sap/m/MessageBox", "sap/m/MessageToast", "sap/ui/model/Filter", "sap/ui/model/Sorter",
			"sap/ui/table/AnalyticalTable", "sap/ui/comp/smarttable/SmartTable", "sap/ui/generic/app/navigation/service/SelectionVariant",
			"sap/suite/ui/generic/template/lib/MessageButtonHelper", "sap/suite/ui/generic/template/lib/testableHelper",
			"sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI", "sap/ui/model/json/JSONModel","sap/suite/ui/generic/template/js/AnnotationHelper", "sap/ui/core/mvc/ViewType"
		],
		function(jQuery, BaseObject, DateFormat, HashChanger, MessageBox, MessageToast, Filter, Sorter,
			AnalyticalTable, SmartTable, SelectionVariant, MessageButtonHelper, testableHelper, ExtensionAPI, JSONModel, AnnotationHelper, ViewType) {
			"use strict";
			function fnIsEventForTableWithInlineCreate(oSmartTable){
				return oSmartTable.data("inlineCreate") === "true";
			}
			
			return {
				getMethods: function(oViewProxy, oTemplateUtils, oController) {
					var oState = {
						aUnsavedDataCheckFunctions: [] //array for external unsaved data check functions that can be registered
					}; // contains attributes oSmartFilterbar and oSmartTable. Initialized in onInit.
					var bIsObjectRoot; // will currently be set first time, when edit button is pressed
					var fnFclNavigteToDraft;
					var bIsContainedInFCL;
					var aEntitySets; // initialized in onInit
					var sLinkUp;
					
					function onActivateImpl() {
						if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
							jQuery.sap.log.info("Activation of object suppressed, since App is currently busy");
							return; // this is again tested by the CRUDManager. But in order to suppress the AfterActivate-Event in the busy case we also need to check this here.
						}
						jQuery.sap.log.info("Activate object");
						var oActivationPromise = oTemplateUtils.oServices.oCRUDManager.activateDraftEntity();
						oActivationPromise.then(function(oResponse) {
							oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED"));
							if (oResponse && oResponse.context) {
								// it's not enough to set root to dirty: Scenario: subitem has been displayed (active document), then changed (draft) and shall be
								// displayed again after activation - now data has to be read again
								// therefore we set all pages to dirty, excluding the current one (here the active data is already returned by the function import)
								oTemplateUtils.oServices.oViewDependencyHelper.setAllPagesDirty([oController.getOwnerComponent().getId()]);
								oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
								// navigate to activate document
								oTemplateUtils.oServices.oNavigationController.navigateToContext(
									oResponse.context, undefined, true);
							}
						});
						var oEvent = {
							activationPromise: oActivationPromise
						};
						oTemplateUtils.oComponentUtils.fire(oController, "AfterActivate", oEvent);
					}
					
					function onActivate(){
						oTemplateUtils.oServices.oApplication.performAfterSideEffectExecution(onActivateImpl);                         	
					}
					
					function setEditable(bIsEditable) {
						var oUIModel = oController.getView().getModel("ui");
						oUIModel.setProperty("/editable", bIsEditable);
						if (bIsObjectRoot && !oTemplateUtils.oCommonUtils.isDraftEnabled()) {
							oTemplateUtils.oComponentUtils.setEditableNDC(bIsEditable);
						}
					}
					function fnAdaptBindingParamsForInlineCreate(oEvent) {
						if (fnIsEventForTableWithInlineCreate(oEvent.getSource())) {
							var oBindingParams = oEvent.getParameter("bindingParams");
							if (oBindingParams.filters && oBindingParams.filters.length) {
								var oNewLineFilter = new Filter({
									path: "HasActiveEntity",
									operator: "EQ",
									value1: false
								});
								oBindingParams.filters = [new Filter({
									filters: [new Filter(oBindingParams.filters), oNewLineFilter],
									and: false,
									bAnd: false
								})];
							}
							var fnGroup = oBindingParams.sorter[0] && oBindingParams.sorter[0].getGroupFunction();
							var fnGroupExtended = fnGroup && function(oContext){
								var oObject = oContext.getObject();
								if (oObject.IsActiveEntity || oObject.HasActiveEntity){
									var oRet =  jQuery.extend({}, fnGroup(oContext));
									oRet.key = oRet.key.charAt(0) === "§" ? "§" + oRet.key : oRet.key;
									return oRet;
								}
								return {
									key: "§",
									text: oTemplateUtils.oCommonUtils.getText("NEW_ENTRY_GROUP")
								};
							};
							oBindingParams.sorter.unshift(new Sorter("HasActiveEntity", false, fnGroupExtended));
						}
					}
					function fnOnShareObjectPageEmailPress(sObjectTitle, sObjectSubtitle) {
						var sEmailSubject = sObjectTitle;
						if (sObjectSubtitle) {
							sEmailSubject = sEmailSubject + " - " + sObjectSubtitle;
						}
						sap.m.URLHelper.triggerEmail(null, sEmailSubject, document.URL);
					}
					function fnOnShareObjectPageInJamPress(sObjectTitle, sObjectSubtitle) {
						var oShareDialog = sap.ui.getCore().createComponent({
							name: "sap.collaboration.components.fiori.sharing.dialog",
							settings: {
								object: {
									id: document.URL,
									share: sObjectTitle + " " + sObjectSubtitle
								}
							}
						});
						oShareDialog.open();
					}

					function getObjectHeader() {
						var oObjectPage = oController.byId("objectPage");
						return oObjectPage.getHeaderTitle();
					}

					function onShareObjectPageActionButtonPress(oEvent) {
						var oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.fragments.ShareSheet", {
								shareEmailPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageEmailPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								},
								shareJamPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageInJamPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								}
							}, "share", function(oFragment, oShareModel) {
								var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
								oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
								oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
								oShareModel
									.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
								var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
								oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
							});
						var oShareModel = oShareActionSheet.getModel("share");
						var oObjectHeader = getObjectHeader();
						oShareModel.setProperty("/objectTitle", oObjectHeader.getProperty("objectTitle"));
						oShareModel.setProperty("/objectSubtitle", oObjectHeader.getProperty("objectSubtitle"));
						oShareModel.setProperty("/bookmarkCustomUrl", document.URL);
						oShareActionSheet.openBy(oEvent.getSource());
					}

					function getRelatedAppsSheet() {
						var oRelatedAppsSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.RelatedAppsSheet", {
								buttonPressed: function(oEvent) {
									var oButton = oEvent.getSource();
									var oButtonsContext = oButton.getBindingContext("buttons");
									var oLink = oButtonsContext.getProperty("link");
									var oParam = oButtonsContext.getProperty("param");
									var str = oLink.intent;
									var sSemanticObject = str.split('#')[1].split('-')[0];
									var sAction = str.split('-')[1].split('?')[0].split('~')[0];
									var oNavArguments = {
										target: {
											semanticObject: sSemanticObject,
											action: sAction
										},
										params: oParam
									};
									sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
								}
							}, "buttons");
						return oRelatedAppsSheet;
					}
					
					function fnNavigateUp(){
						if (sLinkUp){
							oTemplateUtils.oServices.oNavigationController.navigateToContext(sLinkUp, "", true);
						} else {
							oTemplateUtils.oServices.oNavigationController.navigateToRoot(true);	
						}
					}

					function showDeleteMsgBox() {
						var oComponent = oController.getOwnerComponent();
						var sNavigationProperty = oComponent.getNavigationProperty();
						var oUtils = oTemplateUtils.oCommonUtils;
						var oPageHeader = oController.byId("objectPageHeader");
						if (oPageHeader.getProperty("objectTitle") !== "") {
							if (oPageHeader.getProperty("objectSubtitle") !== "") {
								var aParams = [" ", oPageHeader.getProperty("objectTitle").trim(), oPageHeader.getProperty("objectSubtitle")];
								var sMessageText = oUtils.getText("DELETE_WITH_OBJECTINFO", aParams);
							} else {
								var aParams = [oPageHeader.getProperty("objectTitle").trim()];
								var sMessageText = oUtils.getText("DELETE_WITH_OBJECTTITLE", aParams);
							}
						} else {
							var sMessageText = oUtils.getText("ST_GENERIC_DELETE_SELECTED");
						}
						MessageBox.show(sMessageText, {
							icon: MessageBox.Icon.WARNING,
							styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass(),
							title: oUtils.getText("DELETE"),
							actions: [MessageBox.Action.DELETE, MessageBox.Action.CANCEL],
							onClose: function(oAction) {
								if (oAction === MessageBox.Action.DELETE) {
									var oDeleteEntityPromise = oTemplateUtils.oServices.oCRUDManager.deleteEntity();
									oDeleteEntityPromise.then(function() {
										oTemplateUtils.oServices.oViewDependencyHelper.setParentToDirty(oComponent, sNavigationProperty);
										oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oComponent, true);

										// document was deleted, go back to previous page
										fnNavigateUp();
									});
									var oEvent = {
										deleteEntityPromise: oDeleteEntityPromise
									};
									oTemplateUtils.oComponentUtils.fire(oController, "AfterDelete", oEvent);
								}
							}
						});
					}
					
					// This method is called when editing of an entity has started and the corresponding context is available
					function fnStartEditing(oResult){
						var oDraft, oContext;
						if (oResult) {
							oContext = oResult.context || oResult;
							if (oTemplateUtils.oServices.oDraftController.getDraftContext().hasDraft(oContext)) {
								oTemplateUtils.oServices.oViewDependencyHelper.setRootPageToDirty();
								oDraft = oResult.context && oResult.context.context || oResult.context || oResult;
							}
						}
						if (oDraft) {
							// navigate to draft
							if (fnFclNavigteToDraft) {
								fnFclNavigteToDraft(oDraft);
							} else {
								oTemplateUtils.oServices.oNavigationController.navigateToContext(oDraft, undefined, true, 2);
							}
						} else {
							var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
							oTemplatePrivateModel.setProperty("/objectPage/displayMode", 2);
						}
						//set Editable independent of the fact that the instance is a draft or not
						setEditable(true);
					}

					var fnExpiredLockDialog;  // declare function already here, to avoid usage before declaration
					// This method is called when the user decides to edit an entity.
					// Parameter bUnconditional contains the information, whether the user has already confirmed to take over unsaved changes of another user, or whether this is still open
					function fnEditEntity(bUnconditional) {
						oTemplateUtils.oServices.oCRUDManager.editEntity(bUnconditional).then(function(oEditInfo){
							if (oEditInfo.draftAdministrativeData){
								fnExpiredLockDialog(oEditInfo.draftAdministrativeData.CreatedByUserDescription || oEditInfo.draftAdministrativeData.CreatedByUser);
							} else {
								fnStartEditing(oEditInfo.context);
							}
						});
					}
					
					function fnOnSemanticObjectLinkNavigationTargetObtained(oEvent) {
						
						
						var proceedWithClickedField = function(oEvent, oReferentialConstraint){
							
							var sPropertyRefName = oReferentialConstraint.dependent.propertyRef[0].name;
							var sClickedFieldId = oEvent.getParameters().originalId;
							
							//this works for fields on the object header which have a view relative id, but not for smart 
							var oControl = oController.getView().byId(sClickedFieldId);
							if (oControl && oControl.mProperties.fieldName === sPropertyRefName){
								return true;
							}
							
							//table fields get an absolute id "__link0-__clone34" - then jQuery is used to retrieve this absolut id (jQuery doesn't work with "::" as in ::Field-sl)
							if (!oControl ){
								var oElement = jQuery( "#" + sClickedFieldId.replace( /(:|\.|\[|\]|,|=)/g, "\\$1" ) );
								if (oElement){
									oControl = oElement.control(0);
									if (oControl && oControl.mProperties.fieldName === sPropertyRefName){
										return true;
									}
								}
							}
							
							return false;
						};
						
						var getQuickView = function(oEvent) {
							/*  1.	Loop over all Navigation properties
								2.	Look into corresponding association
								3.	Look into referential constraint
								4.	If dependent role PropertyRef = property ==> success QuickView Facets from this entity type can be retrieved
							*/
							var oQuickViewAnnotation, oMetaModel, oEntitySet, oEntityType, oNavProp, oAssociationEnd, oTargetEntityType;
							oMetaModel = oEvent.getSource().getModel().getMetaModel();
							oEntitySet = oMetaModel.getODataEntitySet(oEvent.getSource().getEntitySet());
							oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
							
							if (!oEntityType || !oEntityType.navigationProperty){
								return;
							}
							
							for (var i = 0; i < oEntityType.navigationProperty.length; i++) {
								
								oNavProp = oEntityType.navigationProperty[i];
								if (oNavProp.name === "SiblingEntity" ||  oNavProp.name === "DraftAdministrativeData"){
									continue;
								}
								
								var sQualifiedName = oNavProp.relationship;
								var iSeparatorPos = sQualifiedName.lastIndexOf(".");
								var sNamespace = sQualifiedName.slice(0, iSeparatorPos);
								var sName = sQualifiedName.slice(iSeparatorPos + 1);
								var aSchemas = oMetaModel.getObject("/dataServices/schema");
								var oSchema;
								
								for (var j in aSchemas) {
									if (aSchemas[j].namespace === sNamespace) {
										oSchema = aSchemas[j];
										break;
									}
								}
								
								var aArray = oSchema.association;
								var oAssociation;
								
								for (var j in aArray) {
									if (aArray[j].name === sName) {
										oAssociation = aArray[j];
										break;
									}
								}
								
								var oReferentialConstraint = oAssociation.referentialConstraint;
								if (oReferentialConstraint && oReferentialConstraint.dependent && oReferentialConstraint.dependent.propertyRef) {
									var bProceed = proceedWithClickedField(oEvent, oReferentialConstraint);
									if (bProceed){
										oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, oNavProp.name); //to_Supplier
										oTargetEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
										
										if (oTargetEntityType["com.sap.vocabularies.UI.v1.QuickViewFacets"]) {
											
											var oEntityContainer = oMetaModel.getODataEntityContainer();
											var sTargetEntitySet = "";
											var sTargetEntityType = "";
											for (var j = 0; j < oEntityContainer.entitySet.length; j++) {
												if (oEntityContainer.entitySet[j].entityType === oTargetEntityType.entityType) {
													sTargetEntitySet =  oEntityContainer.entitySet[j].name;
													sTargetEntityType = oEntityContainer.entitySet[j].entityType;
													break;
												}
											}
											
											var sODataQuickViewFacetPath = oMetaModel.getODataEntityType(sTargetEntityType, true) + "/com.sap.vocabularies.UI.v1.QuickViewFacets";
											//this is only used if the Groups should get a "title"
											//var sODataQuickViewHeaderInfoPath = oMetaModel.getODataEntityType(sTargetEntityType, true) + "/com.sap.vocabularies.UI.v1.HeaderInfo";
											
											oQuickViewAnnotation = {
												navigation: oNavProp.name,
												entitySet: sTargetEntitySet,
												//quickViewFacetODataHeaderInfoPath: sODataQuickViewHeaderInfoPath,
												quickViewFacetODataPath: sODataQuickViewFacetPath // e.g. /dataServices/schema/0/entityType/23/com.sap.vocabularies.UI.v1.QuickViewFacets/0/
											};
											
											return oQuickViewAnnotation;
										}
									} 
								}
							}
							return oQuickViewAnnotation;
						};
						
						var oQuickViewAnnotation = getQuickView(oEvent);

						var oParameters = oEvent.getParameters();
						if (oQuickViewAnnotation){
							var oComponent = oController.getOwnerComponent();
							var oModel = oComponent.getModel();
							var oMetaModel = oModel.getMetaModel();
							var oEntitySet = oMetaModel.getODataEntitySet(oComponent.getEntitySet());
							
							// QuickViewIndicator model
							var oQuickViewModel = new JSONModel({fieldsEnabled:  	false,
																 navigationPath: 	oQuickViewAnnotation.navigation});
							oQuickViewModel.setDefaultBindingMode("OneWay");
							
							var oSmartFormSimpleView = sap.ui.view({
								async: true,
								preprocessors: {
									xml: {
										bindingContexts: {
											meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
											entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oQuickViewAnnotation.entitySet, true)), //is it correct to path this entityset???
											//header: oMetaModel.createBindingContext(oQuickViewAnnotation.quickViewFacetODataHeaderInfoPath, true),
											facetCollection: oMetaModel.createBindingContext(oQuickViewAnnotation.quickViewFacetODataPath, true)
										},
										models: {
											quickView: oQuickViewModel,
											meta: oMetaModel,
											entitySet: oMetaModel,
											//header: oMetaModel,
											facetCollection: oMetaModel
										},
										preprocessorsData : oTemplateUtils.oComponentUtils.getPreprocessorsData()     
									}
								},
								type: ViewType.XML,
								viewName: "sap.suite.ui.generic.template.ObjectPage.view.QuickViewSmartForm",
								height: "100%"
							});
							
							oParameters.show(undefined, undefined, undefined, oSmartFormSimpleView);
							//oParameters.show(" ", undefined, undefined, oSmartFormSimpleView); //with this the header should be surpessed - not working
						} else {
							oParameters.show();
						}
					}

					// This method is called when the user wants to edit an entity, for which a non-locking draft of another user exists.
					// The method asks the user, whether he wants to continue editing anyway. If this is the case editing is triggered.
					// sCreatedByUser is the name of the user possessing the non-locking draft
					fnExpiredLockDialog = function(sCreatedByUser) {
						var oUnsavedChangesDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.UnsavedChangesDialog", {
								onEdit: function() {
									oUnsavedChangesDialog.close();
									fnEditEntity(true);
								},
								onCancel: function() {
									oUnsavedChangesDialog.close();
								}
							}, "Dialog");
						var oDialogModel = oUnsavedChangesDialog.getModel("Dialog");
						var sDialogContentText = oTemplateUtils.oCommonUtils.getText("DRAFT_LOCK_EXPIRED", [sCreatedByUser]);
						oDialogModel.setProperty("/unsavedChangesQuestion", sDialogContentText);
						oUnsavedChangesDialog.open();
					};

					var sDefaultObjectTitleForCreated; // instantiated on demand

					function getDefaultObjectTitleForCreated() {
						sDefaultObjectTitleForCreated = sDefaultObjectTitleForCreated || oTemplateUtils.oCommonUtils.getText("NEW_OBJECT");
						return sDefaultObjectTitleForCreated;
					}

					// Helper functions for view-proxy for component
					var oHashChanger; // initialized on first use
					function fnGetHashChangerInstance() {
						return oHashChanger || HashChanger.getInstance();
					}

					function fnRefreshBlock(oBlock, mRefreshInfos, bForceRefresh){
						if (!oBlock.getContent){ // dummy-blocks need not to be refreshed
							return;
						}
						oBlock.getContent().forEach(function (oContent) {
							if (oContent instanceof SmartTable) {
								if (bForceRefresh || mRefreshInfos[oContent.getTableBindingPath()]) {
									if (oContent.isInitialised()){
										oContent.rebindTable(bForceRefresh);
									} else {
										oContent.attachInitialise(function(){
											oContent.rebindTable(bForceRefresh);
										});
									}

									if (!bForceRefresh) {
										oTemplateUtils.oServices.oApplicationController.executeSideEffects(oController.getOwnerComponent().getBindingContext(), [], [oContent.getTableBindingPath()]);
									}
								}
							}
						});
					}

					function setLockButtonVisible(bVisible) {
						var oLockButton = sap.ui.getCore().byId(getObjectHeader().getId() + "-lock");
						oLockButton.setVisible(bVisible);
					}

					function getSelectionVariant() {
						// oTemplateUtils, oController
						// if there is no selection we pass an empty one with the important escaping of ", passing "" or
						// null...was not possible
						// "{\"SelectionVariantID\":\"\"}";
						var sResult = "{\"SelectionVariantID\":\"\"}";

						/*
						 * rules don't follow 1:1 association, only header entity type fields don't send fields with empty
						 * values also send not visible fields remove Ux fields (e.g. UxFcBankStatementDate) send all kinds of
						 * types String, Boolean, ... but stringify all types
						 */

						var oComponent = oController.getOwnerComponent();
						var sEntitySet = oComponent.getEntitySet();
						var model = oComponent.getModel();
						var oMetaModel = model.getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
						var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
						var aAllFieldsMetaModel = oEntityType.property;

						// collect the names of attributes to be deleted (objects with existing sap:field-control attribute)
						var aFieldsToBeIgnored = [];
						for (var x in aAllFieldsMetaModel) {
							var controlname = aAllFieldsMetaModel[x]["sap:field-control"];
							if (controlname && aFieldsToBeIgnored.indexOf(controlname) < 0) {
								aFieldsToBeIgnored.push(aAllFieldsMetaModel[x]["sap:field-control"]);
							}
						}

						var context = oController.getView().getBindingContext();
						var object = context.getObject();

						var oSelectionVariant = new SelectionVariant();
						for (var i in aAllFieldsMetaModel) {
							var type = aAllFieldsMetaModel[i].type;
							var name = aAllFieldsMetaModel[i].name;
							var value = object[aAllFieldsMetaModel[i].name];

							if (aFieldsToBeIgnored.indexOf(name) > -1) {
								continue;
							}

							if (name && (value || type === "Edm.Boolean")) { // also if boolean is false this must be sent
								if (type === "Edm.Time" && value.ms !== undefined) { // in case of Time an object is returned
									value = value.ms;
								}
								if (typeof value !== "string") {
									try {
										value = value.toString();
									} catch (e) {
										value = value + "";
									}
								}
								oSelectionVariant.addParameter(name, value);
							}
						}

						sResult = oSelectionVariant.toJSONString();
						return sResult;
					}

					function fnIsEntryDeletable(oContext, oSmartTable) {
						var bDeletable = true;
						var oModel = oSmartTable.getModel();
						var oDeleteRestrictions = oTemplateUtils.oCommonUtils.getDeleteRestrictions(oSmartTable);
						var sDeletablePath = oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path;
						if (sDeletablePath) {
							 bDeletable = oModel.getProperty(sDeletablePath, oContext);
						}
						return bDeletable;
					}
					
					function fnDeleteEntries(oEvent){
						var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
						if (oBusyHelper.isBusy()){
							return; // this is again tested by the CRUDManager. But in order to suppress the check for selected lines in the busy case we also need to check this here.
						}
						var oEventSource = oEvent.getSource();
						var oSmartTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
						var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oSmartTable);
						if (aContexts.length === 0){
							MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
								styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
							});
							return;
						}
						var aPath = [];
						var aNonDeletableContext = [];
						for (var i = 0; i < aContexts.length; i++){
							// check if item is deletable
							if (fnIsEntryDeletable(aContexts[i], oSmartTable)) {
							aPath.push(aContexts[i].getPath());
							} else {
								aNonDeletableContext.push(aContexts[i]);
							}
						}
						if (aNonDeletableContext.length > 0) {
							MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_DELETE_UNDELETABLE_SUBITEMS", [aNonDeletableContext.length, aContexts.length]), {
								styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
							});
						}
						
						var oDeletePromise = oTemplateUtils.oServices.oCRUDManager.deleteEntities(aPath);
						oBusyHelper.setBusy(oDeletePromise);

						oDeletePromise.then(function() {
							oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
							// after rebindTable is complete we need to update the enablement of the toolbar buttons (selected contexts have changed) - we attach (once) a handler to the table's event "updateFinished"
							oSmartTable.getTable().attachEventOnce("updateFinished", function () {
								oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oSmartTable);
							});
							oSmartTable.rebindTable();
						});
					}

					function getImageDialog() {
						var oImageDialog = oController.byId("imageDialog") || oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.ImageDialog", {
								onImageDialogClose: function() {
									oImageDialog.close();
								}
							}, "headerImage");

						return oImageDialog;
					}
                    
                    function getPaginatorInfoPath(){
						var oComponent = oController.getOwnerComponent();
						var oTemplatePrivateModel = oComponent.getModel("_templPriv");
                        var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel") - 1;
                        return "/generic/paginatorInfo/" + iViewLevel;
                    }
                    
                    function getPaginatorInformation() {
						var oComponent = oController.getOwnerComponent();
                        var oTemplatePrivateGlobalModel = oComponent.getModel("_templPrivGlobal");
                        var oPaginatorInfo = oTemplatePrivateGlobalModel.getProperty(getPaginatorInfoPath());
                        return oPaginatorInfo;
                    }

                    function computeAndSetVisibleParamsForNavigationBtns() {
                        var oComponent = oController.getOwnerComponent();
                        var oTemplatePrivateModel = oComponent.getModel("_templPriv");
                        var oTemplatePrivateGlobalModel = oComponent.getModel("_templPrivGlobal");
                        var oPaginatorInfo = getPaginatorInformation();
                        var bPaginatorAvailable = !!oPaginatorInfo && (!bIsContainedInFCL || oTemplatePrivateGlobalModel.getProperty("/generic/FCL/isLogicallyFullScreen"));
                        var bNavDownEnabled = bPaginatorAvailable && (oPaginatorInfo.selectedRelativeIndex !== (oPaginatorInfo.listBinding.getLength() - 1));
                        var bNavUpEnabled =  bPaginatorAvailable && oPaginatorInfo.selectedRelativeIndex > 0;
                        oTemplatePrivateModel.setProperty("/objectPage/navButtons/navUpEnabled", bNavUpEnabled);
                        oTemplatePrivateModel.setProperty("/objectPage/navButtons/navDownEnabled", bNavDownEnabled);
                        
                        // if both buttons are disabled - hide them all
                        oTemplatePrivateModel.setProperty("/objectPage/navButtons/navBtnsVisible", bNavDownEnabled || bNavUpEnabled);
                    }

					function fnOnBack() {
						oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
							// only for Non-Draft the editable must be set to false
							var bIsDraft = oTemplateUtils.oCommonUtils.isDraftEnabled();
							if (bIsObjectRoot && !bIsDraft){
								setEditable(false);
							}
							oTemplateUtils.oServices.oNavigationController.navigateBack();
						}, jQuery.noop, oState);
					}
					
					function getApplyChangesPromise(oControl){
						oController.oComponent = oController.getOwnerComponent() || oController.getView().getViewData().component;
	                    var oView = oController.getView();
	                    oView.setModel(oController.oComponent.getModel());
	                    oController.sEntitySet = oController.oComponent.getEntitySet();
						oController.oDraftController = oController.oComponent.getAppComponent().getTransactionController().getDraftController();
						oController.bDraftEnabled = oController.oDraftController.getDraftContext().isDraftEnabled(oController.sEntitySet);
			            if (oController.bDraftEnabled) {
							var oContext = oControl.getBindingContext();
							var oApplicationController = oController.oComponent.getAppComponent().getApplicationController();
							if (!oApplicationController.getTransactionController().getDraftController().getDraftContext().hasDraft(oContext)) {
								return Promise.resolve();
							}
							var oRouter = oController.getOwnerComponent().getRouter();
							var sHash = oRouter.oHashChanger.getHash();
							return oApplicationController.propertyChanged(sHash, oContext);
			            }
					}
					
					// Event handler for the Apply button. Only visible in draft scenarios and not on the object root.
					function fnApplyAndUp(oEvent) {
						var oControl = oEvent.getSource();
						oTemplateUtils.oServices.oApplication.performAfterSideEffectExecution(function(){
							var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
							if (oBusyHelper.isBusy()){
								return; // Ignore the button if something is already running
							}
							var oUIModel = oController.getView().getModel("ui");
							oUIModel.setProperty("/enabled", false);
							var oApplyPromise = getApplyChangesPromise(oControl).then(function(oReponse){
								var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
								if (!bIsContainedInFCL || oTemplatePrivateGlobalModel.getProperty("/generic/FCL/isLogicallyFullScreen")){
									fnNavigateUp();
									oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("ST_CHANGES_APPLIED"));
								}
							}, function(){
								oBusyHelper.getUnbusy().then(function(oReponse){
									oUIModel.setProperty("/enabled", true);
									oTemplateUtils.oCommonUtils.processDataLossTechnicalErrorConfirmation(function() {
										fnNavigateUp();
									}, jQuery.noop, oState );
								});
							});
							oBusyHelper.setBusy(oApplyPromise);
						});
					}					
					
					function handleNavigateToObject(oContext, oTable) {
                        // Get navigation property.. to be used in construction of new URL
						// check if it is to be navigation using a nav property
						var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
						var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
						var sNavigationProperty = iViewLevel > 1 ? oTemplateUtils.oCommonUtils.getTableBinding(oTable).path : null;
						oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, true);
                    }
                    
					function fnAddNavButtonPropertiesToObjectPageData(){
						var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
						var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
						oTemplatePrivateModel.setProperty("/objectPage/navButtons", {
							navDownTooltip: oResource.getText("FACETFILTER_NEXT"),
							navUpTooltip: oResource.getText("FACETFILTER_PREVIOUS"),
							navDownEnabled: false,
							navUpEnabled: false,
							navBtnsVisible: false
						});
					}
					
					// Begin: Filling the viewProxy with functions provided for the TemplateComponent to be called on the view
					
					oViewProxy.refreshFacets = function(mRefreshInfos, bForceRefresh) {
						oController.byId("objectPage").getSections().forEach(function (oSection) {
							oSection.getSubSections().forEach(function (oSubSection) {
								oSubSection.getBlocks().forEach(function (oBlock) {
									fnRefreshBlock(oBlock, mRefreshInfos, bForceRefresh);
								});

								oSubSection.getMoreBlocks().forEach(function (oBlock) {
									fnRefreshBlock(oBlock, mRefreshInfos, bForceRefresh);
								});
							});
						});
					};
					
					function fnAdaptLinksToUpperLevels(){
						var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
						var iUpLinksCount = oTemplatePrivateModel.getProperty("/generic/viewLevel") - 1;
						var aSections = iUpLinksCount ? oTemplateUtils.oServices.oApplication.getHierarchySectionsFromCurrentHash() : [];

						// there's at least one section left - create / bind breadcrumbs
						var oTitle = getObjectHeader();
						var aBreadCrumbs = oTitle && oTitle.getBreadCrumbsLinks();

						oHashChanger = fnGetHashChangerInstance();

						sLinkUp = "";
						var sDelimiter = "";
						for (var i = 0; i < iUpLinksCount; i++) {
							var sSection = aSections[i];
							sLinkUp = sLinkUp + sDelimiter + sSection;
							sDelimiter = "/";

							/*
							 * we don't use the navigation path but the canonical URL. The reason for this is that there's no
							 * join done in the backend, therefore the GET-request is much faster in deeper breadcrumbs. Also
							 * the UI5 Odata model keeps track of already requested ressources, so if user navigates from the
							 * top level there's no additional request, if he uses a bookmark the request is only done once. We
							 * assume that the key of the navigation path is the same as the canonical URL. This is an
							 * assumption that does not fit to all ODATA services (but 99% of them) - BUT: Smart Templates and
							 * the navigation controller already takes this assumption. Once this is changed also this coding
							 * needs to be changed. Ideally with a configuration as most of the ODATA services have a big
							 * benefit through reading with the canonical URL
							 */
							var sEntitySet = aEntitySets[i];
							var aSubSections = sSection.split("(");
							if (aSubSections && aSubSections[1]) {
								var oLink = aBreadCrumbs && aBreadCrumbs[i];
								if (oLink){
									var sHash = oHashChanger.hrefForAppSpecificHash ? oHashChanger.hrefForAppSpecificHash(sLinkUp) : "#/" + sLinkUp;
									sHash = oTemplateUtils.oServices.oApplication.adaptBreadCrumbUrl(sHash, i + 1);
									var sCanonicalUrl = "/" + sEntitySet + "(" + aSubSections[1];
									oLink.setHref(sHash);
									oLink.bindElement(sCanonicalUrl);
								}
							}
						}
					}
					
					oViewProxy.onComponentActivate = function(sBindingPath) {
						oState.messageButtonHelper.adaptToContext(sBindingPath);
                        // set visibility of up/down buttons based for back navigation scenario
                        computeAndSetVisibleParamsForNavigationBtns();
						oTemplateUtils.oComponentUtils.setBackNavigation(fnOnBack);
						fnAdaptLinksToUpperLevels();
					};
					
					//Function is called if there is a draft document and the user navigate via bookmark to the active document
					oViewProxy.draftResume = function(oSiblingContext, oActiveEntity, oDraftAdministrativeData) {
						var oSiblingEntity = oSiblingContext.getObject();
						if (!oSiblingEntity || !oSiblingEntity.hasOwnProperty("IsActiveEntity") || oSiblingEntity.IsActiveEntity !== false) {
							return;
						}

						var oModel = oController.getView().getModel();
						var oMetaModel = oModel.getMetaModel();
						var oModelEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
						var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);

						var sType = "";
						var sObjectKey = "";
						var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
						for (var i in aSemKey) {
							var oPropertyRef = aSemKey[i];
							if (sObjectKey === "") {
								sObjectKey = oActiveEntity[oPropertyRef.PropertyPath];
							} else {
								sObjectKey = sObjectKey + "-" + oActiveEntity[oPropertyRef.PropertyPath];
							}
						}

						var sChangedAt = "-";
						if (oDraftAdministrativeData && oDraftAdministrativeData.LastChangeDateTime !== null) {
							var oDateFormatter = DateFormat.getDateTimeInstance({
								pattern: "MMMM d, yyyy HH:mm",
								style: "long"
							});
							sChangedAt = oDateFormatter.format(oDraftAdministrativeData.LastChangeDateTime);
						}

						var aParams = [sType, sObjectKey, sChangedAt];
						var sDraftFoundText = oTemplateUtils.oCommonUtils.getText("DRAFT_FOUND_RESUME", aParams);

						var oDialogModel;
						var oResumeDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.DraftResumeDialog", {
								onDraftResume: function() {
									oResumeDialog.close();
									// Do not use variable oSiblingContext directly, because this will always be the instance used
									// at the first use of this fragment!
									oTemplateUtils.oServices.oNavigationController.navigateToContext(
										oDialogModel.getProperty("/siblingContext"), null, true);
								},
								onDraftDiscard: function() {
									oResumeDialog.close();
									// enable the buttons
									oController.getView().getModel("ui").setProperty("/enabled", true);
									// delete the draft node
									oTemplateUtils.oServices.oCRUDManager.deleteEntity(true);
									setLockButtonVisible(false);
									// Do not use variable oActiveEntity directly, because this will always be the instance used at
									// the first use of this fragment!
									oDialogModel.getProperty("/activeEntity").HasDraftEntity = false;
									// refresh the nodes
									oTemplateUtils.oServices.oViewDependencyHelper.setAllPagesDirty();
								},
								onResumeDialogClosed: function() {
									// support garbage collection
									oDialogModel.setProperty("/siblingContext", null);
									oDialogModel.setProperty("/activeEntity", null);
								}
							}, "Dialog");
						oDialogModel = oResumeDialog.getModel("Dialog");
						oDialogModel.setProperty("/draftResumeText", sDraftFoundText);
						oDialogModel.setProperty("/siblingContext", oSiblingContext);
						oDialogModel.setProperty("/activeEntity", oActiveEntity);
						oResumeDialog.open();
					};
					
					// End: Filling the viewProxy with functions provided for the TemplateComponent to be called on the view.
					// Note that one last member is added to the viewProxy in onInit, since it is only available at this point in time.

					// Expose selected private functions to unit tests
					/* eslint-disable */
					var fnEditEntity = testableHelper.testable(fnEditEntity, "editEntity");
					var fnGetHashChangerInstance = testableHelper.testable(fnGetHashChangerInstance, "getHashChangerInstance");
					var fnIsEntryDeletable = testableHelper.testable(fnIsEntryDeletable, "isEntryDeletable");
					var fnAdaptLinksToUpperLevels = testableHelper.testable(fnAdaptLinksToUpperLevels, "adaptLinksToUpperLevels");
					/* eslint-enable */

					// Generation of Event Handlers
					var oControllerImplementation = {
						onInit: function() {
							fnAddNavButtonPropertiesToObjectPageData();
							oTemplateUtils.oCommonUtils.executeGlobalSideEffect();
							oState.messageButtonHelper = new MessageButtonHelper(oTemplateUtils.oCommonUtils, oController);
							oTemplateUtils.oServices.oTemplateCapabilities.oMessageButtonHelper = oState.messageButtonHelper;
							oViewProxy.isDraftEnabled = oTemplateUtils.oCommonUtils.isDraftEnabled;
							aEntitySets = oTemplateUtils.oServices.oApplication.getSections(oController.getOwnerComponent().getEntitySet(), true);
						},

						handlers: {
							addEntry: function(oEvent) {
								var oEventSource = oEvent.getSource();
								var oSmartTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
								var bSuppressNavigation = fnIsEventForTableWithInlineCreate(oSmartTable);

								if (!oEventSource.data("CrossNavigation") && bSuppressNavigation) {
									oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, true);
									return;
								}
								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
									oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false);
								}, jQuery.noop, oState);
							},

							deleteEntries: fnDeleteEntries,

							onSelectionChange: function(oEvent) {
								oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oEvent.getSource());
							},

							onBack: fnOnBack,
							
							applyAndUp: fnApplyAndUp,

							//Cancel event is only triggered in non-draft scenario. For draft see onDiscardDraft
							onCancel: function() {
								var sMode = "Proceed";
								if (oTemplateUtils.oComponentUtils.isNonDraftCreate() || !bIsObjectRoot){
									sMode = "LeavePage";
								}

								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
									if (bIsObjectRoot){
										setEditable(false);
									}
									if (oTemplateUtils.oComponentUtils.isNonDraftCreate() || !bIsObjectRoot) {
										oTemplateUtils.oServices.oNavigationController.navigateBack();
									}
								}, jQuery.noop, oState, sMode);
							},

							onContactDetails: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
							},
							onPressDraftInfo: function(oEvent) {
								var oBindingContext = oController.getView().getBindingContext();
								var oLockButton = sap.ui.getCore().byId(
									oEvent.getSource().getId() + (oEvent.getId() === "markChangesPress" ? "-changes" : "-lock"));

								oTemplateUtils.oCommonUtils.showDraftPopover(oBindingContext, oLockButton);
							},
							onShareObjectPageActionButtonPress: onShareObjectPageActionButtonPress,
							onRelatedApps: function(oEvent) {
								var oButton, oURLParsing, oParsedUrl, oViewBindingContext, oAppComponent, oXApplNavigation, oLinksDeferred;
								var oActionSheet, oButtonsModel, oUshellContainer, sCurrentSemObj, sCurrentAction;
								oButton = oEvent.getSource();
								oUshellContainer = sap.ushell && sap.ushell.Container;
								oURLParsing = oUshellContainer && oUshellContainer.getService("URLParsing");
								oParsedUrl = oURLParsing.parseShellHash(
									document.location.hash);
								sCurrentSemObj = oParsedUrl.semanticObject;
								sCurrentAction = oParsedUrl.action;
								oViewBindingContext = oController.getView && oController.getView().getBindingContext();

								var oMetaModel = oController.getOwnerComponent().getModel().getMetaModel();

								var oEntity = oViewBindingContext.getObject();
								var sEntityType = oEntity.__metadata.type;
								var oDataEntityType = oMetaModel.getODataEntityType(sEntityType);
								var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
								var oParam = {};
								// var oSemKeyParam = {};
								if (aSemKey && aSemKey.length > 0) {
									for (var j = 0; j < aSemKey.length; j++) {
										var sSemKey = aSemKey[j].PropertyPath;
										if (!oParam[sSemKey]) {
											oParam[sSemKey] = [];
											oParam[sSemKey].push(oEntity[sSemKey]);
										}
									}
								} else {
									// Fallback if no SemanticKey
									for (var k in oDataEntityType.key.propertyRef) {
										var sObjKey = oDataEntityType.key.propertyRef[k].name;
										if (!oParam[sObjKey]) {
											oParam[sObjKey] = [];
											oParam[sObjKey].push(oEntity[sObjKey]);
										}
									}
								}

								oAppComponent = oController.getOwnerComponent().getAppComponent();
								oXApplNavigation = oUshellContainer && oUshellContainer.getService("CrossApplicationNavigation");

								oLinksDeferred = oXApplNavigation.getLinks({
									semanticObject: sCurrentSemObj,
									params: oParam,
									ui5Component: oAppComponent
								});

								oActionSheet = getRelatedAppsSheet();
								oButtonsModel = oActionSheet.getModel("buttons");
								oButtonsModel.setProperty("/buttons", []);
								oActionSheet.openBy(oButton);
								oLinksDeferred
									.done(function(aLinks) {
										var aButtons = [];
										// filter current semanticObject-action
										for (var i = 0; i < aLinks.length; i++) {
											var oLink = aLinks[i];
											var sIntent = oLink.intent;
											var sAction = sIntent.split("-")[1].split("?")[0];
											if (sAction != sCurrentAction) {
												aButtons.push({
													enabled: true, // used in declarative binding
													text: oLink.text, // used in declarative binding
													link: oLink, // used by the event handler
													param: oParam
													// used by the event handler
												});
											}
										}
										if (aButtons.length === 0) {
											aButtons.push({
												enabled: false, // used in declarative binding
												text: oTemplateUtils.oCommonUtils.getText("NO_RELATED_APPS")
												// used in declarative binding
											});
										}
										oButtonsModel.setProperty("/buttons", aButtons);
									});
							},
							onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oState);
							},

							handleShowNextObject: function (oEvent) {
								var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
								if (oBusyHelper.isBusy()){
									return;
								}
								// now navigate to next object page
								var oPaginatorInfo = getPaginatorInformation();
								var oListBinding = oPaginatorInfo.listBinding;
								var iEndIdx = oPaginatorInfo.endIndex;
								var iNextIdx = oPaginatorInfo.selectedRelativeIndex + 1;
								var aAllContexts = oPaginatorInfo.objectPageNavigationContexts;
								var iTableGrowingIncrement = oPaginatorInfo.growingThreshold;
								var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
								var sPaginatorInfoPath = getPaginatorInfoPath();

								if (iNextIdx && aAllContexts) {
									var oNextContext = aAllContexts[iNextIdx];

									if (oNextContext) {
										oTemplatePrivateGlobalModel.setProperty(sPaginatorInfoPath + "/selectedRelativeIndex", iNextIdx);
										handleNavigateToObject(oNextContext, oPaginatorInfo.tableNavFrom);
									} else {
										var oFetchNewRecordsPromise = new Promise(function(fnResolve, fnReject){
											var newEndIdx = iEndIdx + 1 + iTableGrowingIncrement;
											var fetchAndUpdateRecords = function (mParameters) {
												// get new fetched contexts and do stuff
												var aNewAllContexts = mParameters.getSource().getContexts(0, newEndIdx);
												oTemplatePrivateGlobalModel.setProperty(sPaginatorInfoPath + "/objectPageNavigationContexts", aNewAllContexts);
												oTemplatePrivateGlobalModel.setProperty(sPaginatorInfoPath + "/endIndex", newEndIdx);
												oNextContext = aNewAllContexts[iNextIdx];
												oListBinding.detachDataReceived(fetchAndUpdateRecords);
												// also.. navigate
												oTemplatePrivateGlobalModel.setProperty(sPaginatorInfoPath + "/selectedRelativeIndex", iNextIdx);
												handleNavigateToObject(oNextContext, oPaginatorInfo.tableNavFrom);
												fnResolve();
											};
											oListBinding.attachDataReceived(fetchAndUpdateRecords);
											oListBinding.loadData(0, newEndIdx);
										});
										oBusyHelper.setBusy(oFetchNewRecordsPromise);
									} 
								}
							},

							handleShowPrevObject: function (oEvent) {
								if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
									return;
								}
								var oPaginatorInfo = getPaginatorInformation();
								var iNextIdx = oPaginatorInfo.selectedRelativeIndex - 1;
								var aAllContexts = oPaginatorInfo.objectPageNavigationContexts;
								var oComponent = oController.getOwnerComponent();
								var oTemplatePrivateGlobalModel = oComponent.getModel("_templPrivGlobal");

								if (aAllContexts) {
									var oNextContext = aAllContexts[iNextIdx];
									if (oNextContext &&
										oNextContext.getPath) {
										oTemplatePrivateGlobalModel.setProperty(getPaginatorInfoPath() + "/selectedRelativeIndex", iNextIdx);
										handleNavigateToObject(oNextContext, oPaginatorInfo.tableNavFrom);
									}
								}
							},
							onShowMessages: function() {
								oState.messageButtonHelper.toggleMessagePopover();
							},
							onEdit: function(oEvent) {
								var oEventSource = oEvent.getSource();
								if (oEventSource.data("CrossNavigation")) {
									// intent based navigation
									oTemplateUtils.oCommonEventHandlers.onEditNavigateIntent(oEventSource);
									return;
								}
								bIsObjectRoot = true; // temporarily logic until we know how to decide this in onInit
								fnEditEntity();
							},
							// The event is only called in a non-draft scenario. For draft see onActivate
							onSave: function() {
								if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
									return; // this is again tested by the CRUDManager. But in order to suppress the AfterSave-Event in the busy case we also need to check this here.
								}
								var oCurrentContext = oController.getView().getBindingContext();
								var oPendingChanges =  oController.getView().getModel().getPendingChanges();
								oPendingChanges = oPendingChanges && oPendingChanges[oCurrentContext.getPath().replace("/", "")] || {};
								var aPendingChanges = Object.keys(oPendingChanges) || [];
								var bCreateMode = oTemplateUtils.oComponentUtils.isNonDraftCreate();
								/*	The OData model returns also a __metadata object with the canonical URL and further
									information. As we don't want to check if sideEffects are annotated for this
									property we remove it from the pending changes
								*/
								var iMetaDataIndex = aPendingChanges.indexOf("__metadata");
								if (iMetaDataIndex > -1){
									aPendingChanges.splice(iMetaDataIndex,1);
								}

								var oSaveEntityPromise = oTemplateUtils.oServices.oCRUDManager.saveEntity();
								oSaveEntityPromise.then(function(oContext) {

									//	switch to display mode
									if (!oTemplateUtils.oCommonUtils.isDraftEnabled() && bIsObjectRoot) {
										setEditable(false);
									}else if ( oTemplateUtils.oCommonUtils.isDraftEnabled() ){
										setEditable(false);
									}

									if (bCreateMode) {
										// in case of create mode navigate to new item
										if (oContext && oContext.getPath() !== "/undefined") {
											oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, undefined, true);
										} else {
											// fallback no context returned / correct path determined by transaction controller
											setEditable(false);
											oTemplateUtils.oServices.oNavigationController.navigateBack();
										}
										oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_CREATED"));
									} else {
										oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED"));
										//for NON-Draft: navigate back after save if not root object
										if (!oTemplateUtils.oCommonUtils.isDraftEnabled() && !bIsObjectRoot) {
											oTemplateUtils.oServices.oNavigationController.navigateBack();
										}
									}
									if (aPendingChanges.length > 0){
										oTemplateUtils.oServices.oApplicationController.executeSideEffects(oCurrentContext, aPendingChanges);
									}
								});
								var oEvent = {
									saveEntityPromise: oSaveEntityPromise
								};
								oTemplateUtils.oComponentUtils.fire(oController, "AfterSave", oEvent);
							},
							onActivate: onActivate,
							onSmartFieldUrlPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oState);
							},
							onBreadCrumbUrlPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onBreadCrumbUrlPressed(oEvent, oState);
							},
							onDiscardDraft: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDiscardDraft(oEvent);
							},
							onDiscardSubItem: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDiscardSubItem(oEvent);
							},
							onDelete: function(oEvent) {
								if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
									return;
								}
								showDeleteMsgBox();
							},
							onCallActionFromToolBar: function (oEvent) {
								oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oState);
							},
							onCallAction: function(oEvent) {
								var oComponent = oController.getOwnerComponent();
								var sNavigationProperty = oComponent.getNavigationProperty();
								var oCustomData = oTemplateUtils.oCommonUtils.getCustomData(oEvent);
								var aContext = [];
								aContext.push(oController.getView().getBindingContext());
								if (aContext[0] && oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
									//var oEventSource = oEvent.getSource();
									oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
										var mParameters = {
											functionImportPath: oCustomData.Action,
											contexts: aContext,
											sourceControl: "",
											label: oCustomData.Label,
											operationGrouping: oCustomData.InvocationGrouping,
											navigationProperty: oController.getOwnerComponent().getNavigationProperty()
										};
										oTemplateUtils.oServices.oCRUDManager.callAction(mParameters).then(function(aResponses){
											var oResponse = aResponses && aResponses[0];
											if (oResponse && oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())){
												// set my parent page to dirty
												oTemplateUtils.oServices.oViewDependencyHelper.setParentToDirty(oComponent, sNavigationProperty);
											}
										});
									}, jQuery.noop, oState, "Proceed");
								}
							},
							onDataFieldForIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent, oState);
							},
							onDataFieldWithIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDataFieldWithIntentBasedNavigation(oEvent, oState);
							},
							onChartInit: function (oEvent) {
								var oChart = oEvent.getSource().getChart();
								var fnOnSelectionChange = oController._templateEventHandlers.onSelectionChange;
								oChart.attachSelectData(fnOnSelectionChange).attachDeselectData(fnOnSelectionChange);
							},
							onBeforeRebindDetailTable: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
								oController.onBeforeRebindTableExtension(oEvent);
								fnAdaptBindingParamsForInlineCreate(oEvent);
								if (oEvent.getSource().getTable() instanceof AnalyticalTable) {
									var oBindingParams = oEvent.getParameter("bindingParams");
									oBindingParams.parameters.entitySet = oEvent.getSource().getEntitySet();
								}
							},
							onShowDetails: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oState);
							},
							onListNavigate: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oState);
							},
							onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {
								var oEventParameters = oEvent.getParameters();
								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
									//Success function
									var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
									if (oNavigationHandler) {
										var sSelectionVariant = getSelectionVariant();
										oNavigationHandler.processBeforeSmartLinkPopoverOpens(oEventParameters, sSelectionVariant);
									} else {
										oEventParameters.open();
									}
								}, jQuery.noop, oState, jQuery.noop);
							},
							onSemanticObjectLinkNavigationTargetObtained : function(oEvent) {
								fnOnSemanticObjectLinkNavigationTargetObtained(oEvent);
							}, 
							onHeaderImagePress: function(oEvent) {
								var oImageDialog = getImageDialog();
								var sId = oEvent.getSource().getId();
								oImageDialog.addAriaLabelledBy(sId);
								var oImageDialogModel = oImageDialog.getModel("headerImage");
								oImageDialogModel.setProperty("/src", oEvent.getSource().getSrc());
								if (sap.ui.Device.system.phone) {
									oImageDialog.setProperty("stretch", true);
								}
								oImageDialog.open();
							},
							onInlineDataFieldForAction: function(oEvent) {
								var oEventSource = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oEventSource);
								var oTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
								var sTableBindingPath = oTable.getParent().getTableBindingPath();
								var aContexts = [oEventSource.getBindingContext()];
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oEventSource, oState);
							},
							onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onInlineDataFieldForIntentBasedNavigation(oEvent.getSource(), oState);
							},
							onDeterminingDataFieldForAction: function(oEvent) {
								var aContexts = [this.getView().getBindingContext()];
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sBindingPath = this.getView().getBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sBindingPath, oCustomData);
							},
							onBeforeRebindChart: function(oEvent) {
								var oSmartChart = oEvent.getSource();
								oSmartChart.oModels = oSmartChart.getChart().oPropagatedProperties.oModels;
							},
							onTableInit: function(oEvent) {
								var oSmartTable = oEvent.getSource();
								var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
								oTemplateUtils.oCommonUtils.checkToolbarIntentsSupported(oSmartTable, oTemplatePrivateModel);
							}
						},
						formatters: {
							formatDefaultObjectTitle: function(bCreateMode, sHeaderInfoTitle) {
								// return DefaultTitle in createMode
								if (sHeaderInfoTitle || !bCreateMode) {
									return;
								}
								var oContext = oController.getView().getBindingContext();
								var oObject = oContext && oContext.getObject();
								if (bCreateMode && oObject && (oObject.IsActiveEntity === undefined || oObject.IsActiveEntity === false || oObject.HasActiveEntity ===
									false)) {
									return getDefaultObjectTitleForCreated();
								}
							}
						},
						extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
					};
					var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
					var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
					var oFclProxy = oTemplateUtils.oServices.oApplication.getFclProxy(iViewLevel);
					if (oFclProxy.oActionButtonHandlers){
						oControllerImplementation.handlers.fclActionButtonHandlers = oFclProxy.oActionButtonHandlers;
						bIsContainedInFCL = true;
					}
					fnFclNavigteToDraft = oFclProxy.navigateToDraft;
					
					return oControllerImplementation;
				}
			};
		});
}; // end of sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.Application') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.Application'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HistoryDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/Application",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/Device", "sap/ui/model/json/JSONModel", "sap/ui/core/routing/History",
		"sap/ui/core/routing/HistoryDirection", "sap/m/MessageToast", "sap/m/ActionSheet", "sap/m/Dialog", "sap/m/Popover",
		"sap/suite/ui/generic/template/lib/routingHelper", "sap/suite/ui/generic/template/lib/ContextBookkeeping", "sap/suite/ui/generic/template/lib/testableHelper"
	],
	function(jQuery, BaseObject, Device, JSONModel, History, HistoryDirection, MessageToast, ActionSheet, Dialog, Popover, routingHelper, ContextBookkeeping, testableHelper) {
		"use strict";

		var sContentDensityClass = (testableHelper.testableStatic(function(bTouch, oBody) {
			var sCozyClass = "sapUiSizeCozy",
				sCompactClass = "sapUiSizeCompact";
			if (oBody.hasClass(sCozyClass) || oBody.hasClass(sCompactClass)) { // density class is already set by the FLP
				return "";
			} else {
				return bTouch ? sCozyClass : sCompactClass;
			}
		}, "Application_determineContentDensityClass")(Device.support.touch, jQuery(document.body)));
		
		function getContentDensityClass() {
			return sContentDensityClass;
		}

		// defines a dependency from oControl to a parent
		function fnAttachControlToParent(oControl, oParent) {
			jQuery.sap.syncStyleClass(sContentDensityClass, oParent, oControl);
			oParent.addDependent(oControl);
		}

		// Expose selected private static functions to unit tests
		/* eslint-disable */
		var fnAttachControlToParent = testableHelper.testableStatic(fnAttachControlToParent, "Application_attachControlToParent");
		/* eslint-enable */

		/* An instance of this class represents a Smart Template based application. Thus, there is a one-to-one relationship between
		 * instances of this class and instances of sap.suite.ui.generic.template.lib.AppComponent.
		 * However, this class is only used inside the sap.suite.ui.generic.template.lib package. It is not accessible to template developers
		 * or breakout developers.
		 * Instances of this class are generated in sap.suite.ui.generic.template.lib.TemplateAssembler.
		 * Note that TemplateAssembler also possesses a reference to the instance of this class which represents the app currently
		 * running.
		 * oTemplateContract: An object which is used for communication between this class and the AppComponent and its helper classes.
		 * Note that this class injects its api to these classes into the template contract object.
		 * Currently this class supports two use cases:
		 * 1. For non-draft apps it contains the information whether the app is currently in display or in edit state (methods set/getEditableNDC)
		 * 2. A 'navigation' model is supported. Thereby, we consider navigation to take place each time a route name or a route pattern is changed (but not when only the parameters added to the route are changed)
		 */
		function getMethods(oTemplateContract) {

			var oContextBookkeeping = new ContextBookkeeping(oTemplateContract.oAppComponent);
			
			var oCurrentDisplay = { // an object containing information about the view currently displayed
				api: {
				} // this object is exposed via method getCurrentDisplayObject
			};
			var oDataForNextPage = {}; // data bag that is transferred to the next page

			var oRouteParameters = {}; // parameters of the routing event for the view currently displayed. Handled by function isNewRoute.
			// this function is called when a route is matched. It returns the information whether this is a new route in the sense
			// of the navigation model realized by this class.
			function isNewRoute(oEvent) {
				var oNewRouteParameters = oEvent.getParameters();
				if (oNewRouteParameters.name !== oRouteParameters.name) {
					oRouteParameters = oNewRouteParameters;
					return true;
				}
				var oMerged = jQuery.extend({}, oRouteParameters.arguments, oNewRouteParameters.arguments);
				for (var sId in oMerged) {
					if (sId.indexOf("?") !== 0 && oMerged[sId] !== oRouteParameters.arguments[sId]) {
						oRouteParameters = oNewRouteParameters;
						return true;
					}
				}
				return false;
			}

			function getCurrentDisplayObject() {
				return oCurrentDisplay.api || {}; //TODO: ensure there is always something to return
			}
			
			var bIsWaitingForSideEffectExecution = false;
			
			// Executes fnFunction as soon as all side-effects have been executed.
			function fnPerformAfterSideEffectExecution(fnFunction){
				if (bIsWaitingForSideEffectExecution){
					return;   // do not let two operation wait for side effect execution
				}
				var i = 0;
				for (; i < oTemplateContract.aRunningSideEffectExecutions.length && !oTemplateContract.aRunningSideEffectExecutions[i]; i++){
					i++;
				}
				if (oTemplateContract.aRunningSideEffectExecutions[i]){
					bIsWaitingForSideEffectExecution = true;
					var oPromise = oTemplateContract.aRunningSideEffectExecutions[i];
					oPromise.then(function(){
						if (oTemplateContract.aRunningSideEffectExecutions[i] === oPromise){
							oTemplateContract.aRunningSideEffectExecutions[i] = null;	
						}
						bIsWaitingForSideEffectExecution = false;
						fnPerformAfterSideEffectExecution(fnFunction);
					});	
				} else {
					fnFunction();
				}
			}

			function fnMakeBusyAware(oControl) {
				var sOpenFunction;
				if (oControl instanceof Dialog) {
					sOpenFunction = "open";
				} else if (oControl instanceof Popover || oControl instanceof ActionSheet) {
					sOpenFunction = "openBy";
				}
				if (sOpenFunction) {
					var fnOpenFunction = oControl[sOpenFunction];
					oControl[sOpenFunction] = function() {
						var myArguments = arguments;
						fnPerformAfterSideEffectExecution(function(){
							if (!oTemplateContract.oBusyHelper.isBusy()) { // suppress dialogs while being busy
								oTemplateContract.oBusyHelper.getUnbusy().then(function() { // but the busy dialog may still not have been removed
									fnOpenFunction.apply(oControl, myArguments);
								});
							}
						});
					};
				}
			}

			var mFragmentStores = {};

			function getDialogFragmentForView(oView, sName, oFragmentController, sModel, fnOnFragmentCreated) {
				oView = oView || oTemplateContract.oNavigationHost;
				var sViewId = oView.getId();
				var mFragmentStore = mFragmentStores[sViewId] || (mFragmentStores[sViewId] = {});
				var oFragment = mFragmentStore[sName];
				if (!oFragment) {
					oFragment = sap.ui.xmlfragment(sViewId, sName, oFragmentController);
					fnAttachControlToParent(oFragment, oView);
					var oModel;
					if (sModel) {
						oModel = new JSONModel();
						oFragment.setModel(oModel, sModel);
					}
					(fnOnFragmentCreated || jQuery.noop)(oFragment, oModel);
					mFragmentStore[sName] = oFragment;
					fnMakeBusyAware(oFragment);
				}
				return oFragment;
			}

			function getOperationEndedPromise() {
				return new Promise(function(fnResolve) {
					oTemplateContract.oNavigationObserver.getProcessFinished(true).then(function(){
						oTemplateContract.oBusyHelper.getUnbusy().then(fnResolve);	
					});
				});
			}

			function setBackNavigation(fnBackNavigation) {
				if (oTemplateContract.oShellService) {
					oTemplateContract.oShellService.setBackNavigation(fnBackNavigation);
				}
			}

			function setTitle(sTitle) {
				if (oTemplateContract.oShellService) {
					oTemplateContract.oShellService.setTitle(sTitle);
				}
			}
			
			function getFclProxy(iViewLevel) {
				if (!oTemplateContract.oFlexibleColumnLayoutHandler){
					return {};
				}
				
				return {
					oActionButtonHandlers: oTemplateContract.oFlexibleColumnLayoutHandler.getActionButtonHandlers(iViewLevel),
					navigateToDraft: oTemplateContract.oFlexibleColumnLayoutHandler.navigateToDraft
				};
			}

			var bIsEditable = false;
			
			function setEditableNDC(isEditable) {
				bIsEditable = isEditable;
			}
			
			// This function indicates if a new HistoryEntry is required.
			// A new HistoryEntry is only required if the user navigates to an object which will be displayed in a new column.
			// If the object will be displayed in a column which is already visible no HistoryEntry is required
			function isNewHistoryEntryRequired(oTargetContext, sNavigationProperty){
				if (!oTemplateContract.oFlexibleColumnLayoutHandler){
					return true;
				}
				var oTarget = routingHelper.determineNavigationPath(oTargetContext, sNavigationProperty);
				return oTemplateContract.oFlexibleColumnLayoutHandler.isNewHistoryEntryRequired(oTarget);
			}
			
			function fnRegisterStateChanger(oStateChanger){
				oTemplateContract.aStateChangers.push(oStateChanger);
			}
			
			function getTargetAfterCancelPromise(oActive){
				return oTemplateContract.oFlexibleColumnLayoutHandler ? oTemplateContract.oFlexibleColumnLayoutHandler.getTargetAfterCancelPromise(oActive) : Promise.resolve(oActive);
			}
			
			function adaptAfterDeletion(aDeletedPath, iViewLevel){
				oContextBookkeeping.adaptAfterDeletion(aDeletedPath);
				if (aDeletedPath.length === 0 || !oTemplateContract.oFlexibleColumnLayoutHandler){
					return;
				}
				oTemplateContract.oFlexibleColumnLayoutHandler.adaptAfterDeletion(aDeletedPath, iViewLevel);
			}
			
			function fnBuildSections(sEntitySet, bOnlyEntitySetNames, aSections){
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				var sNewEntry;
				if (oTreeNode.navigationProperty){
					sNewEntry = bOnlyEntitySetNames ? oTreeNode.entitySet : oTreeNode.navigationProperty;
				} else {
					sNewEntry = sEntitySet;
				}
				if (aSections.indexOf(sNewEntry) < 0){
					aSections.unshift(sNewEntry);
					if (oTreeNode.navigationProperty){
						fnBuildSections(oTreeNode.parent, bOnlyEntitySetNames, aSections);
					}
				}
			}
			
			function getSections(sEntitySet, bOnlyEntitySetNames){
				var aRet = [];
				fnBuildSections(sEntitySet, bOnlyEntitySetNames, aRet);
				return aRet;				
			}
			
			function getBreadCrumbInfo(sEntitySet){
				var aSections = getSections(sEntitySet);
				// remove the last one - this is the current shown section
				aSections.pop();
				var sPath = "";
				var delimiter = "";
				var aRet = [];
				for (var i = 0; i < aSections.length; i++){
					sPath = sPath + delimiter + aSections[i];
					aRet.push(sPath);
					delimiter = "/";
				}
				return aRet;
			}
			
			function getHierarchySectionsFromCurrentHash(){
				var sHash = oTemplateContract.oNavigationControllerProxy.oHashChanger.getHash();
						// remove query part if there's one
				var	sPath = sHash.split("?")[0];
				var aSections = sPath.split("/");

				if (aSections[0] === "" || aSections[0] === "#") {
					// Path started with a / - remove first section
					aSections.splice(0, 1);
				}
				return aSections;
			}
			
			function fnAdaptBreadCrumbUrl(sHash, iViewLevel, bIsHash){
				if (oTemplateContract.oFlexibleColumnLayoutHandler){
					return oTemplateContract.oFlexibleColumnLayoutHandler.adaptBreadCrumbUrl(sHash, iViewLevel, bIsHash);
				}
				return sHash;
			}
			
			function getResourceBundleForEditPromise(){
				var aActiveComponents = oTemplateContract.oNavigationControllerProxy.getActiveComponents();
				var iMinViewLevel = 0;
				var oComponent;
				for (var i = 0; i < aActiveComponents.length; i++){
					var oRegistryEntry = oTemplateContract.componentRegistry[aActiveComponents[i]];
					if (oRegistryEntry.viewLevel > 0 && (iMinViewLevel === 0 || oRegistryEntry.viewLevel < iMinViewLevel)){
						iMinViewLevel = oRegistryEntry.viewLevel;
						oComponent = oRegistryEntry.oComponent;
					}
				}
				var oComponentPromise = oComponent ? Promise.resolve(oComponent) : oTemplateContract.oNavigationControllerProxy.getRootComponentPromise();
				return oComponentPromise.then(function(oComp){
					return oComp.getModel("i18n").getResourceBundle();                         	
				});
			}
			
			var oHistory = History.getInstance();
			var sCurrentlyDisplayed; // id of the component container currently displayed, updated when navigation is finished
			var sGoingToBeDisplayed; // like CurrentlyDisplayed, but already updated when route is matched
			
			oTemplateContract.oApplicationProxy = { // inject own api for AppComponent into the Template Contract. Other classes (NavigationController, BusyHelper) will call these functions accordingly.
				getDraftSiblingPromise: oContextBookkeeping.getDraftSiblingPromise,
				
				getAlternativeContextPromise: oContextBookkeeping.getAlternativeContextPromise,
				
				getResourceBundleForEditPromise: getResourceBundleForEditPromise,
				
				onAfterNavigate: function(oEvent) { // called when navigation has finished
					sCurrentlyDisplayed = oEvent.getParameter("toId");
					var oComponentContainer = oEvent.getParameter("to");
					var sComponent = oComponentContainer && oComponentContainer.getComponent && oComponentContainer.getComponent();
					var oComponentRegistryEntry = sComponent && oTemplateContract.componentRegistry[sComponent];
					if (oComponentRegistryEntry){
						var fnSetView = function(){
							oCurrentDisplay.currentView = oComponentRegistryEntry.oController.getView();	
						};
						if (oComponentRegistryEntry.oController){
							fnSetView();
						} else {
							oComponentRegistryEntry.viewRegisterd.then(fnSetView);
						}
					} else {
						oCurrentDisplay.currentView = null;	
					}
				},

				onBypassed: function() {
					oRouteParameters = {};
					oCurrentDisplay.api.outdated = true;
					oCurrentDisplay.api = {
					};
				},

				onRouteMatched: function(oEvent) {
					if (!isNewRoute(oEvent)) {
						return; // ignore route changes which are not cosidered as navigation for our model
					}
					oCurrentDisplay.api.outdated = true; // mark the old object as outdated
					oCurrentDisplay.api = { // and create a new one
						isBack: oHistory.getDirection() === HistoryDirection.Backwards,
						dataFromLastPage: oDataForNextPage
					};
					oDataForNextPage = {}; // create a new data bag for next page
					var sRoute = oEvent.getParameter("config").target;   // Note: Route and targetnames are identical
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRoute];
					oComponentPromise.then(function(oComponent){
						sGoingToBeDisplayed = oComponent.getComponentContainer().getId();
						if (!sCurrentlyDisplayed || sGoingToBeDisplayed === sCurrentlyDisplayed) { // no view navigation will take place -> page is reached
							sCurrentlyDisplayed = sGoingToBeDisplayed;
						}						
					});
				},
				getHierarchySectionsFromCurrentHash: getHierarchySectionsFromCurrentHash,
				getCurrentDisplayObject: getCurrentDisplayObject,
				getContentDensityClass: getContentDensityClass,
				setEditableNDC: setEditableNDC,
				getDialogFragment: getDialogFragmentForView.bind(null, null),
				destroyView: function(sViewId){
					delete mFragmentStores[sViewId];
				}
			};

			return {
				setEditableNDC: setEditableNDC,
				getEditableNDC: function() {
					return bIsEditable;
				},
				// Return an object containing information about the current page. It contains the following attributes:
				// isBack: has this view been reached via back navigation
				// dataFromLastPage: data bag containing data provided by the previous view
				// outdated: this attribute is added (value: true) as soon as a new navigation to another view is started.
				// Note that this is the point in time getCurrentDisplayObject will already return another object.
				// Hence, only clients are affected that have stored a reference to the object returned by this function in their memory.
				getCurrentDisplayObject: getCurrentDisplayObject,
				getContentDensityClass: getContentDensityClass,
				attachControlToParent: fnAttachControlToParent,
				getDialogFragmentForView: getDialogFragmentForView,
				getBusyHelper: function() {
					return oTemplateContract.oBusyHelper;
				},
				performAfterSideEffectExecution: fnPerformAfterSideEffectExecution,
				isTemplateComponentActive: function(oTemplateComponent) {
					return oTemplateComponent.getComponentContainer().getId() === sGoingToBeDisplayed;
				},
				showMessageToast: function() {
					var myArguments = arguments;
					var fnMessageToast = function() {
						jQuery.sap.log.info("Show message toast");
						MessageToast.show.apply(MessageToast, myArguments);
					};
					Promise.all([getOperationEndedPromise(true), oTemplateContract.oBusyHelper.getUnbusy()]).then(fnMessageToast);
				},
				setBackNavigation: setBackNavigation,
				setTitle: setTitle,
				getFclProxy: getFclProxy,
				isNewHistoryEntryRequired: isNewHistoryEntryRequired,
				registerStateChanger: fnRegisterStateChanger,
				getDraftSiblingPromise: oContextBookkeeping.getDraftSiblingPromise,
				registerContext: oContextBookkeeping.registerContext,
				activationStarted: oContextBookkeeping.activationStarted,
				cancellationStarted: oContextBookkeeping.cancellationStarted,
				editingStarted: oContextBookkeeping.editingStarted,
				getTargetAfterCancelPromise: getTargetAfterCancelPromise,
				adaptAfterDeletion: adaptAfterDeletion,
				getBreadCrumbInfo: getBreadCrumbInfo,
				adaptBreadCrumbUrl: fnAdaptBreadCrumbUrl,
				getSections: getSections,
				getHierarchySectionsFromCurrentHash: getHierarchySectionsFromCurrentHash
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.Application", {
			constructor: function(oTemplateContract) {
				jQuery.extend(this, getMethods(oTemplateContract));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/Application.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.NavigationController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ------------------------------------------------------------------------------------------------------------
// This class handles inner app navigation for Smart Template based apps.
// The class exposes its services in two ways:
// 1. There is a public API providing the navigation methods navigateToRoot, navigateToContext, navigateToMessagePage, and navigateBack
//    to Template developers and even Breakout developers.
// 2. A richer object oNavigationControllerProxy is created (see constructor) which is used by the core classes of the SmartTemplate framework.
//    This object allows more detailed interaction with navigation.

// Within this class we differentiate between a number of different scenarios for url-changes:
// 1. A state change is a change of the url which does not lead to a new route, but just modifies the encoding of the internal state of one view in the
//    url. Whenever a route matched event occurs it is first checked, whether this corresponds to a state change.
//    If this is true, we do not consider it as a navigation and all further handling of the url within this class is stopped. 
//    It is assumed that the state change is totally controlled by the component that has initiated the state change.
//    Note that agents might register themselves as possible state changers via sap.suite.ui.generic.template.lib.Application.registerStateChanger.
//    A new url is passed to the registered state changers one after the other (method isStateChange). If any of those returns true the processing
//    of the url is stopped.
// 2. Illegal urls: The user enters a url which belongs to this App but not to a legal route. This is not considered as a navigation. 
// 3. Back navigation: Back navigation can be triggered by the user pressing the browser-back button (then we have no control), the user pressing the
//    back button within the App, or programmatically (e.g. after cancelling an action).
// 3. Programmatic (forward) navigation: The program logic often demands the navigation to be triggerd programmatically. Such navigation is always forwarded to
//    function fnNavigate. Note that this function automatically performs a back navigation, when the navigation target is the same as the last history entry.
//    Note that it is also possible to navigate programmatically to the MessagePage. However, this does not change the url and is therefore not considered as 
// 5. Manual navigation: The user can navigate inside the running App by modifying the url manually (more probable: by selecting a bookmark/history entry
//    which leads to some other place within the App). Note that in this case the navigation may be totally uncontrolled within the App.
// ------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HistoryDirection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/NavigationController",[
	"jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/ComponentContainer", "sap/ui/core/routing/HashChanger", "sap/ui/core/routing/History", "sap/ui/core/routing/HistoryDirection",
	"sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/m/MessageBox", "sap/m/MessagePage", "sap/m/Link",
	"sap/suite/ui/generic/template/lib/ProcessObserver", "sap/suite/ui/generic/template/lib/routingHelper", 
	"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/lib/testableHelper"
], function(jQuery, BaseObject, ComponentContainer, HashChanger, History, HistoryDirection, Filter, FilterOperator, MessageBox, MessagePage, Link, 
	ProcessObserver, routingHelper, TemplateComponent, testableHelper) {
	"use strict";
	
	var oHistory = History.getInstance();

	// Private static methods
	
	function fnNormalizeHash(sHash) {
		if (sHash.indexOf("/") === 0){
			return sHash;
		}
		return "/" + sHash;
	}
	/*
	 * Creates a new ComponentContainer with template from routing configuration
	 * @param {Object}oAppComponentg - the application component
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {sap.ui.core.ComponentContainer} instance of the component container
	 */
	function fnCreateComponentInstance(oTemplateContract, oRouteConfig, fnComponentCreateResolve) {
		var sTemplate = oRouteConfig.template;
		var sEntitySet = oRouteConfig.entitySet;
		var iViewLevel = oRouteConfig.viewLevel;
		var iObserverIndex = -1;
		if (oTemplateContract.oFlexibleColumnLayoutHandler){
			iObserverIndex = iViewLevel < 3 ? iViewLevel : 0;	
		}
		var oNavigationObserver = iObserverIndex < 0 ? oTemplateContract.oNavigationObserver : oTemplateContract.aNavigationObservers[iObserverIndex];
		var oHeaderLoadingObserver = new ProcessObserver();
		var oLoadingObserverParent = iObserverIndex < 0 ? oTemplateContract.oHeaderLoadingObserver : oTemplateContract.aHeaderLoadingObservers[iObserverIndex];
		oLoadingObserverParent.addObserver(oHeaderLoadingObserver);
		var oPreprocessorsData = {};
		var oSettings = {
			appComponent: oTemplateContract.oAppComponent,
			isLeaf: !oRouteConfig.pages || !oRouteConfig.pages.length,
			subPages: oRouteConfig.pages,
			entitySet: sEntitySet,
			navigationProperty: oRouteConfig.navigationProperty,
			routeConfig: oRouteConfig,
			componentData: {
				registryEntry: {
					componentCreateResolve: fnComponentCreateResolve,
					route: oRouteConfig.name,
					viewLevel: iViewLevel,
					oNavigationObserver: oNavigationObserver,
					oHeaderLoadingObserver: oHeaderLoadingObserver,
					preprocessorsData: oPreprocessorsData
				}
			}
		};
		
		if (oRouteConfig.component.settings) {
			// consider component specific settings from app descriptor
			jQuery.extend(oSettings, oRouteConfig.component.settings);
		}
		
		var oComponentContainer;
		// Note: settings are passed to Component and to ComponentContainer. This has to be revisited.
		oTemplateContract.oAppComponent.runAsOwner(function() {
			try {
				var oComponentPromise = sap.ui.component({
					name: sTemplate,
					settings: oSettings,
					handleValidation: true,
					async: true
				});
	
				var oLoadedPromise;
	
				oComponentContainer = new ComponentContainer({
					propagateModel: true,
					width: "100%",
					height: "100%",
					settings: oSettings
				});
	
				oLoadedPromise = oComponentPromise.then(function(oComponent) {
					oComponentContainer.setComponent(oComponent);
					return oComponentContainer;
				});
	
	
				// add the 'loaded' function to make the component container behave the same as a view
				oComponentContainer.loaded = function() {
					return oLoadedPromise;
				};
			} catch (e) {
				throw new Error("Component " + sTemplate + " could not be loaded");
			}
		});
		return oComponentContainer;
	}

	// Definition of instance methods
	function getMethods(oTemplateContract, oNavigationControllerProxy) {
		
		var mMessagePageParams = {};
		var oCurrentHash = {	// this variable contains some information about the current navigation state. A new instance is created each navigation step (when the url is caught)
			iHashChangeCount: 0, // the value of this property is increased with each navigation step
			backTarget: 0
		};
		var oActivationPromise = Promise.resolve(); // Enables to wait for the end of the current activation of all components
		
		var aPreviousHashes = []; // array of previous instances of oCurrentHash. Length should always be identical to oCurrentHash.iHashChangeCount

		function getRootComponentPromise(){
			// Make sure that the loading of the root component starts
			var oViews = oNavigationControllerProxy.oRouter.getViews();
			oViews.getView({
				viewName: "root"	
			});
			return oTemplateContract.mRouteToTemplateComponentPromise.root;
		}

		var oAppTitlePromise;
		function getAppTitlePromise(){
			if (!oAppTitlePromise){
				var oRootComponentPromise =	getRootComponentPromise();
				return oRootComponentPromise.then(function(oRootComponent){
					return oRootComponent.getModel("i18n").getResourceBundle().getText("PAGEHEADER");
				});
			}
			return oAppTitlePromise;
		}
		
		function getCurrenActivationTakt(){
			return oCurrentHash.iHashChangeCount;
		}
		
		function fnSetTitleForComponent(oTitleProvider){
			var oTitlePromise;
			if (oTitleProvider instanceof TemplateComponent){
				var oRegistryEntry = oTitleProvider && oTemplateContract.componentRegistry[oTitleProvider.getId()];
				var fnGetTitle = oRegistryEntry && oRegistryEntry.methods.getTitle;
				oTitlePromise = fnGetTitle && Promise.resolve(fnGetTitle());
			} else if (oTitleProvider && oTitleProvider.title){
				oTitlePromise = Promise.resolve(oTitleProvider.title);
			} 
			oTitlePromise = oTitlePromise || getAppTitlePromise();
			
			oTitlePromise.then(function(sTitle){
				if (oTemplateContract.oShellService) {
					oTemplateContract.oShellService.setTitle(sTitle);
				}					
			});
		}
		
		function fnActivateMessageButtonHelpers(mViewLevel2MessageButtonHelper, maxActiveViewLevel){
			var oMaster;
			var aSlaves = [];
			for (var i = 0; i <= maxActiveViewLevel; i++){
				var oMessageButtonHelper = mViewLevel2MessageButtonHelper[i];
				if (oMessageButtonHelper){
					if (oMaster){
						aSlaves.push(oMessageButtonHelper);
					} else {
						oMaster = oMessageButtonHelper;
					}
				}
			}
			if (oMaster){
				oMaster.resume(aSlaves);
			}
		}
		
		// This method is called when all views have been set to their places
		function fnAfterActivationImpl(oTitleProvider){
			var aPageDataLoadedPromises = [oTemplateContract.oPagesDataLoadedObserver.getProcessFinished(true)];
			var oActiveComponent = null;
			var iCurrentHashCount = oCurrentHash.iHashChangeCount;
			var maxActiveViewLevel = -1;
			var mViewLevel2MessageButtonHelper = {};
			for (var sComponentId in oTemplateContract.componentRegistry){
				var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
				var oMessageButtonHelper = oRegistryEntry.oControllerRegistryEntry.oTemplateUtils.oServices.oTemplateCapabilities.oMessageButtonHelper;
				if (oRegistryEntry.activationTakt < iCurrentHashCount){ // component is currently not active
					oRegistryEntry.utils.suspendBinding();
					if (oMessageButtonHelper){
						oMessageButtonHelper.suspend();
					}
				} else {
					aPageDataLoadedPromises.push(oRegistryEntry.oViewRenderdPromise);
					if (oRegistryEntry.viewLevel > maxActiveViewLevel){
						maxActiveViewLevel = oRegistryEntry.viewLevel;
						oActiveComponent = oRegistryEntry.oComponent;
					}
					mViewLevel2MessageButtonHelper[oRegistryEntry.viewLevel] = oMessageButtonHelper;
				}
			}
			fnActivateMessageButtonHelpers(mViewLevel2MessageButtonHelper, maxActiveViewLevel);
			var oElementBinding = oActiveComponent && oActiveComponent.getComponentContainer().getElementBinding();
			oCurrentHash.bindingPath = oElementBinding && fnNormalizeHash(oElementBinding.getPath());
			oTitleProvider = oTitleProvider || oActiveComponent;
			if (oTemplateContract.oFlexibleColumnLayoutHandler){
				oTemplateContract.oFlexibleColumnLayoutHandler.setTitleForActiveComponent(oTitleProvider, fnSetTitleForComponent);	
			} else {
				fnSetTitleForComponent(oTitleProvider);
			}
			Promise.all(aPageDataLoadedPromises).then(function(){
				if (iCurrentHashCount === oCurrentHash.iHashChangeCount && jQuery.isEmptyObject(mMessagePageParams)){ 
					oTemplateContract.oAppComponent.firePageDataLoaded();
				}
			});
		}
		
		// Default call
		var fnAfterActivation = fnAfterActivationImpl.bind(null, null); // do not pass a TitleProvider/forward to fnAfterActivationImpl
		
		function fnAddUrlParameterInfoForRoute(sRoute, oAppStates, sPath) {
			var fnExtendPars = function(oNewPars){
				jQuery.extend(oAppStates, oNewPars);	
			};
			for (var sPar in oTemplateContract.componentRegistry){
				var oComponentRegistryEntry = oTemplateContract.componentRegistry[sPar];
				if (oComponentRegistryEntry.route === sRoute){
					var getUrlParameterInfo = oComponentRegistryEntry.methods.getUrlParameterInfo; 
					return getUrlParameterInfo ? getUrlParameterInfo(sPath).then(fnExtendPars) : Promise.resolve();
				}
			}
			return Promise.resolve();		
		}
		
		function fnGetParStringPromise(oAppStates, bAddLevel0Info){
			var oAppStatePromise = bAddLevel0Info ? fnAddUrlParameterInfoForRoute("root", oAppStates) : Promise.resolve();
			return oAppStatePromise.then(function(){
				var sDelimiter = "";
				var sRet = "";
				for (var sPar in oAppStates){
					var aValues = oAppStates[sPar];
					for (var i = 0; i < aValues.length; i++){
						var sValue = aValues[i];	
						sRet = sRet + sDelimiter + sPar + "=" + sValue;
						sDelimiter = "&";
					}
				}								
				return sRet;					
			});
		}
		
		// Start: navigation methods

		function fnNavigateBack(){
			jQuery.sap.log.info("Navigate back");
			if (oCurrentHash.backTarget && fnNormalizeHash(oHistory.getPreviousHash() || "") !== fnNormalizeHash(oCurrentHash.hash)){
				oTemplateContract.oBusyHelper.setBusyReason("HashChange", true);
			}
			oCurrentHash.LeaveByBack = true;
			window.history.back();			
		}
		
		/*
		 * Sets/Replaces the hash via the router/hash changer
		 * @param {string} sHash - the hash string
		 * @param {boolean} bReplace - whether the hash should be replaced
		 */
		function fnNavigate(sHash, bReplace) {
			sHash = sHash || ""; // normalization (to avoid an 'undefined' in the url)
			jQuery.sap.log.info("Navigate to hash: " + sHash);
			if (sHash === oCurrentHash.hash){
				jQuery.sap.log.info("Navigation suppressed since hash is the current hash");
				return; // ignore navigation that does nothing
			}
			oTemplateContract.oBusyHelper.setBusyReason("HashChange", true);
			oCurrentHash.targetHash = sHash;
			if (oCurrentHash.backTarget && fnNormalizeHash(oHistory.getPreviousHash() || "") === fnNormalizeHash(sHash)){
				fnNavigateBack();
				return;
			}
			oCurrentHash.LeaveByReplace = bReplace;
			if (bReplace) {
				oNavigationControllerProxy.oHashChanger.replaceHash(sHash);
			} else {
				oNavigationControllerProxy.oHashChanger.setHash(sHash);
			}
		}
		
		function fnNavigateToParStringPromise(sPath, oParStringPromise, bReplace, oBackwardingInfo){
			oParStringPromise.then(function(sPars){
				if (sPars){
					sPath = sPath + "?" + sPars;
				}
				if (oBackwardingInfo){
					oCurrentHash.backwardingInfo = {
						backCount: oBackwardingInfo.backCount,
						targetViewLevel: oBackwardingInfo.targetViewLevel,
						path: sPath
					};
					fnNavigateBack();					
				} else {
					fnNavigate(sPath, bReplace);
				}
			});
			oTemplateContract.oBusyHelper.setBusy(oParStringPromise);
		}
		
		function getBackLengthToRoot(bOnlyDirect){
			var iRet = 0;
			for (var oHash = oCurrentHash; oHash.oEvent; ){
				var iViewLevel = oHash.oEvent.getParameter("config").viewLevel;
				if (iViewLevel === 0){
					return iRet;
				}
				if (bOnlyDirect && iRet > 0){
					return -1;
				}
				iRet++;
				oHash = aPreviousHashes[oHash.backTarget];
			}
			return -1;
		}

		// Navigates to the root page. Thereby it restores the iappstate the root page was left (if we have already been there)
		function fnNavigateToRoot(bReplace) {
			var iBackLengthToRoot = getBackLengthToRoot(!bReplace);
			var oParStringPromise = fnGetParStringPromise({}, true);
			var oBackwardingInfo = (iBackLengthToRoot > 0) && {
				backCount: iBackLengthToRoot,
				targetViewLevel: 0			
			};
			fnNavigateToParStringPromise("", oParStringPromise, bReplace, oBackwardingInfo);
		}
		
		function getTargetComponentPromises(oTarget){
			var sRouteName = oTemplateContract.mEntityTree[oTarget.entitySet].sRouteName;
			var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRouteName];
			return [oComponentPromise];
		}
		
		function fnPresetDisplayMode(aTargetComponentPromises, iDisplayMode){
			var iCurrentTakt = oCurrentHash.iHashChangeCount;
			var fnPreset = function(oComponent){
				var oRegistryEntry = oTemplateContract.componentRegistry[oComponent.getId()];
				(oRegistryEntry.methods.presetDisplayMode || jQuery.noop)(iDisplayMode, iCurrentTakt === oRegistryEntry.activationTakt);                         
			};
			for (var i = 0; i < aTargetComponentPromises.length; i++){
				var oTargetPromise = aTargetComponentPromises[i];
				oTargetPromise.then(fnPreset);
			}
		}
		
		function getTargetLevel(oTarget) {
			var oTargetTreeNode = oTarget && oTemplateContract.mEntityTree[oTarget.entitySet];
			var iTargetLevel = oTargetTreeNode ? oTargetTreeNode.level : 1;
			return iTargetLevel;
		}

		// vTargetContext is either a string or an object. Only in the second case sNavigationProperty may be used.
		function fnNavigateToContextImpl(vTargetContext, sNavigationProperty, bReplace, iDisplayMode, oQuery) {
			var sPath;

			var oTarget, iTargetLevel;
			var aTargetComponentPromises = [];
			if (typeof vTargetContext === "string"){
				sPath = vTargetContext;
				iTargetLevel = fnNormalizeHash(sPath).split("/").length - 1;
			} else {
			// get the navigation path from binding context
				oTarget = routingHelper.determineNavigationPath(vTargetContext, sNavigationProperty);
				iTargetLevel = getTargetLevel(oTarget);
				sPath = oTarget.path;
				aTargetComponentPromises = getTargetComponentPromises(oTarget);
			}
			if (sPath) {
				if (sNavigationProperty) {
					var aParts = oTemplateContract.oApplicationProxy.getHierarchySectionsFromCurrentHash();              
	
					for (var i = iTargetLevel - 2; i >= 0; i--){
						sPath = aParts[i] + "/" + sPath;	
					}
					sPath = "/" + sPath;
				}
				fnPresetDisplayMode(aTargetComponentPromises, iDisplayMode || 0);
				// navigate to context
				if (oQuery){
					var sQuery = "";
					var sDelim = "&";
					for (var sPar in oQuery){
						sQuery = sQuery + sDelim + sPar + "=" + oQuery[sPar];
						sDelim = "&";
					}
					if (sQuery){
						sPath = sPath + "?" + sQuery;
					}
					fnNavigate(sPath, bReplace);
				} else {
					var oAppStates = {};
					// Currently, it seems cumbersome to get the route name in case no target is available (i.e. vTargetContext was only a string).
					// It is however only needed for the theoretical case of object pages providing appstates, which is currently not the case.
					// Therefore, the routename is not determined in the cumbersome cases.
					var sRoute = oTarget && oTemplateContract.mEntityTree[oTarget.entitySet].sRouteName;
					var oNavigationPromise = fnAddUrlParameterInfoForRoute(sRoute, oAppStates, sPath).then(function(){
						var oParStringPromise = oTemplateContract.oFlexibleColumnLayoutHandler ? 
							oTemplateContract.oFlexibleColumnLayoutHandler.getAppStateParStringForNavigation(iTargetLevel, oAppStates) :
							fnGetParStringPromise(oAppStates, false);
						var oPreviousHash = aPreviousHashes[oCurrentHash.backTarget];
						var oBackwardingInfo = (oPreviousHash.hash && fnNormalizeHash(oPreviousHash.hash.split("?")[0]) === fnNormalizeHash(sPath)) && { backCount: 1 };
						fnNavigateToParStringPromise(sPath, oParStringPromise, bReplace, oBackwardingInfo);
					});
					oTemplateContract.oBusyHelper.setBusy(oNavigationPromise);
				}
			}
		}
		
		function fnNavigateToContext(vTargetContext, sNavigationProperty, bReplace, iDisplayMode) {
			return fnNavigateToContextImpl(vTargetContext, sNavigationProperty, bReplace, iDisplayMode);	
		}
		
		function fnPerformPseudoHashChange(aStaysVisible){
			var iLastHashCount = oCurrentHash.iHashChangeCount;
			oCurrentHash.iHashChangeCount++;
			aPreviousHashes.push(null);
			if (aStaysVisible){
				for (var sPar in oTemplateContract.componentRegistry){
					var oRegistryEntry = oTemplateContract.componentRegistry[sPar];
					if (oRegistryEntry.activationTakt === iLastHashCount && aStaysVisible[oRegistryEntry.viewLevel]){
						oRegistryEntry.activationTakt = oCurrentHash.iHashChangeCount;	
					}
				}
			}
			return {
				iHashChangeCount: oCurrentHash.iHashChangeCount
			};
		}
		
		function fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters) {
			var sEntitySet, sText, oEntitySet, oEntityType, oHeaderInfo, sIcon = null,
				oMetaModel, sDescription;
			if (mParameters) {
				sEntitySet = mParameters.entitySet;
				sText = mParameters.text;
				sIcon = mParameters.icon;
				sDescription = mParameters.description;
			}

			if (sEntitySet) {
				oMetaModel = oTemplateContract.oAppComponent.getModel().getMetaModel();
				if (oMetaModel) {
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oHeaderInfo = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
				}
				if (oHeaderInfo && oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
					sIcon = oHeaderInfo.TypeImageUrl.String;
				}
			}
			
			oTemplateContract.oNoOwnTitlePromise.then(function(bNoOwnTitle) {
				if (oTemplateContract.oShellService) {
					oTemplateContract.oShellService.setBackNavigation(undefined);
				}
			});
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/messagePage", {
				text: sText,
				icon: sIcon,
				description: sDescription
			});
			
			var aLevelsBecomingInvisible;
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				aLevelsBecomingInvisible = oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.displayMessagePage(mParameters);
			} else {
				var oTargets = oNavigationControllerProxy.oRouter.getTargets();
				oTargets.display("messagePage");
			}
			fnPerformPseudoHashChange(aLevelsBecomingInvisible);
			fnAfterActivationImpl(mParameters);
		}
		
		function fnShowStoredMessage(){
			if (!jQuery.isEmptyObject(mMessagePageParams)){
				var mParameters = null;
				for (var i = 0; !mParameters; i++){
					mParameters = mMessagePageParams[i];
				}
				mMessagePageParams = {};
				fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters);				
			}
		}

		function fnNavigateToMessagePage(mParameters) {
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				mParameters.viewLevel = mParameters.viewLevel || 0;
				mMessagePageParams[mParameters.viewLevel] = mParameters;
				var oLoadedFinishedPromise = Promise.all([oActivationPromise, oNavigationControllerProxy.oTemplateContract.oPagesDataLoadedObserver.getProcessFinished(true)]);
				oLoadedFinishedPromise.then(fnShowStoredMessage);
				return;
			}
			fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters);
		}

		// End: Navigation methods
		
		function getActiveComponents(){
			var aRet = [];
			var iCurrentHashCount = oCurrentHash.iHashChangeCount;
			for (var sComponentId in oTemplateContract.componentRegistry){
				var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
				if (oRegistryEntry.activationTakt === iCurrentHashCount){ // component is currently active
					aRet.push(sComponentId);
				}
			}
			return aRet;
		}

		// Start: Handling url-changes
		
		/*
		 * calls onActivate on the specified view, if it exists
		 * @param {Object} oView - the view
		 * @param {string} sPath - the path in the model
		 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
		 */
		function fnActivateOneComponent(sPath, oActivationInfo, oComponent) {
			var oRegistryEntry = oTemplateContract.componentRegistry[oComponent.getId()] || {};
			var bIsComponentCurrentlyActive = (oRegistryEntry.activationTakt === oActivationInfo.iHashChangeCount - 1);
			oRegistryEntry.activationTakt = oActivationInfo.iHashChangeCount;
			// trigger onActivate on the component instance
			// if Component is assembled without TemplateAssembler it could be that oComponent.onActivate is undefined
			// e.g. an application has an own implementation of Component
			var oRet;
			if (oComponent && oComponent.onActivate) {
				oRet = oComponent.onActivate(sPath, bIsComponentCurrentlyActive);
			}
			return oRet || oRegistryEntry.viewRegisterd;
		}		
		
		/*
		 * calls onActivate on the specified view, if it exists. Only used in the Non-FCL case
		 * @param {Object} oView - the view
		 * @param {string} sPath - the path in the model
		 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
		 */
		function fnActivateComponent(sPath, oActivationInfo, oComponent) {
			return fnActivateOneComponent(sPath, oActivationInfo, oComponent).then(fnAfterActivation);
		}

		function fnAdaptPaginatorInfoAfterNavigation(oEvent, bIsProgrammatic, bIsBack){
			var oNewPaginatorInfo = {};
			if (bIsProgrammatic || bIsBack){
				var iViewLevel = oEvent.getParameter("config").viewLevel;
				var oCurrentPaginatorInfo = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/paginatorInfo");
				for (var iLevel = 0; iLevel < iViewLevel; iLevel++){
					oNewPaginatorInfo[iLevel] = oCurrentPaginatorInfo[iLevel];	
				}
			}
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/paginatorInfo", oNewPaginatorInfo);
		}
		
		function fnGetAlternativeContextPromise(sPath){
			return oTemplateContract.oApplicationProxy.getAlternativeContextPromise(sPath);              
		}
		
		function fnHandleBeforeRouteMatched(oEvent){
			if (oTemplateContract.oFlexibleColumnLayoutHandler){
				oTemplateContract.oFlexibleColumnLayoutHandler.handleBeforeRouteMatched(oEvent);	
			}
		}
		
		// Event handler fired by router once it finds a match
		function fnHandleRouteMatched(oEvent) {
			oTemplateContract.oBusyHelper.setBusyReason("HashChange", false);
			oEvent = jQuery.extend({}, oEvent);
			var iViewLevel = oEvent.getParameter("config").viewLevel;
			var sHash = oNavigationControllerProxy.oHashChanger.getHash() || "";
			jQuery.sap.log.info("Route matched with hash " + sHash);
			if (oCurrentHash.backwardingInfo){
				oCurrentHash.backwardingInfo.backCount--;
				if (oCurrentHash.backwardingInfo.backCount && iViewLevel !== oCurrentHash.backwardingInfo.targetViewLevel){
					oCurrentHash.backTarget = aPreviousHashes[oCurrentHash.backTarget].backTarget;
					oCurrentHash.hash = sHash;
					fnNavigateBack();
					return;
				} else {
					var sTargetHash = oCurrentHash.backwardingInfo.path;
					delete oCurrentHash.backwardingInfo;
					if (sTargetHash !== sHash){
						oCurrentHash.forwardingInfo = {
							bIsProgrammatic: true,
							bIsBack: true,
							iHashChangeCount: oCurrentHash.iHashChangeCount + 1
						};
						fnNavigate(sTargetHash, true);
						return;
					}
				}
			} else if (!oCurrentHash.forwardingInfo){
				// State changers may identify the hash change as something which can be handled by them internally. In this case we do not need to run the whole mechanism
				for (var i = 0; i < oTemplateContract.aStateChangers.length; i++){
					var oStateChanger = oTemplateContract.aStateChangers[i];
					if (oStateChanger.isStateChange(oEvent)){
						return;
					}
				}
			}
			
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/routeLevel", iViewLevel);
			var oActivationInfo = oCurrentHash.forwardingInfo;
			delete oCurrentHash.forwardingInfo;
			if (!oActivationInfo){
				oActivationInfo = {};
				var iPreviousHashChangeCount = oCurrentHash.iHashChangeCount;
				oActivationInfo.iHashChangeCount = iPreviousHashChangeCount + 1;
				oActivationInfo.bIsProgrammatic = (sHash === oCurrentHash.targetHash);
				oActivationInfo.bIsBack = !!(oCurrentHash.LeaveByBack || (!oActivationInfo.bIsProgrammatic && (oHistory.getDirection() === HistoryDirection.Backwards)));
				oCurrentHash.LeaveByBack = oActivationInfo.bIsBack;
				oCurrentHash.LeaveByReplace = oActivationInfo.bIsProgrammatic && oCurrentHash.LeaveByReplace;
				var oPreviousHash = oCurrentHash;
				aPreviousHashes.push(oPreviousHash);
				oCurrentHash = { 
					iHashChangeCount: oActivationInfo.iHashChangeCount
				};
				// identify the back target
				if (oPreviousHash.LeaveByReplace){
					oCurrentHash.backTarget = oPreviousHash.backTarget; // url is replaced  -> back target remains unchanged
				} else if (oActivationInfo.bIsBack){
					oCurrentHash.backTarget = aPreviousHashes[oPreviousHash.backTarget].backTarget; // -> new back target is the back target of the previous back target
				} else {
					oCurrentHash.backTarget = iPreviousHashChangeCount;	// last url is back target
				}
				fnAdaptPaginatorInfoAfterNavigation(oEvent, oActivationInfo.bIsProgrammatic, oActivationInfo.bIsBack);
			}
			oCurrentHash.oEvent = oEvent;
			oCurrentHash.hash = sHash;

			var oRouteConfig = oEvent.getParameter("config");			
			var sPath = routingHelper.determinePath(oRouteConfig, oEvent);
			var sTestPath = iViewLevel < 2 ? sPath : routingHelper.determinePath(oRouteConfig, oEvent, oTemplateContract.routeViewLevel1.pattern);
			fnGetAlternativeContextPromise(sTestPath).then(function(oAlternativeContextInfo){
				if (oAlternativeContextInfo){
					var oKeys = oEvent.getParameter("arguments");
					var oQuery = oKeys["?query"];
					oCurrentHash.forwardingInfo = oActivationInfo;
					fnNavigateToContextImpl(oAlternativeContextInfo.context, null, true, oAlternativeContextInfo.iDisplayMode, oQuery || {});
					return;
				}
			
				if (oTemplateContract.oFlexibleColumnLayoutHandler){
					oActivationPromise = oTemplateContract.oFlexibleColumnLayoutHandler.handleRouteMatched(oEvent, oRouteConfig, sPath, oActivationInfo);
					return;
				}
				oTemplateContract.oApplicationProxy.onRouteMatched(oEvent);

				if (oRouteConfig.viewLevel === 0 || !(oActivationInfo.bIsProgrammatic || oActivationInfo.bIsBack)){
					oTemplateContract.oApplicationProxy.setEditableNDC(false);           	
				}

				var sRoute = oRouteConfig.target;   // Note: Route and targetnames are identical
				var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRoute];
				oActivationPromise = new Promise(function(fnResolve){
					oComponentPromise.then(function(oComponent){
						fnActivateComponent(sPath, oActivationInfo, oComponent).then(fnResolve);	
					});	
				});
			});
		}

		// Event handler fired by router when no matching route is found
		function fnHandleBypassed() {
			oTemplateContract.oApplicationProxy.onBypassed();
			fnNavigateToMessagePage({
				title: oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
				replaceURL: true
			});
		}
		
		if (oTemplateContract.sRoutingType === "f"){
			oNavigationControllerProxy.oRouter.attachBeforeRouteMatched(fnHandleBeforeRouteMatched);
		}
		oNavigationControllerProxy.oRouter.attachRouteMatched(fnHandleRouteMatched);

		oNavigationControllerProxy.oRouter.attachBypassed(fnHandleBypassed);
		// End: Handling url-changes
		
		// Expose methods via NavigationController proxy
		oNavigationControllerProxy.navigate = fnNavigate;
		oNavigationControllerProxy.navigateToParStringPromise = fnNavigateToParStringPromise;
		oNavigationControllerProxy.activateOneComponent = fnActivateOneComponent;
		oNavigationControllerProxy.afterActivation = fnAfterActivation;
		oNavigationControllerProxy.addUrlParameterInfoForRoute = fnAddUrlParameterInfoForRoute;
		oNavigationControllerProxy.getParStringPromise = fnGetParStringPromise;
		oNavigationControllerProxy.performPseudoHashChange = fnPerformPseudoHashChange;
		oNavigationControllerProxy.getActiveComponents = getActiveComponents;
		oNavigationControllerProxy.getRootComponentPromise = getRootComponentPromise;
		oNavigationControllerProxy.getCurrenActivationTakt = getCurrenActivationTakt;
		oNavigationControllerProxy.getTargetLevel = getTargetLevel;

		// Expose selected private functions to unit tests
		testableHelper.testable(function(){
			aPreviousHashes.push(oCurrentHash);	
		}, "NavigationController_init"); // Enable startup for tests. Usuallay this is achieved by the first routeMatched

		return {
			/**
			* Navigates to the root view.
			*
			* @public
			* @param {boolean} bReplace If this is true the navigation/hash will be replaced
			*/
			navigateToRoot: fnNavigateToRoot,

			/**
			 * Navigates to the specified context.
			 *
			 * @public
			 * @param {Object} oTargetContext - The context to navigate to (or null - e.g. when the navigationProperty should be appended to the current path)
			 * @param {string} sNavigationProperty - The navigation property
			 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
			 */
			navigateToContext: fnNavigateToContext,
			/**
			 * Navigates to the message page and shows the specified content.
			 *
			 * @public
			 * @param {Object} mParameters - The parameters for message page
			 */
			navigateToMessagePage: fnNavigateToMessagePage,

			/**
			 * Navigate back
			 *
			 * @public
			 */			
			navigateBack: fnNavigateBack
		};
	}
	
	function constructor(oNavigationController, oTemplateContract){
		var oNavigationControllerProxy = {
			oAppComponent: oTemplateContract.oAppComponent,
			oRouter: oTemplateContract.oAppComponent.getRouter(),
			oTemplateContract: oTemplateContract,
			oHashChanger: HashChanger.getInstance(),
			mRouteToComponentResolve: {}
		};
		oTemplateContract.oNavigationControllerProxy = oNavigationControllerProxy;
		var oFinishedPromise = new Promise(function(fnResolve){
			// remark: In case of inbound navigation with edit-mode and an existing draft, this promise will be resolved
			// before the initialization is actually finished.
			// This is necessary to be able to show the unsavedChanges-Dialog
			oNavigationControllerProxy.fnInitializationResolve = fnResolve;
		});
		oTemplateContract.oBusyHelper.setBusy(oFinishedPromise);
		jQuery.extend(oNavigationController, getMethods(oTemplateContract, oNavigationControllerProxy));
		jQuery.extend(oNavigationControllerProxy, oNavigationController);
		var mViews = {};
		// TODO: this has to be clarified and fixed
		oNavigationControllerProxy.oRouter._oViews._getViewWithGlobalId = function(oView) {
			// Test only
			if (!mViews[oView.viewName]){
				var oRoute = oNavigationControllerProxy.oRouter.getRoute(oView.viewName);
				var oContainer;
				if (oRoute && oRoute._oConfig) {
					oContainer = fnCreateComponentInstance(oTemplateContract, oRoute._oConfig, oNavigationControllerProxy.mRouteToComponentResolve[oView.viewName]);
				} else {
					oContainer = sap.ui.view({
						viewName: oView.viewName,
						type: oView.type,
						height: "100%"
					});
				}
				mViews[oView.viewName] = oContainer;
				if (oView.viewName === "root") {
					oTemplateContract.rootContainer = oContainer;
				}					
			}
			return mViews[oView.viewName];
		};
		routingHelper.startupRouter(oNavigationControllerProxy);		
	}

	/*
	 * Handles all navigation and routing-related tasks for the application.
	 *
	 * @class The NavigationController class creates and initializes a new navigation controller with the given
	 *        {@link sap.suite.ui.generic.template.lib.AppComponent AppComponent}.
	 * @param {sap.suite.ui.generic.template.lib.AppComponent} oAppComponent The AppComponent instance
	 * @public
	 * @extends sap.ui.base.Object
	 * @version 1.46.0
	 * @since 1.30.0
	 * @alias sap.suite.ui.generic.template.lib.NavigationController
	 */
	var NavigationController = BaseObject.extend("sap.suite.ui.generic.template.lib.NavigationController", {
		metadata: {
			library: "sap.suite.ui.generic.template"
		},
		constructor: function(oTemplateContract) {
			// inherit from base object.
			BaseObject.apply(this, arguments);
			testableHelper.testableStatic(constructor, "NavigationController")(this, oTemplateContract);
		}
	});

	NavigationController._sChanges = "Changes";
	return NavigationController;
});
}; // end of sap/suite/ui/generic/template/lib/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateAssembler') ) {
// This class is the central facility assembling Templates that can be used within a Smart Template application.
// Moreover, it serves as a registry for all central objects used in context of Smart Templates. 
// In order to achieve this it provides three static methods:
// - getTemplateComponent creates a Template out of an abstract Template definition
// - getRegisterAppComponent is used by class AppComponent to establish a communication between the classes AppComponent and TemplateAssembler. 
//   Note that this method cannot be used by any other class.
// - getExtensionAPIPromise provides access to the instance of the extensionAPI suitable for a certain control

jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateAssembler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/lib/TemplateAssembler",["jquery.sap.global", "sap/ui/core/mvc/View", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel",
			"sap/suite/ui/generic/template/lib/TemplateViewController",
			"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/lib/Application",
			"sap/suite/ui/generic/template/lib/CRUDManager", "sap/suite/ui/generic/template/lib/CommonUtils",
			"sap/suite/ui/generic/template/lib/ComponentUtils", "sap/suite/ui/generic/template/lib/CommonEventHandlers",
			"sap/suite/ui/generic/template/lib/ViewDependencyHelper", "sap/suite/ui/generic/template/lib/testableHelper"
		],
		function(jQuery, View, JSONModel, ResourceModel, TemplateViewController, TemplateComponent, Application, CRUDManager, CommonUtils,
			ComponentUtils, CommonEventHandlers, ViewDependencyHelper, testableHelper) {
			"use strict";

			var mAppRegistry = {};
			var mControllerRegistry = {};
			
			// This function is handed over to class AppComponent. The variable will be set to null, once this has happened.
			// oAppRegistryEntry is a registry entry for the AppComponent. When it is registered it contains the following properties:
			// - appComponent: the AppComponent to be registered
			// - oTemplateContract: the TemplateContract for this App, as described in AppComponent
			// - application: instance of class Application 
			// - oViewDependencyHelper: instance of class ViewDependencyHelper
			// This function returns a function that can be used to deregister the AppComponent from the registry when it is exited.
			var fnRegisterAppComponent = function(oAppRegistryEntry){
				var sAppComponentId = oAppRegistryEntry.appComponent.getId();
				mAppRegistry[sAppComponentId] = oAppRegistryEntry;
				return function(){
					delete mAppRegistry[sAppComponentId];
				};
			};

			function getAppRegistryEntry(oAppComponent) {
				var sAppComponentId = oAppComponent.getId();
				var oRet = mAppRegistry[sAppComponentId];
				return oRet;
			}

			function getComponentRegistryEntry(oComponent) {
				return getAppRegistryEntry(oComponent.getAppComponent()).oTemplateContract.componentRegistry[oComponent.getId()];
			}

			function fnFindView(oControl) {
				while (oControl && !(oControl instanceof View)) {
					oControl = oControl.getParent();
				}
				return oControl;
			}

			function fnGetComponentRegistryEntryForControl(oControl) {
				while (oControl) {
					var oView = fnFindView(oControl);
					var oController = oView && oView.getController();
					var oComponent = oController && oController.getOwnerComponent();
					if (oComponent instanceof TemplateComponent) {
						var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
						return oComponentRegistryEntry;
					} else {
						oControl = oComponent && oComponent.oContainer;
					}
				}
			}

			function getTemplateViewController(getMethods, sControllerName, oControllerDefinition, oTemplateUtils, oAppRegistryEntry) {
				oControllerDefinition = oControllerDefinition || {};

				oControllerDefinition.constructor = function() {
					TemplateViewController.prototype.constructor.apply(this, arguments);
					var oMethods = getMethods(oTemplateUtils, this);
					this._templateEventHandlers = Object.freeze(oMethods.handlers || {});
					this._templateFormatters = Object.freeze(oMethods.formatters || {});
					this.extensionAPI = Object.freeze(oMethods.extensionAPI || {});
					this.fnGenericOnInit = function(oController) {
						var oView = oController.getView();
						var sViewId = oView.getId();
						jQuery.sap.log.info("Init view " + sViewId + " of template " + sControllerName);
						var oComponent = oController.getOwnerComponent();
						var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
						oComponentRegistryEntry.oControllerRegistryEntry = {
							onExit: oMethods.onExit || jQuery.noop,
							oTemplateUtils: oTemplateUtils,
							oAppRegistryEntry: oAppRegistryEntry
						};
						mControllerRegistry[sViewId] = oComponentRegistryEntry.oControllerRegistryEntry;
						oTemplateUtils.oServices.oApplicationController.registerView(oView);
						oTemplateUtils.oCommonUtils = new CommonUtils(oController, oTemplateUtils.oServices, oTemplateUtils.oComponentUtils);
						oTemplateUtils.oServices.oCRUDManager = new CRUDManager(oController,
							oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils, oAppRegistryEntry.oTemplateContract.oBusyHelper
						);
						oTemplateUtils.oCommonEventHandlers = new CommonEventHandlers(oController,
							oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils);
						(oMethods.onInit || jQuery.noop)();
						// Note: This relies on the fact, that there is a 1-1 relationship between TemplateView and
						// TemplateComponent.
						// If we introduce Templates using more then one view, this must be reworked.
						oComponentRegistryEntry.oController = this;
						oComponentRegistryEntry.fnViewRegisteredResolve();
						delete oComponentRegistryEntry.fnViewRegisteredResolve;
					};
				};

				oControllerDefinition.onInit = function() {
					this.fnGenericOnInit(this);
					delete this.fnGenericOnInit;
				};
				oControllerDefinition.onExit = function() {
					var sViewId = this.getView().getId();
					var oControllerRegistryEntry = mControllerRegistry[sViewId];
					oControllerRegistryEntry.oAppRegistryEntry.oTemplateContract.oApplicationProxy.destroyView(sViewId);
					oControllerRegistryEntry.onExit();
					delete mControllerRegistry[sViewId];
					jQuery.sap.log.info("View " + sViewId + " of template " + sControllerName + " exited");
				};

				return TemplateViewController.extend(sControllerName, oControllerDefinition);
			}

			function fnGetViewControllerCreator(oComponentRegistryEntry) {
				var oControllerSpecification = oComponentRegistryEntry.methods.oControllerSpecification;
				return oControllerSpecification && function(){
					var oAppComponent = oComponentRegistryEntry.oComponent.getAppComponent();
					var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
					var oTransactionController = oAppComponent.getTransactionController();					
					var oTemplateUtils = {
						oComponentUtils: oComponentRegistryEntry.utils,
						oServices: {
							oTemplateCapabilities: {}, // Templates will add their capabilities which are used by the framework into this object
							oApplicationController: oAppComponent.getApplicationController(),
							oTransactionController: oTransactionController,
							oNavigationController: oAppComponent.getNavigationController(),
							oDraftController: oTransactionController.getDraftController(),
							oApplication: oAppRegistryEntry.application,
							oViewDependencyHelper: oAppRegistryEntry.oViewDependencyHelper
						}
					};
					return getTemplateViewController(oControllerSpecification.getMethods, oComponentRegistryEntry.oComponent.getTemplateName(), oControllerSpecification.oControllerDefinition, oTemplateUtils, oAppRegistryEntry);
				};
			}
			
			fnRegisterAppComponent = testableHelper.testableStatic(fnRegisterAppComponent, "TemplateComponent_RegisterAppComponent");
			
			return {
				// This method assembles a Template that can be used in Smart Template applications.
				// Thereby, getMethods, sComponentName, and oComponentDefinition describe the behaviour of the component in detail.
				// More precisely the meaning of the parameters is as follows:
				// - sComponentName is the name of the component that realizes the Template. More precisely it describes the path (.-separated) 
				//   to a folder which contains a file Component.js which is built using this function.
				// - oComponentDefinition is an object containing a property metadata which contains the metadata for the TemplateComponent realizing the Template.
				// - getMethods is a function that will be called once for each instance of the Template to be assembled.
				//   The parameters passed to this function are oComponent and oComponentUtils
				//   ~ oComponent is the instance of class TemplateComponent that is created (can be considered as 'this')
				//   ~ oComponentUtils is an instance of class ComponentUtils that provides certain reusable tasks
				//   the return value of getMethods must be an object possessing the following (optional) properties:
				//   ~ init: a function that serves as init for the component. Note that it is not necessary to call init of a superclass
				//   ~ onActivate: a function that is called when the component becomes visible resp. its binding should be adapted.
				//     For non-list Templates parameter sBindingPath is passed to this function.
				//   ~ refreshBinding: a function with parameters bUnconditional and mRefreshInfos which is called when the data displayed by the
				//     Template instance should be refreshed. If bUnconditional is true, all data should be refreshed. Otherwise mRefreshInfos
				//     contains detailed information which data should be refreshed.
				//   ~ getUrlParameterInfo a function that allows the instance to pass its current state into url parameters. getUrlParameterInfo must return
				//     a Promise which resolves to a map mapping parameter names onto arrays of their values.
				//   ~ presetDisplayMode: a function possessing parameters iDisplayMode and bIsAlreadyDisplayed that may be called before onActivate is called.
				//     iDisplayMode contains information whether the data shown in the instance will be in display, edit, or create mode.
				//     bIsAlreadyDisplayed contains the information whether the Template instance is already inplace or will be navigated to.
				//   ~ updateBindingContext: a function that is called when a new binding context is available for the Template instance.
				//     Note that when switching to change (edit or create) this method will only be called in draft scenarios, since in non-draft scenarios
				//     no binding context from the backend is retrieved.
				//   ~ oControllerSpecification: an object specifying the controller for the view realizing this Template.
				//     For more details see comments at function fnGetViewControllerCreator
				getTemplateComponent: function(getMethods, sComponentName, oComponentDefinition) {
					var sComponentNameFull = sComponentName + ".Component";
					oComponentDefinition = oComponentDefinition || {};

					oComponentDefinition.init = function() {
						var oComponentRegistryEntry = this.getComponentData().registryEntry;
						oComponentRegistryEntry.viewRegisterd = new Promise(function(fnResolve) {
							oComponentRegistryEntry.fnViewRegisteredResolve = fnResolve;
						});
						oComponentRegistryEntry.oViewRenderdPromise = new Promise(function(fnResolve) {
							oComponentRegistryEntry.fnViewRenderdResolve = fnResolve;
						});
						(TemplateComponent.prototype.init || jQuery.noop).apply(this, arguments);
						oComponentRegistryEntry.componentName = sComponentNameFull;
						oComponentRegistryEntry.oComponent = this;
						oComponentRegistryEntry.activationTakt = 0;
						oComponentRegistryEntry.utils = new ComponentUtils(this, oComponentRegistryEntry);
						oComponentRegistryEntry.methods = getMethods(this, oComponentRegistryEntry.utils) || {};
						oComponentRegistryEntry.oGenericData = {
							mRefreshInfos: {}
						};
						(oComponentRegistryEntry.methods.init || jQuery.noop)();
					};

					oComponentDefinition.exit = function() {
						var sId = this.getId();
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						var oAppRegistryEntry = getAppRegistryEntry(this.getAppComponent());
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.exit || jQuery.noop)();
						delete oAppRegistryEntry.oTemplateContract.componentRegistry[sId];
						(TemplateComponent.prototype.exit || jQuery.noop).apply(this, arguments);
					};

					oComponentDefinition.onBeforeRendering = function() {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						(TemplateComponent.prototype.onBeforeRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.onBeforeRendering || jQuery.noop)();
					};
					
					oComponentDefinition.onAfterRendering = function() {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						if (oComponentRegistryEntry.fnViewRenderdResolve && !oComponentRegistryEntry.fnViewRegisteredResolve){
							oComponentRegistryEntry.fnViewRenderdResolve();
							delete oComponentRegistryEntry.fnViewRenderdResolve;
						}
						(TemplateComponent.prototype.onAfterRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.onAftereRendering || jQuery.noop)();
					};

					oComponentDefinition.onActivate = function(sBindingPath, bIsComponentCurrentlyActive) {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						oComponentRegistryEntry.sCurrentBindingPath = sBindingPath;
						var fnActivate = function() {
							oComponentRegistryEntry.utils.bindComponent(oComponentRegistryEntry.sCurrentBindingPath, bIsComponentCurrentlyActive);
							var bUnconditionalRefresh = this.getIsRefreshRequired();
							if (bUnconditionalRefresh || !jQuery.isEmptyObject(oComponentRegistryEntry.oGenericData.mRefreshInfos)) {
								(oComponentRegistryEntry.methods.refreshBinding || jQuery.noop)(bUnconditionalRefresh,
									bUnconditionalRefresh ? {} :
									oComponentRegistryEntry.oGenericData.mRefreshInfos);
								this.setIsRefreshRequired(false);
								oComponentRegistryEntry.oGenericData.mRefreshInfos = {};
							}
							return (oComponentRegistryEntry.methods.onActivate || jQuery.noop)(sBindingPath);
						}.bind(this);
						// If view is not registered yet ( == oComponentRegistryEntry.fnViewRegisteredResolve still available) perform fnActivate asyncronously, otherwise synchronosly
						return oComponentRegistryEntry.fnViewRegisteredResolve ? oComponentRegistryEntry.viewRegisterd.then(fnActivate) : (fnActivate() || Promise.resolve());
					};

					oComponentDefinition.setContainer = function() {
						TemplateComponent.prototype.setContainer.apply(this, arguments);
						var sId = this.getId();
						var oAppComponent = this.getAppComponent();
						var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

						if (!oAppRegistryEntry.oTemplateContract.componentRegistry[sId]) {
							var oComponentData = this.getComponentData();
							var oComponentRegistryEntry = oComponentData.registryEntry;
							delete oComponentData.registryEntry;
							oComponentRegistryEntry.componentCreateResolve(this);
							delete oComponentRegistryEntry.componentCreateResolve;
							oAppRegistryEntry.oTemplateContract.componentRegistry[sId] = oComponentRegistryEntry;

							oAppRegistryEntry.oTemplateContract.oBusyHelper.setBusy(oComponentRegistryEntry.viewRegisterd, true);
							oComponentRegistryEntry.oApplication = oAppRegistryEntry.application;
							oComponentRegistryEntry.createViewController = fnGetViewControllerCreator(oComponentRegistryEntry);
							(oComponentRegistryEntry.methods.setContainer || jQuery.noop)();
						}
					};

					oComponentDefinition.onDeactivate = jQuery.noop;

					return TemplateComponent.extend(sComponentNameFull, oComponentDefinition);
				},
				
				// This method is called by class AppComponent when it is initialized. It hands over a registration method to this class.
				// This registration method can be used to register an AppComponent in the central AppComponentRegistry handled by this class.
				// See fnRegisterAppComponent for details.
				// Note that getRegisterAppComponent can only be called once.
				getRegisterAppComponent: function(){
					var fnRet = fnRegisterAppComponent;
					fnRegisterAppComponent = null;
					return fnRet;
				},                                

				getExtensionAPIPromise: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					if (!oComponentRegistryEntry) {
						return Promise.reject();
					}
					return oComponentRegistryEntry.viewRegisterd.then(function() {
						return oComponentRegistryEntry.oController.extensionAPI;
					});
				},

				// Obsolete. Use getExtensionAPIPromise instead.
				getExtensionAPI: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					return oComponentRegistryEntry && oComponentRegistryEntry.oController && oComponentRegistryEntry.oController.extensionAPI;
				}
			};
		});
}; // end of sap/suite/ui/generic/template/lib/TemplateAssembler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.commons.HeaderContainer'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.HeaderCell'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.HeaderCellItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.ODataModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.FilterProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.PersonalizableInfo'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.SmartVariantManagement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar",[
	"sap/suite/ui/commons/HeaderContainer", "sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
	"sap/suite/ui/commons/HeaderCell", "sap/suite/ui/commons/HeaderCellItem", "sap/m/Label",
	"sap/ui/comp/odata/ODataModelUtil",
	"sap/ui/comp/smartfilterbar/FilterProvider", "sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider",
	"sap/ui/comp/smartvariants/PersonalizableInfo", "sap/ui/comp/smartvariants/SmartVariantManagement",
	"sap/ui/model/Filter",
	"sap/m/OverflowToolbar", "sap/m/ToolbarSpacer", "sap/m/Link", "sap/ui/comp/odata/MetadataAnalyser",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"

], function(HeaderContainer, VisualFilterDialogController,
		HeaderCell, HeaderCellItem, Label,
		ODataModelUtil,
		FilterProvider, VisualFilterProvider,
		PersonalizableInfo, SmartVariantManagement,
		Filter,
		OverflowToolbar, ToolbarSpacer, Link, MetadataAnalyser, FilterUtil, V4Terms) {
	"use strict";

	var SmartVisualFilterBar = HeaderContainer.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar", {
		metadata: {
			properties: {
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				config: { type: "object", group: "Misc", defaultValue: null },
				persistencyKey: { type: "string", group: "Misc", defaultValue: null }
			},
			associations: {
				smartVariant: { type: "sap.ui.core.Control", multiple: false }
			},
			events: {
				filterChange: {}
			}
		},
		renderer: {}
	});

	SmartVisualFilterBar.prototype.init = function() {
		if (HeaderContainer.prototype.init)
			HeaderContainer.prototype.init.apply(this, arguments);

		// Default settings
		this.labelHeight = 2.0;
		this.compHeight = 7.9;
		this.cellHeightPadding = 1;
		this.cellHeight = (this.labelHeight + this.compHeight + this.cellHeightPadding) + "rem";  // Add cell padding due to the focus on the chart being clipped by the outer cell container, shouldn't have to do this
		this.cellWidth = 320;
		this._dialogFilters = {};
		this._compactFilters = {};
		this._oVariantConfig = {};
		this._smartFilterContext;

		this.addStyleClass("sapSuiteVisualFilterBar");
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the visual filter bar.
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype.propagateProperties = function() {
		HeaderContainer.prototype.propagateProperties.apply(this, arguments);
		this._initMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the visual filter bar
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._initMetadata = function() {
		if (!this.bIsInitialised)
			ODataModelUtil.handleModelInit(this, this._onMetadataInit);
	};

	/**
	 * Called once the necessary Model metadata is available
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._onMetadataInit = function() {
		if (this.bIsInitialised)
			return;

		this._annoProvider = this._createVisualFilterProvider();
		if (!this._annoProvider)
			return;

		this.bIsInitialised = true;
		this._updateFilterBar();
	};

	/**
	 * Creates an instance of the visual filter provider
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._createVisualFilterProvider = function() {
		var model = this.getModel();
		var entitySet = this.getEntitySet();

		if (!model || !entitySet) // Model and entity set must be available
			return null;

		return new VisualFilterProvider(this);
	};

	/*
	* @private
	* obtains the string for '_BASIC' group from i18n property
	* @return {string}
	*/
	SmartVisualFilterBar.prototype._getBasicGroupTitle = function() {
		return this.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE");
	};

	SmartVisualFilterBar.prototype._getFieldGroupForProperty = function(oEntityType,sCurrentPropName) {
		return this._annoProvider ? this._annoProvider._getFieldGroupForProperty(oEntityType,sCurrentPropName) : undefined;
	};

	SmartVisualFilterBar.prototype._getGroupList = function() {
		return this._annoProvider ? this._annoProvider.getGroupList() : [];
	};

	SmartVisualFilterBar.prototype._getGroupMap = function() {
		return this._annoProvider ? this._annoProvider.getGroupMap() : {};
	};

	SmartVisualFilterBar.prototype._getMeasureMap = function() {
		return this._annoProvider ? this._annoProvider.getMeasureMap() : {};
	};

	SmartVisualFilterBar.prototype._getDimensionMap = function() {
		return this._annoProvider ? this._annoProvider.getDimensionMap() : {};
	};

	/*
	* @public
	* sets the smart filter bar reference in the visual filter
	* so that it can be accessed if required
	* @param {object} oContext reference to smart filter bar
	* @return {void}
	*/
	SmartVisualFilterBar.prototype.setSmartFilterContext = function(oContext) {
		this._smartFilterContext = oContext;
	};

	SmartVisualFilterBar.prototype._updateFilterBar = function() {
		// Centrally handle the various settings: Application Configuration, OData Annotations, Variant settings...
		// Order of precedence, highest to lowest, highest precedence overwrites the lower precedence:
		//   1. Variant
		//   2. OData Annotations


		var annoSettings = this._getAnnotationSettings();
		if (annoSettings && annoSettings.filterList) {
			var config = this._convertSettingsToConfig(annoSettings);
		} else {
			// Default, no filters
			this.setConfig({
				filterCompList: []
			});
			return;
		}
		// Variant store the variables of a property (Measure, sort order, chart type, shown in filterbar)
		var variantJSON = this._getVariantConfig();
		if (variantJSON && variantJSON.config) {
			// merge variant into config based on property
			config.filterCompList.forEach(function (element) {
				// if parent property exists in variant json override config
				if (variantJSON.config[element.component.properties.parentProperty]) {
					jQuery.extend(true, element, variantJSON.config[element.component.properties.parentProperty]);
				}
			});
			// store config only for later use after smart filter bar variant load when mergeCompactFilters is called
			this._oVariantConfig = config;
			return;
		}
		this.setConfig(config);
		return;

	};

	SmartVisualFilterBar.prototype._getAnnotationSettings = function() {
		return this._annoProvider ? this._annoProvider.getVisualFilterConfig() : null;
	};

	/*
	* @private
	* Convert setting from annotations to config for visual filter
	* @param {object} settings - parsed annotations data from visual filter provider
	* @param {boolean} bIsVariantConfig	- if called  by variant management to get variant config
	* @return {object} config used to render the charts or get variant management object based on bIsVariantConfig
	*/
	SmartVisualFilterBar.prototype._convertSettingsToConfig = function(settings, bIsVariantConfig) {
		var config = {
			filterCompList: []
		};

		// Include group information, prepare the group information by field
		var groupList = this._getGroupList();
		var groupByFieldName = {};
		for (var i = 0; i < groupList.length; i++) {
			var group = groupList[i];

			for (var j = 0; j < group.fieldList.length; j++) {
				var field = group.fieldList[j];
				groupByFieldName[field.name] = {
					name: group.name,
					label: group.label
				};
			}
		}

		// By default the basic group is all available in the filter dialog, so get all field names and in the shownInFilterDialog, set the value to true if in this list
		var groupMap = this._getGroupMap();
		var basicGroup = groupMap["_BASIC"];
		var basicFieldNameList = [];
		if (basicGroup && basicGroup.fieldList) {
			for (var i = 0; i < basicGroup.fieldList.length; i++)
				basicFieldNameList.push(basicGroup.fieldList[i].name);
		}

		var measureMap = this._getMeasureMap(),
			filterList = settings.filterList,
			oVariantConfig = {};
		for (var i = 0; i < filterList.length; i++) {
			var filterCfg = filterList[i];

			var dimField = filterCfg.dimension.field;

			var measureField = measureMap[filterCfg.collectionPath][filterCfg.measure.field];
			var bIsCurrency = false;

			if (measureField.fieldInfo[V4Terms.ISOCurrency]){
				bIsCurrency = true;
			}

			var oConfigObject = {
				shownInFilterBar: filterCfg.selected,
				component: {
					type: filterCfg.type,
					properties: {
						sortOrder : filterCfg.sortOrder,
						measureField: filterCfg.measure.field,
						parentProperty: filterCfg.parentProperty ? filterCfg.parentProperty : undefined
					}
				}
			};

			if (!bIsVariantConfig) {
				// if not variant management add other properties to config object
				var oConfigExtendedObject = {
					shownInFilterDialog: filterCfg.selected || basicFieldNameList.indexOf(dimField) != -1,
					cellHeight: this.cellHeight,
					group: groupByFieldName[filterCfg.parentProperty],
					component: {
						cellHeight: this.compHeight + "rem",
						properties: {
							scaleFactor : filterCfg.scaleFactor,
							filterRestriction: filterCfg.filterRestriction,
							width: this.cellWidth + "px",
							height: this.compHeight + "rem",
							entitySet: filterCfg.collectionPath ? filterCfg.collectionPath : this.getEntitySet(),
							dimensionField: dimField,
							dimensionFieldDisplay: filterCfg.dimension.fieldDisplay,
							dimensionFilter: filterCfg.dimensionFilter,
							measureSortDescending: filterCfg.measure.descending === true || filterCfg.measure.descending == "true",
							unitField: measureField ? measureField.fieldInfo.unit : "",
							isCurrency: bIsCurrency,
							isMandatory: filterCfg.isMandatory,
							outParameter: filterCfg.outParameter ? filterCfg.outParameter : undefined,
							inParameters: filterCfg.inParameters ? filterCfg.inParameters : undefined
						}
					}
				};
				jQuery.extend(true, oConfigObject, oConfigExtendedObject);
				// convert the filter properties from the configuration (variant, annotation) into the control specific properties
				config.filterCompList.push(oConfigObject);
			} else {
				// create variant management object
				oVariantConfig[filterCfg.parentProperty] = oConfigObject;
			}
		}

		return bIsVariantConfig ? oVariantConfig : config;
	};

	SmartVisualFilterBar.prototype._setVariantModified = function() {
		if (this._oVariantManagement)
			this._oVariantManagement.currentVariantSetModified(true);
	};

	SmartVisualFilterBar.prototype._onFilterChange = function(ev) {
		this._setVariantModified();


		// Propagate to the other filters and the Smart Chart/Table
		var itemList = this.getItems();
		var filterItemList = [];
		for (var i = 0; i < itemList.length; i++)
			filterItemList.push(itemList[i].getSouth().getContent());

		// Fire the external filter change event
		// event handler should always call setCompactFilterData with compact filter data
		this.fireFilterChange({
			filterList: ev.getParameter('filterList'),
			property: ev.getParameter('property'),
			filterRestriction: ev.getParameter('filterRestriction')
		});
		// update internal filter item
		// done after external filter change so that compact filter data is set
		// and can be used
		this._updateFilterItemList(filterItemList);
	};

	/**
	 * @private
	 * Create filter query for each filter Item based on the
	 * filter item in the bar. Also updated selected indicator for filter item
	 *
	 * @param {array} filterItemList - list of al filter item instances in the bar
	 * @returns {void}
	 */
	SmartVisualFilterBar.prototype._updateFilterItemList = function(filterItemList) {
		var filterItemWithFilters = [];

		for (var i = 0; i < filterItemList.length; i++) {
			var filterItem = filterItemList[i];

			var filterList = filterItem.getDimensionFilter();

			if (!filterList)
				filterList = [];

			filterItemWithFilters.push({
				dimensionField: filterItem.getDimensionField(),
				inParameters: filterItem.getInParameters(),
				parentProperty: filterItem.getParentProperty(),
				filterList: filterList,
				filterItem: filterItem
			});
		}

		for (var i = 0; i < filterItemWithFilters.length; i++) {
			var filterItem = filterItemWithFilters[i].filterItem;

			var filter = this._combineFilterLists(filterItemWithFilters, i);
			filterItem.setDimensionFilterExternal(filter);
		}
	};

	SmartVisualFilterBar.prototype._combineFilterLists = function(filterItemList, excludeIndex) {
		// Get all of the filter values, at the same time join filter values from different filter items which have the same dimension field
		var oPropertyFilters = {},
			inParams = (filterItemList.length > 0 && filterItemList[excludeIndex] && filterItemList[excludeIndex].inParameters) ? filterItemList[excludeIndex].inParameters : undefined,
			parentProperty = (filterItemList.length > 0 && filterItemList[excludeIndex] && filterItemList[excludeIndex].parentProperty) ? filterItemList[excludeIndex].parentProperty : undefined,
			mappedLocalDataProperty = [];

		var filters = new sap.ui.model.Filter({
			aFilters: [],
			and: true
		});

		if (inParams) {
			var replaceSPath = function (element) {
				// change property path from local data property to value list property
				// since query for filter item will be made to collection path
				element.sPath = valueListProperty;
			};
			// reverse loop since for compact filters also the last in param is considered first
			for (var key = (inParams.length - 1); key > -1; key--) {
				var localDataProperty = inParams[key].localDataProperty,
				valueListProperty = inParams[key].valueListProperty;

				// Build the set of filters


				if (localDataProperty !== parentProperty && mappedLocalDataProperty.indexOf(localDataProperty) === -1) {
					// get filters for property from smart filter bar
					oPropertyFilters = this._smartFilterContext.getFilters([localDataProperty]);
					if (oPropertyFilters && oPropertyFilters.length > 0) {
						// since filter is for specific property hence
						// there will always be one global filter with index 0
						if (oPropertyFilters[0].aFilters) {
							// if in param property is filter-restriction=multi-value
							oPropertyFilters[0].aFilters.forEach(replaceSPath.bind(this));
						} else {
							// if in param property is filter-restriction=single-value or filter-restriction=interval
							replaceSPath(oPropertyFilters[0]);
						}
						// map of properties that have already been considered for in params
						mappedLocalDataProperty.push(localDataProperty);
						// add to main filter with and condition
						filters.aFilters.push(oPropertyFilters[0]);
					}
				}
			}
		}
		return filters;
	};

	SmartVisualFilterBar.prototype._createTitleToolbar = function(props, filterItem) {
		var title = new Label({
			text: {
				path: "i18n>VIS_FILTER_TITLE_MD",
				formatter: function() {
					return filterItem.getTitle();
				}
			}
		});

		var selectedBtn = new Link({
			text: {
				path: "_filter>/" + filterItem.getParentProperty(),
				formatter: function(oContext) {
					if (oContext) {
						var count = 0;
						if (typeof oContext === "object") {	//For multi value
							if (oContext.value) {	//Add single value
								count++;
							}
							//Add items
							if (oContext.items) {	//items can be null
								count += oContext.items.length;
							}
							//Add ranges
							if (oContext.ranges) {	//ranges can be null
								count += oContext.ranges.length;
							}
						} else {	//For single value, it can be string or int
							count++;
						}

						var i18n = this.getModel("i18n");
						var rb = i18n.getResourceBundle();
						return rb.getText("VISUAL_FILTER_SELECTED_FILTERS", [count]);
					}
					return "";
				}
			},
			visible: {
				path: "_filter>/" + filterItem.getParentProperty(),
				formatter: function(oContext) {
					if (!oContext) { //No filter set for this property
						return false;
					}
					//Handle multiple values
					if (typeof oContext === "object") {
						return (oContext.value || (oContext.items && oContext.items.length) || (oContext.ranges && oContext.ranges.length)) ? true : false;
					} else if (oContext) { //Single value fields
						return true;
					}
					return false;
				}
			},
			enabled: "{= !${_templPriv>/alp/visualFilter/" + filterItem.getParentProperty() + "/hasMultiUnit} }",
			press: function(ev) {
				VisualFilterDialogController.launchAllFiltersPopup(selectedBtn, filterItem, ev.getSource().getModel('i18n'));
			},
			layoutData: new sap.m.ToolbarLayoutData({
				shrinkable: false
			})
		});

		var toolbar = new OverflowToolbar({
			design: sap.m.ToolbarDesign.Transparent,
			width: this.cellWidth + "px",
			content: [
				title,
				new ToolbarSpacer(),
				selectedBtn
			]
		});

		toolbar.addStyleClass("alr_visualFilterTitleToolbar");

		return toolbar;
	};

	SmartVisualFilterBar.prototype.getTitleByFilterItemConfig = function(filterConfig, unitValue, scaleValue) { // used when the filter item + data is not present, ideally called on the filter item iteslf
		var props = filterConfig.component.properties;
		var entitySet = props.entitySet;
		var model = this.getModel();

		if (!model)
			return "";

		var basePath = "/" + entitySet + "/";
		var measureLabel = model.getData(basePath + props.measureField + "/#@sap:label");
		var dimLabel = model.getData(basePath + props.dimensionField + "/#@sap:label");

		// Get the Unit
		if (!unitValue)
			unitValue = "";

		// Get the Scale factor
		if (!scaleValue)
			 scaleValue = "";

		var titleText = "";
		var rb = this.getModel("i18n").getResourceBundle();
		if (scaleValue && unitValue)
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT_CURR", [measureLabel, dimLabel, scaleValue, unitValue]);
		else if (unitValue)
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, unitValue]);
		else if (scaleValue)
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, scaleValue]);
		else
			titleText = rb.getText("VIS_FILTER_TITLE_MD", [measureLabel, dimLabel]);

		return titleText;
	};

	SmartVisualFilterBar.prototype._onTitleChange = function(ev) {
		var source = ev.getSource();

		var itemList = this.getItems();
		for (var i = 0; i < itemList.length; i++) {
			var item = itemList[i];

			var filterItem = item.getSouth().getContent();
			if (filterItem == source) {
				var labelItem = item.getNorth().getContent().getContent()[0];
				// If Mandatory Property the add an (*)
				if (source.getProperty("isMandatory")) {
					labelItem.addStyleClass("sapMLabelRequired");
				}
				labelItem.setText(filterItem.getTitle());
				labelItem.setTooltip(filterItem.getTitle());
				break;
			}
		}
	};

	SmartVisualFilterBar.prototype._getSupportedFilterItemList = function() {
		// predefined set of controls, order preserved
		if (!this._supportedFilterItemList) {
			this._supportedFilterItemList = [{
					type: "Bar",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartBar",
					iconLink: "sap-icon://horizontal-bar-chart",
					textKey: "VISUAL_FILTER_CHART_TYPE_BAR"
				}, {
					type: "Donut",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartDonut",
					iconLink: "sap-icon://donut-chart",
					textKey: "VISUAL_FILTER_CHART_TYPE_Donut"
				}, {
					type: "Line",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartLine",
					iconLink: "sap-icon://line-charts",
					textKey: "VISUAL_FILTER_CHART_TYPE_Line"
				}
			];
		}

		return this._supportedFilterItemList;
	};

	SmartVisualFilterBar.prototype._getSupportedFilterItemMap = function() {
		if (!this._supportedFilterItemMap) {
			this._supportedFilterItemMap = {};

			var compList = this._getSupportedFilterItemList();
			for (var i = 0; i < compList.length; i++) {
				var comp = compList[i];
				this._supportedFilterItemMap[comp.type] = comp;
			}
		}

		return this._supportedFilterItemMap;
	};

	/**
	* set config to create visual filters
	* Will be called after all annotations + variants + application settings have been combined, will create the visual filters
	*
	* @param {object} config - config to create visual filters
	* @param {boolean} bSilentFilterChange - if true visual filter change is not fired
	* @param {boolean} bShouldNotUpdateFilterItem - whether filter item should be updated
	* @returns {object} config for the visual filter to determine behaviour of each filter item
	*/
	SmartVisualFilterBar.prototype.setConfig = function(config, bSilentFilterChange, bShouldNotUpdateFilterItem) {
		var lastConfig = this.getProperty("config");
		this.setProperty("config", config);

		this.removeAllItems();

		if (!config.filterCompList) {
			jQuery.sap.log.warning("Expecting a filterCompList as part of the configuration");
			return;
		}

		var dimMap = this._getDimensionMap();

		var filterItemList = [];
		for (var i = 0; i < config.filterCompList.length; i++) {
			var cellConfig = config.filterCompList[i];
			if (!cellConfig.shownInFilterBar) // check if should be rendered in the filterbar, or only shown in the dialog
				continue;

			var compConfig = cellConfig.component;
			compConfig.type = this._resolveChartType(compConfig.type);

			// Setup the properties
			var properties = jQuery.extend({}, compConfig.properties); // make a copy so changes can be made

			// Dealing with DateTime some charts require a different chart or axis type
			var dimField = dimMap[properties.entitySet][properties.dimensionField];
			properties.dimensionFieldIsDateTime = dimField ? dimField.fieldInfo.type == "Edm.DateTime" : false;

			// Component initialization
			var compInst = this._createFilterItemOfType(compConfig.type, properties);
			compInst.setModel(this.getModel());
			compInst.setModel(this.getModel("_templPriv"), "_templPriv");
			// Attach events
			if (compInst.attachFilterChange)
				compInst.attachFilterChange(this._onFilterChange, this);

			if (compInst.attachTitleChange)
				compInst.attachTitleChange(this._onTitleChange, this);

			// Label initialization, part of the title is derived from the component properties
			var toolbar = this._createTitleToolbar(properties, compInst);

			// Add the label and component to the Header cell
			var cell = new HeaderCell({
				height: cellConfig.cellHeight,
				north: new HeaderCellItem({
					height: this.labelHeight + "rem",
					content: toolbar
				}),
				south: new HeaderCellItem({
					height: compConfig.cellHeight,
					content: compInst
				})
			});

			filterItemList.push(compInst);

			this.addItem(cell);
		}

		if (lastConfig && !bSilentFilterChange) {
			this.fireFilterChange({
				filterItemList: filterItemList
			});
		}

		if (!bShouldNotUpdateFilterItem) {
			// update filter items as per in params
			this._updateFilterItemList(filterItemList);
		}
	};

	SmartVisualFilterBar.prototype._resolveChartType = function(type) {
		var compMap = this._getSupportedFilterItemMap();

		var compInfo = compMap[type];
		if (!compInfo) {
			var aType;
			for (aType in compMap) {
				compInfo = compMap[aType];
				break;
			}

			jQuery.sap.log.error("Could not resolve the filter component type: \"" + type + "\", falling back to " + aType);
			type = aType;
		}

		return type;
	};

	SmartVisualFilterBar.prototype._createFilterItemOfType = function(type, properties) {
		var compMap = this._getSupportedFilterItemMap();
		var compInfo = compMap[type];

		var className = compInfo.className;

		jQuery.sap.require(className);
		var compClass = jQuery.sap.getObject(className);

		var compInst = new compClass(properties); // Instantiate and apply properties
		return compInst;
	};
	/**
	* Returns config for visual filter
	*
	* @param {boolean} bIsVariantConfig - if config should be for variant or not
	* @returns {object} config for the visual filter to determine behaviour of each filter item
	*/
	SmartVisualFilterBar.prototype.getConfig = function(bIsVariantConfig) {
		var config = this.getProperty("config"),
			oVariantConfig = {};

		if (!config)
			return {filterCompList: []};

		var itemIndex = 0;
		var itemList = this.getItems();
		for (var i = 0; i < config.filterCompList.length; i++) {
			var compConfig = config.filterCompList[i];
			if (bIsVariantConfig) {
				// generate config for variant management
				oVariantConfig[compConfig.component.properties.parentProperty] = {
					shownInFilterBar: compConfig.shownInFilterBar,
					component: {
						type: compConfig.component.type,
						properties: {
							measureField: compConfig.component.properties.measureField,
							sortOrder: compConfig.component.properties.sortOrder,
							parentProperty: compConfig.component.properties.parentProperty
						}
					}
				};
			} else {
				// generate config for visual filter bar
				if (!compConfig.shownInFilterBar) // If not shown, then no changes to collect, so go to the next
					continue;

				// there will be a corresponding UI entry, ask for the latest configuration from each
				var item = itemList[itemIndex];
				if (!item) {
					jQuery.sap.log.error("The configured selected filter bar items do not correspond to the actual filter bar items.  Could be an error during initialization, e.g. a chart class not found");
					return {filterCompList: []};
				}

				itemIndex++;

				var compInst = item.getSouth().getContent();
				compConfig.component.properties = compInst.getP13NConfig();
			}
		}

		return bIsVariantConfig ? oVariantConfig : config;
	};

	/////////////////////
	// Variant handling
	/////////////////////
	SmartVisualFilterBar.prototype.setSmartVariant = function(oSmartVariantId) {
		this.setAssociation("smartVariant", oSmartVariantId);

		if (oSmartVariantId) {
	        var oPersInfo = new PersonalizableInfo({
	            type: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar",
	            keyName: "persistencyKey"
	        });
			oPersInfo.setControl(this);
		}

		this._oVariantManagement = this._getVariantManagementControl(oSmartVariantId);
		if (this._oVariantManagement) {
			this._oVariantManagement.addPersonalizableControl(oPersInfo);
			this._oVariantManagement.initialise(this._variantInitialised, this);
			this._oVariantManagement.attachSave(this._onVariantSave, this);
		}
		else if (oSmartVariantId) {
			if (typeof oSmartVariantId === "string")
				jQuery.sap.log.error("Variant with id=" + oSmartVariantId + " cannot be found");
			else if (oSmartVariantId instanceof sap.ui.core.Control)
				jQuery.sap.log.error("Variant with id=" + oSmartVariantId.getId() + " cannot be found");
		}
		else {
			jQuery.sap.log.error("Missing SmartVariant");
		}
	};

	SmartVisualFilterBar.prototype._getVariantManagementControl = function(oSmartVariantId) {
		var oSmartVariantControl = null;
		if (oSmartVariantId) {
			oSmartVariantControl = typeof oSmartVariantId == "string" ? sap.ui.getCore().byId(oSmartVariantId) : oSmartVariantId;

			if (oSmartVariantControl && !(oSmartVariantControl instanceof SmartVariantManagement)) {
				jQuery.sap.log.error("Control with the id=" + oSmartVariantId.getId ? oSmartVariantId.getId() : oSmartVariantId + " not of expected type");
				return null;
			}
		}

		return oSmartVariantControl;
	};

	SmartVisualFilterBar.prototype._variantInitialised = function() {
		if (!this._oCurrentVariant)
			this._oCurrentVariant = "STANDARD";
	};

	SmartVisualFilterBar.prototype._onVariantSave = function() {
		if (this._oCurrentVariant == "STANDARD") // changes were made, so get the current configuration
			this._oCurrentVariant = {
				config: this.getConfig(true)
			};
	};


	SmartVisualFilterBar.prototype.applyVariant = function(oVariantJSON, sContext) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant == "STANDARD")
			this._oCurrentVariant = null;
		// check if this is old variant
		// old variant used to store filterCompList in config
		if (this._oCurrentVariant && this._oCurrentVariant.config && this._oCurrentVariant.config.filterCompList) {
			// if old variant, set config to null so that annotations can be considered for the chart
			this._oCurrentVariant.config = null;
		}

		if (this._oCurrentVariant && this._oCurrentVariant.config == null) { // then STANDARD, but STANDARD variant was requested before annotations were ready
			var annoSettings = this._getAnnotationSettings();
			if (annoSettings && annoSettings.filterList) {
				this._oCurrentVariant.config = this._convertSettingsToConfig(annoSettings, true);
			}
		}

		this._updateFilterBar();

		//Need to unmark the dirty flag because this is framework
		//applying the variant and firing filter to update table/chart
		if (this._oVariantManagement) {
			this._oVariantManagement.currentVariantSetModified(false);
		}
	};

	SmartVisualFilterBar.prototype._getVariantConfig = function() {
		return this._oCurrentVariant;
	};

	SmartVisualFilterBar.prototype.fetchVariant = function() {
		if (!this._oCurrentVariant || this._oCurrentVariant == "STANDARD") {
			var annoSettings = this._getAnnotationSettings();
			if (annoSettings && annoSettings.filterList) {
				this._oCurrentVariant = {
					config: this._convertSettingsToConfig(annoSettings, true)
				};
				return this._oCurrentVariant;
			}
			else {
				return {
					config: null
				};
			}
		}

		return {
			config: this.getConfig(true)
		};
	};

	//Equivalent of clear filters in compact filter
	SmartVisualFilterBar.prototype.clearFilters = function(){
		//var config = this.getConfig();
		var config = this.getProperty('config');
		for (var i = 0; i < config.filterCompList.length; i++){
			var filterItem = config.filterCompList[i];
			filterItem.component.properties.dimensionFilter = [];
		}
		this.setConfig(config);
	};
	/**
	 * Takes fitler data from compact filter and updates config for visual filter items
	 * Also triggers changes to other visual filter items and main content area.
	 *
	 * @param {object} compactpactFilters - compact filter data to be merged with visual filter
	 * @param {boolean} bIsTriggerdAfterVariantSFBLoad - whether triggered after SFB varaiant load or not
	 * @returns {void}
	 */
	SmartVisualFilterBar.prototype.mergeCompactFilters = function(compactFilters, bIsTriggerdAfterVariantSFBLoad){
		this._compactFilters = {};
		//this.clearFilters();
		if (!compactFilters) {
			return;
		}
		this._compactFilters = compactFilters;
		var aAllFilterConfig,
			oDimensionFilterByParentProp = {},
			aPropertiesMergedFromCompact = [];

		var oConfig = ( bIsTriggerdAfterVariantSFBLoad && FilterUtil.readProperty(this, "_oVariantConfig.filterCompList.length")) ? this._oVariantConfig : this.getConfig();

		if (Object.keys(oConfig).length < 0) {
			jQuery.sap.log.error('Config not ready for visual filter');
			return;
		}
		// check if config exists
		if (oConfig && oConfig.filterCompList.length > 0) {
			aAllFilterConfig = oConfig.filterCompList;

			for (var i = 0; i < aAllFilterConfig.length; i++) {
				var oFilterItemProps = aAllFilterConfig[i].component.properties,
					sOutParameter = oFilterItemProps.outParameter,
					sParentProperty = oFilterItemProps.parentProperty,
					aDimFilterList = [];

				// clearing all filters
				oFilterItemProps.dimensionFilter = [];

				if (sOutParameter) {
					var aDimFilterList = [];

					// check compact filters for out parameter
					// because out parameter is responsible for interaction between
					// visual filter and main area
					if (this._compactFilters[sOutParameter]) {
						aPropertiesMergedFromCompact.push(sOutParameter);
						aDimFilterList = this._addToFiltersFromCompact(sOutParameter);
					}
				}

				oFilterItemProps.dimensionFilter = aDimFilterList;

				oDimensionFilterByParentProp[sParentProperty] = aDimFilterList;
			}
		}
		// set config to re render filter items as per compact filters
		// pass true so that filter change is not triggered
		this.setConfig(oConfig, true);
	};
	/**
	 * @private
	 * creates filters from compact filter data
	 *
	 * @param {string} sProperty - property from compact filter data to be added to filter
	 * @returns {array} array of filters for one property with key and display value
	 */
	SmartVisualFilterBar.prototype._addToFiltersFromCompact = function (sProperty) {
		var aFilters = [],
		// The below check is to add all type of filters other than the object and undefined ones to the  filter dialog from Compact filter
		bIsSingleValue = this._compactFilters[sProperty] && (typeof this._compactFilters[sProperty] !== 'object'),
		aFilterValueItems = this._compactFilters[sProperty].items,
		aFilterValueRanges = this._compactFilters[sProperty].ranges,
		aFilterValue = this._compactFilters[sProperty].value;

		//Interval based filters
		if (this._compactFilters[sProperty].low) {
			var sLabel = this._compactFilters[sProperty].low;
			if (this._compactFilters[sProperty].high) {
				sLabel += "-" + this._compactFilters[sProperty].high;
			}
			aFilters.push({
				dimValue: sLabel,
				dimValueDisplay: sLabel
			});
		}

		if (bIsSingleValue) {
			// for sap:filter-restriction="single-value"
			aFilters.push({
				dimValue: this._compactFilters[sProperty],
				dimValueDisplay: this._compactFilters[sProperty]
			});
		}

		if (aFilterValueItems) { // for sap:filter-restriction="multi-value"
			for (var j = 0; j < aFilterValueItems.length; j++) {
				aFilters.push({
					dimValue: aFilterValueItems[j].key,
					dimValueDisplay: aFilterValueItems[j].text
				});
			}
		}

		// consider complex conditions/ defined conditions as well
		if (aFilterValueRanges) {
			for (var j = 0; j < aFilterValueRanges.length; j++) {
				//filterByDim[property].push(filterValues[j].key);
				aFilters.push({
					dimValue: aFilterValueRanges[j].tokenText ? aFilterValueRanges[j].tokenText : FilterUtil.createTitleFromCode(aFilterValueRanges[j]),
					dimValueDisplay: aFilterValueRanges[j].tokenText,
					keyField: aFilterValueRanges[j].keyField,
					operation: aFilterValueRanges[j].operation,
					tokenText: aFilterValueRanges[j].tokenText,
					value1: aFilterValueRanges[j].value1,
					value2: aFilterValueRanges[j].value2
				});
			}
		}

		// consider user typed in values
		if (aFilterValue) {
			aFilters.push({
				dimValue: aFilterValue,
				dimValueDisplay: aFilterValue,
				bIsUserTypedIn: true
			});
		}

		return aFilters;
	};

	return SmartVisualFilterBar;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController') ) {

jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController",["sap/m/SegmentedButtonItem", "sap/m/Button", "sap/m/ButtonType", "sap/m/Text", "sap/m/Dialog", "sap/m/SegmentedButton",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
	"sap/ui/core/mvc/Controller", "sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
	function(
		SegmentedButtonItem, Button, ButtonType, Text,
		Dialog, SegmentedButton, VisualFilterDialogController,
		Controller, FilterUtil) {
		"use strict";

		var FILTER_MODE_VISUAL = "visual",
			FILTER_MODE_COMPACT = "compact";

		var fbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController", {
			init: function(oState) {
				this.compactFilterData = {};
				var me = this;

				var defaultFilterMode = oState.oController.getOwnerComponent().getDefaultFilterMode();

				me.oState = oState;

				me.oState.oSmartFilterbar.attachSwitchToVisualFilter(function() {
					//After SmartFilter dialog is saved and closed, merge compact filter changes and open VFD.
					var oCompactFilterData = me.oState.oSmartFilterbar.getFilterData();
					// store compact filter data to restore later in case of switching filter modes in the dialog
					me.compactFilterData = jQuery.extend(true, {}, oCompactFilterData);
					me.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
					me.oState.visualFilterDialogContainer.launchDialog();
				});

				//If the App Developer wants to hide Visual Filter, switch to Compact Filter
				if (defaultFilterMode === FILTER_MODE_VISUAL && me.oState.hideVisualFilter) {
					jQuery.sap.log.error("Visual filter is hidden defaulting to compact");
					defaultFilterMode = FILTER_MODE_COMPACT;
				}

				var bShowGoButtonOnFilter = me.oState.oController.getOwnerComponent().getShowGoButtonOnFilterBar() ? true : false;
				oState.oSmartFilterbar.setShowGoOnFB(bShowGoButtonOnFilter);
				//live mode on when go button is disabled
				//TODO: should be moved to view fragment
				oState.oSmartFilterbar.setLiveMode(!bShowGoButtonOnFilter);
				//Show messages only if GO button is enabled
				oState.oSmartFilterbar.setShowMessages(bShowGoButtonOnFilter);
				//load data on initial launch for live mode
				//TODO: should be moved to view fragment
				oState.oSmartTable.setEnableAutoBinding(!bShowGoButtonOnFilter);

				//Update filter model so that UI can adapt on each filter change
				oState.oSmartFilterbar.attachFilterChange(function(oEvent) {
					var sfb  = oEvent.getSource();
					var filterModel = this.oState.oController.getOwnerComponent().getModel("_filter");
					filterModel.setData(sfb.getFilterData());
					var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
					this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData, true);
				}.bind(this));

				//Enable the toolbars once search is triggered
				oState.oSmartFilterbar.attachSearch(function(oEvent) {
					this.oState.oSmartChart.getToolbar().setEnabled(true);
					this.oState.oSmartTable.getCustomToolbar().setEnabled(true);
				}, this);

				//TODO:Hiding "AdaptFilter" button using private API , public API to be used when available
				me.oState.oSmartFilterbar._oFiltersButton.setVisible(false);

				oState.oHeader = oState.oPage.getHeader();
				oState.oTitle = oState.oPage.getTitle();
				//Title press handler
				var hideFilterSwitch = function(){
					if (!this.oState.oPage.getHeaderExpanded())
						this.oState.alr_visualFilterToolbar.addContent(this.filterSwitch);
					else
						this.oState.alr_visualFilterToolbar.removeContent(this.filterSwitch);
					oState.oTitle.detachEvent("_titlePress",hideFilterSwitch);
				};

				oState.oTitle.attachEvent("_titlePress",hideFilterSwitch,this);


				if (oState.oSmartFilterbar) {
					oState.oSmartFilterbar.addStyleClass("alrFilterbar");
				}

				if (oState.oKpiTagContainer) {
				  oState.alr_filterContainer.removeContent(oState.oKpiTagContainer);
				  oState.oKpiTagContainer.addStyleClass("alrKpiTagContainer");
				}

				if (oState.alr_visualFilterBar) {
					oState.alr_visualFilterBar.setSmartFilterContext(this.oState.oSmartFilterbar);
					oState.alr_visualFilterBar.attachFilterChange(this._onVisualFilterChange.bind(this));
				}
				oState.oSmartFilterbar.attachAfterVariantLoad(this._afterVariantLoad.bind(this));
			},
			/**
			 * Filter bar callback after variant load
			 *
			 * @returns {void}
			 * @private
			 */
			_afterVariantLoad : function () {
				// merge smart filter data to visual filter after variant load
				var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
				this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData, true);
			},
			/**
			 * Callback for visual filter change event
			 *
			 * @param {object} oEvent - object generated by the visual filter filterChange event
			 * @returns {void}
			 * @private
			 */
			 _onVisualFilterChange : function (oEvent) {
				var aFilterList,
				sProperty,
				sFilterRestriction,
				aFilterItemList,
				oPropertyFilterData,
				oContext = this,
				oCompactFilterData = oContext.oState.oSmartFilterbar.getFilterData(true),
				bRestoreCompactFilter = oEvent.getParameter('bRestoreCompactFilter');
				// get all properties
				if (oEvent.getParameter('filterItemList')) {
					// if mulitple filter properties are changed
					// example - click on VFD dialog GO, clear VF
					aFilterItemList = oEvent.getParameter('filterItemList');

					aFilterItemList.forEach(function(filterItem) {
						// get visual filters for property from chart
						aFilterList = filterItem.getDimensionFilter();
						// get property for which filters have changed
						sProperty = filterItem.getParentProperty();
						// get filter restriction of sProperty
						sFilterRestriction = filterItem.getFilterRestriction();
						// get filter data for property from compact filter
						if (oCompactFilterData) {
							oPropertyFilterData = oCompactFilterData[sProperty] ? oCompactFilterData[sProperty] : (oCompactFilterData[sProperty] !== undefined);
						}
						// if it oPropertyFilterData exists modify it as per aFilters
						if (oPropertyFilterData) {
							//compact filter returns null for single value properties.
							//Hence oCompactFilterData[sProperty] for a single value property is null
							//adding check for undefined.
							oPropertyFilterData = oContext._modifyCompactFilterData(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData);
							// replace property filter data in compact filter data
							// with modified filter data for property
							oCompactFilterData[sProperty] = oPropertyFilterData;
						}
					});
				} else {
					// if single filter property is changed
					// get visual filters for property from chart
					aFilterList = oEvent.getParameter('filterList');
					// get property for which filters have changed
					sProperty = oEvent.getParameter('property');
					// get filter restriction of sProperty
					sFilterRestriction = oEvent.getParameter('filterRestriction');
					// get filter data for property from compact filter
					if (oCompactFilterData) {
						oPropertyFilterData = oCompactFilterData[sProperty] ? oCompactFilterData[sProperty] : (oCompactFilterData[sProperty] !== undefined);
					}
					// if it oPropertyFilterData exists modify it as per aFilters
					if (oPropertyFilterData) {
						oPropertyFilterData = this._modifyCompactFilterData(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData);
						// replace property filter data in compact filter data
						// with modified filter data for property
						oCompactFilterData[sProperty] = oPropertyFilterData;
					}
				}

				if (bRestoreCompactFilter) {
					// restore compact filter by replacing filter data
					this.oState.oSmartFilterbar.setFilterData(this.compactFilterData, true);
					
					// incase only _CUSTOM filter is being set to smart filter bar
					// filter change is not fired and hence _filter model is not updated
					// and neither merge is not called therefore manually call merge
					// and update filter model
					if (this.compactFilterData['_CUSTOM'] && Object.keys(this.compactFilterData).length === 1) {
						// restore compact filter by replacing filter data
						var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData(),
						filterModel = this.oState.oController.getOwnerComponent().getModel("_filter");
						this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
						filterModel.setData(oCompactFilterData);

					}
				} else {
					// set compact filter data which in turn will trigger filterChange event for Filter Bar
					this.oState.oSmartFilterbar.setFilterData(oCompactFilterData);
				}
				//in live mode manually trigger search after setting filterData to the compactFilter
				if (this.oState.oSmartFilterbar.isLiveMode())
					this.oState.oSmartFilterbar.search();
				// set compact filter data in visual filter
				//this.oState.alr_visualFilterBar.setCompactFilterData(oCompactFilterData);
			},
			/**
			 * Callback for visua filter change event
			 *
			 * @param {object} oEvent - object generated by the visual filter filterChange event
			 * @returns {void}
			 * @private
			 */
			 _modifyCompactFilterData: function(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData) {
				if (sFilterRestriction === "multiple") {
					// if filter Restriction is multi-value
					if (oPropertyFilterData) {
						oPropertyFilterData.items = [];
						oPropertyFilterData.ranges = [];
						oPropertyFilterData.value = null;
						// push visual filter selection in compact filter
						if (aFilterList && aFilterList.length > 0) {
							aFilterList.forEach(function (element, index, array) {
								if (element.tokenText) {
									//if this is a complex filter
									oPropertyFilterData.ranges.push({
										keyField: element.keyField,
										operation: element.operation,
										tokenText: element.tokenText,
										value1: element.value1,
										value2: element.value2
									});
								} else if (element.bIsUserTypedIn) {
									// if user typed-in value
									oPropertyFilterData.value = element.dimValue;
								} else {
									// if items filter (type ahead/value help)
									oPropertyFilterData.items.push({
										key: element.dimValue,
										text: FilterUtil.createTitle(element.dimValueDisplay, element.dimValue)
									});
								}
							});
						}
					}
				} else {
					// if filter restriction is single-value
					// replace previous selection
					oPropertyFilterData = null;
					if (aFilterList.length	> 0) {
						oPropertyFilterData	= aFilterList[0].dimValue;
					}
				}
				return oPropertyFilterData;
			},
			//go button search event handler
			onGoFilter: function(){
				this.oState.oSmartFilterbar.search();
			},
			setDefaultFilter:function(mode) {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/filterMode', mode);
				this.handleFilterSwitch(mode); // Don't want to trigger a mode change event, this will cause the data to be reloaded too earlier, the reload will happen when variants are processed
			},
			createFilterSwitch:function() {
				var me = this,
					filterSwitchItems = [
						new SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:FILTER_MODE_COMPACT, tooltip:"{i18n>FILTER_COMPACT}"})
					];

				if (!me.oState.hideVisualFilter) {
					filterSwitchItems.push(
						new SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:FILTER_MODE_VISUAL, tooltip:"{i18n>FILTER_VISUAL}"})
					);
				}

				var filterSwitch = new SegmentedButton({
					width:"inherit",
					selectedKey:"{_templPriv>/alp/filterMode}",
					items: filterSwitchItems,
					layoutData: new sap.m.OverflowToolbarLayoutData({
						priority:sap.m.OverflowToolbarPriority.NeverOverflow
					})
				});
				filterSwitch.attachSelect(function(ev){
					me.handleFilterSwitch(ev.getParameter("key"), ev.oSource._bApplyingVariant);
					me.oState.oController._templateEventHandlers.onSegmentButtonPressed();
				});
				return filterSwitch;
			},
			/**
			 * press handler for filter switch button
			 *
			 * @param {string} mode - compact or visual
			 * @param {boolean} bApplyingVariant - true is variant is being applied
			 *
			 * @returns {void}
			 */
			handleFilterSwitch:function(mode, bApplyingVariant) {
				var me = this,
					//oCompactFilterData,
					oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");

				//TODO-DPL - completed code - all the below code are new
				if (!me.oState.filterSwitch && !me.oState.hideVisualFilter) {
					me.oState.filterSwitch = me.createFilterSwitch();
					me.oState.alr_visualFilterToolbar.addContent(me.oState.filterSwitch);
				}
				if (oTemplatePrivate.getProperty('/alp/filterMode') == FILTER_MODE_VISUAL) {
					me.oState.alr_compactFilterContainer.addStyleClass("sapUiHidden");
					me.oState.alr_visualFilterContainer.removeStyleClass("sapUiHidden");
					// merge compact filter with visual filter
					// if (!bApplyingVariant) {
					// 	oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
					// 	this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
					// }

				}
				else if (oTemplatePrivate.getProperty('/alp/filterMode') == FILTER_MODE_COMPACT) {
					if (me.oState.oSmartFilterbar._oToolbar)
						me.oState.oSmartFilterbar._oToolbar.addStyleClass("sapUiHidden");
					if (!me.oState.hideVisualFilter) {
						me.oState.alr_visualFilterContainer.addStyleClass("sapUiHidden");
					}
					me.oState.alr_compactFilterContainer.removeStyleClass("sapUiHidden");
				}

				me.oState.oSmartFilterbar.setMode(mode); // Wait until everything is ready to update the mode
			},
			//check the filter mode and then show the corresponding filter dialog
			showDialog: function(){
				var me = this,
					oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_COMPACT) {
					me.oState.oSmartFilterbar.showFilterDialog();
				} else if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
					// store compact filter data to restore later
					this.compactFilterData = jQuery.extend(true, {}, this.oState.oSmartFilterbar.getFilterData());
					me.oState.visualFilterDialogContainer.launchDialog.call(me.oState.visualFilterDialogContainer);
				}
			},
			clearFilters:function(){
				var me = this,
					oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_COMPACT) {
					//Clear all filters
					var oFilterData = me.oState.oSmartFilterbar.getFilterData();
					for (var prop in oFilterData) {
						if (oFilterData.hasOwnProperty( prop ) ) {
							delete oFilterData[prop];
						}
					}
					me.oState.oSmartFilterbar.setFilterData(oFilterData, true);
					//me.oState.oSmartFilterbar._clearFilterFields();
				} else if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
					me.oState.alr_visualFilterBar.clearFilters();
				}
				//clear the table selections
				this.oState.chartController.updateTable();
			}
		});
		return fbController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation"
], function(TemplateAssembler, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy = {};
		
		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					getVisibleSelectionsWithDefaults: function() {
						// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
						// (see method setSmartFilterBarDefaults) and which are currently visible.
						// This is needed by _getBackNavigationParameters in the NavigationController.
						var aVisibleFields = [];
							// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
						// aVisibleFields.push("KeyDate");
						// }
						return aVisibleFields;
					},

					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onInitSmartFilterBarExtension: function(oEvent) {},
					getCustomAppStateDataExtension: function(oCustomData) {},
					restoreCustomAppStateDataExtension: function(oCustomData) {},
					onBeforeRebindTableExtension: function(oEvent) {},
					onListNavigationExtension: function(oEvent) {}
				}
			},
			init: function() {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				oTemplatePrivate.setProperty("/listReport", {}); // Note that component properties are not yet available here
			},
			onActivate: function() {
				oComponentUtils.setBackNavigation(undefined);
				oViewProxy.onComponentActivate();
			},
			refreshBinding: function(bUnconditional) {
				oViewProxy.refreshBinding();
			},
			getUrlParameterInfo: function() {
				return oViewProxy.getUrlParameterInfo();
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.ListReport", {
			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.ListReport.view.ListReport"
					},
					"treeTable": "boolean",
					"gridTable": "boolean",
					"condensedTableLayout": "boolean",
					"multiSelect": "boolean",
					"smartVariantManagement": "boolean",      // true = one variant for filter bar and table, false = separate variants for filter and table
					"hideTableVariantManagement": "boolean"
				},
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.DraftIndicatorState'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/Component",["sap/m/DraftIndicatorState", "sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation"
], function(DraftIndicatorState, TemplateAssembler, TemplateComponent, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy = {};
		var sHeaderTitle; // initialized on demand

		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onBeforeRebindTableExtension: function(oEvent) {}
				}
			},
			init: function(){
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				oTemplatePrivateModel.setProperty("/objectPage", {
					displayMode: 0 // 0 = unknown, 1 = display, 2 = edit, 4 = add, 6 = change (edit or add)
				});
			},
			getTemplateSpecificParameters: function(){
				return {
					breadCrumb: oComponentUtils.getBreadCrumbInfo()	
				};
			},
			getTitle: function(){
				if (!sHeaderTitle){
				// determine title
					var oMetaModel = oComponent.getModel().getMetaModel();
					var oModelEntitySet = oMetaModel.getODataEntitySet(oComponent.getEntitySet());
					var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);
					var oHeaderInfo = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
					sHeaderTitle = (oHeaderInfo && oHeaderInfo.TypeName && oHeaderInfo.TypeName.String) || "";
					if (sHeaderTitle.substr(0,7) === "{@i18n>") {
						var sSubstr = sHeaderTitle.substring(1, sHeaderTitle.length - 1);
						var aString = sSubstr.split(">");
						sHeaderTitle = oComponent.getModel(aString[0]).getResourceBundle().getText(aString[1]);
					}
				}
				return sHeaderTitle;
			},
			onActivate: function(sBindingPath) {
				// preliminary: in draft case maybe on first time property is not set
				var oUIModel = oComponent.getModel("ui");
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				if (oComponentUtils.getEditableNDC()) {
					oUIModel.setProperty("/editable", true);
					var bCreateMode = oComponentUtils.isNonDraftCreate();
					oUIModel.setProperty("/createMode", bCreateMode);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", bCreateMode ? 4 : 2);
				} else if (!oViewProxy.isDraftEnabled()) {
					oUIModel.setProperty("/editable", false);
					oUIModel.setProperty("/createMode", false);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", 1);
				}
				oViewProxy.onComponentActivate(sBindingPath);
			},
			refreshBinding: function(bUnconditional, mRefreshInfos) {
				// default implementation: refresh element binding
				if (bUnconditional) {
					var oElementBinding = oComponent.getComponentContainer().getElementBinding();
					if (oElementBinding) {
						oElementBinding.refresh(true);
					}
				} else {
					oViewProxy.refreshFacets(mRefreshInfos);
				}
			},
			presetDisplayMode: function(iDisplayMode, bIsAlreadyDisplayed){
				if (bIsAlreadyDisplayed){
					return; // wait for the data to come for the case that the view is already displayed
				}
				var oTemplateModel = oComponentUtils.getTemplatePrivateModel();
				oTemplateModel.setProperty("/objectPage/displayMode", iDisplayMode);
			},
			
			// This method is called when a new binding context has been retrieved for this Component.
			// If the entity is draft enabled this happens whenever a different instance is displayed or the edit status changes.
			// If the entity is not draft enabled this only happens when a different instance is displayed.
			// It does not happen when changing to edit mode or creating a new instance. In this case the adjustment of the JSON models is already done in onActivate.
			updateBindingContext: function() {

				var oBindingContext = oComponent.getBindingContext();
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				var oContextInfo = oComponentUtils.registerContext(oBindingContext);
				// set draft status to blank according to UI decision
				oTemplatePrivateModel.setProperty("/generic/draftIndicatorState", DraftIndicatorState.Clear);

				//call the rebindTable explicitly since the smart table enableAutoBinding=true 
				//didn't trigger GET of 1:n all cases
				oViewProxy.refreshFacets(null, true);
				
				var oActiveEntity = oBindingContext.getObject();
				var oUIModel = oComponent.getModel("ui");
				var bIsEditable;
				if (oContextInfo.bIsDraft) {
					bIsEditable = true;
					oUIModel.setProperty("/enabled", true);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", oContextInfo.bIsCreate ? 4 : 2);
				} else {
					bIsEditable = oComponentUtils.getEditableNDC();
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", bIsEditable ? 2 : 1);
					var oDraftController = oComponent.getAppComponent().getTransactionController().getDraftController();
					var oDraftContext = oDraftController.getDraftContext();
					if (oActiveEntity.hasOwnProperty("HasDraftEntity") && oActiveEntity.HasDraftEntity &&
						oDraftContext.hasSiblingEntity(oComponent.getEntitySet())) {
						oUIModel.setProperty("/enabled", false);
						var oModel = oComponent.getModel();
						var oReadDraftInfoPromise = new Promise(function(fnResolve, fnReject) {
							oModel.read(
								oBindingContext.getPath(), {
									urlParameters: {
										"$expand": "SiblingEntity,DraftAdministrativeData"
									},
									success: fnResolve,
									error: fnReject
								});
						});
						var oBusyHelper = oComponentUtils.getBusyHelper();
						oBusyHelper.setBusy(oReadDraftInfoPromise);
						oReadDraftInfoPromise.then(
							function(oResponseData) {
								var oSiblingContext = oModel.getContext(
									"/" + oModel.getKey(oResponseData.SiblingEntity));
								if (oSiblingContext) {
									oViewProxy.draftResume(oSiblingContext, oActiveEntity,
										oResponseData.DraftAdministrativeData);
								}
								// enable the buttons
								oUIModel.setProperty("/enabled", true);
							},
							function(oError) {
								// open: error handling
							}
						);
					} else {
						// enable the buttons
						oUIModel.setProperty("/enabled", true);
					}
				}
				oUIModel.setProperty("/createMode", oContextInfo.bIsCreate);
				oUIModel.setProperty("/editable", bIsEditable);
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.ObjectPage", {

			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					// reference to smart template
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.ObjectPage.view.Details"
					},
					// shall button "Related Apps" be visible on the object page?
					"showRelatedApps": {
						"type": "boolean",
						"defaultValue": "false"
					},
					// shall it be possible to edit the contents of the header?
					"editableHeaderContent": {
						"type": "boolean",
						"defaultValue": "false"
					},
					"gridTable": "boolean",
					"sections": "object"
				},
				// app descriptor format
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.extensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.extensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui
	.define("sap/suite/ui/generic/template/extensionAPI/extensionAPI",["sap/suite/ui/generic/template/lib/TemplateAssembler"],
		function(TemplateAssembler) {
			"use strict";

			/**
			 * Static access to extension API for Smart Template Application development
			 * @namespace sap.suite.ui.generic.template.extensionAPI.extensionAPI
			 * @public
			 */

			return /** @lends sap.suite.ui.generic.template.extensionAPI.extensionAPI */ {
				/**
				 * @deprecated use <code>getExtensionAPIPromise</code> instead.
				 */
				getExtensionAPI: function(oControl) {
					return TemplateAssembler.getExtensionAPI(oControl);
				},
				
				/**
				 * Get the extension API valid for the specified control embedded in a Smart Template view.  Note that extension API
				 * can also be retrieved directly from the controller of the Smart Template view. Therefore, this method needs only
				 * be called in scenarios where this controller is not directly accessible. The most prominent use case for this would be
				 * the context of a controller of a view extension. In this case it is recommended to pass the extending view to this method. </br>
				 * Note that this method does not return the extension API directly, but a Promise that resolves to the extension API.
				 * Thus, a typical use of this method might look as follows: </br>
				 * <code>extensionAPI.getExtensionAPIPromise(oView).then(function(oExtensionAPI){ oExtensionAPI.someMethod(); });</code>
				 *
				 * @param {sap.ui.core.Control} oControl a control which is embedded into a Smart Template view.
				 * @return {Promise} A <code>Promise</code> which resolves to the extension API for the embedding Smart Template view
				 * @public
				 */
				getExtensionAPIPromise: function(oControl) {
					return TemplateAssembler.getExtensionAPIPromise(oControl);
				}				
			};
		});
}; // end of sap/suite/ui/generic/template/extensionAPI/extensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// This abstract class is used as common base class for all Components implementing a Smart Template based application.
// More precisely, when generating a project for a Smart Template based App a subclass of this class is generated as root component for the project.
//
// An instance of this class represents the Smart Template Application as a whole. Note that this instance is accessible for Template developers, for Break-out developers and even for external tools (e.g. Co-pilot).
// Therefore, the set of (public) methods is reduced to a minimum.
// Note that there are two other instances that represent the application as a whole:
// - the TemplateContract is responsible for data interchange between objects on framework level. Note that no class has been modelled for the TemplateContract.
// - the Application (instance of sap.suite.ui.generic.template.lib.Application) represents the App for Template developers.
// 
// Note that there are additional helper classes which are instantiated once per App (during startup of this class):
// - sap.ui.generic.app.ApplicationController from Denver layer
// - NavigationController, BusyHelper, ViewDependencyHelper from namespace sap.suite.ui.generic.template.lib
// -----------------------------------------------------------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.f.FlexibleColumnLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.ApplicationController'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/AppComponent",[
	"jquery.sap.global",
	"sap/ui/core/UIComponent", "sap/m/NavContainer", 
	"sap/f/FlexibleColumnLayout",
	"sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel", 
	"sap/ui/generic/app/ApplicationController",
	"sap/suite/ui/generic/template/lib/Application",
	"sap/suite/ui/generic/template/lib/BusyHelper",
	"sap/suite/ui/generic/template/lib/NavigationController",
	"sap/suite/ui/generic/template/lib/ProcessObserver",
	"sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/lib/CRUDHelper",
	"sap/suite/ui/generic/template/lib/ViewDependencyHelper",
	"sap/suite/ui/generic/template/lib/testableHelper",
	"sap/suite/ui/generic/template/library"
], function(jQuery, UIComponent, NavContainer, FlexibleColumnLayout, JSONModel, ResourceModel, ApplicationController, 
	Application, BusyHelper, NavigationController,  ProcessObserver, TemplateAssembler, CRUDHelper, ViewDependencyHelper, testableHelper) {
	"use strict";
	
	ApplicationController = testableHelper.observableConstructor(ApplicationController); // make the constructor accessible for unit tests
	
	var DraftIndicatorState = sap.m.DraftIndicatorState; // namespace cannot be imported by sap.ui.define
	
	var fnRegisterAppComponent = TemplateAssembler.getRegisterAppComponent(); // Retrieve the possibility to register at TemplateAssembler
	
	var oRB; // initialized on demand
	function getText() { // static method used to read texts from the i18n-file in the lib folder. Should only be used when no view is available.
		oRB = oRB || new ResourceModel({
			bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n"
		}).getResourceBundle();
		return oRB.getText.apply(oRB, arguments);
	}
	
	function compoundObserver(){
		return new ProcessObserver({ processObservers: [] });
	}
	
	// "Constructor": oAppComponent is the instance to be created. oAppId is an id provided by the testableHelper that can be used to end the productive mode
	function getMethods(oAppComponent, oAppId) {
		
		var	oTemplateContract = { // template contract object which is used for data interchange between framework classes
			oAppComponent: oAppComponent,
			componentRegistry: {},	// registry for all TemplateComponents instantiated in the context of this App
									// maps the ids of these components on an object (called registry entry)
									// The registry entries are instantiated in function fnCreateComponentInstance of NavigationController
									// They are inserted into the registry in method setContainer of TemplateComponent which can actually be found in TemplateAssembler
			aRunningSideEffectExecutions: [], // an array containing Promises for running side-effect executions
			getText: getText,
			mRouteToTemplateComponentPromise: {}, // maps the name of a route onto a Promise that resolves
			                                      // to the TemplateComponent that implements the view the route points to.
			                                      // The Promise is entered into the map in function createRoute of routingHelper
			                                      // Note that the map does not contain entries for the query-routes.
			oTemplatePrivateGlobalModel: (new JSONModel()).setDefaultBindingMode("TwoWay"), // a global model that can be used for declarative binding
			                                                                                // in the whole App as named model _templPrivGlobal.
			                                                                                // In function createGlobalTemplateModel it gets initial data
			                                                                                // and is attached to oAppComponent
			aStateChangers: [] // an array of agents that modify the url in order to store their state
			                   // a state changer can be added via Application.registerStateChanger.
		};
		// the following additional properties are added to TemplateContract later:
		// - oBusyHelper (instance of BusyHelper) by function createContent
		// - oNavigationHost (the navigation control hosting the App) by function createContent
		// - oNavigationControllerProxy an instance providing access to some internal methods of the NavigationController.
		//   It is added in the constructor of the NavigationController.	
		// - sRoutingType constant describing the type of oNavigationHost ("m" = NavContainer, "f" = FlexibleColumnLayout) by function createContent
		// - function createContent adds several instances and arrays of class ProcessObserver, namely:
		//   # oNavigationObserver observes wether any navigation is currently running
		//   # aNavigationObservers only available if App runs in FCL. Contains an observer for each column.
		//   # oHeaderLoadingObserver observes whether any header data are currently loaded. It is started and stopped in ComponentUtils.
		//   # aHeaderLoadingObservers only available if App runs in FCL. Contains an observer for each column.
		//   # oPagesDataLoadedObserver observes whether header data are currently loaded or a navigation is currently running.
		// - oApplicationProxy an 'interface' provided by Application for the framework classes. It is added in the constructor of Application.
		// - oNoOwnTitlePromise a Promise that resolves to the (boolean) information whether the App has no own titlebar. Added in init().
		// - oShellService instance of the ShellService (methods setTitle and setBackNavigation are used). 
		//                 Note that this instance is optional and should only be accessed, when oNoOwnTitlePromise has been resolved.
		//                 It is added (asynchronously) in onInit. 
		// - rootContainer The ComponentContainer for the Component of the root-view. Added in the constructor of the NavigationController.
		//                 Note that this property will be available as soon as the root view is displayed (which may be delayed due to use of deep links).
		// - mEntityTree Initialized (generateRoutingMetadataAndGetRootEntitySet) and filled (function createRoutes) by the routingHelper, while creating the routes.
		//               Maps the names of the entity sets onto objects containing metadata about the target of the route
		//               Metadata properties are: sRouteName (name of the route), parent (name of parent entity set, if existing), level (hierarchy level), children (array containing the names of the child entity sets)
		// - oFlexibleColumnLayoutHandler (instance of FlexibleColumnLayoutHandler) only available if App runs in FCL. Added by function fnStartupRouter of routingHelper
		// - routeViewLevel1 an object containing information about the route to the main object. Properties are pattern and name.
		//                   Added by function createRoute of routingHelper.
		
		var oApplicationController; // instance of sap.ui.generic.app.ApplicationController
		var oNavigationController; // instance of NavigationController
		var fnDeregister; // function to be called to deregister at TemplateContract
		
		// Begin: Private helper methods called in init
		
		function createGlobalTemplateModel(){
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic", {
					draftIndicatorState: DraftIndicatorState.Clear,
					hasOwnTitle: false,
					paginatorInfo: {},
					forceFullscreenCreate: false
			});
			oAppComponent.setModel(oTemplateContract.oTemplatePrivateGlobalModel, "_templPrivGlobal");
			oTemplateContract.oNoOwnTitlePromise.then(function(bNoOwnTitle){
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/hasOwnTitle", !bNoOwnTitle);	
			});
		}

		function attachToApplicationController() {
			oApplicationController.attachEvent("beforeSideEffectExecution", function (oEvent) {
				if (oEvent.getParameter("valueChange") || oEvent.getParameter("fieldControl")) {
					var oPromise = oEvent.getParameter("promise");
					oTemplateContract.oBusyHelper.setBusy(oPromise);
					var i = 0;
					for (; oTemplateContract.aRunningSideEffectExecutions[i]; ){
						i++;
					}
					oTemplateContract.aRunningSideEffectExecutions[i] = oPromise;
					var fnRemovePromise = function(){
						oTemplateContract.aRunningSideEffectExecutions[i] = null;	
					};
					oPromise.then(fnRemovePromise, fnRemovePromise);
				}
			});

			var oTemplatePrivateGlobal = oAppComponent.getModel("_templPrivGlobal");
			var sDraftIndicatorState = "/generic/draftIndicatorState";

			oApplicationController.attachBeforeQueueItemProcess(function (oEvent) {
				if (oEvent.draftSave) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Saving);
				}
			});
			oApplicationController.attachOnQueueCompleted(function () {
				if (oTemplatePrivateGlobal.getProperty(sDraftIndicatorState) === DraftIndicatorState.Saving) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Saved);
				}
			});
			oApplicationController.attachOnQueueFailed(function () {
				if (oTemplatePrivateGlobal.getProperty(sDraftIndicatorState) === DraftIndicatorState.Saving) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Clear);
				}
			});
		}

		function attachToModelPropertyChange(oModel){
			oModel.attachPropertyChange(function(oEvent){
				CRUDHelper.propertyChange(oEvent.getParameter("path"), oEvent.getParameter("context"), oTemplateContract, oAppComponent);
			});
		}		
		// End private helper methods called in init
		
		// Begin: Implementation of standard lifecycle methods
		
		function init(){
			var oAppRegistryEntry = {
				appComponent: oAppComponent,
				oTemplateContract: oTemplateContract,
				application: new Application(oTemplateContract),
				oViewDependencyHelper: new ViewDependencyHelper(oTemplateContract)
			};			
			var oShellServiceFactory = sap.ui.core.service.ServiceFactoryRegistry.get("sap.ushell.ui5service.ShellUIService");
			var oShellServicePromise = oShellServiceFactory && oShellServiceFactory.createInstance();
			oTemplateContract.oNoOwnTitlePromise = oShellServicePromise ? oShellServicePromise.then(function(oService) {
				oTemplateContract.oShellService = oService;
				return oService.getUxdVersion() === 2;
			}) : Promise.resolve(false);
			(UIComponent.prototype.init || jQuery.noop).apply(oAppComponent, arguments);
			oTemplateContract.oBusyHelper.setBusy(oTemplateContract.oNoOwnTitlePromise);
			fnDeregister = fnRegisterAppComponent(oAppRegistryEntry);
			
			var oModel = oAppComponent.getModel();
			// workaround until Modules Factory is available
			oApplicationController = new ApplicationController(oModel);
			createGlobalTemplateModel();
			oNavigationController = new NavigationController(oTemplateContract);

			attachToApplicationController();
			attachToModelPropertyChange(oModel);

			// Error handling for erroneous metadata request
			// TODO replace access to oModel.oMetadata with official API call when available (recheck after 03.2016)
			// TODO move error handling to central place (e.g. create new MessageUtil.js)
			if ( (!oModel.oMetadata || !oModel.oMetadata.isLoaded()) || oModel.oMetadata.isFailed()) {
				oModel.attachMetadataFailed(function() {
					oNavigationController.navigateToMessagePage({
						title: getText("ST_GENERIC_ERROR_TITLE"),
						text: getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE"),
						icon: "sap-icon://message-error",
						description: getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC")
					});
					/* When the application's OData service's metadata document
					 * can't be retrieved or loaded, then none of children components
					 * can load. It is therefore important to look through those components
					 * and resolve their promises to register themselves with a view. */
					for (var childComponent in oTemplateContract.componentRegistry) {
						oTemplateContract.componentRegistry[childComponent].fnViewRegisteredResolve();
					}
				});
			}
			oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", false);
		}
		
		function createContent(){
			// Method must only be called once
			if (oTemplateContract.oNavigationHost){
				return "";
			}
			if (oTemplateContract.sRoutingType === "f"){
				var oManifestEntryGenricApp = oAppComponent.getManifestEntry("sap.ui.generic.app");
				var oFCLSettings = oManifestEntryGenricApp.settings && oManifestEntryGenricApp.settings.flexibleColumnLayout;
				var oFCL = new FlexibleColumnLayout(oFCLSettings);
				oTemplateContract.oNavigationHost = oFCL;
				oTemplateContract.aNavigationObservers = [
					new ProcessObserver({
						processName: "BeginColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachBeginColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterBeginColumnNavigate.bind(oFCL)
					}}), 
					new ProcessObserver({
						processName: "MidColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachMidColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterMidColumnNavigate.bind(oFCL)
					}}), new ProcessObserver({
						processName: "EndColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachEndColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterEndColumnNavigate.bind(oFCL)
					}})
				];
				oTemplateContract.oNavigationObserver = new ProcessObserver({
					processObservers: oTemplateContract.aNavigationObservers	
				});
				oTemplateContract.aHeaderLoadingObservers = [compoundObserver(), compoundObserver(), compoundObserver()];
			} else {
				var oNavContainer = new NavContainer({
					id: oAppComponent.getId() + "-appContent"
				});
				oTemplateContract.oNavigationHost = oNavContainer;
				oTemplateContract.oNavigationObserver = new ProcessObserver({
					processName: "Navigation",
					eventHandlers: {
						attachProcessStart: oNavContainer.attachNavigate.bind(oNavContainer),
						attachProcessStop: oNavContainer.attachAfterNavigate.bind(oNavContainer)
				}});
				oTemplateContract.oNavigationHost.attachAfterNavigate(oTemplateContract.oApplicationProxy.onAfterNavigate);
			}
			oTemplateContract.oHeaderLoadingObserver = new ProcessObserver({
				processObservers: oTemplateContract.aHeaderLoadingObservers || []
			});
			oTemplateContract.oPagesDataLoadedObserver = new ProcessObserver({
				processObservers: [oTemplateContract.oHeaderLoadingObserver, oTemplateContract.oNavigationObserver]
			});
			oTemplateContract.oNavigationHost.addStyleClass(oTemplateContract.oApplicationProxy.getContentDensityClass());
			oTemplateContract.oBusyHelper = new BusyHelper(oTemplateContract);
			oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", true, true);
			return oTemplateContract.oNavigationHost;
		}
		
		function exit() {
			if (oTemplateContract.oNavigationHost) {
				oTemplateContract.oNavigationHost.destroy();
			}
			if (oApplicationController) {
				oApplicationController.destroy();
			}
			if (oNavigationController) {
				oNavigationController.destroy();
			}
			(UIComponent.prototype.exit || jQuery.noop).apply(oAppComponent, arguments);
			fnDeregister();
			testableHelper.endApp(oAppId); // end of productive App
		}
		
		// End: Implementation of standard lifecycle methods
		
		function pagesMap2Array(input) {
			var output = Object.keys(input).map(function(key) {
				var page = input[key];
				//add the key to the array for reference
				//page["id"] = key;
				//Recursive call for nested pages
				if (page.pages) {
					page.pages = pagesMap2Array(page.pages);
				}
				return input[key];
			});
			return output;
		}

		var oConfig; // initialized on demand
		function getConfig() {
			if (!oConfig) {
				var oMeta = oAppComponent.getMetadata();
				oConfig = oMeta.getManifestEntry("sap.ui.generic.app");
				//Version 1.3.0 is made only to have a map in the app. descriptor with the runtime that accepts only pages
				//Background for the map are appdescriptor variants which are based on changes on an app. descriptor
				//Arrays don't work for changes as they do not have a stable identifier besides the position (index)
				//Once we have a runtime that accepts a map we need to increase the version to higher than 1.3.0 e.g. 1.4.0
				if (oConfig._version === "1.3.0" && oConfig.pages && jQuery.isPlainObject(oConfig.pages)) {
					oConfig.pages = pagesMap2Array(oConfig.pages);
				}
			}
			return oConfig;
		}

		var oInternalManifest;  // initialized on demand
		function getInternalManifest() {
			if (!oInternalManifest) {
				//We need to copy the original manifest due to read-only settings of the object
				oInternalManifest = jQuery.extend({}, oAppComponent.getMetadata().getManifest());
				//Overwrite the part with our app. descriptor (see getConfig)
				oInternalManifest["sap.ui.generic.app"] = getConfig();
			}
			return oInternalManifest;
		}

		function getRouterClassName(){
			var oManifestObject = oAppComponent.getManifestObject();
			var oSettings = oManifestObject.getEntry("sap.ui.generic.app").settings;
			oTemplateContract.sRoutingType = (oSettings && oSettings.flexibleColumnLayout) ? "f" : "m";
			return "sap." + oTemplateContract.sRoutingType + ".routing.Router";
		}

		return {
			init: init,
			createContent: createContent,
			exit: exit,
			_getRouterClassName: getRouterClassName,
			getConfig: getConfig,
			getInternalManifest: getInternalManifest,

			getTransactionController: function() {
				return oApplicationController.getTransactionController();
			},

			getApplicationController: function() {
				return oApplicationController;
			},

			/*
			 * Returns the reference to the navigation controller instance that has been created by AppComponent.
			 *
			 * @returns {sap.suite.ui.generic.template.lib.NavigationController} the navigation controller instance
			 * @public
			 */
			getNavigationController: function() {
				return oNavigationController;
			}
		};
	}
	
	return UIComponent.extend("sap.suite.ui.generic.template.lib.AppComponent", {
		metadata: {
			config: {
				title: "SAP UI Application Component", // TODO: This should be set from App descriptor
				fullWidth: true
			},
			properties: {
				forceGlobalRefresh: {
					type: "boolean",
					defaultValue: true
				}
			},
			events: {
				pageDataLoaded: {}
			},
			routing: {
				config: {
					async: true,
					viewType: "XML",
					viewPath: "",
					clearTarget: false
				},
				routes: [],
				targets: []
			},
			library: "sap.suite.ui.generic.template"
		},		
		
		constructor: function() {
			var oAppId = testableHelper.startApp(); // suppress access to private methods in productive coding
			jQuery.extend(this, getMethods(this, oAppId));
			(UIComponent.prototype.constructor || jQuery.noop).apply(this, arguments);
		}
	});	
});
}; // end of sap/suite/ui/generic/template/lib/AppComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.ControllerImplementation') ) {
/* global hasher sap */
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/model/json/JSONModel", "sap/m/ObjectIdentifier", "sap/m/Table",
		"sap/m/Text", "sap/ui/comp/smartfield/SmartField", "sap/ui/generic/app/navigation/service/SelectionVariant",
		"sap/ui/base/EventProvider",
		"sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI", "sap/ui/core/ResizeHandler",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController",
		"sap/suite/ui/generic/template/AnalyticalListPage/control/KpiTag",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
		"sap/suite/ui/generic/template/lib/MessageUtils",
		"sap/m/MessageBox", "sap/ui/table/Table", "sap/ui/table/AnalyticalTable",
		"sap/ui/model/odata/AnnotationHelper",
		"sap/ui/model/analytics/odata4analytics",
		"sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil"
	],
    function(jQuery, BaseObject, JSONModel, ObjectIdentifier, Table, Text, SmartField, SelectionVariant, EventProvider, ExtensionAPI, ResizeHandler, SmartChartController, DetailController,
			FilterBarController, ToolbarController, KpiTagController, KpiTag, VisualFilterBarController, VisualFilterDialogController,MessageUtils, MessageBox, UiTable, AnalyticalTable,
			ODataAnnotationHelper, Analytics, ModelUtil) {
		"use strict";

		// Constants which are used as property names for storing custom filter data and generic filter data
		var customDataPropertyName  = "sap.suite.ui.generic.template.customData",
			genericDataPropertyName = "sap.suite.ui.generic.template.genericData",
			CONTAINER_VIEW_CHART	= "chart",
			FILTER_MODE_VISUAL      = "visual",
			FILTER                  = "Filter";

		function fnNullify(oObject) {
			if (oObject) {
				for (var sProp in oObject) {
					oObject[sProp] = null;
				}
			}
		}

		return {
			getMethods: function(oTemplateUtils, oController) {
				var eventProvider = new EventProvider();
				// Action sheet for share button
				var oShareActionSheet;
				var oState = { // contains attributes oSmartFilterbar and oSmartTable. Initialized in onInit.
					attachSearchButtonPressed: function(oData, fnFunction, oListener) {
						return eventProvider.attachEvent("SearchButtonPressed", oData, fnFunction, oListener);
					},
					detachSearchButtonPressed: function(fnFunction, oListener) {
						return eventProvider.detachEvent("SearchButtonPressed", fnFunction, oListener);
					},
					fireSearchButtonPressed: function(mArguments) {
						return eventProvider.fireEvent("SearchButtonPressed", mArguments);
					}
				};

				// Helper Functions

				function getFilterState() {
					var oCustomAndGenericData = {};
					oCustomAndGenericData[customDataPropertyName] = {};
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
					//Adding chartVariantId , filterMode and containerView to the generic data
					//because of the limitation of NavigationHandler
					oCustomAndGenericData[genericDataPropertyName] = {
						chartVariantId: oState.oSmartChart && oState.oSmartChart.getCurrentVariantId(),
						filterMode: oTemplatePrivate.getProperty('/alp/filterMode'),
						contentView: oTemplatePrivate.getProperty('/alp/contentView'),
						autoHide: oTemplatePrivate.getProperty('/alp/autoHide')
					};
					var oEditStateFilter = oController.byId("editStateFilter");
					if (oEditStateFilter) {
						oCustomAndGenericData[genericDataPropertyName].editStateFilter = oEditStateFilter.getSelectedKey();
					}
					// extension is responsible for retrieving custom filter state. The method has a more generic name
					// for historical reasons (change would be incompatible).
					oController.getCustomAppStateDataExtension(oCustomAndGenericData[customDataPropertyName]);
					return oCustomAndGenericData;
				}

				function getCurrentAppState() {
					/*
					 * Special handling for selection fields, for which defaults are defined: If a field is visible in the
					 * SmartFilterBar and the user has cleared the input value, the field is not included in the selection
					 * variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by
					 * purpose, we have to store the selection with the value "", in order to set it again to an empty value,
					 * when restoring the selection after a back navigation. Otherwise, the default value would be set.
					 */
					var oSelectionVariant = new SelectionVariant(oState.oSmartFilterbar.getDataSuiteFormat());
					var aVisibleFields = oController.getVisibleSelectionsWithDefaults();
					for (var i = 0; i < aVisibleFields.length; i++) {
						if (!oSelectionVariant.getValue(aVisibleFields[i])) {
							oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
						}
					}
					return {
						selectionVariant: oSelectionVariant.toJSONString(),
						tableVariantId: oState.oSmartTable.getCurrentVariantId(),
						customData: getFilterState()
					};
				}

				function fnStoreCurrentAppStateAndAdjustURL(oCurrentAppState) {
					// oCurrentAppState is optional
					// - nothing, if NavigationHandler not available
					// - adjusts URL immediately
					// - stores appState for this URL (asynchronously)
					oCurrentAppState = oCurrentAppState || getCurrentAppState();
					// currently NavigationHandler raises an exception when ushellContainer is not available, should be changed
					// by
					// Denver
					try {
						oTemplateUtils.oCommonUtils.getNavigationHandler().storeInnerAppState(oCurrentAppState);
					} catch (err) {
						jQuery.sap.log.error("AnalyticalListPage.fnStoreCurrentAppStateAndAdjustURL: " + err);
					}
				}

				// -- Begin of methods that are used in onInit only
				function fnSetIsLeaf() {
					var oComponent = oController.getOwnerComponent();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/isLeaf", oComponent.getIsLeaf());
				}

				function fnSetShareModel() {
					var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
					var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";
					// share Model: holds all the sharing relevant texts and info used in the XML view
					var oShareInfo = {
						// BOOKMARK
						bookmarkIcon: sBookmarkIcon,
						bookmarkCustomUrl: function() {
							fnStoreCurrentAppStateAndAdjustURL();
							return hasher.getHash() ? ("#" + hasher.getHash()) : window.location.href;
						},
						bookmarkServiceUrl: function() {
							var oTable = oState.oSmartTable.getTable();
							var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
							return oBinding ? oBinding.getDownloadUrl() + "&$top=0&$inlinecount=allpages" : "";
						},
						// JAM
						isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
					};
					var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
				}
				// -- End of used in onInit only

				function fnRestoreGenericFilterState(oGenericData) {
					if (oGenericData && oGenericData.editStateFilter !== undefined) {
						var oEditStateFilter = oController.byId("editStateFilter");
						if (oEditStateFilter) {
							oEditStateFilter.setSelectedKey((oGenericData.editStateFilter === null) ? 0 : oGenericData.editStateFilter);
						}
					}
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
					if (oGenericData.chartVariantId) {
						oState.oSmartChart.setCurrentVariantId(oGenericData.chartVariantId);
					}
					if (oGenericData.filterMode) {
						oTemplatePrivate.setProperty('/alp/filterMode', oGenericData.filterMode);
						oState.filterBarController.handleFilterSwitch(oGenericData.filterMode);
					}
					if (oGenericData.contentView) {
						oTemplatePrivate.setProperty('/alp/contentView', oGenericData.contentView);
					}
					if (oGenericData.autoHide) {
						oTemplatePrivate.setProperty('/alp/autoHide', oGenericData.autoHide);
						//TODO RC Do we need to refresh table binding to change the highlight / filter behaviour
					}
				}

				// method is responsible for retrieving custom filter state. The correspomding extension-method has a more generic name
				// for historical reasons (change would be incompatible).
				function fnRestoreCustomFilterState(oCustomData) {
					oController.restoreCustomAppStateDataExtension(oCustomData || {});
				}

				// This method is responsible for restoring the data which have been stored via getFilterState.
				// However, it must be taken care of data which have been stored with another (historical) format.
				// Therefore, it is checked whether oCustomAndGenericData possesses two properties with the right names.
				// If this is this case it is assumed that the data have been stored according to curreent logic. Otherwise, it is
				// assumed that the data have been stored with the current logic. Otherwise, it is assumed that the properties have been
				// stored with a logic containing only custom properties (with possible addition of _editStateFilter).
				function fnRestoreFilterState(oCustomAndGenericData) {
					oCustomAndGenericData = oCustomAndGenericData || {};
					if (oCustomAndGenericData.hasOwnProperty(customDataPropertyName) && oCustomAndGenericData.hasOwnProperty(genericDataPropertyName)) {
						fnRestoreGenericFilterState(oCustomAndGenericData[genericDataPropertyName]);
						fnRestoreCustomFilterState(oCustomAndGenericData[customDataPropertyName]);
					} else { // historic format. May still have property _editStateFilter which was used generically.
						if (oCustomAndGenericData._editStateFilter !== undefined) {
							fnRestoreGenericFilterState({
								editStateFilter: oCustomAndGenericData._editStateFilter
							});
							delete oCustomAndGenericData._editStateFilter;
						}
						fnRestoreCustomFilterState(oCustomAndGenericData);
					}
				}

				var oParseNavigationPromise;


				function determineDefaultValues(oEntityType, sTerm) {
					var aProperties = oEntityType && oEntityType.property;
					return aProperties.filter(function(property) {
						return typeof property[sTerm] !== "undefined";
					});
				}

				function createDefaultFilter(oSmartFilterbar) {
					var oModel = oSmartFilterbar.getModel(),
						oMetaModel = oModel && oModel.getMetaModel(),
						oResultEntityType = oMetaModel && oMetaModel.getODataEntityType(oSmartFilterbar.getEntityType()),
						sResultEntityType = oMetaModel && oMetaModel.getODataEntityType(oSmartFilterbar.getEntityType(), true),
						aResultDefaultProperties = oResultEntityType && determineDefaultValues(oResultEntityType, "com.sap.vocabularies.Common.v1.FilterDefaultValue"),
						oDataSuiteFormat, o4AnaModel, oParameterization, oParameterEntitySet, oParameterEntityType,
						oQueryResult, aParameterDefaultProperties = [];

					try {
						//Find the parameter set and check the properties
						o4AnaModel = new Analytics.Model(new Analytics.Model.ReferenceByModel(oModel));
						oQueryResult = o4AnaModel && o4AnaModel.findQueryResultByName(oSmartFilterbar.getEntitySet());
						oParameterization = oQueryResult && oQueryResult.getParameterization();
						oParameterEntitySet = oParameterization && oMetaModel.getODataEntitySet(oParameterization.getEntitySet().getQName());
						oParameterEntityType = oParameterEntitySet && oMetaModel.getODataEntityType(oParameterEntitySet.entityType);
						aParameterDefaultProperties = oParameterEntityType ? determineDefaultValues(oParameterEntityType, "defaultValue") : [];
					} catch (e) {
						jQuery.sap.log.Error(e);
					}

					if (aResultDefaultProperties.length > 0 || aParameterDefaultProperties.length > 0) {
						oDataSuiteFormat = {
							"SelectionVariantID": "default",
							"SelectOptions": [],
							"Parameters": []
						};

						aResultDefaultProperties.forEach(function (property) {
							var oContext = oMetaModel.createBindingContext(sResultEntityType + "/property/[${path:'name'}===\'" + property.name + "']/com.sap.vocabularies.Common.v1.FilterDefaultValue"),
								oSelectOption = {
									"PropertyName": property.name,
									"Ranges": [{
										"Sign": "I",
										"Option": "EQ",
										"Low": ODataAnnotationHelper.format(oContext),
										"High": null
									}]
								};
							oDataSuiteFormat.SelectOptions.push(oSelectOption);
						});

						aParameterDefaultProperties.forEach(function (property) {
							var //oContext = oMetaModel.createBindingContext(sParameterEntityType + "/property/[sap.suite.ui.generic.template===\'" + property.name + "']/DefaultValue"),
								oParameter = {
									"PropertyName": "$Parameter." + property.name,
									"PropertyValue": property.defaultValue//Seems I can't use the formatter here ODataAnnotationHelper.format(oContext)
								};
							oDataSuiteFormat.Parameters.push(oParameter);
						});
					}
					return oDataSuiteFormat;

				}

				function onSmartFilterBarInitialise(oEvent){
					var oSmartFilterbar = oEvent.getSource(),
						oDefaultFilterSuiteFormat = createDefaultFilter(oSmartFilterbar);
					//Set default values if available
					if (oDefaultFilterSuiteFormat) {
						oSmartFilterbar.setDataSuiteFormat(JSON.stringify(oDefaultFilterSuiteFormat), true);
					}
					oParseNavigationPromise = oTemplateUtils.oCommonUtils.getNavigationHandler().parseNavigation();
					oController.onInitSmartFilterBarExtension(oEvent);
				}

				function onSmartFilterBarInitialized(){
					//Do the filter switch only after the initialization
					var defaultFilterMode = oState.oSmartFilterbar.isCurrentVariantStandard() ? oState.oController.getOwnerComponent().getDefaultFilterMode() : oState.oSmartFilterbar.getMode();
					oState.filterBarController.setDefaultFilter(defaultFilterMode);
					oParseNavigationPromise.done(function(oAppData, oURLParameters, sNavType) {
						if (sNavType !== sap.ui.generic.app.navigation.service.NavType.initial) {
							var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
							var oSelectionVariant = new SelectionVariant(oAppData.selectionVariant);
							var aSelectionVariantProperties = oSelectionVariant.getParameterNames().concat(
								oSelectionVariant.getSelectOptionsPropertyNames());
							for (var i = 0; i < aSelectionVariantProperties.length; i++) {
								oState.oSmartFilterbar.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
							}
							//according to BCP 1670373497 and 1670406892 '|| oState.oSmartFilterbar.getCurrentVariantId() === ""' is needed
							if (!bHasOnlyDefaults || oState.oSmartFilterbar.getCurrentVariantId() === "") {
								// A default variant could be loaded.
								// Do not clear oSmartFilterbar.clearVariantSelection and oSmartFilterbar.clear due to BCP 1680012595 is not valid anymore
								// with BCP 1670406892 it was made clear that both clear are needed when this GIT change 1941921 in navigation handler is available
								oState.oSmartFilterbar.clearVariantSelection();
								oState.oSmartFilterbar.clear();
								oState.oSmartFilterbar.setDataSuiteFormat(oAppData.selectionVariant, true);
							}
							if (oAppData.tableVariantId) {
								oState.oSmartTable.setCurrentVariantId(oAppData.tableVariantId);
							}
							//in case of visual filter mode triggering the merge
							var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
							if ( sNavType === sap.ui.generic.app.navigation.service.NavType.xAppState && oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
								var oCompactFilterData = oState.oSmartFilterbar.getFilterData();
								oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
							}
							fnRestoreFilterState(oAppData.customData);
							if (!bHasOnlyDefaults) {
								oState.oSmartFilterbar.search();
							}
						}
					});
					// todo: check for better error handling
					oParseNavigationPromise.fail(function(oError) {
						if (oError instanceof Error) {
							oError.showMessageBox();
						}
					});

					// set filter model so that default values (user settings etc.) can also be accounted for
					var filterModel = oState.oController.getOwnerComponent().getModel("_filter");
					filterModel.setData(oState.oSmartFilterbar.getFilterData());
				}

				// Generation of Event Handlers
				return {
					onInit: function() {
						var oComponent = oController.getOwnerComponent();

						oState.hideVisualFilter = oComponent.getHideVisualFilter();
						oState.hideVisualFilter = (oState.hideVisualFilter === undefined || oState.hideVisualFilter !== true) ? false : true;

						oState.oSmartFilterbar = oController.byId("analyticalListPageFilter");
						oState.oSmartTable = oController.byId("table");
						oState.oPage = oController.byId("page");
						oState.oSmartChart = oController.byId("chart");
						oState.oContentContainer = oController.byId("alr_contentContainer");
						oState.alr_chartContainer = oController.byId("alr_chartContainer");
						oState.alr_detailContainer = oController.byId("alr_detailContainer");
						oState.alr_compactFilterContainer = oController.byId("alr_compactFilterContainer");
						oState.alr_visualFilterContainer = oController.byId("alr_visualFilterContainer");
						oState.alr_visualFilterToolbar = oController.byId("alr_visualFilterToolbar");
						oState.alr_visualFilterBar = oController.byId("alr_visualFilterBar");
						oState.alp_clearButton = oController.byId("alp_clearFilters");
						oState.alr_visualFilterFiltersBtn = oController.byId("alr_visualFilterFiltersButton1");
						oState.alp_goFiltersBtn = oController.byId("alp_goFilters");
						oState.alr_filterContainer = oController.byId("alr_filterContainer");
						oState.alr_pageFooterBar = oController.byId("alr_pageFooterBar");
						//Keep page variant as null when the smart variant is true
						oState.alr_pageVariant = oComponent.getProperty('smartVariantManagement') || oComponent.getProperty('smartVariantManagement') === undefined ? oController.byId("alrPageVariant") : null;
						oState.oKpiTagContainer = oController.byId("alrKpiTagContainer");

						oState.chartController = new SmartChartController();
						oState.detailController = new DetailController();
						oState.toolbarController = new ToolbarController();
						oState.oController = oController;

						oState.filterBarController = new FilterBarController();
						oState.filterBarController.init(oState);
						oState.toolbarController.setState(oState);
						oState.chartController.setState(oState);
						oState.detailController.setState(oState);
						KpiTagController.init(oState);
						if (!oState.hideVisualFilter) {
							oState.visualFilterBarContainer = new VisualFilterBarController();
							oState.visualFilterBarContainer.init(oState);
							oState.visualFilterDialogContainer = new VisualFilterDialogController();
							oState.visualFilterDialogContainer.init(oState);
						}

						fnSetIsLeaf();
						fnSetShareModel();
						if (oState.alp_goFiltersBtn) {
							var bShowGoButtonOnFilter = oComponent.getShowGoButtonOnFilterBar() ? true : false;
							oState.alp_goFiltersBtn.setVisible(bShowGoButtonOnFilter);
						}
						var bShowClearButtonOnFilter = oComponent.getShowClearButtonOnFilterBar() ? true : false;
						oState.alp_clearButton.setVisible(bShowClearButtonOnFilter);
						//Event handler for the Dynamic page title press to hide and show the filterSwitch button
						oState.oTitle.attachEvent("_titlePress",function(){
							if (!oState.oPage.getHeaderExpanded()) {
								oState.alr_visualFilterToolbar.addContent(oState.filterSwitch);
							} else {
								oState.alr_visualFilterToolbar.removeContent(oState.filterSwitch);
							}
						});

						oController.byId("template::FilterText").attachBrowserEvent("click", function () {
							oController.byId("page").setHeaderExpanded(true);
							oState.alr_visualFilterToolbar.addContent(oState.filterSwitch);
						});
						var oTemplatePrivateModel = oComponent.getModel("_templPriv");
						oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", true);

						//TODO: ShareActionSheet is not expected to initialized here but to resolve BCP:1680275658, it is done here for now
						oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.fragments.ShareSheet", {
								shareEmailPressed: function() {
									fnStoreCurrentAppStateAndAdjustURL();
									sap.m.URLHelper.triggerEmail(null, oTemplateUtils.oCommonUtils.getText("EMAIL_HEADER", [oTemplateUtils.oCommonUtils.getText(
										"PAGEHEADER")]), document.URL);
									},
									shareJamPressed: function() {
										fnStoreCurrentAppStateAndAdjustURL();
										var oShareDialog = sap.ui.getCore().createComponent({
											name: "sap.collaboration.components.fiori.sharing.dialog",
											settings: {
												object: {
													id: document.URL,
													share: oTemplateUtils.oCommonUtils.getText("PAGEHEADER")
												}
											}
										});
										oShareDialog.open();
									}
								}, "share", function(oFragment, oShareModel) {
									var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
									oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
									oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
									oShareModel.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
									var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
									oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
								});
						//Making Condense is the default mode in ALP,but in List Report Compact is the default
						//compare the following logic with Application.js->getContentDensityClass:
						var oTable = oState.oSmartTable.getTable();
						var sCompactClass = "sapUiSizeCompact", sCondensedClass = "sapUiSizeCondensed";
						if ( oTable instanceof UiTable || oTable instanceof AnalyticalTable) {
							var oView = oController.getView();
							var oBody = jQuery(document.body);
							if (oBody.hasClass(sCompactClass) || oView.hasStyleClass(sCompactClass)) {
								var bCondensedTableLayout = oComponent.getComponentContainer().getSettings().condensedTableLayout;
								if (bCondensedTableLayout === false) {
									oState.oSmartTable.addStyleClass(sCompactClass);
								} else {
									oState.oSmartTable.addStyleClass(sCondensedClass);
								}
							}
						}

						//Handle AppState changes
						//TODO Move all app state update logic here
						/*var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
						oTemplatePrivate.attachPropertyChange(function() {
							//TODO RC Call update on AppState here as single place instead of multiple places
							//Compare and ignore changes to fullScreen property as it should not update App State
						});*/
					},

					handlers: {
						onBack: function() {
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
								window.history.back();
							}, jQuery.noop, oState);
						},
						addEntry: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false, oState.oSmartFilterbar);
							}, jQuery.noop, oState);
						},
						deleteEntries: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.deleteEntries(oEvent);
						},
						onSelectionChange: function(oEvent) {
							var oTable = oEvent.getSource(),
								oModel = oTable.getModel(),
								oPrivModel = oTable.getModel("_templPriv");

							var oMetaModel = oModel.getMetaModel(),
								oEntitySet = oMetaModel.getODataEntitySet(this.getOwnerComponent().getEntitySet()),
								oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];

							var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";
							var bDeleteEnabled = false;

							var bAllLocked = true;
							var bAllNotDeletable = (sDeletablePath && sDeletablePath !== ""); // if Deletable-Path is undefined, then the items are deletable.

							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length > 0) {
								for (var i = 0; i < aContexts.length; i++) {
									var oObject = oModel.getObject(aContexts[i].getPath());

									// check if item is locked
									if (!(oObject.IsActiveEntity && oObject.HasDraftEntity && oObject.DraftAdministrativeData && oObject.DraftAdministrativeData.InProcessByUser)) {
										bAllLocked = false;
									}
									// check if item is deletable
									if (bAllNotDeletable) {
										if (oModel.getProperty(sDeletablePath, aContexts[i])) {
											bAllNotDeletable = false;
										}
									}
									if (!bAllLocked && !bAllNotDeletable) {
										bDeleteEnabled = true;
										break;
									}
								}
							}
							oPrivModel.setProperty("/listReport/deleteEnabled", bDeleteEnabled);

						},
						onChange: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
						},
						onSmartFieldUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oState);
						},
						onContactDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
						},
						onSmartFilterBarInitialise: onSmartFilterBarInitialise,
						onSmartFilterBarInitialized: onSmartFilterBarInitialized,

						onEditStateFilterChanged: function(oEvent) {
							oEvent.getSource().fireChange();
						},
						onFilterPress: function(oEvent){
							oState.filterBarController.showDialog();
						},
						onClearPress: function(oEvent){
							oState.filterBarController.clearFilters();
							oController.onClearFilterExtension(oEvent);
						},
						//Event handler for go button press
						onGoPress: function(oEvent){
							oState.filterBarController.onGoFilter();
						},
						onSetHeaderState: function(oEvent){
							oState.oPage.setHeaderExpanded(!oState.oPage.getHeaderExpanded());

							if (oState.oPage.getHeaderExpanded()) {
								oEvent.getSource().setText(oTemplateUtils.oCommonUtils.getText("VISUAL_FILTER_HIDE"));
							} else {
								oEvent.getSource().setText(oTemplateUtils.oCommonUtils.getText("VISUAL_FILTER_SHOW"));
							}
						},

						onVisualFilterToggle: function (oEvent) {
							oState.alr_visualFilterBar.setVisible(!oState.alr_visualFilterBar.getVisible());
							if (oState.alr_visualFilterBar.getVisible()) {
								oEvent.getSource().setText(oTemplateUtils.oCommonUtils.getText("VISUAL_FILTER_HIDE"));
							} else {
								oEvent.getSource().setText(oTemplateUtils.oCommonUtils.getText("VISUAL_FILTER_SHOW"));
							}
							// setTimeout is used here to reduce the visual 'jump' of adding/removing style class
							setTimeout(function(){
								oState.alr_visualFilterToolbar.toggleStyleClass("closed");
							},0);
						},

						onBeforeSFBVariantSave: function() {
							/*
							 * When the app is started, the VariantManagement of the SmartFilterBar saves the initial state in the
							 * STANDARD (=default) variant and therefore this event handler is called. So, even though the name of
							 * the event handler is confusing, we need to provide the initial state to allow the SmartFilterBar to
							 * restore it when needed (i.e. when the user clicks on restore). Thus, no check against STANDARD
							 * context is needed!
							 */
							var oCurrentAppState = getCurrentAppState();
							if (!this.getOwnerComponent().getProperty('smartVariantManagement')) {
								delete oCurrentAppState.customData["sap.suite.ui.generic.template.genericData"].contentView;
							}
							oState.oSmartFilterbar.setFilterData({
								_CUSTOM: oCurrentAppState.customData
							});
						},
						onAfterSFBVariantLoad: function() {
							var oData = oState.oSmartFilterbar.getFilterData();
							if (oData._CUSTOM !== undefined) {
								fnRestoreFilterState(oData._CUSTOM);
							} else {
								// make sure that the custom data are nulled for the STANDARD variant
								var oCustomAndGenericData = getFilterState();
								fnNullify(oCustomAndGenericData[customDataPropertyName]);
								fnNullify(oCustomAndGenericData[genericDataPropertyName]);
								fnRestoreFilterState(oCustomAndGenericData);
							}
							// store navigation context
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onBeforeRebindTable: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
							oController.onBeforeRebindTableExtension(oEvent);
						},
						onBeforeRebindChart: function(oEvent) {
							//oState.oSmartChart.oModels = oState.oSmartChart.getChart().oPropagatedProperties.oModels;
						},
						onShowDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oState);
						},
						onListNavigate: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oState);
						},
						onCallActionFromToolBar: function(oEvent) {
							// Since our content toolbar is detached from the SmartTable, the standard util function getParentTable
							// would not work in our case.  We need to override this function when this action is triggered from our table

							var getParentTable_orig = oTemplateUtils.oCommonUtils.getParentTable;
							oTemplateUtils.oCommonUtils.getParentTable = function(){return oState.oSmartTable;};
							oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oState);
							oTemplateUtils.oCommonUtils.getParentTable = getParentTable_orig;
							getParentTable_orig = null;
						},
						onShowDetailsIntent: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetailsIntent(oEvent, oState.oSmartFilterbar);
						},
						onCallActionFromList: function(oEvent) {

						},
						onDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent, oState);
						},
						onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {

							var oEventParameters = oEvent.getParameters();

							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								//Success function
								var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
								if (oNavigationHandler) {
									var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
									oNavigationHandler.processBeforeSmartLinkPopoverOpens(oEventParameters, sSelectionVariant);
								} else {
									oEventParameters.open();
								}
							}, jQuery.noop, oState, jQuery.noop);
						},
						onAssignedFiltersChanged: function(oEvent) {
							if (oEvent && oEvent.getSource()) {
								if (oState && oState.oSmartFilterbar && oState.filterBarController) {
									oController.byId("template::FilterText").setText(oState.oSmartFilterbar.retrieveFiltersWithValuesAsText());
								}
							}
						},
						onToggleFiltersPressed: function() {
							var oComponent = oController.getOwnerComponent();
							var oTemplatePrivateModel = oComponent.getModel("_templPriv");
							oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", (oTemplatePrivateModel.getProperty("/listReport/isHeaderExpanded") === true) ? false : true);
						},

						// ---------------------------------------------
						// store navigation context
						// note: function itself is handled by the corresponding control
						// ---------------------------------------------
						onSearchButtonPressed: function() {
							var oModel = oController.getOwnerComponent().getModel();
							oModel.attachEventOnce("requestSent", function() {
								fnStoreCurrentAppStateAndAdjustURL();
							});
							var fnRequestFailed = function(oEvent) {
								MessageUtils.handleError("getCollection", this, oTemplateUtils.oServices, oEvent.getParameters());
								var oSmartTable = this.getView().byId("table");
								oSmartTable.getTable().setBusy(false);
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, null));
							}.bind(this);
							oModel.attachEvent("requestFailed", fnRequestFailed);
							oModel.attachEventOnce("requestCompleted", function(oEvent) {
								if (oEvent.getParameter("success")) {
									oModel.detachEvent("requestFailed", fnRequestFailed);
								}
							});

							oState.fireSearchButtonPressed();
						},
						onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
							fnStoreCurrentAppStateAndAdjustURL();
							oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oState);
						},
						onAfterTableVariantSave: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterApplyTableVariant: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterChartVariantSave: function() {
						    fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterApplyChartVariant: function() {
						    fnStoreCurrentAppStateAndAdjustURL();
						},
						/**
						* Called from Segmented Button to update the selected key to the variant and adjust the app state
						* @param {boolean} bIgnoreVariant - if true then do not store the selected key in variant
						**/
						onSegmentButtonPressed: function(bIgnoreVariant){
							if (!bIgnoreVariant) {
									oState.oController.byId('alrPageVariant').currentVariantSetModified(true);
									oState.oSmartFilterbar.setFilterData({
										_CUSTOM : getFilterState()
									});
							}
							fnStoreCurrentAppStateAndAdjustURL();
						},
						// ---------------------------------------------
						// END store navigation context
						// ---------------------------------------------

						onShareListReportActionButtonPress: function (oEvent) {
							oShareActionSheet.openBy(oEvent.getSource());
						},
						/**
						 * Called from Determining Button belonging to Chart's Annotaation of type DataFieldForAction
						 * @param  {Object} oEvent object
						 */
						onChartDeterminingDataFieldForAction: function(oEvent) {
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartChart);
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var sBindingPath = this.getView().getBindingPath();
							oTemplateUtils.oCommonUtils.triggerAction(aContexts, sBindingPath, oCustomData);
						},
						/**
						 * Called from Determining Button belonging to Table's Annotation of type DataFieldForAction
						 * @param  {object} oEvent
						 */
						onDeterminingDataFieldForAction: function(oEvent) {
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sTableBindingPath = oState.oSmartTable.getTableBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable);
							}
						},
						/**
						 * Called from Determining Button belonging to Table and Chart Annotation of type DataFieldForIntentBasedNavigation
						 * @param  {object} oEvent
						 */
						onDeterminingDataFieldForIntentBasedNavigation: function(oEvent) {
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oContainerCustomData = oButton.getParent().data(FILTER);
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (oContainerCustomData === CONTAINER_VIEW_CHART){
								aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartChart);
							}
							var bRequiresContext = !(oCustomData.RequiresContext && oCustomData.RequiresContext === "false");
							if (bRequiresContext && aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else if (bRequiresContext && aContexts.length > 1) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_MULTIPLE_ITEMS_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oContext = bRequiresContext ? aContexts[0] : null;
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState);
							}
						},
						/**
						 * Select handler for Auto Hide Segment Button
						 * @param  {Object} oEvent object
						 */
						onAutoHideToggle: function() {
							oState.chartController.updateTable();
							fnStoreCurrentAppStateAndAdjustURL();
						},
						/**
						 * Event handler when SmartControl full screen mode is changed
						 * @param  {sap.ui.base.Event} oEvent object
						 */
						onFullScreenToggled: function(oEvent) {
							var fullScreen = oEvent.getParameter("fullScreen");
							var oTemplatePrivate = oEvent.getSource().getModel("_templPriv");
							oTemplatePrivate.setProperty("/alp/fullScreen", fullScreen);
						}
					},
					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
				};
			}
		};
	});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport",["jquery.sap.global", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel",
		"sap/suite/ui/generic/template/extensionAPI/extensionAPI"
	],
	function(jQuery, UIComponent, JSONModel, extensionAPI) {
		"use strict";
		var ReuseComponentSupport = {},
			sJQueryDebugLogName = "sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport";

		function fnAttachContextReady(oComponent) {
			oComponent.attachEvent("modelContextChange", function() {
				var oDefaultModelBindingContext = oComponent.getBindingContext(),
					oModel = oComponent.getModel(),
					sBindingContextPath = oDefaultModelBindingContext && oDefaultModelBindingContext.getPath();
				jQuery.sap.log.debug(oComponent.getId() + ":" + oComponent.getMetadata().getName() + ": modelAvailable=" + !!oModel +
					" : context=" + sBindingContextPath, sJQueryDebugLogName);
				if (oModel && sBindingContextPath && oComponent._stContext.lastBindingContextPath !== sBindingContextPath) {
					//Remember the current binding context
					oComponent._stContext.lastBindingContextPath = sBindingContextPath;

					//Context has changed
					var fnCurrentCallback = (oComponent._stContext.firstTime && oComponent.stStart) || oComponent.stRefresh;
					if (fnCurrentCallback){
						oComponent._stContext.extensionAPIPromise = oComponent._stContext.extensionAPIPromise || extensionAPI.getExtensionAPIPromise(oComponent.oContainer);
				// The callback is called as soon as the extensionAPI is available. Note that the promise resolves to the extensionAPI. Thus, we finally call fnCurrentCallback(oModel, oDefaultModelBindingContext, oExtensionAPI) on oComponent.
						oComponent._stContext.extensionAPIPromise.then(fnCurrentCallback.bind(oComponent, oModel, oDefaultModelBindingContext));
					}
					oComponent._stContext.firstTime = false;
				}
			});
		}

		function mixInto(oComponent, sComponentModelName) {
			/* Initialize smart template context at component */
			oComponent._stContext = {
				lastBindingContextPath: "",
				firstTime: true
			};

			//Subscribe to context ready-events (only if the reuse components shows interest by defining at least one of the corresponding functions)
			if (oComponent.stRefresh || oComponent.stStart) {
				fnAttachContextReady(oComponent);
			}

			//Create component model in case specified
			if (sComponentModelName) {
				var oProperties = oComponent.getMetadata().getProperties();
				var oModelData = {}; // initial data for the component model
				for (var sProperty in oProperties){
					oModelData[sProperty] = oComponent.getProperty(sProperty);	// transfer property values to the model
				}				
				var oComponentModel = new JSONModel(oModelData);
				oComponent.setModel(oComponentModel, sComponentModelName);
				var fnSetProperty = oComponent.setProperty || jQuery.noop;
				//overwrite set property
				oComponent.setProperty = function(sName, value) {
					/* we overwrite the set property function of UI5 to automatically update the component model
					 * but first we need to call the original (aka super in other languages)
					 */
					fnSetProperty.apply(this, arguments);
					oComponentModel.setProperty("/" + sName, value);
					jQuery.sap.log.debug(this.getId() + ":" + this.getMetadata().getName() + ": setProperty " + sName + "=" + value, sJQueryDebugLogName);
				};
				oComponent.getComponentModel = oComponent.getComponentModel || function(){ return oComponentModel; };
			}
		}

		/**
		 * Mixin function to transform a regular UIComponent instance into a reuse component for smart templates
		 *
		 * By using the mixInto method the existing component is checked if it implements the following functions:
		 * <ul>
		 *  <li><code>stStart(oModel, oBindingContext, oExtensionAPI)</code> - is called when the model and the context is set for the first time above the compoenent</li>
		 *  <li><code>stRefresh(oModel, oBindingContext, oExtensionAPI)</code> - is called everytime a new context is set above the component</li>
		 * </ui>
		 *
		 * @name sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport.mixInto
		 * @param {sap.ui.core.UIComponent} oComponent the component to be transformed. The following restrictions apply to this component:
		 * <ul>
		 *  <li>The object must not define or access any properties or methods starting with <code>_st</code>. This namespace is reserved for smart template specific coding.
		 *	<li>The object must not define any property or method starting with <code>st</code> with the exception of the methods described above.
		 * </ul>
		 * @param {string} [componentModelName] if this paramater is truthy a JSON model will created that contains the properties defined in the meatdata of <code>oComponent</code>.
		 * The model will be attached to the component with the given name. Moreover, a method <code>getComponentModel</code> will be added to <code>oComponent</code> giving access
		 * to this model.
		 * The properties in the model will be automatically synced with the corresponding properties of <code>oComponent</code>.
		 *
		 * @public
		 */
		ReuseComponentSupport.mixInto = function(oComponent, sComponentModelName) {
		    if (!(oComponent instanceof UIComponent)){
				throw new Error("Reuse component must be an instance of sap.ui.core.UIComponent");
			}
			mixInto(oComponent, sComponentModelName);
		};

		return ReuseComponentSupport;
	});
}; // end of sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation"
], function(TemplateAssembler, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent,oComponentUtils) {
		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods,
				oControllerDefinition: {
					getVisibleSelectionsWithDefaults: function() {
						// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
						// (see method setSmartFilterBarDefaults) and which are currently visible.
						// This is needed by _getBackNavigationParameters in the NavigationController.
						var aVisibleFields = [];
						// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
						// aVisibleFields.push("KeyDate");
						// }
						return aVisibleFields;
					},

					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onInitSmartFilterBarExtension: function(oEvent) {},
					getCustomAppStateDataExtension: function(oCustomData) {},
					restoreCustomAppStateDataExtension: function(oCustomData) {},
					onBeforeRebindTableExtension: function(oEvent) {},
					onBeforeRebindChartExtension: function(oEvent) {},
					onClearFilterExtension: function(oEvent) {}
				}
			},
			init: function() {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				// Note that component properties are not yet available here
				oTemplatePrivate.setProperty("/listReport", {}); 
				// Property to store UI settings of ALP
				oTemplatePrivate.setProperty("/alp", {
					filterMode: "visual",
					contentView: "charttable",
					autoHide: true,
					visualFilter: {}
				}); // Note that component properties are not yet available here

				//Filter model
				var filterModel = new sap.ui.model.json.JSONModel();
				//Model is bound to the component as it affects various controls
				oComponent.setModel(filterModel, "_filter");
			},
			forView: {
				hasDraft: function() {
					return oComponent.getAppComponent().getTransactionController().getDraftController().getDraftContext()
					.isDraftEnabled(oComponent.getEntitySet());
				}
			},
			//Adds Pageheader to the FIORI shell
			onActivate: function() {
				oComponentUtils.setBackNavigation(undefined);
			},
			refreshBinding: function() {
				// refresh list binding
				var oView = oComponent.getAggregation("rootControl");
				if (oView instanceof sap.ui.core.mvc.XMLView) {
					// Rebind table
					var oSmartTable = oView.byId("table");
					if (oSmartTable && oSmartTable.rebindTable) {
						oSmartTable.rebindTable();
					}

					// Rebind chart
					var oSmartChart = oView.byId("chart");
					if (oSmartChart && oSmartChart.rebindChart) {
						oSmartChart.rebindChart();
					}
				}
			},
			overwrite: {
				updateBindingContext: function() {

					sap.suite.ui.generic.template.lib.TemplateComponent.prototype.updateBindingContext.apply(oComponent, arguments);

					var oBindingContext = oComponent.getBindingContext();
					if (oBindingContext) {
						oComponent.getModel().getMetaModel().loaded()
						.then(
							function() {
								var oUIModel = oComponent.getModel("ui");

									// set draft status to blank according to UI decision
									// oUIModel.setProperty("/draftStatus", "");

									var oActiveEntity = oBindingContext.getObject();
									if (oActiveEntity) {

										var oDraftController = oComponent.getAppComponent().getTransactionController()
										.getDraftController();
										var oDraftContext = oDraftController.getDraftContext();
										var bIsDraft = oDraftContext.hasDraft(oBindingContext) && !oActiveEntity.IsActiveEntity;
										//var bHasActiveEntity = oActiveEntity.HasActiveEntity;
										if (bIsDraft) {
											oUIModel.setProperty("/editable", true);
											oUIModel.setProperty("/enabled", true);
										}
									}
								});
						//fnBindBreadCrumbs();
					}
				}
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.AnalyticalListPage", {
			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"
					},
					"qualifier": {
						/*
							optional qualifier for a SelectionPresentationVariant or a PresentationVariant
							annotation. If no SelectionPresentationVariant exists with or without qualifier
							a PresentationVariant with the qualifier is searched. It always falls back to default
							of first SPV and than PV if qualifier can not be found
						 */
						"type": "string",
						"defaultValue": ""
					},
					"gridTable": "boolean",
					"multiSelect": "boolean",
					"smartVariantManagement": {
						/*
							Default to page variant
						 */
						"type": "boolean",
						"defaultValue": true
					},
					"defaultContentView":{
						/*
							optional setting to set the default filter type
						 */
						"type": "string",
						"defaultValue": "charttable"
					},
					"defaultFilterMode": {
						/*
							optional setting to set the default filter type
						 */
						"type": "string",
						"defaultValue": "visual"
					},
					"keyPerformanceIndicators": "array",
					"autoHide": {
						"type": "boolean",
						"defaultValue": true
					},
					"showAutoHide": {
						"type": "boolean",
						"defaultValue": true
					},
					"hideVisualFilter": {
						"type": "boolean",
						"defaultValue": false
					},
					"showGoButtonOnFilterBar":"boolean",
					"condensedTableLayout":"boolean",
					"showClearButtonOnFilterBar": {
						"type": "boolean",
						"defaultValue": false
					}
				},
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/Component.js
