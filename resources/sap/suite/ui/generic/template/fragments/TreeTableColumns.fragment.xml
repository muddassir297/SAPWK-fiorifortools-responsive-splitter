<core:FragmentDefinition
    xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
    xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
    xmlns="sap.m" xmlns:build="sap.build" xmlns:table="sap.ui.table"
    xmlns:core="sap.ui.core">

    <template:repeat list="{collection>}" var="dataField">
     <template:if
         test="{= (${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldForAction' || ${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation') &amp;&amp; ${dataField>Inline/Bool} === 'true'}"
         build:metadata="#ignore">
            <template:with path="dataField>Value"
                helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="dataFieldValue">
                <table:Column
                    customData:p13nData="{path: 'dataField>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForAction'}" 
                    hAlign="Center" >
                    <template:if test="{dataField>Label}" build:metadata="#ignore">
                        <template:then build:metadata="#ignore">
                            <core:InvisibleText
                                text="{path: 'dataField>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}"/>
                        </template:then>
                        <template:else>
                            <core:InvisibleText
                                text="{path: 'dataFieldValue>com.sap.vocabularies.Common.v1.Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}"/>
                        </template:else>
                    </template:if>
                    <table:template>
                        <core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.InlineButton" type="XML"/>
                    </table:template>
                </table:Column>
            </template:with>
        </template:if>
		<template:if test="{= ${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldForAnnotation'}">
			<template:then>
		<!--	Handle ContactPopUpOver	 -->
				<template:if test="{= ${dataField>Target/AnnotationPath}.indexOf('com.sap.vocabularies.Communication.v1.Contact') >= 0}">
					<template:then>
						<template:with path="dataField>Target" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="dataFieldTarget">
							<table:Column
								customData:p13nData="{parts: [{path: 'listEntitySet>'}, {path: 'dataField>'}, {path: 'dataFieldTarget>'}, {path: 'dataField>Target/AnnotationPath'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForContactPopUp'}">
								<template:if test="{dataField>Label}">
									<template:then>
										<Text
											text="{path: 'dataField>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}"/>
									</template:then>
								</template:if>
								<table:template>
								<template:if test="{= ${dataField>Target/AnnotationPath}.indexOf('com.sap.vocabularies.Communication.v1.Contact') >= 0}">
										<template:with path="dataField>Target" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="contact">
											<VBox>
 												<core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.ContactDetails" type="XML"/>
												<Link binding="{= ${ path: 'dataField>Target/AnnotationPath'}.indexOf('/') > -1 ? '{' + ${path: 'dataField>Target/AnnotationPath'}.slice(0, ${ path: 'dataField>Target/AnnotationPath'}.indexOf('/')) + '}' : null}"
														text="{path: 'contact>fn', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}"
														press="._templateEventHandlers.onContactDetails">
													<customData>
														<core:CustomData key="Location" value="SmartTable"/>
													</customData>
												</Link>
											</VBox>
										</template:with>
									</template:if>
								</table:template>
							</table:Column>
						</template:with>
					</template:then>
				</template:if>
			</template:then>
		</template:if>
	</template:repeat>

</core:FragmentDefinition>