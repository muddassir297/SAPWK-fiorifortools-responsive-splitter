
sap.ui.define(["sap/m/SegmentedButtonItem", "sap/m/Button", "sap/m/ButtonType", "sap/m/Text", "sap/m/Dialog", "sap/m/SegmentedButton",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
	"sap/ui/core/mvc/Controller", "sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
	function(
		SegmentedButtonItem, Button, ButtonType, Text,
		Dialog, SegmentedButton, VisualFilterDialogController,
		Controller, FilterUtil) {
		"use strict";

		var FILTER_MODE_VISUAL = "visual",
			FILTER_MODE_COMPACT = "compact";

		var fbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController", {
			init: function(oState) {
				this.compactFilterData = {};
				var me = this;

				var defaultFilterMode = oState.oController.getOwnerComponent().getDefaultFilterMode();

				me.oState = oState;

				me.oState.oSmartFilterbar.attachSwitchToVisualFilter(function() {
					//After SmartFilter dialog is saved and closed, merge compact filter changes and open VFD.
					var oCompactFilterData = me.oState.oSmartFilterbar.getFilterData();
					// store compact filter data to restore later in case of switching filter modes in the dialog
					me.compactFilterData = jQuery.extend(true, {}, oCompactFilterData);
					me.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
					me.oState.visualFilterDialogContainer.launchDialog();
				});

				//If the App Developer wants to hide Visual Filter, switch to Compact Filter
				if (defaultFilterMode === FILTER_MODE_VISUAL && me.oState.hideVisualFilter) {
					jQuery.sap.log.error("Visual filter is hidden defaulting to compact");
					defaultFilterMode = FILTER_MODE_COMPACT;
				}

				var bShowGoButtonOnFilter = me.oState.oController.getOwnerComponent().getShowGoButtonOnFilterBar() ? true : false;
				oState.oSmartFilterbar.setShowGoOnFB(bShowGoButtonOnFilter);
				//live mode on when go button is disabled
				//TODO: should be moved to view fragment
				oState.oSmartFilterbar.setLiveMode(!bShowGoButtonOnFilter);
				//Show messages only if GO button is enabled
				oState.oSmartFilterbar.setShowMessages(bShowGoButtonOnFilter);
				//load data on initial launch for live mode
				//TODO: should be moved to view fragment
				oState.oSmartTable.setEnableAutoBinding(!bShowGoButtonOnFilter);

				//Update filter model so that UI can adapt on each filter change
				oState.oSmartFilterbar.attachFilterChange(function(oEvent) {
					var sfb  = oEvent.getSource();
					var filterModel = this.oState.oController.getOwnerComponent().getModel("_filter");
					filterModel.setData(sfb.getFilterData());
					var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
					this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData, true);
				}.bind(this));

				//Enable the toolbars once search is triggered
				oState.oSmartFilterbar.attachSearch(function(oEvent) {
					this.oState.oSmartChart.getToolbar().setEnabled(true);
					this.oState.oSmartTable.getCustomToolbar().setEnabled(true);
				}, this);

				//TODO:Hiding "AdaptFilter" button using private API , public API to be used when available
				me.oState.oSmartFilterbar._oFiltersButton.setVisible(false);

				oState.oHeader = oState.oPage.getHeader();
				oState.oTitle = oState.oPage.getTitle();
				//Title press handler
				var hideFilterSwitch = function(){
					if (!this.oState.oPage.getHeaderExpanded())
						this.oState.alr_visualFilterToolbar.addContent(this.filterSwitch);
					else
						this.oState.alr_visualFilterToolbar.removeContent(this.filterSwitch);
					oState.oTitle.detachEvent("_titlePress",hideFilterSwitch);
				};

				oState.oTitle.attachEvent("_titlePress",hideFilterSwitch,this);


				if (oState.oSmartFilterbar) {
					oState.oSmartFilterbar.addStyleClass("alrFilterbar");
				}

				if (oState.oKpiTagContainer) {
				  oState.alr_filterContainer.removeContent(oState.oKpiTagContainer);
				  oState.oKpiTagContainer.addStyleClass("alrKpiTagContainer");
				}

				if (oState.alr_visualFilterBar) {
					oState.alr_visualFilterBar.setSmartFilterContext(this.oState.oSmartFilterbar);
					oState.alr_visualFilterBar.attachFilterChange(this._onVisualFilterChange.bind(this));
				}
				oState.oSmartFilterbar.attachAfterVariantLoad(this._afterVariantLoad.bind(this));
			},
			/**
			 * Filter bar callback after variant load
			 *
			 * @returns {void}
			 * @private
			 */
			_afterVariantLoad : function () {
				// merge smart filter data to visual filter after variant load
				var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
				this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData, true);
			},
			/**
			 * Callback for visual filter change event
			 *
			 * @param {object} oEvent - object generated by the visual filter filterChange event
			 * @returns {void}
			 * @private
			 */
			 _onVisualFilterChange : function (oEvent) {
				var aFilterList,
				sProperty,
				sFilterRestriction,
				aFilterItemList,
				oPropertyFilterData,
				oContext = this,
				oCompactFilterData = oContext.oState.oSmartFilterbar.getFilterData(true),
				bRestoreCompactFilter = oEvent.getParameter('bRestoreCompactFilter');
				// get all properties
				if (oEvent.getParameter('filterItemList')) {
					// if mulitple filter properties are changed
					// example - click on VFD dialog GO, clear VF
					aFilterItemList = oEvent.getParameter('filterItemList');

					aFilterItemList.forEach(function(filterItem) {
						// get visual filters for property from chart
						aFilterList = filterItem.getDimensionFilter();
						// get property for which filters have changed
						sProperty = filterItem.getParentProperty();
						// get filter restriction of sProperty
						sFilterRestriction = filterItem.getFilterRestriction();
						// get filter data for property from compact filter
						if (oCompactFilterData) {
							oPropertyFilterData = oCompactFilterData[sProperty] ? oCompactFilterData[sProperty] : (oCompactFilterData[sProperty] !== undefined);
						}
						// if it oPropertyFilterData exists modify it as per aFilters
						if (oPropertyFilterData) {
							//compact filter returns null for single value properties.
							//Hence oCompactFilterData[sProperty] for a single value property is null
							//adding check for undefined.
							oPropertyFilterData = oContext._modifyCompactFilterData(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData);
							// replace property filter data in compact filter data
							// with modified filter data for property
							oCompactFilterData[sProperty] = oPropertyFilterData;
						}
					});
				} else {
					// if single filter property is changed
					// get visual filters for property from chart
					aFilterList = oEvent.getParameter('filterList');
					// get property for which filters have changed
					sProperty = oEvent.getParameter('property');
					// get filter restriction of sProperty
					sFilterRestriction = oEvent.getParameter('filterRestriction');
					// get filter data for property from compact filter
					if (oCompactFilterData) {
						oPropertyFilterData = oCompactFilterData[sProperty] ? oCompactFilterData[sProperty] : (oCompactFilterData[sProperty] !== undefined);
					}
					// if it oPropertyFilterData exists modify it as per aFilters
					if (oPropertyFilterData) {
						oPropertyFilterData = this._modifyCompactFilterData(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData);
						// replace property filter data in compact filter data
						// with modified filter data for property
						oCompactFilterData[sProperty] = oPropertyFilterData;
					}
				}

				if (bRestoreCompactFilter) {
					// restore compact filter by replacing filter data
					this.oState.oSmartFilterbar.setFilterData(this.compactFilterData, true);
					
					// incase only _CUSTOM filter is being set to smart filter bar
					// filter change is not fired and hence _filter model is not updated
					// and neither merge is not called therefore manually call merge
					// and update filter model
					if (this.compactFilterData['_CUSTOM'] && Object.keys(this.compactFilterData).length === 1) {
						// restore compact filter by replacing filter data
						var oCompactFilterData = this.oState.oSmartFilterbar.getFilterData(),
						filterModel = this.oState.oController.getOwnerComponent().getModel("_filter");
						this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
						filterModel.setData(oCompactFilterData);

					}
				} else {
					// set compact filter data which in turn will trigger filterChange event for Filter Bar
					this.oState.oSmartFilterbar.setFilterData(oCompactFilterData);
				}
				//in live mode manually trigger search after setting filterData to the compactFilter
				if (this.oState.oSmartFilterbar.isLiveMode())
					this.oState.oSmartFilterbar.search();
				// set compact filter data in visual filter
				//this.oState.alr_visualFilterBar.setCompactFilterData(oCompactFilterData);
			},
			/**
			 * Callback for visua filter change event
			 *
			 * @param {object} oEvent - object generated by the visual filter filterChange event
			 * @returns {void}
			 * @private
			 */
			 _modifyCompactFilterData: function(aFilterList, sFilterRestriction, sProperty, oPropertyFilterData) {
				if (sFilterRestriction === "multiple") {
					// if filter Restriction is multi-value
					if (oPropertyFilterData) {
						oPropertyFilterData.items = [];
						oPropertyFilterData.ranges = [];
						oPropertyFilterData.value = null;
						// push visual filter selection in compact filter
						if (aFilterList && aFilterList.length > 0) {
							aFilterList.forEach(function (element, index, array) {
								if (element.tokenText) {
									//if this is a complex filter
									oPropertyFilterData.ranges.push({
										keyField: element.keyField,
										operation: element.operation,
										tokenText: element.tokenText,
										value1: element.value1,
										value2: element.value2
									});
								} else if (element.bIsUserTypedIn) {
									// if user typed-in value
									oPropertyFilterData.value = element.dimValue;
								} else {
									// if items filter (type ahead/value help)
									oPropertyFilterData.items.push({
										key: element.dimValue,
										text: FilterUtil.createTitle(element.dimValueDisplay, element.dimValue)
									});
								}
							});
						}
					}
				} else {
					// if filter restriction is single-value
					// replace previous selection
					oPropertyFilterData = null;
					if (aFilterList.length	> 0) {
						oPropertyFilterData	= aFilterList[0].dimValue;
					}
				}
				return oPropertyFilterData;
			},
			//go button search event handler
			onGoFilter: function(){
				this.oState.oSmartFilterbar.search();
			},
			setDefaultFilter:function(mode) {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/filterMode', mode);
				this.handleFilterSwitch(mode); // Don't want to trigger a mode change event, this will cause the data to be reloaded too earlier, the reload will happen when variants are processed
			},
			createFilterSwitch:function() {
				var me = this,
					filterSwitchItems = [
						new SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:FILTER_MODE_COMPACT, tooltip:"{i18n>FILTER_COMPACT}"})
					];

				if (!me.oState.hideVisualFilter) {
					filterSwitchItems.push(
						new SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:FILTER_MODE_VISUAL, tooltip:"{i18n>FILTER_VISUAL}"})
					);
				}

				var filterSwitch = new SegmentedButton({
					width:"inherit",
					selectedKey:"{_templPriv>/alp/filterMode}",
					items: filterSwitchItems,
					layoutData: new sap.m.OverflowToolbarLayoutData({
						priority:sap.m.OverflowToolbarPriority.NeverOverflow
					})
				});
				filterSwitch.attachSelect(function(ev){
					me.handleFilterSwitch(ev.getParameter("key"), ev.oSource._bApplyingVariant);
					me.oState.oController._templateEventHandlers.onSegmentButtonPressed();
				});
				return filterSwitch;
			},
			/**
			 * press handler for filter switch button
			 *
			 * @param {string} mode - compact or visual
			 * @param {boolean} bApplyingVariant - true is variant is being applied
			 *
			 * @returns {void}
			 */
			handleFilterSwitch:function(mode, bApplyingVariant) {
				var me = this,
					//oCompactFilterData,
					oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");

				//TODO-DPL - completed code - all the below code are new
				if (!me.oState.filterSwitch && !me.oState.hideVisualFilter) {
					me.oState.filterSwitch = me.createFilterSwitch();
					me.oState.alr_visualFilterToolbar.addContent(me.oState.filterSwitch);
				}
				if (oTemplatePrivate.getProperty('/alp/filterMode') == FILTER_MODE_VISUAL) {
					me.oState.alr_compactFilterContainer.addStyleClass("sapUiHidden");
					me.oState.alr_visualFilterContainer.removeStyleClass("sapUiHidden");
					// merge compact filter with visual filter
					// if (!bApplyingVariant) {
					// 	oCompactFilterData = this.oState.oSmartFilterbar.getFilterData();
					// 	this.oState.alr_visualFilterBar.mergeCompactFilters(oCompactFilterData);
					// }

				}
				else if (oTemplatePrivate.getProperty('/alp/filterMode') == FILTER_MODE_COMPACT) {
					if (me.oState.oSmartFilterbar._oToolbar)
						me.oState.oSmartFilterbar._oToolbar.addStyleClass("sapUiHidden");
					if (!me.oState.hideVisualFilter) {
						me.oState.alr_visualFilterContainer.addStyleClass("sapUiHidden");
					}
					me.oState.alr_compactFilterContainer.removeStyleClass("sapUiHidden");
				}

				me.oState.oSmartFilterbar.setMode(mode); // Wait until everything is ready to update the mode
			},
			//check the filter mode and then show the corresponding filter dialog
			showDialog: function(){
				var me = this,
					oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_COMPACT) {
					me.oState.oSmartFilterbar.showFilterDialog();
				} else if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
					// store compact filter data to restore later
					this.compactFilterData = jQuery.extend(true, {}, this.oState.oSmartFilterbar.getFilterData());
					me.oState.visualFilterDialogContainer.launchDialog.call(me.oState.visualFilterDialogContainer);
				}
			},
			clearFilters:function(){
				var me = this,
					oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_COMPACT) {
					//Clear all filters
					var oFilterData = me.oState.oSmartFilterbar.getFilterData();
					for (var prop in oFilterData) {
						if (oFilterData.hasOwnProperty( prop ) ) {
							delete oFilterData[prop];
						}
					}
					me.oState.oSmartFilterbar.setFilterData(oFilterData, true);
					//me.oState.oSmartFilterbar._clearFilterFields();
				} else if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
					me.oState.alr_visualFilterBar.clearFilters();
				}
				//clear the table selections
				this.oState.chartController.updateTable();
			}
		});
		return fbController;
	});
